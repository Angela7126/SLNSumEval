<html>
<head>
<meta name="TextLength" content="SENT_NUM:9, WORD_NUM:233">
</head>
<body bgcolor="white">
<a href="#0" id="0">Unlike shallow parsing methods, hedge parsing yields internal hierarchical structure of phrases within its span bound.</a>
<a href="#1" id="1">Most experiments in this paper will focus on L = 7 , which is short enough to provide a large speedup yet still cover a large fraction of constituents.</a>
<a href="#2" id="2">As stated earlier, our brute-force baseline approach is to parse the sentence using a full context-free grammar (CFG) and then hedge-transform the result.</a>
<a href="#3" id="3">Space constraints preclude inclusion of trials with this method, but the net result is a severe degradation in accuracy (tens of points of F-measure) versus standard parsing.</a>
<a href="#4" id="4">A unique property of hedge constituents compared to constituents in the original parse trees is that they are sequentially connected to the top-most node.</a>
<a href="#5" id="5">This property enables us to chunk the sentence into segments that correspond to complete hedges, and parse the segments independently (and simultaneously) instead of parsing the entire sentence.</a>
<a href="#6" id="6">Table 1 presents hedge parsing accuracy on the development set for the full parsing baseline, where the output of regular PCFG parsing is transformed to hedges and evaluated, versus parsing with a hedgebank grammar, with no segmentation of the strings.</a>
<a href="#7" id="7">The results show the same patterns as on the development set.</a>
<a href="#8" id="8">Finally, Figure 3 shows the speed of inference, labeled precision and labeled recall of annotating hedge constituents on the test set as a function of the maximum span parameter L , versus the baseline parser.</a>
</body>
</html>