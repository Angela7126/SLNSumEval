<html>
<head>
<meta name="TextLength" content="SENT_NUM:9, WORD_NUM:247">
</head>
<body bgcolor="white">
<a href="#0" id="0">We introduce hedge parsing as an approach to recovering constituents of length up to some maximum span L.</a>
<a href="#1" id="1">In this paper, we consider the problem of hedge parsing , i.e.,, discovering every constituent of length up to some span L.</a>
<a href="#2" id="2">This is compared with a baseline of parsing with a typically induced context-free grammar and transforming the result via the hedge transform, which provides a ceiling on accuracy and a floor on efficiency.</a>
<a href="#3" id="3">In contrast, complexity of parsing with a hedge constrained CYK is reduced to O ⁢ ( ( n ⁢ L 2 + n 2 ) ⁢.</a>
<a href="#4" id="4">In section 2.3 , we present our approach to hedge segmentation.</a>
<a href="#5" id="5">In this section we present our segmentation model which takes the input sentence and chunks it into appropriate segments for hedge parsing.</a>
<a href="#6" id="6">We use hedge segmentation as a finite-state pre-processing step for hedge context-free parsing.</a>
<a href="#7" id="7">Given a set of labeled pairs ( S , H ) where S is a sentence of n words w 1 ⁢…⁢ w n and H is its hedge parse tree, word w b belongs to B if there is a hedge constituent spanning w b ⁢…⁢ w e for some e ≥ b and w b belongs to B ¯ otherwise.</a>
<a href="#8" id="8">Table 1 presents hedge parsing accuracy on the development set for the full parsing baseline, where the output of regular PCFG parsing is transformed to hedges and evaluated, versus parsing with a hedgebank grammar, with no segmentation of the strings.</a>
</body>
</html>