<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <title>
   A Bayesian Method to Incorporate Background Knowledge during Automatic Text Summarization.
  </title>
 </head>
 <body>
  <div class="ltx_page_main">
   <div class="ltx_page_content">
    <div class="ltx_document ltx_authors_1line">
     <div class="ltx_section" id="S1">
      <h2 class="ltx_title ltx_title_section">
       <span class="ltx_tag ltx_tag_section">
        1
       </span>
       Introduction
      </h2>
      <div class="ltx_para" id="S1.p1">
       <p class="ltx_p">
        Important facts in a new text are those which deviate from previous knowledge on
the topic. When people create summaries, they
use their knowledge about the world to decide what content
in an input document is informative
to include in a summary.
Understandably in
automatic summarization as well, it is useful to keep a background set of documents
to represent general facts and their frequency in the domain.
       </p>
      </div>
      <div class="ltx_para" id="S1.p2">
       <p class="ltx_p">
        For example, in the simplest setting of multi-document summarization of news, systems are
asked to summarize an
        input set
        of topically-related news documents to reflect its central content.
In this
        generic
        task, some of the best reported results were obtained by a system
        []
        which
computed importance scores for words in the input by examining if the word occurs with
significantly higher probability in the input compared to a large background collection of news articles.
Other specialized summarization tasks explicitly require the use of background information. In the
        update
        summarization task,
a system is given two sets of news documents on the same topic; the second contains articles published later
in time. The system should summarize the important updates from the second set assuming a
user has already read the first set of articles.
       </p>
      </div>
      <div class="ltx_para" id="S1.p3">
       <p class="ltx_p">
        In this work, we present a Bayesian model for assessing the
novelty of a sentence taken from a summarization input with respect to a background corpus of documents.
       </p>
      </div>
      <div class="ltx_para" id="S1.p4">
       <p class="ltx_p">
        Our model is based on the idea of Bayesian Surprise
        []
        .
For illustration, assume that a user’s background knowledge comprises of multiple
hypotheses about the current state of the world and a probability distribution over these
hypotheses indicates his degree of belief in each hypothesis.
For example, one hypothesis may be that
        the
political situation in Ukraine is peaceful
        , another where
        it is not
        . Apriori
assume the user favors the hypothesis about a peaceful Ukraine, i.e. the hypothesis has
higher probability in
the prior distribution. Given new data, the evidence can be incorporated using Bayes Rule to
compute the posterior distribution over the hypotheses.
For example, upon viewing news reports about riots in the country, a user would
update his beliefs and the posterior distribution of the user’s knowledge would have
a higher probability for a riotous Ukraine. Bayesian surprise is the difference
between the prior and posterior distributions over the hypotheses which quantifies the extent
to which the new data (the news report) has changed a user’s prior beliefs about the world.
       </p>
      </div>
      <div class="ltx_para" id="S1.p5">
       <p class="ltx_p">
        In this work, we exemplify how Bayesian surprise can be used to do
content selection for text summarization.
Here a user’s prior knowledge is approximated by a background corpus
and we show how to identify sentences from the input set which are most surprising
with respect to this background.
We use the method to do two types of
summarization tasks: a)
        generic
        news summarization which uses
a large random collection of news articles as the background, and
b)
        update
        summarization where the background is a smaller but specific set of news documents
on the same topic as the input set. We find that our method
performs competitively with a previous log-likelihood ratio approach which identifies words with
significantly higher probability in the input compared to the background.
The Bayesian approach is more advantageous in the update task, where the background corpus is smaller in size.
       </p>
      </div>
     </div>
     <div class="ltx_section" id="S2">
      <h2 class="ltx_title ltx_title_section">
       <span class="ltx_tag ltx_tag_section">
        2
       </span>
       Related work
      </h2>
      <div class="ltx_para" id="S2.p1">
       <p class="ltx_p">
        Computing new information is useful in many applications. The TREC novelty tasks
        []
        tested the ability of systems to find novel information in an IR setting. Systems were given a list of documents
ranked according to relevance to a query. The goal is to find sentences in each document which are relevant to the query, and
at the same time is new information given the content of documents higher in the relevance list.
       </p>
      </div>
      <div class="ltx_para" id="S2.p2">
       <p class="ltx_p">
        For update summarization of news, methods range from textual entailment techniques
        []
        to find facts in the input
which are not entailed by the background, to
Bayesian topic models
        []
        which aim to
learn and use topics discussed only in
background, those only in the update input and those that overlap across the two sets.
       </p>
      </div>
      <div class="ltx_para" id="S2.p3">
       <p class="ltx_p">
        Even for generic summarization,
some of the best results were obtained by
        by using a large random corpus of news articles as the background while summarizing a new article,
an idea first proposed by
        .
Central to this approach is the use of a likelihood ratio test to compute
        topic words
        , words
that have significantly higher probability in the input compared to the background corpus, and
are hence descriptive of the input’s topic. In this work, we compare our system to topic word based ones since the latter is also a general
method to find surprising new words in a set of input documents but is not a bayesian approach.
We briefly explain the topic words based approach below.
       </p>
      </div>
      <div class="ltx_para" id="S2.p4">
       <p class="ltx_p">
        Computing topic words:
        Let us call the input set
        I
        and the background
        B
        . The log-likelihood ratio test compares two hypotheses:
       </p>
      </div>
      <div class="ltx_para" id="S2.p5">
       <p class="ltx_p">
        H1
        : A word
        t
        is not a topic word and occurs with equal probability in
        I
        and
        B
        , i.e.
        p(t|I)=p(t|B)=p
       </p>
      </div>
      <div class="ltx_para" id="S2.p6">
       <p class="ltx_p">
        H2
        :
        t
        is a topic word, hence
        p(t|I)=p1
        and
        p(t|B)=p2
        and
        p1&gt;p2
       </p>
      </div>
      <div class="ltx_para" id="S2.p7">
       <p class="ltx_p">
        A set of documents
        D
        containing
        N
        tokens
is viewed as a sequence of words
        w1
        w2
        …
        wN
        . The word in each position
        i
        is
assumed to be generated by a Bernoulli trial which succeeds when the generated word
        wi=t
        and fails when
        wi
        is not
        t
        . Suppose that the probability of success is
        p
        .
Then the probability of a word
        t
        appearing
        k
        times in a dataset of
        N
        tokens is
the binomial probability:
       </p>
      </div>
      <div class="ltx_para" id="S2.p8">
       b⁢(k,N,p)=(Nk)⁢pk⁢(1-p)N-k

(1)
      </div>
      <div class="ltx_para" id="S2.p9">
       <p class="ltx_p">
        The likelihood ratio compares the likelihood of the data
        D={B,I}
        under the two hypotheses.
       </p>
      </div>
      <div class="ltx_para" id="S2.p10">
       <table class="ltx_equationgroup ltx_eqn_eqnarray" id="Sx1.EGx1">
        <tr class="ltx_equation ltx_align_baseline" id="S2.E2">
         <td class="ltx_eqn_center_padleft">
         </td>
         <td class="ltx_td ltx_align_right">
          λ=P(D|H1)P(D|H2)=b⁢(ct,N,p)b⁢(cI,NI,p1)⁢⁢b⁢(cB,NB,p2)
         </td>
         <td class="ltx_eqn_center_padright">
         </td>
         <td class="ltx_align_middle ltx_align_right" rowspan="1">
          <span class="ltx_tag ltx_tag_equation">
           (2)
          </span>
         </td>
        </tr>
       </table>
      </div>
      <div class="ltx_para" id="S2.p11">
       <p class="ltx_p">
        p
        ,
        p1
        and
        p2
        are estimated by maximum likelihood.
        p=ct/N
        where
        ct
        is the number of times word
        t
        appears in the total set of tokens comprising
        {B,I}
        .
        p1=ctI/NI
        and
        p2=ctB/NB
        are the probabilities of
        t
        estimated only from the input and only from
the background respectively.
       </p>
      </div>
      <div class="ltx_para" id="S2.p12">
       <p class="ltx_p">
        A convenient aspect of this approach is that
        -2⁢log⁡λ
        is asymptotically
        χ2
        distributed.
So for a resulting
        -2⁢log⁡λ
        value, we can use the
        χ2
        table to find the
significance level with which the null hypothesis
        H1
        can be rejected.
For example, a value of 10 corresponds to a
significance level of 0.001 and is standardly used as the cutoff. Words
with
        -2⁢log⁡λ&gt;10
        are considered topic words.
        ’s system gives a weight of 1 to the topic words and
scores sentences using the number of topic words normalized by sentence length.
       </p>
      </div>
     </div>
     <div class="ltx_section" id="S3">
      <h2 class="ltx_title ltx_title_section">
       <span class="ltx_tag ltx_tag_section">
        3
       </span>
       Bayesian Surprise
      </h2>
      <div class="ltx_para" id="S3.p1">
       <p class="ltx_p">
        First we present the formal definition of Bayesian surprise given by
        without
reference to the summarization task.
       </p>
      </div>
      <div class="ltx_para" id="S3.p2">
       <p class="ltx_p">
        Let
        H
        be the space of all hypotheses representing the background knowledge of a user.
The user has a probability
        P⁢(H)
        associated with each hypothesis
        H∈
        H
        .
Let
        D
        be a new observation. The posterior probability of a single hypothesis
        H
        can be
computed as:
       </p>
      </div>
      <div class="ltx_para" id="S3.p3">
       P(H|D)=P(D|H)P(H)P⁢(D)

(3)
      </div>
      <div class="ltx_para" id="S3.p4">
       <p class="ltx_p">
        The surprise
        S⁢(D,𝐇)
        created by
        D
        on hypothesis space
        H
        is defined as
the difference between the prior and posterior distributions over the hypotheses, and is
computed using KL divergence.
       </p>
      </div>
      <div class="ltx_para" id="S3.p5">
       <table class="ltx_equationgroup ltx_eqn_eqnarray" id="Sx1.EGx2">
        <tr class="ltx_equation ltx_align_baseline" id="S3.E4">
         <td class="ltx_eqn_center_padleft">
         </td>
         <td class="ltx_td ltx_align_right">
          S⁢(D,𝐇)
         </td>
         <td class="ltx_td ltx_align_center">
          =
         </td>
         <td class="ltx_td ltx_align_left">
          KL(P(H|D),P(H)))
         </td>
         <td class="ltx_eqn_center_padright">
         </td>
         <td class="ltx_align_middle ltx_align_right" rowspan="1">
          <span class="ltx_tag ltx_tag_equation">
           (4)
          </span>
         </td>
        </tr>
        <tr class="ltx_equation ltx_align_baseline" id="S3.E5">
         <td class="ltx_eqn_center_padleft">
         </td>
         <td class="ltx_td ltx_align_right">
         </td>
         <td class="ltx_td ltx_align_center">
          =
         </td>
         <td class="ltx_td ltx_align_left">
          ∫𝐇P(H|D)logP(H|D)P⁢(H)
         </td>
         <td class="ltx_eqn_center_padright">
         </td>
         <td class="ltx_align_middle ltx_align_right" rowspan="1">
          <span class="ltx_tag ltx_tag_equation">
           (5)
          </span>
         </td>
        </tr>
       </table>
      </div>
      <div class="ltx_para" id="S3.p6">
       <p class="ltx_p">
        Note that since KL-divergence is not symmetric, we could also compute
        KL(P(H),P(H|D))
        as the surprise value.
In some cases, surprise can be computed analytically, in particular when the prior distribution is
conjugate to the form of the hypothesis, and so the posterior has the same functional form as the prior.
(See
        for the surprise computation for
different families of probability distributions).
       </p>
      </div>
     </div>
     <div class="ltx_section" id="S4">
      <h2 class="ltx_title ltx_title_section">
       <span class="ltx_tag ltx_tag_section">
        4
       </span>
       Summarization with Bayesian Surprise
      </h2>
      <div class="ltx_para" id="S4.p1">
       <p class="ltx_p">
        We consider the hypothesis space
        H
        as the set of all the hypotheses
encoding background knowledge. A single hypothesis about the background takes
the form of a multinomial distribution over word unigrams. For example, one
multinomial may have higher word probabilities for ‘Ukraine’ and ‘peaceful’ and
another multinomial has higher probabilities for ‘Ukraine’ and ‘riots’.
        P⁢(H)
        gives a prior probability to each hypothesis based on
the information in the background corpus. In our case,
        P⁢(H)
        is a Dirichlet distribution, the conjugate prior for multinomials.
Suppose that the vocabulary size of the background corpus is
        V
        and we label the word types as
(
        w1
        ,
        w2
        , …
        wV
        ). Then,
       </p>
      </div>
      <div class="ltx_para" id="S4.p2">
       P⁢(H)=D⁢i⁢r⁢(α1,α2,…⁢αV)

(6)
      </div>
      <div class="ltx_para" id="S4.p3">
       <p class="ltx_p">
        where
        α1:V
        are the concentration parameters of the Dirichlet distribution (and will be set using
the background corpus as explained in Section
        4.2
        ).
       </p>
      </div>
      <div class="ltx_para" id="S4.p4">
       <p class="ltx_p">
        Now consider a new observation
        I
        (a text, sentence, or paragraph from the
        summarization input
        ) and the word counts in
        I
        given by (
        c1
        ,
        c2
        , …,
        cV
        ). Then the posterior over
        H
        is the dirichlet:
       </p>
      </div>
      <div class="ltx_para" id="S4.p5">
       P(H|I)=Dir(α1+c1,α2+c2,…,αV+cV)

(7)
      </div>
      <div class="ltx_para" id="S4.p6">
       <p class="ltx_p">
        The surprise due to observing
        I
        ,
        S⁢(I,𝐇)
        is the KL divergence between the two dirichlet distributions. (Details
about computing KL divergence between two dirichlet distributions can be found in
        and
        ).
       </p>
      </div>
      <div class="ltx_para" id="S4.p7">
       <p class="ltx_p">
        Below we propose a general algorithm for summarization using surprise
computation. Then we define the prior distribution
        P⁢(H)
        for each of our two tasks,
        generic
        and
        update
        summarization.
       </p>
      </div>
      <div class="ltx_subsection" id="S4.SS1">
       <h3 class="ltx_title ltx_title_subsection">
        <span class="ltx_tag ltx_tag_subsection">
         4.1
        </span>
        Extractive summarization algorithm
       </h3>
       <div class="ltx_para" id="S4.SS1.p1">
        <p class="ltx_p">
         We first compute a surprise value for each word type
in the summarization input. Word scores are aggregated
to obtain a score for each sentence.
        </p>
       </div>
       <div class="ltx_para" id="S4.SS1.p2">
        <p class="ltx_p">
         Step 1: Word score.
         Suppose that word type
         wi
         appears
         ci
         times in the summarization input
         I
         . We obtain the
posterior distribution after seeing all instances of this word (
         𝐰𝐢
         ) as
         P(H|𝐰𝐢)
         =
         D⁢i⁢r⁢(α1,α2,…⁢αi+ci,…⁢αV)
         . The score for
         wi
         is the surprise computed as KL divergence between
         P(H|𝐰𝐢)
         and the prior
         P⁢(H)
         (eqn.
         6
         ).
        </p>
       </div>
       <div class="ltx_para" id="S4.SS1.p3">
        <p class="ltx_p">
         Step 2: Sentence score.
         The composition functions to obtain sentence scores
from word scores can impact content selection performance
         []
         . We experiment
with sum and average value of the word scores.
        </p>
       </div>
       <div class="ltx_para" id="S4.SS1.p4">
        <p class="ltx_p">
         Step 3: Sentence selection.
         The goal is to select a subset of sentences with high surprise values.
We follow a greedy approach to optimize the summary surprise by choosing the most surprising sentence, the
next most surprising and so on. At the
same time, we aim to avoid redundancy, i.e. selecting sentences with similar content. After a
sentence is selected for the summary, the surprise for words from this sentence are set to zero. We recompute the surprise
for the remaining sentences using step 2 and the selection process continues until the summary length limit is reached.
        </p>
       </div>
       <div class="ltx_para" id="S4.SS1.p5">
        <p class="ltx_p">
         The key differences between our Bayesian approach and a method such as topic words are: (i) The Bayesian
approach keeps multiple hypotheses about the background rather than a single one. Surprise is computed
based on the changes in probabilities of all of these hypotheses upon seeing the summarization input. (ii) The computation
of topic words is local, it assumes a binomial distribution and the occurrence of a word is
independent of others. In contrast, word surprise although computed for each word type separately,
quantifies the surprise when incorporating the new counts of this word into the background multinomials.
        </p>
       </div>
      </div>
      <div class="ltx_subsection" id="S4.SS2">
       <h3 class="ltx_title ltx_title_subsection">
        <span class="ltx_tag ltx_tag_subsection">
         4.2
        </span>
        Input and background
       </h3>
       <div class="ltx_para" id="S4.SS2.p1">
        <p class="ltx_p">
         Here we describe the input sets and background corpus used for the two summarization tasks and define
the prior distribution for each. We use data from the DUC
         and
TAC
         summarization evaluation workshops
conducted by NIST.
        </p>
       </div>
       <div class="ltx_para" id="S4.SS2.p2">
        <p class="ltx_p">
         Generic summarization.
         We use multidocument inputs from DUC 2004.
There were 50 inputs, each contains around 10 documents on a common
topic. Each input is also provided with 4 manually written
summaries created by NIST assessors. We use these manual summaries for evaluation.
        </p>
       </div>
       <div class="ltx_para" id="S4.SS2.p3">
        <p class="ltx_p">
         The background corpus is a collection of 5000 randomly selected
articles from the English Gigaword corpus. We use a list of 571 stop words from the
SMART IR system
         []
         and the remaining
content word vocabulary has 59,497 word types. The count of each word in the background is
calculated and used as the
         α
         parameters of the prior Dirichlet distribution
         P⁢(H)
         (eqn.
         6
         ).
        </p>
       </div>
       <div class="ltx_para" id="S4.SS2.p4">
        <p class="ltx_p">
         Update summarization.
         This task uses data from TAC 2009. An input has two sets of documents,
A and B, each containing 10 documents. Both A and B are on same topic but documents in B were
published at a later time than A (background). There were 44 inputs and 4 manual update summaries
are provided for each.
        </p>
       </div>
       <div class="ltx_para" id="S4.SS2.p5">
        <p class="ltx_p">
         The prior parameters are the counts of words in A for that input
(using the same stoplist). The vocabulary of these A sets is smaller,
ranging from 400 to 3000 words for the different inputs.
        </p>
       </div>
       <div class="ltx_para" id="S4.SS2.p6">
        <p class="ltx_p">
         In practice for both tasks, a new summarization input can have words unseen in the
background. So
         new
         words in an input are added to the
background corpus with a count of 1 and the counts of
         existing
         words in the background
are incremented by 1 before computing the prior parameters.
The summary length limit is 100 words in both tasks.
        </p>
       </div>
      </div>
     </div>
     <div class="ltx_section" id="S5">
      <h2 class="ltx_title ltx_title_section">
       <span class="ltx_tag ltx_tag_section">
        5
       </span>
       Systems for comparison
      </h2>
      <div class="ltx_para" id="S5.p1">
       <p class="ltx_p">
        We compare against three types of systems, (i) those which similarly to surprise, use a
background corpus to identify important sentences, (ii) a system that uses information
from the input set only and no background, and (iii) systems that combine scores from
the input and background.
       </p>
      </div>
      <div class="ltx_para" id="S5.p2">
       <p class="ltx_p">
        𝐊𝐋𝐛𝐚𝐜𝐤
        :
        represents a simple baseline for surprise computation from a background corpus.
A
        single
        unigram probability distribution
        B
        is created from the background using
maximum likelihood. The summary is created by greedily adding sentences which maximize KL divergence between
        B
        and the current summary. Suppose the set of sentences currently chosen in the
summary is
        S
        . The next step chooses the sentence
        sl=argmaxsiKL({S∪si}||B)
        .
       </p>
      </div>
      <div class="ltx_para" id="S5.p3">
       <p class="ltx_p">
        𝐓𝐒𝐬𝐮𝐦
        , 𝐓𝐒𝐚𝐯𝐠:
        use topic words computed
as described in Section
        2
        and utilizing the same background corpus for the
generic and update tasks as the surprise-based methods. For the generic task, we use a critical value of
10 (0.001 significance level) for the
        χ2
        distribution during topic word computation. In the update task however, the
background corpus A is smaller and for most inputs, no words exceeded this cutoff.
We lower the significance level to the generally accepted value of
0.05 and take words scoring above this as topic words. The number of topic words is still small (ranging from 1 to 30) for
different inputs.
       </p>
      </div>
      <div class="ltx_para" id="S5.p4">
       <p class="ltx_p">
        The
        TSsum
        system selects sentences with greater counts of topic words
and
        TSavg
        computes the number of topic words
normalized by sentence length. A greedy selection procedure is used. To reduce redundancy, once a sentence is added,
the topic words contained in it are removed from the topic word list before the next sentence selection.
       </p>
      </div>
      <div class="ltx_para" id="S5.p5">
       <p class="ltx_p">
        𝐊𝐋𝐢𝐧𝐩
        :
        represents the system that
        does not use
        background information. Rather the
method creates a summary by optimizing for high similarity of the summary with the input word distribution.
       </p>
      </div>
      <div class="ltx_para" id="S5.p6">
       <p class="ltx_p">
        Suppose the input unigram distribution is
        I
        and the current summary is
        S
        ,
the method chooses the sentence
        sl=argminsiKL({S∪si}||I)
        at each iteration. Since
        {S∪si}
        is used to compute divergence, redundancy is implicitly controlled in this approach.
Such a KL objective was used in competitive systems in the past
        []
        .
       </p>
      </div>
      <div class="ltx_para" id="S5.p7">
       <p class="ltx_p">
        Input + background:
        These systems combine (i) a score based on
the background (
        KLback
        ,
        TS
        or
        SR
        ) with (ii) the score
based on the input only (
        KLinp
        ).
For example, to combine
        TSsum
        and
        KLinp
        : for each sentence, we compute its scores
based on the two methods. Then we normalize the two sets of scores for candidate sentences using z-scores
and compute the best sentence as
        arg⁢maxsi
        (
        TSsum⁢(si)
        -
        KLinp⁢(si)
        ). Redundancy
control is done similarly to the
        TS
        only systems.
       </p>
      </div>
     </div>
     <div class="ltx_section" id="S6">
      <h2 class="ltx_title ltx_title_section">
       <span class="ltx_tag ltx_tag_section">
        6
       </span>
       Content selection results
      </h2>
      <div class="ltx_para" id="S6.p1">
       <p class="ltx_p">
        For evaluation, we compare each summary to the four manual summaries using ROUGE
        []
        . All
summaries were truncated to 100 words, stemming was performed and stop words were
        not
        removed, as is standard in TAC evaluations. We report the ROUGE-1 and ROUGE-2 recall scores (average over the inputs) for
each system. We use the Wilcoxon signed-rank test to check for significant
differences in mean scores.
Table
        1
        shows the scores for generic summaries and
        2
        for the update task. For each system, the peer systems with
significantly better scores (p-value
        &lt;0.05
        ) are indicated within parentheses.
       </p>
      </div>
      <div class="ltx_para" id="S6.p2">
       <p class="ltx_p">
        We refer to the surprise-based summaries
as
        𝐒𝐑𝐬𝐮𝐦
        and
        𝐒𝐑𝐚𝐯𝐠
        depending on the type of composition function (Section
        4.1
        ).
       </p>
      </div>
      <div class="ltx_para" id="S6.p3">
       <p class="ltx_p">
        First, consider
        generic
        summarization and the systems which
use the background corpus only (those above the horizontal line). The
        KLback
        baseline performs significantly worse than topic words and surprise summaries. Numerically,
        SRsum
        has the highest ROUGE-1 score and
        TSsum
        tops according to ROUGE-2. As per the
Wilcoxon test,
        TSsum
        ,
        SRsum
        and
        SRavg
        scores
are statistically indistinguishable at 95% confidence
level.
       </p>
      </div>
      <div class="ltx_para" id="S6.p4">
       <p class="ltx_p">
        Systems below the horizontal line in Table
        1
        use an objective which combines both similarity with the input
and difference from the background. The first line here shows that
a system optimizing only for input similarity,
        KLinp
        ,
by itself has higher scores (though not significant) than
those using background information only. This result is not surprising for
generic summarization where all the topical content is present in the input and the
background is a non-focused random collection. At the same time, adding either
        TS
        or
        SR
        scores to
        KLinp
        almost always leads to better
results with
        KLinp+TSavg
        giving the best score.
       </p>
      </div>
      <div class="ltx_para" id="S6.p5">
       <p class="ltx_p">
        In
        update
        summarization,
the surprise-based methods have an advantage over the topic word ones.
        SRavg
        is significantly better than
        TSavg
        for both ROUGE-1 and ROUGE-2 scores and better than
        TSsum
        according to ROUGE-1. In fact, the surprise methods have numerically higher ROUGE-1 scores
compared to input similarity (
        KLinp
        ) in contrast to generic summarization. When combined with
        KLinp
        , the surprise methods
provide improved results, significantly better in terms of ROUGE-1 scores. The
        TS
        methods do not lead to
any improvement, and
        KLinp+TSavg
        is significantly
worse than
        KLinp
        only.
The limitation of the
        TS
        approach arises from the
paucity of topic words that exceed the significance cutoff applied on the log-likelihood ratio. But Bayesian surprise
is robust on the small background corpus and does not need any tuning for cutoff values depending
on the size of the background set.
       </p>
      </div>
      <div class="ltx_para" id="S6.p6">
       <p class="ltx_p">
        Note that these models do not perform on par with summarization systems that use multiple
indicators of content importance, involve supervised training and which perform sentence compression.
Rather our goal in this work is to demonstrate a simple and intuitive
unsupervised model.
       </p>
      </div>
     </div>
     <div class="ltx_section" id="S7">
      <h2 class="ltx_title ltx_title_section">
       <span class="ltx_tag ltx_tag_section">
        7
       </span>
       Conclusion
      </h2>
      <div class="ltx_para" id="S7.p1">
       <p class="ltx_p">
        We have introduced a Bayesian summarization method that strongly aligns with intuitions
about how people use existing knowledge to identify important events or content
in new observations.
       </p>
      </div>
      <div class="ltx_para" id="S7.p2">
       <p class="ltx_p">
        Our method is especially valuable when a system
must utilize a small background corpus.
While the update task datasets we have used were carefully selected and grouped by NIST assesors into
initial and background sets, for systems on the web, there is little control over the number of
background documents on a particular topic. A system should be able to use smaller amounts of
background information and as new data arrives, be able to incorporate the evidence. Our Bayesian approach is a natural fit in such a setting.
       </p>
      </div>
     </div>
    </div>
   </div>
  </div>
 </body>
</html>
