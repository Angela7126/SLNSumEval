<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <title>
   A Recursive Recurrent Neural Networkfor Statistical Machine Translation.
  </title>
 </head>
 <body>
  <div class="ltx_page_main">
   <div class="ltx_page_content">
    <div class="ltx_document ltx_authors_1line">
     <div class="ltx_section" id="S1">
      <h2 class="ltx_title ltx_title_section">
       <span class="ltx_tag ltx_tag_section">
        1
       </span>
       Introduction
      </h2>
      <div class="ltx_para" id="S1.p1">
       <p class="ltx_p">
        Deep Neural Network (DNN), which essentially is a multi-layer neural network, has re-gained more and more attentions these years. With the efficient training methods, such as
        [5]
        , DNN is widely applied to speech and image processing, and has achieved breakthrough results
        [6, 8, 4]
        .
       </p>
      </div>
      <div class="ltx_para" id="S1.p2">
       <p class="ltx_p">
        Applying DNN to natural language processing (NLP), representation or embedding of words is usually learnt first. Word embedding is a dense, low dimensional, real-valued vector. Each dimension of the vector represents a latent aspect of the word, and captures its syntactic and semantic properties
        [2]
        . Word embedding is usually learnt from large amount of monolingual corpus at first, and then fine tuned for special distinct tasks.
        Collobert et al. (2011)
        propose a multi-task learning framework with DNN for various NLP tasks, including part-of-speech tagging, chunking, named entity recognition, and semantic role labelling. Recurrent neural networks are leveraged to learn language model, and they keep the history information circularly inside the network for arbitrarily long time
        [12]
        . Recursive neural networks, which have the ability to generate a tree structured output, are applied to natural language parsing
        [16]
        , and they are extended to recursive neural tensor networks to explore the compositional aspect of semantics
        [15]
        .
       </p>
      </div>
      <div class="ltx_para" id="S1.p3">
       <p class="ltx_p">
        DNN is also introduced to Statistical Machine Translation (SMT) to learn several components or features of conventional framework, including word alignment, language modelling, translation modelling and distortion modelling.
        Yang et al. (2013)
        adapt and extend the CD-DNN-HMM
        [4]
        method to HMM-based word alignment model. In their work, bilingual word embedding is trained to capture lexical translation information, and surrounding words are utilized to model context information.
        Auli et al. (2013)
        propose a joint language and translation model, based on a recurrent neural network. Their model predicts a target word, with an unbounded history of both source and target words.
        Liu et al. (2013)
        propose an additive neural network for SMT decoding. Word embedding is used as the input to learn translation confidence score, which is combined with commonly used features in the conventional log-linear model. For distortion modeling,
        Li et al. (2013)
        use recursive auto encoders to make full use of the entire merging phrase pairs, going beyond the boundary words with a maximum entropy classifier
        [19]
        .
       </p>
      </div>
      <div class="ltx_para" id="S1.p4">
       <p class="ltx_p">
        Different from the work mentioned above, which applies DNN to components of conventional SMT framework, in this paper, we propose a novel R
        <sup class="ltx_sup">
         2
        </sup>
        NN to model the end-to-end decoding process. R
        <sup class="ltx_sup">
         2
        </sup>
        NN is a combination of recursive neural network and recurrent neural network. In R
        <sup class="ltx_sup">
         2
        </sup>
        NN, new information can be used to generate the next hidden state, like recurrent neural networks, and a tree structure can be built, as recursive neural networks. To generate the translation candidates in a commonly used bottom-up manner, recursive neural networks are naturally adopted to build the tree structure. In recursive neural networks, all the representations of nodes are generated based on their child nodes, and it is difficult to integrate additional global information, such as language model and distortion model. In order to integrate these crucial information for better translation prediction, we combine recurrent neural networks into the recursive neural networks, so that we can use global information to generate the next hidden state, and select the better translation candidate.
       </p>
      </div>
      <div class="ltx_para" id="S1.p5">
       <p class="ltx_p">
        We propose a three-step semi-supervised training approach to optimizing the parameters of R
        <sup class="ltx_sup">
         2
        </sup>
        NN, which includes recursive auto-encoding for unsupervised pre-training, supervised local training based on the derivation trees of forced decoding, and supervised global training using early update strategy. So as to model the translation confidence for a translation phrase pair, we initialize the phrase pair embedding by leveraging the sparse features and recurrent neural network. The sparse features are phrase pairs in translation table, and recurrent neural network is utilized to learn a smoothed translation score with the source and target side information. We conduct experiments on a Chinese-to-English translation task to test our proposed methods, and we get about 1.5 BLEU points improvement, compared with a state-of-the-art baseline system.
       </p>
      </div>
      <div class="ltx_para" id="S1.p6">
       <p class="ltx_p">
        The rest of this paper is organized as follows: Section 2 introduces related work on applying DNN to SMT. Our R
        <sup class="ltx_sup">
         2
        </sup>
        NN framework is introduced in detail in Section 3, followed by our three-step semi-supervised training approach in Section 4. Phrase pair embedding method using translation confidence is elaborated in Section 5. We introduce our conducted experiments in Section 6, and conclude our work in Section 7.
       </p>
      </div>
     </div>
     <div class="ltx_section" id="S2">
      <h2 class="ltx_title ltx_title_section">
       <span class="ltx_tag ltx_tag_section">
        2
       </span>
       Related Work
      </h2>
      <div class="ltx_para" id="S2.p1">
       <p class="ltx_p">
        Yang et al. (2013)
        adapt and extend CD-DNN-HMM
        [4]
        to word alignment. In their work, initial word embedding is firstly trained with a huge mono-lingual corpus, then the word embedding is adapted and fine tuned bilingually in a context-depended DNN HMM framework. Word embeddings capturing lexical translation information and surrounding words modeling context information are leveraged to improve the word alignment performance. Unfortunately, the better word alignment result generated by this model, cannot bring significant performance improvement on a end-to-end SMT evaluation task.
       </p>
      </div>
      <div class="ltx_para" id="S2.p2">
       <p class="ltx_p">
        To improve the SMT performance directly,
        Auli et al. (2013)
        extend the recurrent neural network language model, in order to use both the source and target side information to scoring translation candidates. In their work, not only the target word embedding is used as the input of the network, but also the embedding of the source word, which is aligned to the current target word. To tackle the large search space due to the weak independence assumption, a lattice algorithm is proposed to re-rank the n-best translation candidates, generated by a given SMT decoder.
       </p>
      </div>
      <div class="ltx_para" id="S2.p3">
       <p class="ltx_p">
        Liu et al. (2013)
        propose an additive neural network for SMT decoding. RNNLM
        [12]
        is firstly used to generate the source and target word embeddings, which are fed into a one-hidden-layer neural network to get a translation confidence score. Together with other commonly used features, the translation confidence score is integrated into a conventional log-linear model. The parameters are optimized with development data set using mini-batch conjugate sub-gradient method and a regularized ranking loss.
       </p>
      </div>
      <div class="ltx_para" id="S2.p4">
       <p class="ltx_p">
        DNN is also brought into the distortion modeling. Going beyond the previous work using boundary words for distortion modeling in BTG-based SMT decoder,
        Li et al. (2013)
        propose to apply recursive auto-encoder to make full use of the entire merged blocks. The recursive auto-encoder is trained with reordering examples extracted from word-aligned bilingual sentences. Given the representations of the smaller phrase pairs, recursive auto-encoder can generate the representation of the parent phrase pair with a re-ordering confidence score. The combination of reconstruction error and re-ordering error is used to be the objective function for the model training.
       </p>
      </div>
     </div>
     <div class="ltx_section" id="S3">
      <h2 class="ltx_title ltx_title_section">
       <span class="ltx_tag ltx_tag_section">
        3
       </span>
       Our Model
      </h2>
      <div class="ltx_para" id="S3.p1">
       <p class="ltx_p">
        In this section, we leverage DNN to model the end-to-end SMT decoding process, using a novel recursive recurrent neural network (R
        <sup class="ltx_sup">
         2
        </sup>
        NN), which is different from the above mentioned work applying DNN to components of conventional SMT framework. R
        <sup class="ltx_sup">
         2
        </sup>
        NN is a combination of recursive neural network and recurrent neural network, which not only integrates the conventional global features as input information for each combination, but also generates the representation of the parent node for the future candidate generation.
       </p>
      </div>
      <div class="ltx_para" id="S3.p2">
       <p class="ltx_p">
        In this section, we briefly recall the recurrent neural network and recursive neural network in Section 3.1 and 3.2, and then we elaborate our R
        <sup class="ltx_sup">
         2
        </sup>
        NN in detail in Section 3.3.
       </p>
      </div>
      <div class="ltx_subsection" id="S3.SS1">
       <h3 class="ltx_title ltx_title_subsection">
        <span class="ltx_tag ltx_tag_subsection">
         3.1
        </span>
        Recurrent Neural Network
       </h3>
       <div class="ltx_para" id="S3.SS1.p1">
        <p class="ltx_p">
         Recurrent neural network is usually used for sequence processing, such as language model
         [12]
         . Commonly used sequence processing methods, such as Hidden Markov Model (HMM) and n-gram language model, only use a limited history for the prediction. In HMM, the previous state is used as the history, and for n-gram language model (for example
         n
         equals to 3), the history is the previous two words. Recurrent neural network is proposed to use unbounded history information, and it has recurrent connections on hidden states, so that history information can be used circularly inside the network for arbitrarily long time.
        </p>
       </div>
       <div class="ltx_para" id="S3.SS1.p2">
        <p class="ltx_p">
         As shown in Figure
         1
         , the network contains three layers, an input layer, a hidden layer, and an output layer. The input layer is a concatenation of
         ht-1
         and
         xt
         , where
         ht-1
         is a real-valued vector, which is the history information from time 0 to
         t-1
         .
         xt
         is the embedding of the input word at time
         t
         . Word embedding
         xt
         is integrated with previous history
         ht-1
         to generate the current hidden layer, which is a new history vector
         ht
         . Based on
         ht
         , we can predict the probability of the next word, which forms the output layer
         yt
         . The new history
         ht
         is used for the future prediction, and updated with new information from word embedding
         xt
         recurrently.
        </p>
       </div>
      </div>
      <div class="ltx_subsection" id="S3.SS2">
       <h3 class="ltx_title ltx_title_subsection">
        <span class="ltx_tag ltx_tag_subsection">
         3.2
        </span>
        Recursive Neural Network
       </h3>
       <div class="ltx_para" id="S3.SS2.p1">
        <p class="ltx_p">
         In addition to the sequential structure above, tree structure is also usually constructed in various NLP tasks, such as parsing and SMT decoding. To generate a tree structure, recursive neural networks are introduced for natural language parsing
         [16]
         . Similar with recurrent neural networks, recursive neural networks can also use unbounded history information from the sub-tree rooted at the current node. The commonly used binary recursive neural networks generate the representation of the parent node, with the representations of two child nodes as the input.
        </p>
       </div>
       <div class="ltx_para" id="S3.SS2.p2">
        <p class="ltx_p">
         As shown in Figure
         2
         ,
         s[l,m]
         and
         s[m,n]
         are the representations of the child nodes, and they are concatenated into one vector to be the input of the network.
         s[l,n]
         is the generated representation of the parent node.
         y[l,n]
         is the confidence score of how plausible the parent node should be created.
         l,m,n
         are the indexes of the string. For example, for nature language parsing,
         s[l,n]
         is the representation of the parent node, which could be a
         N⁢P
         or
         V⁢P
         node, and it is also the representation of the whole sub-tree covering from
         l
         to
         n
         .
        </p>
       </div>
      </div>
      <div class="ltx_subsection" id="S3.SS3">
       <h3 class="ltx_title ltx_title_subsection">
        <span class="ltx_tag ltx_tag_subsection">
         3.3
        </span>
        Recursive Recurrent Neural Network
       </h3>
       <div class="ltx_para" id="S3.SS3.p1">
        <p class="ltx_p">
         Word embedding
         xt
         is integrated as new input information in recurrent neural networks for each prediction, but in recursive neural networks, no additional input information is used except the two representation vectors of the child nodes. However, some global information , which cannot be generated by the child representations, is crucial for SMT performance, such as language model score and distortion model score. So as to integrate such global information, and also keep the ability to generate tree structure, we combine the recurrent neural network and the recursive neural network to be a recursive recurrent neural network (R
         <sup class="ltx_sup">
          2
         </sup>
         NN).
        </p>
       </div>
       <div class="ltx_para" id="S3.SS3.p2">
        <p class="ltx_p">
         As shown in Figure
         3
         , based on the recursive network, we add three input vectors
         x[l,m]
         for child node
         [l,m]
         ,
         x[m,n]
         for child node
         [m,n]
         , and
         x[l,n]
         for parent node
         [l,n]
         . We call them recurrent input vectors, since they are borrowed from recurrent neural networks. The two recurrent input vectors
         x[l,m]
         and
         x[m,n]
         are concatenated as the input of the network, with the original child node representations
         s[l,m]
         and
         s[m,n]
         . The recurrent input vector
         x[l,n]
         is concatenated with parent node representation
         s[l,n]
         to compute the confidence score
         y[l,n]
         .
        </p>
       </div>
       <div class="ltx_para" id="S3.SS3.p3">
        <p class="ltx_p">
         The input, hidden and output layers are calculated as follows:
        </p>
       </div>
       <div class="ltx_para" id="S3.SS3.p4">
        x^[l,n]=x[l,m]⋈s[l,m]⋈x[m,n]⋈s[m,n]

(1)
       </div>
       <div class="ltx_para" id="S3.SS3.p5">
        sj[l,n]=f⁢(∑ix^i[l,n]⁢wj⁢i)

(2)
       </div>
       <div class="ltx_para" id="S3.SS3.p6">
        y[l,n]=∑j(s[l,n]⋈x[l,n])jvj

(3)
        <p class="ltx_p">
         where
         ⋈
         is a concatenation operator in Equation
         1
         and Equation
         3
         , and
         f
         is a non-linear function, here we use
         H⁢T⁢a⁢n⁢h
         function, which is defined as:
        </p>
       </div>
       <div class="ltx_para" id="S3.SS3.p7">
        H⁢T⁢a⁢n⁢h⁢(x)={-1,x&lt;-1x,-1≤x≥11,x&gt;1

(4)
       </div>
       <div class="ltx_para" id="S3.SS3.p8">
        <p class="ltx_p">
         Figure
         4
         illustrates the R
         <sup class="ltx_sup">
          2
         </sup>
         NN architecture for SMT decoding. For a source sentence “laizi faguo he eluosi de”, we first split it into phrases “laizi”, “faguo he eluosi” and “de”. We then check whether translation candidates can be found in the translation table for each span, together with the phrase pair embedding and recurrent input vector (global features). We call it the rule matching phase. For a translation candidate of the span node
         [l,m]
         , the black dots stand for the node representation
         s[l,m]
         , while the grey dots for recurrent input vector
         x[l,m]
         . Given
         s[l,m]
         and
         x[l,m]
         for matched translation candidates, conventional CKY decoding process is performed using R
         <sup class="ltx_sup">
          2
         </sup>
         NN. R
         <sup class="ltx_sup">
          2
         </sup>
         NN can combine the translation pairs of child nodes, and generate the translation candidates for parent nodes with their representations and plausible scores. Only the n-best translation candidates are kept for upper combination, according to their plausible scores.
        </p>
       </div>
       <div class="ltx_para" id="S3.SS3.p9">
        <p class="ltx_p">
         We extract phrase pairs using the conventional method
         [13]
         . The commonly used features, such as translation score, language model score and distortion score, are used as the recurrent input vector
         x
         . During decoding, recurrent input vectors
         x
         for internal nodes are calculated accordingly. The difference between our model and the conventional log-linear model includes:
        </p>
       </div>
       <div class="ltx_para" id="S3.SS3.p10">
        <ul class="ltx_itemize" id="I1">
         <li class="ltx_item" id="I1.i1" style="list-style-type:none;">
          <span class="ltx_tag ltx_tag_itemize">
           •
          </span>
          <div class="ltx_para" id="I1.i1.p1">
           <p class="ltx_p">
            R
            <sup class="ltx_sup">
             2
            </sup>
            NN is not linear, while the conventional model is a linear combination.
           </p>
          </div>
         </li>
         <li class="ltx_item" id="I1.i2" style="list-style-type:none;">
          <span class="ltx_tag ltx_tag_itemize">
           •
          </span>
          <div class="ltx_para" id="I1.i2.p1">
           <p class="ltx_p">
            Representations of phrase pairs are automatically learnt to optimize the translation performance, while features used in conventional model are hand-crafted.
           </p>
          </div>
         </li>
         <li class="ltx_item" id="I1.i3" style="list-style-type:none;">
          <span class="ltx_tag ltx_tag_itemize">
           •
          </span>
          <div class="ltx_para" id="I1.i3.p1">
           <p class="ltx_p">
            History information of the derivation can be recorded in the representation of internal nodes, while conventional model cannot.
           </p>
          </div>
         </li>
        </ul>
       </div>
       <div class="ltx_para" id="S3.SS3.p11">
        <p class="ltx_p">
         Liu et al. (2013)
         apply DNN to SMT decoding, but not in a recursive manner. A feature is learnt via a one-hidden-layer neural network, and the embedding of words in the phrase pairs are used as the input vector. Our model generates the representation of a translation pair based on its child nodes.
         Li et al. (2013)
         also generate the representation of phrase pairs in a recursive way. In their work, the representation is optimized to learn a distortion model using recursive neural network, only based on the representation of the child nodes. Our R
         <sup class="ltx_sup">
          2
         </sup>
         NN is used to model the end-to-end translation process, with recurrent global information added. We also explore phrase pair embedding method to model translation confidence directly, which is introduced in Section 5.
        </p>
       </div>
       <div class="ltx_para" id="S3.SS3.p12">
        <p class="ltx_p">
         In the next two sections, we will answer the following questions: (a) how to train the model, and (b) how to generate the initial representations of translation pairs.
        </p>
       </div>
      </div>
     </div>
     <div class="ltx_section" id="S4">
      <h2 class="ltx_title ltx_title_section">
       <span class="ltx_tag ltx_tag_section">
        4
       </span>
       Model Training
      </h2>
      <div class="ltx_para" id="S4.p1">
       <p class="ltx_p">
        In this section, we propose a three-step training method to train the parameters of our proposed R
        <sup class="ltx_sup">
         2
        </sup>
        NN, which includes unsupervised pre-training using recursive auto-encoding, supervised local training on the derivation tree of forced decoding, and supervised global training using early update training strategy.
       </p>
      </div>
      <div class="ltx_subsection" id="S4.SS1">
       <h3 class="ltx_title ltx_title_subsection">
        <span class="ltx_tag ltx_tag_subsection">
         4.1
        </span>
        Unsupervised Pre-training
       </h3>
       <div class="ltx_para" id="S4.SS1.p1">
        <p class="ltx_p">
         We adopt the Recursive Auto Encoding (RAE)
         [16]
         for our unsupervised pre-training. The main idea of auto encoding is to initialize the parameters of the neural network, by minimizing the information lost, which means, capturing as much information as possible in the hidden states from the input vector.
        </p>
       </div>
       <div class="ltx_para" id="S4.SS1.p2">
        <p class="ltx_p">
         As shown in Figure
         5
         , RAE contains two parts, an encoder with parameter
         W
         , and a decoder with parameter
         W′
         . Given the representations of child nodes
         s1
         and
         s2
         , the encoder generates the representation of parent node
         s
         . With the parent node representation
         s
         as the input vector, the decoder reconstructs the representation of two child nodes
         s1′
         and
         s2′
         . The loss function is defined as following so as to minimize the information lost:
        </p>
        LR⁢A⁢E⁢(s1,s2)=12⁢(∥s1-s1′∥2+∥s2-s2′∥2)

(5)
        <p class="ltx_p">
         where
         ∥⋅∥
         is the Euclidean norm.
        </p>
       </div>
       <div class="ltx_para" id="S4.SS1.p3">
        <p class="ltx_p">
         The training samples for RAE are phrase pairs
         {s1,s2}
         in translation table, where
         s1
         and
         s2
         can form a continuous partial sentence pair in the training data. When RAE training is done, only the encoding model
         W
         will be fine tuned in the future training phases.
        </p>
       </div>
      </div>
      <div class="ltx_subsection" id="S4.SS2">
       <h3 class="ltx_title ltx_title_subsection">
        <span class="ltx_tag ltx_tag_subsection">
         4.2
        </span>
        Supervised Local Training
       </h3>
       <div class="ltx_para" id="S4.SS2.p1">
        <p class="ltx_p">
         We use contrastive divergence method to fine tune the parameters
         W
         and
         V
         . The loss function is the commonly used ranking loss with a margin, and it is defined as follows:
        </p>
        LS⁢L⁢T⁢(W,V,s[l,n])=m⁢a⁢x⁢(0,1-yo⁢r⁢a⁢c⁢l⁢e[l,n]+yt[l,n])

(6)
        <p class="ltx_p">
         where
         s[l,n]
         is the source span.
         yo⁢r⁢a⁢c⁢l⁢e[l,n]
         is the plausible score of a oracle translation result.
         yt[l,n]
         is the plausible score for the best translation candidate given the model parameters
         W
         and
         V
         . The loss function aims to learn a model which assigns the good translation candidate (the oracle candidate) higher score than the bad ones, with a margin 1.
        </p>
       </div>
       <div class="ltx_para" id="S4.SS2.p2">
        <p class="ltx_p">
         Translation candidates generated by forced decoding
         [18]
         are used as oracle translations, which are the positive samples. Forced decoding performs sentence pair segmentation using the same translation system as decoding. For each sentence pair in the training data, SMT decoder is applied to the source side, and any candidate which is not the partial sub-string of the target sentence is removed from the n-best list during decoding. From the forced decoding result, we can get the ideal derivation tree in the decoder’s search space, and extract positive/oracle translation candidates.
        </p>
       </div>
      </div>
      <div class="ltx_subsection" id="S4.SS3">
       <h3 class="ltx_title ltx_title_subsection">
        <span class="ltx_tag ltx_tag_subsection">
         4.3
        </span>
        Supervised Global Training
       </h3>
       <div class="ltx_para" id="S4.SS3.p1">
        <p class="ltx_p">
         The supervised local training uses the nodes/samples in the derivation tree of forced decoding to update the model, and the trained model tends to over-fit to local decisions. In this subsection, a supervised global training is proposed to tune the model according to the final translation performance of the whole source sentence.
        </p>
       </div>
       <div class="ltx_para" id="S4.SS3.p2">
        <p class="ltx_p">
         Actually, we can update the model from the root of the decoding tree and perform back propagation along the tree structure. Due to the inexact search nature of SMT decoding, search errors may inevitably break theoretical properties, and the final translation results may be not suitable for model training. To handle this problem, we use early update strategy for the supervised global training. Early update is testified to be useful for SMT training with large scale features
         [21]
         . Instead of updating the model using the final translation results, early update approach optimizes the model, when the oracle translation candidate is pruned from the n-best list, meaning that, the model is updated once it performs a unrecoverable mistake. Back propagation is performed along the tree structure, and the phrase pair embeddings of the leaf nodess are updated.
        </p>
       </div>
       <div class="ltx_para" id="S4.SS3.p3">
        <p class="ltx_p">
         The loss function for supervised global training is defined as follows:
        </p>
        LS⁢G⁢T⁢(W,V,s[l,n])=-log⁡(∑yo⁢r⁢a⁢c⁢l⁢e[l,n]exp⁡(yo⁢r⁢a⁢c⁢l⁢e[l,n])∑t∈n⁢b⁢e⁢s⁢texp⁡(yt[l,n]))

(7)
        <p class="ltx_p">
         where
         yo⁢r⁢a⁢c⁢l⁢e[l,n]
         is the model score of a oracle translation candidate for the span
         [l,n]
         . Oracle translation candidates are candidates get from forced decoding. If the span
         [l,n]
         is not the whole source sentence, there may be several oracle translation candidates, otherwise, there is only one, which is exactly the target sentence. There are much fewer training samples than those for supervised local training, and it is not suitable to use ranking loss for global training any longer. We use negative log-likelihood to penalize all the other translation candidates except the oracle ones, so as to leverage all the translation candidates as training samples.
        </p>
       </div>
      </div>
     </div>
     <div class="ltx_section" id="S5">
      <h2 class="ltx_title ltx_title_section">
       <span class="ltx_tag ltx_tag_section">
        5
       </span>
       Phrase Pair Embedding
      </h2>
      <div class="ltx_para" id="S5.p1">
       <p class="ltx_p">
        The next question is how to initialize the phrase pair embedding in the translation table, so as to generate the leaf nodes of the derivation tree. There are more phrase pairs than mono-lingual words, but bilingual corpus is much more difficult to acquire, compared with monolingual corpus.
       </p>
      </div>
      <div class="ltx_para" id="S5.p2">
       <p class="ltx_p">
        Table
        1
        shows the relationship between the size of training data and the number of model parameters. For word embedding, the training size is 1G bits, and we may have 500K terms. For each term, we have a vector with length 20 as parameters, so there are 20
        ×
        500K parameters totally. But for source-target word pair, we may only have 7M bilingual corpus for training (taking IWSLT data set as an example), and there are 20
        ×
        (500K)
        <sup class="ltx_sup">
         2
        </sup>
        parameters to be tuned. For phrase pairs, the situation becomes even worse, especially when the limitation of word count in phrase pairs is relaxed. It is very difficult to learn the phrase pair embedding brute-forcedly as word embedding is learnt
        [12, 3]
        , since we may not have enough training data.
       </p>
      </div>
      <div class="ltx_para" id="S5.p3">
       <p class="ltx_p">
        A simple approach to construct phrase pair embedding is to use the average of the embeddings of the words in the phrase pair. One problem is that, word embedding may not be able to model the translation relationship between source and target phrases at phrase level, since some phrases cannot be decomposed. For example, the meaning of ”hot dog” is not the composition of the meanings of the words ”hot” and ”dog”. In this section, we split the phrase pair embedding into two parts to model the translation confidence directly: translation confidence with sparse features and translation confidence with recurrent neural network. We first get two translation confidence vectors separately using sparse features and recurrent neural network, and then concatenate them to be the phrase pair embedding. We call it translation confidence based phrase pair embedding (TCBPPE).
       </p>
      </div>
      <div class="ltx_subsection" id="S5.SS1">
       <h3 class="ltx_title ltx_title_subsection">
        <span class="ltx_tag ltx_tag_subsection">
         5.1
        </span>
        Translation Confidence with Sparse Features
       </h3>
       <div class="ltx_para" id="S5.SS1.p1">
        <p class="ltx_p">
         Large scale feature training has drawn more attentions these years
         [10, 21]
         . Instead of integrating the sparse features directly into the log-linear model, we use them as the input to learn a phrase pair embedding. For the top 200,000 frequent translation pairs, each of them is a feature in itself, and a special feature is added for all the infrequent ones.
        </p>
       </div>
       <div class="ltx_para" id="S5.SS1.p2">
        <p class="ltx_p">
         The one-hot representation vector is used as the input, and a one-hidden-layer network generates a confidence score. To train the neural network, we add the confidence scores to the conventional log-linear model as features. Forced decoding is utilized to get positive samples, and contrastive divergence is used for model training. The neural network is used to reduce the space dimension of sparse features, and the hidden layer of the network is used as the phrase pair embedding. The length of the hidden layer is empirically set to 20.
        </p>
       </div>
      </div>
      <div class="ltx_subsection" id="S5.SS2">
       <h3 class="ltx_title ltx_title_subsection">
        <span class="ltx_tag ltx_tag_subsection">
         5.2
        </span>
        Translation Confidence with Recurrent Neural Network
       </h3>
       <div class="ltx_para" id="S5.SS2.p1">
        <p class="ltx_p">
         We use recurrent neural network to generate two smoothed translation confidence scores based on source and target word embeddings. One is source to target translation confidence score and the other is target to source. These two confidence scores are defined as:
        </p>
        TS⁢2⁢T(s,t)=∑ilogp(ei|ei-1,fai,hi)

(8)
        TT⁢2⁢S(s,t)=∑jlogp(fj|fj-1,ea^j,hj)

(9)
        <p class="ltx_p">
         where,
         fai
         is the corresponding target word aligned to
         ei
         , and it is similar for
         ea^j
         .
         p(ei|ei-1,fai,hi)
         is produced by a recurrent network as shown in Figure
         6
         . The recurrent neural network is trained with word aligned bilingual corpus, similar as
         [1]
         .
        </p>
       </div>
      </div>
     </div>
     <div class="ltx_section" id="S6">
      <h2 class="ltx_title ltx_title_section">
       <span class="ltx_tag ltx_tag_section">
        6
       </span>
       Experiments and Results
      </h2>
      <div class="ltx_para" id="S6.p1">
       <p class="ltx_p">
        In this section, we conduct experiments to test our method on a Chinese-to-English translation task. The evaluation method is the case insensitive IBM BLEU-4
        [14]
        . Significant testing is carried out using bootstrap re-sampling method proposed by
        [7]
        with a 95% confidence level.
       </p>
      </div>
      <div class="ltx_subsection" id="S6.SS1">
       <h3 class="ltx_title ltx_title_subsection">
        <span class="ltx_tag ltx_tag_subsection">
         6.1
        </span>
        Data Setting and Baseline
       </h3>
       <div class="ltx_para" id="S6.SS1.p1">
        <p class="ltx_p">
         The data is from the IWSLT 2009 dialog task. The training data includes the BTEC and SLDB training data. The training data contains 81k sentence pairs, 655K Chinese words and 806K English words. The language model is a 5-gram language model trained with the target sentences in the training data. The test set is development set 9, and the development set comprises both development set 8 and the Chinese DIALOG set.
        </p>
       </div>
       <div class="ltx_para" id="S6.SS1.p2">
        <p class="ltx_p">
         The training data for monolingual word embedding is Giga-Word corpus version 3 for both Chinese and English. Chinese training corpus contains 32M sentences and 1.1G words. English training data contains 8M sentences and 247M terms. We only train the embedding for the top 100,000 frequent words following
         [3]
         . With the trained monolingual word embedding, we follow
         [20]
         to get the bilingual word embedding using the IWSLT bilingual training data.
        </p>
       </div>
       <div class="ltx_para" id="S6.SS1.p3">
        <p class="ltx_p">
         Our baseline decoder is an in-house implementation of Bracketing Transduction Grammar (BTG)
         [17]
         in CKY-style decoding with a lexical reordering model trained with maximum entropy
         [19]
         . The features of the baseline are commonly used features as standard BTG decoder, such as translation probabilities, lexical weights, language model, word penalty and distortion probabilities. All these commonly used features are used as recurrent input vector
         x
         in our R
         <sup class="ltx_sup">
          2
         </sup>
         NN.
        </p>
       </div>
      </div>
      <div class="ltx_subsection" id="S6.SS2">
       <h3 class="ltx_title ltx_title_subsection">
        <span class="ltx_tag ltx_tag_subsection">
         6.2
        </span>
        Translation Results
       </h3>
       <div class="ltx_para" id="S6.SS2.p1">
        <p class="ltx_p">
         As we mentioned in Section 5, constructing phrase pair embeddings from word embeddings may be not suitable. Here we conduct experiments to verify it.
We first train the source and target word embeddings separately using large monolingual data, following
         [3]
         . Using monolingual word embedding as the initialization, we fine tune them to get bilingual word embedding
         [20]
         .
        </p>
       </div>
       <div class="ltx_para" id="S6.SS2.p2">
        <p class="ltx_p">
         The word embedding based phrase pair embedding (WEPPE) is defined as:
        </p>
        <table class="ltx_equationgroup ltx_eqn_eqnarray" id="S7.EGx1">
         <tr class="ltx_equation ltx_align_baseline" id="S6.Ex1">
          <td class="ltx_eqn_center_padleft">
          </td>
          <td class="ltx_td ltx_align_right">
           E⁢p⁢pw⁢e⁢b⁢(s,t)=∑iEw⁢m⁢s⁢(si)⋈∑jEw⁢b⁢s⁢(sj)
          </td>
          <td class="ltx_eqn_center_padright">
          </td>
         </tr>
         <tr class="ltx_equation ltx_align_baseline" id="S6.E10">
          <td class="ltx_eqn_center_padleft">
          </td>
          <td class="ltx_td ltx_align_right">
           ⋈∑kEw⁢m⁢t(tk)⋈∑lEw⁢b⁢t(tl)
          </td>
          <td class="ltx_eqn_center_padright">
          </td>
          <td class="ltx_align_middle ltx_align_right" rowspan="1">
           <span class="ltx_tag ltx_tag_equation">
            (10)
           </span>
          </td>
         </tr>
        </table>
        <p class="ltx_p">
         where
         ⋈
         is a concatenation operator.
         s
         and
         t
         are the source and target phrases.
         Ew⁢m⁢s⁢(si)
         and
         Ew⁢m⁢t⁢(tk)
         are the monolingual word embeddings, and
         Ew⁢b⁢s⁢(si)
         and
         Ew⁢b⁢t⁢(tk)
         are the bilingual word embeddings. Here the length of the word embedding is also set to 20. Therefore, the length of the phrase pair embedding is
         20×4=80
         .
        </p>
       </div>
       <div class="ltx_para" id="S6.SS2.p3">
        <p class="ltx_p">
         We compare our phrase pair embedding methods and our proposed R
         <sup class="ltx_sup">
          2
         </sup>
         NN with baseline system, in Table
         2
         . We can see that, our R
         <sup class="ltx_sup">
          2
         </sup>
         NN models with WEPPE and TCBPPE are both better than the baseline system. WEPPE cannot get significant improvement, while TCBPPE does, compared with the baseline result. TCBPPE is much better than WEPPE.
        </p>
       </div>
       <div class="ltx_para" id="S6.SS2.p4">
        <p class="ltx_p">
         Word embedding can model translation relationship at word level, but it may not be powerful to model the phrase pair respondents at phrasal level, since the meaning of some phrases cannot be decomposed into the meaning of words. And also, translation task is difference from other NLP tasks, that, it is more important to model the translation confidence directly (the confidence of one target phrase as a translation of the source phrase), and our TCBPPE is designed for such purpose.
        </p>
       </div>
      </div>
      <div class="ltx_subsection" id="S6.SS3">
       <h3 class="ltx_title ltx_title_subsection">
        <span class="ltx_tag ltx_tag_subsection">
         6.3
        </span>
        Effects of Global Recurrent Input Vector
       </h3>
       <div class="ltx_para" id="S6.SS3.p1">
        <p class="ltx_p">
         In order to compare R
         <sup class="ltx_sup">
          2
         </sup>
         NN with recursive network for SMT decoding, we remove the recurrent input vector in R
         <sup class="ltx_sup">
          2
         </sup>
         NN to test its effect, and the results are shown in Table
         3
         . Without the recurrent input vectors, R
         <sup class="ltx_sup">
          2
         </sup>
         NN degenerates into recursive neural network (RNN).
        </p>
       </div>
       <div class="ltx_para" id="S6.SS3.p2">
        <p class="ltx_p">
         From Table
         3
         we can find that, the recurrent input vector is essential to SMT performance. When we remove it from R
         <sup class="ltx_sup">
          2
         </sup>
         NN, WEPPE based method drops about 10 BLEU points on development data and more than 6 BLEU points on test data. TCBPPE based method drops about 3 BLEU points on both development and test data sets. When we remove the recurrent input vectors, the representations of recursive network are generated with the child nodes, and it does not integrate global information, such as language model and distortion model, which are crucial to the performance of SMT.
        </p>
       </div>
      </div>
      <div class="ltx_subsection" id="S6.SS4">
       <h3 class="ltx_title ltx_title_subsection">
        <span class="ltx_tag ltx_tag_subsection">
         6.4
        </span>
        Sparse Features and Recurrent Network Features
       </h3>
       <div class="ltx_para" id="S6.SS4.p1">
        <p class="ltx_p">
         To test the contributions of sparse features and recurrent network features, we first remove all the recurrent network features to train and test our R
         <sup class="ltx_sup">
          2
         </sup>
         NN model, and then remove all the sparse features to test the contribution of recurrent network features.
        </p>
       </div>
       <div class="ltx_para" id="S6.SS4.p2">
        <p class="ltx_p">
         The results are shown in Table
         6.4
         . From the results, we can find that, sparse features are more effective than the recurrent network features a little bit. The sparse features can directly model the translation correspondence, and they may be more effective to rank the translation candidates, while recurrent neural network features are smoothed lexical translation confidence.
        </p>
       </div>
      </div>
     </div>
     <div class="ltx_section" id="S7">
      <h2 class="ltx_title ltx_title_section">
       <span class="ltx_tag ltx_tag_section">
        7
       </span>
       Conclusion and Future Work
      </h2>
      <div class="ltx_para" id="S7.p1">
       <p class="ltx_p">
        In this paper, we propose a Recursive Recurrent Neural Network(R
        <sup class="ltx_sup">
         2
        </sup>
        NN) to combine the recurrent neural network and recursive neural network. Our proposed R
        <sup class="ltx_sup">
         2
        </sup>
        NN cannot only integrate global input information during each combination, but also can generate the tree structure in a recursive way. We apply our model to SMT decoding, and propose a three-step semi-supervised training method. In addition, we explore phrase pair embedding method, which models translation confidence directly. We conduct experiments on a Chinese-to-English translation task, and our method outperforms a state-of-the-art baseline about 1.5 points BLEU.
       </p>
      </div>
      <div class="ltx_para" id="S7.p2">
       <p class="ltx_p">
        From the experiments, we find that, phrase pair embedding is crucial to the performance of SMT. In the future, we will explore better methods for phrase pair embedding to model the translation equivalent between source and target phrases. We will apply our proposed R
        <sup class="ltx_sup">
         2
        </sup>
        NN to other tree structure learning tasks, such as natural language parsing.
       </p>
      </div>
     </div>
    </div>
   </div>
  </div>
 </body>
</html>
