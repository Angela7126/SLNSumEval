<html>
<head>
<meta name="TextLength" content="SENT_NUM:7, WORD_NUM:193">
</head>
<body bgcolor="white">
<a href="#0" id="0">Since 2004, increases in computational power described by Moore's law have substantially been realized in the form of additional cores rather than through faster clock speeds.</a>
<a href="#1" id="1">To make effective use of modern hardware when solving hard computational problems, it is therefore necessary to employ parallel solution strategies.</a>
<a href="#2" id="2">In this work, we demonstrate how effective parallel solvers for propositional satisfiability (SAT), one of the most widely studied NP-complete problems, can be produced automatically from any existing sequential, highly parametric SAT solver.</a>
<a href="#3" id="3">Our Automatic Construction of Parallel Portfolios (ACPP) approach uses an automatic algorithm configuration procedure to identify a set of configurations that perform well when executed in parallel.</a>
<a href="#4" id="4">Applied to two prominent SAT solvers, Lingeling and clasp, our ACPP procedure identified 8-core solvers that significantly outperformed their sequential counterparts on a diverse set of instances from the application and hard combinatorial category of the 2012 SAT Challenge.</a>
<a href="#5" id="5">We further extended our ACPP approach to produce parallel portfolio solvers consisting of several different solvers by combining their configuration spaces.</a>
<a href="#6" id="6">Applied to the component solvers of the 2012 SAT Challenge gold medal winning SAT Solver pfolioUZK, our ACPP procedures produced a significantly better-performing parallel SAT solver.</a>
</body>
</html>