<html>
<head>
<meta name="TextLength" content="SENT_NUM:13, WORD_NUM:314">
</head>
<body bgcolor="white">
<a href="#0" id="0">The increasing availability of streaming data has accelerated advances in information processing tools that no longer store data for static querying but push information to consumers as soon as it becomes available.</a>
<a href="#1" id="1">Stream processing aims at providing languages and tools for data that changes at a high rate.</a>
<a href="#2" id="2">To cope with the volume of data, query languages often extend existing approaches for static data by means of window operators that return snapshots of recent data.</a>
<a href="#3" id="3">However, the semantics of these languages are often given only informally or operationally, which makes their analysis and comparison difficult.</a>
<a href="#4" id="4">A formal means to express the declarative semantics of such systems seems to be missing.</a>
<a href="#5" id="5">This lack of theory is of particular relevance for the emerging research in stream reasoning which shifts the focus from throughput to higher expressiveness.</a>
<a href="#6" id="6">To fill this gap, we present LARS, a Logic-based framework for Analytic Reasoning over Streams.</a>
<a href="#7" id="7">At its core, LARS formulas extend propositional logic with generic window operators and additional controls to handle temporal information.</a>
<a href="#8" id="8">On top of this, LARS programs extend Answer Set Programming (ASP) with rich stream reasoning capabilities; the latter can be exploited to target AI applications in a streaming context, such as diagnosis, configuration or planning.</a>
<a href="#9" id="9">Specifically, we study in this article the computational complexity of LARS formulas and programs, their relationship to Linear Temporal Logic (LTL) and the well-known Continuous Query Language (CQL).</a>
<a href="#10" id="10">Furthermore, we discuss the modeling capabilities of LARS in notes on the SPARQL extensions C-SPARQL and CQELS, and on the interval-based approach of the complex event processing language ETALIS.</a>
<a href="#11" id="11">We finally briefly touch available implementations, in particular, the recent prototype engines Laser and Ticker that aim for high throughput and high expressiveness, respectively.</a>
<a href="#12" id="12">Notably, both engines specify their semantics in LARS, indicating the desired flexibility of the framework and its potential as stream reasoning language itself, which is further explored in other works.</a>
</body>
</html>