<html>
<head>
<meta name="TextLength" content="SENT_NUM:12, WORD_NUM:203">
</head>
<body bgcolor="white">
<a href="#0" id="0">We introduce MiningZinc, a declarative framework for constraint-based data mining.</a>
<a href="#1" id="1">MiningZinc consists of two key components: a language component and an execution mechanism.</a>
<a href="#2" id="2">First, the MiningZinc language allows for high-level and natural modeling of mining problems, so that MiningZinc models are similar to the mathematical definitions used in the literature.</a>
<a href="#3" id="3">It is inspired by the Zinc family of languages and systems and supports user-defined constraints and functions.</a>
<a href="#4" id="4">Secondly, the MiningZinc execution mechanism specifies how to compute solutions for the models.</a>
<a href="#5" id="5">It is solver independent and supports both standard constraint solvers and specialized data mining systems.</a>
<a href="#6" id="6">The high-level problem specification is first translated into a normalized constraint language (FlatZinc).</a>
<a href="#7" id="7">Rewrite rules are then used to add redundant constraints or solve subproblems using specialized data mining algorithms or generic constraint programming solvers.</a>
<a href="#8" id="8">Given a model, different execution strategies are automatically extracted that correspond to different sequences of algorithms to run.</a>
<a href="#9" id="9">Optimized data mining algorithms, specialized processing routines and generic solvers can all be automatically combined.</a>
<a href="#10" id="10">Thus, the MiningZinc language allows one to model constraint-based itemset mining problems in a solver independent way, and its execution mechanism can automatically chain different algorithms and solvers.</a>
<a href="#11" id="11">This leads to a unique combination of declarative modeling with high-performance solving.</a>
</body>
</html>