<html>
<head>
<meta name="TextLength" content="SENT_NUM:9, WORD_NUM:239">
</head>
<body bgcolor="white">
<a href="#0" id="0">Incremental heuristic search algorithms reuse their previous search efforts whenever these are available.</a>
<a href="#1" id="1">As a result, they can often solve a sequence of similar planning problems faster than planning from scratch.</a>
<a href="#2" id="2">State-of-the-art incremental heuristic searches (such as LPA*, D* and D* Lite) work by propagating cost changes to all the states in the search tree whose g values (the costs of computed paths from the start state) are no longer optimal.</a>
<a href="#3" id="3">This work is based on the observation that while a complete propagation of cost changes is essential to ensure optimality, the propagations can be stopped earlier if we are looking close-to-optimal solutions instead of the optimal one.</a>
<a href="#4" id="4">We develop a framework called Truncated Incremental Search that builds on this observation and uses a target suboptimality bound to efficiently restrict cost propagations.</a>
<a href="#5" id="5">We present two truncation based algorithms, Truncated LPA* (TLPA*) and Truncated D* Lite (TD* Lite), for bounded suboptimal planning and navigation in dynamic graphs.</a>
<a href="#6" id="6">We also develop an anytime replanning algorithm, Anytime Truncated D* (ATD*), that combines the inflated heuristic search with truncation, in an anytime manner.</a>
<a href="#7" id="7">We discuss the theoretical properties of these algorithms proving their correctness and efficiency, and present experimental results on 2D and 3D (x, y, heading) path planning domains evaluating their performance.</a>
<a href="#8" id="8">The empirical results show that the truncated incremental searches can provide significant improvement in runtime over existing incremental search algorithms, especially when searching for close-to-optimal solutions in large, dynamic graphs.</a>
</body>
</html>