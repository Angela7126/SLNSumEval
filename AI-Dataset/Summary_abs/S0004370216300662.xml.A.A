<html>
<head>
<meta name="TextLength" content="SENT_NUM:12, WORD_NUM:333">
</head>
<body bgcolor="white">
<a href="#0" id="0">Combining Description Logic (DL) ontologies and nonmonotonic rules has gained increasing attention in the past decade, due to the growing range of applications of DLs.</a>
<a href="#1" id="1">A well-known proposal for such a combination are non-monotonic DL-programs, which support rule-based reasoning on top of DL ontologies in a loose coupling, using a well-defined query interface.</a>
<a href="#2" id="2">However, inconsistency may easily arise as a result of the interaction of the rules and the ontology, such that no answer set (i.e., model) of a DL-program exists; this makes the program useless.</a>
<a href="#3" id="3">To overcome this problem, we present a framework for repairing inconsistencies in DL-programs by exchanging formulas of an ontology formulated in DL- LiteA, which is a prominent DL that allows for tractable reasoning.</a>
<a href="#4" id="4">Viewing the data part of the ontology as a source of inconsistency, we define program repairs and repair answer sets based on them.</a>
<a href="#5" id="5">We analyze the complexity of the notion, and we extend an algorithm for evaluating DL-programs to compute repair answer sets, under optional selection of preferred repairs that satisfy additional constraints.</a>
<a href="#6" id="6">The algorithm induces a generalized ontology repair problem, in which the entailment respectively non-entailment of queries to the ontology, subject to possible updates, must be achieved by a data change.</a>
<a href="#7" id="7">While this problem is intractable in general, we identify several tractable classes of preferred repairs that are useful in practice.</a>
<a href="#8" id="8">For the class of deletion repairs among them, we optimize the algorithm by reducing query evaluation to constraint matching, based on the novel concept of support set, which roughly speaking is a portion of the data from which entailment of an ontology query follows.</a>
<a href="#9" id="9">Our repair approach is implemented within an answer set program system, using a declarative method for repair computation.</a>
<a href="#10" id="10">An experimental evaluation on a suite of benchmark problems shows the effectiveness of our approach and promising results, both regarding performance and quality of the obtained repairs.</a>
<a href="#11" id="11">While we concentrate on DL- LiteA ontologies, our notions extend to other DLs, for which more general computation approaches may be used.</a>
</body>
</html>