<html>
<head>
<meta name="TextLength" content="SENT_NUM:6, WORD_NUM:136">
</head>
<body bgcolor="white">
<a href="#0" id="0">Integrating diverse formalisms into modular knowledge representation systems offers increased expressivity, modeling convenience, and computational benefits.</a>
<a href="#1" id="1">We introduce the concepts of abstract inference modules and abstract modular inference systems to study general principles behind the design and analysis of model generating programs, or solvers, for integrated multi-logic systems.</a>
<a href="#2" id="2">We show how modules and modular systems give rise to transition graphs, which are a natural and convenient representation of solvers, an idea pioneered by the SAT community.</a>
<a href="#3" id="3">These graphs lend themselves well to extensions that capture such important solver design features as learning.</a>
<a href="#4" id="4">In the paper, we consider two flavors of learning for modular formalisms, local and global.</a>
<a href="#5" id="5">We illustrate our approach by showing how it applies to answer set programming, propositional logic, multi-logic systems based on these two formalisms and, more generally, to satisfiability modulo theories.</a>
</body>
</html>