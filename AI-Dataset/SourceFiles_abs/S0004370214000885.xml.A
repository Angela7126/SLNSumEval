<?xml version="1.0" encoding="utf-8"?>
<html>
 <body>
  <root>
   <title>
    Complexity of and algorithms for the manipulation of Borda, Nanson's and Baldwin's voting rules.
   </title>
   <content>
    <section label="1">
     <section-title>
      Introduction
     </section-title>
     <paragraph>
      Voting is a simple mechanism to combine preferences in multi-agent systems. Results like those of Gibbard and Satterthwaite demonstrate that it may often pay for agents to manipulate an election by misreporting their preferences [24], [34]. One appealing escape from manipulation is computational complexity [3]. Whilst a manipulation may exist, perhaps it is computationally too difficult to find? With a single manipulator, there is only a small set of voting rules that are known to be NP-hard to manipulate with unweighted votes: the second order Copeland rule [13], [3], single transferable vote (STV) [2] and ranked pairs [35], [40]. With two or more manipulators, computing a manipulation is NP-hard for some other common voting rules [19], [40], [20], [41]. One case that remains open is Borda voting. Xia, Conitzer, and Procaccia [41] observe that: “The exact complexity of the problem [computing a manipulation with unweighted votes] is now known with respect to almost all of the prominent voting rules, with the glaring exception of Borda”.
     </paragraph>
     <paragraph>
      Computing a manipulation of Borda is NP-hard when votes are weighted and we have a coalition of manipulators [12]. On the other hand, computing a manipulation of Borda is polynomial-time when votes are unweighted and there is just a single manipulator [3]. For a coalition of manipulators and unweighted votes, it has been conjectured that the problem is NP-hard [43]. Note that there exist other scoring rules besides Borda where computing a manipulation with unweighted votes has been show to be NP-hard [41]. One of the most important contributions of this paper is to close the question of the computational complexity of computing a coalitional manipulation for Borda with unweighted votes. We prove that computing a manipulation of Borda with just two manipulators is NP-hard. This result was proven independently in [7]. We will discuss the similarities and differences between the two proofs later in the paper.
     </paragraph>
     <paragraph>
      We also study two voting rules that are closely related to the Borda rule: Nanson's and Baldwin's rules. These are elimination style rules that use Borda scoring to eliminate candidates over a number of rounds. The two rules have been used in real elections in the University of Melbourne (between 1926 and 1982), the University of Adelaide (since 1968), and the State of Michigan (in the 1920s). There are several reasons we consider Nanson's and Baldwin's rules. Firstly, they have features that might appeal to the two opposing camps that support Borda and Condorcet. In particular, unlike the Borda rule itself, both Nanson's and Baldwin's rules are Condorcet consistent as they elect the candidate who beats all others in pairwise elections. Secondly, statistical analysis suggests that, whilst the Borda rule is often vulnerable to manipulation [10], Nanson's rule is particularly resistant [22]. We might expect Baldwin to be similarly resistant. Thirdly, for any Condorcet consistent rule (and thus for Nanson's and Baldwin's rules), Brandt et al. [8] have shown that many types of control and manipulation problems have polynomial-time algorithms when votes are single-peaked. It is an interesting question then if such manipulation problems remain polynomial when we drop the domain restriction.
     </paragraph>
     <paragraph>
      Nanson's and Baldwin's rules are also interesting to study as they are elimination style rules, and elimination style rules are often computationally harder to manipulate than the base rule from which they are derived [2], [15]. Elkind and Lipmaa have conjectured that computing a manipulation for the closure of many voting rules (where we successively use the rule to eliminate candidates) is NP-hard [16]. One of our contributions is to prove that computing a manipulation of Baldwin's rule, which is the closure of Borda voting, is NP-hard with a single manipulator. We also prove that manipulation of Nanson's rule is NP-hard, again with a single manipulator and unweighted votes. Finally, we consider the problem of computing a manipulation with weighted votes and a coalition of manipulators. We show that Baldwin's and Nanson's rules are NP-hard to manipulate in this setting with just three and four candidates respectively.
     </paragraph>
     <paragraph>
      Our theoretical results suggest that all three rules are computationally difficult to manipulate in the worst case. We also investigate whether these rules are resistant to manipulation in practice [37], [38], [39]. We propose several polynomial-time heuristic algorithms for the three voting rules that try to minimise the number of manipulators required to ensure a particular result. Our experiments suggest that the Borda rule is often easy to manipulate in practice. The heuristics that we study are able to find an optimal manipulation in {a mathematical formula}99% of the cases. Interestingly, these heuristics were significantly less effective for Baldwin's and Nanson's rules. These empirical results, together with our theoretical results, provide further evidence for the recent claim that elimination style voting rules tend to be more computationally resistant to manipulation [15].
     </paragraph>
     <paragraph>
      The focus in this paper is on manipulation problems. It would, however, be interesting in the future to consider also control and bribery problems [4], [17]. Control is somewhat different from manipulation since in control problems we change the structure of the election (number of candidates, number of voters, etc.). Bribery, on the other hand, is very close to manipulation since we only change the votes. Manipulation is also related to the possible winner problem [26] and to dealing with uncertainty when eliciting and aggregating preferences [36], [32], [33]. See [21] for a longer discussion on the connections between these problems.
     </paragraph>
     <paragraph>
      The rest of the paper is organised as follows. In Section 2 we provide background. Section 3 focuses on unweighted manipulation and Section 4 on the weighted case. Section 5 presents four heuristic algorithms that aim to find the minimum number of manipulators and Section 6 evaluates these algorithms experimentally. In Section 7 we present two interesting connections between unweighted coalitional manipulation of the Borda rule and two problems from discrete mathematics. We conclude in Section 8.
     </paragraph>
    </section>
    <section label="2">
     <section-title>
      Background
     </section-title>
     <paragraph>
      Let {a mathematical formula}C={c1,…,cm} be the set of m candidates (or alternatives). A linear order on {a mathematical formula}C is a transitive, antisymmetric, and total relation on {a mathematical formula}C. The set of all linear orders on {a mathematical formula}C is denoted by {a mathematical formula}L(C). An n-voter profile P on {a mathematical formula}C consists of n linear orders on {a mathematical formula}C. That is, {a mathematical formula}P=(V1,…,Vn), where for every {a mathematical formula}j≤n, {a mathematical formula}Vj∈L(C). The set of all n-profiles is denoted by {a mathematical formula}Fn. A (deterministic) voting rule r is a function that maps any profile on {a mathematical formula}C to a unique winning candidate, that is, {a mathematical formula}r:F1∪F2∪…→C. When voters are weighted, we have a function w that associates each voter j with a fixed positive integer {a mathematical formula}w(j). A voting rule treats weights as if we had {a mathematical formula}w(j) identical copies of the voter j.
     </paragraph>
     <section>
      <section>
       <section>
        <section-title>
         Borda rule
        </section-title>
        <paragraph>
         The Borda rule, proposed by Jean-Charles de Borda in 1770, is a positional scoring rule that gives a score of {a mathematical formula}m−i to candidate a for each vote that puts candidate a in ith place. The candidate with the highest total Borda score wins. We write {a mathematical formula}s(a,P) for the total Borda score given to candidate a from the profile of votes P, and {a mathematical formula}s(a) where P is obvious from the context. A score vector{a mathematical formula}〈s1,…,sm〉 indicates that the ith candidate receives the Borda score {a mathematical formula}si. The Borda rule is used in parliamentary elections in Slovenia and, in modified form, in elections within the Pacific Island states of Kiribati and Nauru. The Borda rule or similar scoring rules are also used by many organisations and competitions including the Robocup autonomous robot soccer competition, the X.Org Foundation, the Eurovision song contest, and in the election of the Most Valuable Player in major league baseball. The Borda rule has many good features. For instance, it is monotone, as increasing the score for a candidate only helps them win. It never elects the Condorcet loser (a candidate that loses to all others in pairwise elections). However, it may fail to elect a Condorcet winner (a candidate that beats all others in pairwise elections) even if one exists.
        </paragraph>
       </section>
       <section>
        <section-title>
         Nanson's and Baldwin's rules
        </section-title>
        <paragraph>
         These rules are derived from the Borda rule. Nanson's rule eliminates all candidates with less than the average Borda score [29]. This step is then repeated with the reduced set of candidates until there is a single candidate left. A closely related voting rule proposed by Baldwin successively eliminates one of the candidates with the lowest Borda score{sup:1} until one candidate remains [1]. The two rules are closely related. Indeed, they are sometimes confused in the literature. One of the most appealing properties of Nanson's and Baldwin's rules is that they are Condorcet consistent, i.e. they elect the Condorcet winner whenever one exists. This follows from the fact that the Borda score of the Condorcet winner is never below the average Borda score. Both rules satisfy several other desirable criteria, including the majority criterion, i.e., a candidate that is preferred by a majority of voters always wins, and the Condorcet loser criterion. There are also properties which distinguish them. For instance, Nanson's rule satisfies reversal symmetry (i.e. if there is a unique winner under all tie breaking rules and all voters reverse their votes then the winner changes) but Baldwin's rule does not. Finally, there are also desirable properties that neither rule satisfies like monotonicity.
        </paragraph>
       </section>
       <section>
        <section-title>
         The manipulation problem
        </section-title>
        <paragraph>
         We can now formally define the different manipulation problems we consider. The unweighted coalitional manipulation problem is defined as follows.
        </paragraph>
        <paragraph label="Definition 1">
         r-Coalitional-ManipulationGiven a tuple {a mathematical formula}(PNM,p,M), where {a mathematical formula}PNM is the non-manipulators' profile, p is the candidate preferred by the manipulators, and M is the set of manipulators, does there exist a profile {a mathematical formula}PM for the manipulators such that {a mathematical formula}r(PNM∪PM)=p? In other words, does there exist a profile {a mathematical formula}PM for the manipulators such that candidate p wins an election under the voting rule r and the profile {a mathematical formula}PNM∪PM?
        </paragraph>
        <paragraph>
         We drop the word “coalitional” when there is a single manipulator. The weighted coalitional manipulation is defined similarly, where the weights of the voters (both non-manipulators and manipulators) are also given as inputs.
        </paragraph>
        <paragraph label="Definition 2">
         r-Weighted-Coalitional-ManipulationGiven a tuple {a mathematical formula}(PNM,p,w,M), where {a mathematical formula}PNM is the non-manipulators' profile, p is the candidate preferred by the manipulators, w is the weighting function and M is the set of manipulators, does there exist a profile {a mathematical formula}PM for the manipulators such that {a mathematical formula}r(w,PNM∪PM)=p? In words, does there exist a profile {a mathematical formula}PM for the manipulators such that candidate p wins an election under the voting rule r and the profile {a mathematical formula}PNM∪PM?
        </paragraph>
        <paragraph>
         The corresponding optimisation versions of these problems seek to minimise {a mathematical formula}|M|, the number of manipulators.
        </paragraph>
        <paragraph>
         As is common in much of the literature, we break ties in favour of the coalition of the manipulators. This tie-breaking rule was originally used in [3]; see [18] for a discussion of why this has become a “tradition”. We also assume that the manipulators have complete knowledge about the scores from the votes of the non-manipulators. Again, this has become the “tradition” within the literature from some of the earliest work. The argument often put forward for the assumption of complete information is that partial or probabilistic information about the votes of the non-manipulators would add to the computational complexity of computing a manipulation.
        </paragraph>
        <paragraph>
         Given a set of votes and n manipulators, it is in the best interest of all manipulators to place the preferred candidate, p, first for the Borda rule. Hence, p will have Borda score {a mathematical formula}s(p)+n(m−1). We define the gap of candidate i as {a mathematical formula}g(i)=s(p)+n(m−1)−s(i). For p to win under Borda voting, we need the manipulating votes to give to candidate i (where {a mathematical formula}i≠p) a total Borda score which is less than or equal to {a mathematical formula}g(i). Note that if {a mathematical formula}g(i) is negative for even one i, then p cannot win under Borda voting.
        </paragraph>
        <paragraph>
         In the proofs of this paper, we will often need to refer to pairs of votes of a particular form. We define the pair of votes {a mathematical formula}W(u,v)={u≻v≻Others,rev(Others)≻u≻v} where Others is a total order in which the candidates in {a mathematical formula}C∖{u,v} are in a pre-defined lexicographic order, and {a mathematical formula}rev(Others) is its reverse.
        </paragraph>
       </section>
      </section>
     </section>
    </section>
    <section label="3">
     <section-title>
      Unweighted coalitional manipulation
     </section-title>
     <paragraph>
      We start by considering the computational complexity of manipulating Borda, Nanson's and Baldwin's rules with unweighted votes. We prove that the coalitional manipulation problem is NP-complete under the Borda rule with two manipulators. This settles an open problem in computational social choice. We also show that Baldwin's and Nanson's rules are NP-complete to manipulate even with a single manipulator.
     </paragraph>
     <section label="3.1">
      <section-title>
       Borda rule
      </section-title>
      <paragraph>
       In this section we present one of our main results. We prove that computing a manipulation of the Borda rule is NP-hard for two manipulators. Our NP-hardness proof uses a reduction from a specialised permutation problem that is strongly NP-complete [42].
      </paragraph>
      <paragraph label="Definition 3">
       Permutation SumGiven q integers {a mathematical formula}X1≤⋯≤Xq where {a mathematical formula}∑i=1qXi=q(q+1), do there exist two permutations σ and π of 1 to q such that {a mathematical formula}σ(i)+π(i)=Xi?
      </paragraph>
      <paragraph>
       We first give a technical lemma that shows we can construct votes for the non-manipulators with a given target sum.
      </paragraph>
      <paragraph label="Proof">
       Given integers{a mathematical formula}X1to{a mathematical formula}Xm, we can construct, in time polynomial in{a mathematical formula}∑i=1mXi, votes over{a mathematical formula}m+1candidates such that the total Borda score of candidate{a mathematical formula}ciis{a mathematical formula}Xi+Cfor{a mathematical formula}1≤i≤m, and for candidate{a mathematical formula}cm+1is{a mathematical formula}y≤C, for some integer{a mathematical formula}C≥0.This proof uses the construction of McGarvey [28], which has been used elsewhere in the computational social choice literature [41], [6]. We show how to increase the score of a candidate by 1 more than the other candidates except for the last candidate whose score increases by 1 less. For instance, suppose we wish to increase the score of candidate {a mathematical formula}c1 by 1 more than candidates {a mathematical formula}c2 to {a mathematical formula}cm, and by 2 more than candidate {a mathematical formula}cm+1. Consider the pair of votes {a mathematical formula}W(c1,cm+1) defined in Section 2, and given below:{a mathematical formula}{a mathematical formula} The score of candidate {a mathematical formula}c1 increases by {a mathematical formula}m+1, of candidates {a mathematical formula}c2 to {a mathematical formula}cm by m, and of candidate {a mathematical formula}cm+1 by {a mathematical formula}m−1. By repeated construction of such votes, we can achieve the desired result. For example, we may construct {a mathematical formula}Xi copies of {a mathematical formula}W(ci,cm+1) for all {a mathematical formula}1≤i≤m.As the number of votes is linear in {a mathematical formula}∑i=1mXi, the time is polynomial in the sum of the given integers.  □
      </paragraph>
      <paragraph label="Proof">
       The problem is clearly in NP, since a set of manipulator votes that make the preferred candidate win is a polynomial witness that a manipulation exists.To show NP-hardness, we reduce from the Permutation Sum problem. Given an instance of Permutation Sum with q integers, {a mathematical formula}X1 to {a mathematical formula}Xq, we assume, without loss of generality, that {a mathematical formula}2≤Xi≤2q for all {a mathematical formula}i∈{1,…,q}. Given such an instance of Permutation Sum, we create a manipulation problem with {a mathematical formula}m=q+3 candidates {a mathematical formula}p,a1…,aq+2 where the preferred candidate of the two manipulators is p. By Lemma 1, we can construct an election in which the non-manipulators cast votes to give the score vector for {a mathematical formula}〈p,a1,…aq+2〉 of:{a mathematical formula} for some {a mathematical formula}C≥0 and {a mathematical formula}y≤C. We show next that two manipulators can make candidate p win such an election if and only if the Permutation Sum problem has a solution.(⇒) Suppose we have two permutations σ and π of 1 to n with {a mathematical formula}σ(i)+π(i)=Xi. We construct two manipulating votes, in which the candidates get the following scores, respectively:{a mathematical formula}{a mathematical formula} Since {a mathematical formula}σ(i)+π(i)=Xi, these give a total score vector:{a mathematical formula} As {a mathematical formula}y≤C and we tie-break in favour of the manipulators, candidate p wins.(⇐) Suppose we have a successful manipulation. To ensure candidate p beats candidate {a mathematical formula}aq+1, both manipulators must put candidate p in first place. Similarly, both manipulators must put candidate {a mathematical formula}aq+1 in last place, otherwise candidate {a mathematical formula}aq+1 will beat our preferred candidate. Hence the final score of candidate p is {a mathematical formula}2(q+2)+C. The gap between the final score of candidate p and the current score of candidate {a mathematical formula}ai (where {a mathematical formula}1≤i≤q) is {a mathematical formula}Xi. The sum of these gaps is {a mathematical formula}q(q+1). Therefore, if any candidate {a mathematical formula}a1 to {a mathematical formula}aq gets a score of {a mathematical formula}q+1 then candidate p will be beaten. Hence, the two scores of {a mathematical formula}q+1 have to go to the least dangerous candidate which is candidate {a mathematical formula}aq+2.The votes of the manipulators are thus of the form:{a mathematical formula}{a mathematical formula} where σ and π are two permutations of 1 to q. To ensure candidate p beats candidate {a mathematical formula}aj for {a mathematical formula}j∈[1,q], we must have:{a mathematical formula} Rearranging this gives:{a mathematical formula} Since {a mathematical formula}∑i=1qXi=q(q+1) and {a mathematical formula}∑i=1qσ(i)=∑i=1qπ(i)=q(q+1)2, there can be no slack in any of these inequalities. Hence,{a mathematical formula} That is, we have a solution of the Permutation Sum problem.  □
      </paragraph>
      <paragraph>
       The result of Theorem 1 was proved independently by Betzler et al. [7] using a different reduction from the same problem. Their proof relies on the same basic idea as ours – constructing a set of non-manipulating votes such that the candidates have specific gaps. In contrast to our proof which needs {a mathematical formula}Θ(m) non-manipulators and a single dummy candidate using the construction of Lemma 1, Betzler et al. use a more complicated construction which introduces {a mathematical formula}Θ(m) dummy candidates but needs only three non-manipulating votes. It follows therefore that the problem of computing a manipulation is not fixed parameter tractable in the number of voters.
      </paragraph>
     </section>
     <section label="3.2">
      <section-title>
       Baldwin's rule
      </section-title>
      <paragraph>
       Our next result is proved by reduction from the exact 3-cover (X3C) problem.
      </paragraph>
      <paragraph label="Definition 4">
       X3CGiven two sets {a mathematical formula}V={v1,…,vq}, {a mathematical formula}q=3r, and {a mathematical formula}S={S1,…,St}, where {a mathematical formula}t≥2 and for all {a mathematical formula}j≤t, {a mathematical formula}|Sj|=3 and {a mathematical formula}Sj⊆V, does there exist a subset {a mathematical formula}S′ of {a mathematical formula}S such that each element in {a mathematical formula}V is in exactly one of the 3-sets in {a mathematical formula}S′?
      </paragraph>
      <paragraph label="Proof">
       Unweighted manipulation for Baldwin's rule is NP-complete with one manipulator.We give a reduction from X3C. Given an X3C instance {a mathematical formula}V={v1,…,vq},S={S1,…,St}, we let the set of candidates be {a mathematical formula}C={p,d,b}∪V∪A, where p is the manipulator's preferred candidate, {a mathematical formula}A={a1,…,at}, and d and b are additional candidates. Members of {a mathematical formula}A correspond to the 3-sets in {a mathematical formula}S. Let {a mathematical formula}m=|C|=q+t+3.The profile P contains two parts: {a mathematical formula}P1, which is used to control the changes in the score differences between candidates, after a set of candidates is removed, and {a mathematical formula}P2, which is used to balance the score differences between the candidates.We make the following observations about the pair of votes {a mathematical formula}W(c1,c2), which were defined in Section 2. First, these two votes give the following scores to each candidate{a mathematical formula} Second, for any set of candidates {a mathematical formula}C′⊆C and any pair of candidates {a mathematical formula}e1,e2∈C∖C′,{a mathematical formula} Here {a mathematical formula}W(c1,c2)|C∖C′ is the pair of votes obtained from {a mathematical formula}W(c1,c2) by removing all candidates in {a mathematical formula}C′. In words, the formula states that after {a mathematical formula}C′ is removed, the score difference between {a mathematical formula}e1 and {a mathematical formula}e2 is increased by 1 if and only if {a mathematical formula}e1=c2 and {a mathematical formula}c1 is removed; it is decreased by 1 if and only if {a mathematical formula}e1=c1 and {a mathematical formula}c2 is removed; for any other cases, the score difference does not change. Additionally, for any {a mathematical formula}e∈C∖{c1,c2}, {a mathematical formula}s(c1,W(c1,c2))−s(e,W(c1,c2))=1 and {a mathematical formula}s(c2,W(c1,c2))−s(e,W(c1,c2))=−1.We next show how to use votes of the form {a mathematical formula}W(c1,c2) to construct the first part of the profile {a mathematical formula}P1. We recall that {a mathematical formula}m=|C|=q+t+3. {a mathematical formula}P1 is composed of the following votes:
       <list>
        for each {a mathematical formula}j≤t and each {a mathematical formula}vi∈Sj, there are 2m copies of {a mathematical formula}W(vi,aj);for each {a mathematical formula}i≤q, there are m copies of {a mathematical formula}W(b,vi);there are {a mathematical formula}m(t+6) copies of {a mathematical formula}W(b,p).Suppose the
       </list>
       <paragraph>
        X3C instance has a solution {a mathematical formula}S1,…,Sq/3 (this is without loss of generality since we can rename the subscripts of the 3-sets in the solution to {a mathematical formula}{1,…,q/3}). Then, we let the manipulator vote as follows:{a mathematical formula}In the following, we use {a mathematical formula}Ck to denote the set of candidates that have not yet been eliminated after round k.The candidates with the lowest Borda score before the manipulator's vote are p followed by all {a mathematical formula}aj's, which all have 1 more, as explained above. With the manipulator's vote, p overtakes all {a mathematical formula}aj. Moreover, {a mathematical formula}a1 has the lowest Borda score, which means that {a mathematical formula}a1 is eliminated in the first round. We next show that for all {a mathematical formula}j=1,…,q/3, in round {a mathematical formula}4j−3, candidate {a mathematical formula}aj is eliminated, and in round {a mathematical formula}4j−2,4j−1,4j, {a mathematical formula}Sj are eliminated.Suppose this holds for all rounds before round {a mathematical formula}4j−2. In round {a mathematical formula}4j−3 candidate {a mathematical formula}aj is eliminated. By Eq. (1), for all {a mathematical formula}c′∈C4j−3∖(Sj∪{d,p}), we have{a mathematical formula}{a mathematical formula} and for any {a mathematical formula}v∈Sj, we have{a mathematical formula}Therefore, in round {a mathematical formula}4j−2, the difference between p and the candidates in {a mathematical formula}Sj is decreased by 2m, which covers their initial difference of m and also the difference in the manipulator's vote (as this can be at most {a mathematical formula}m−2). Meanwhile, d is still leading by a large margin. Therefore, in rounds {a mathematical formula}4j−2,4j−1,4j, the candidates in {a mathematical formula}Sj are eliminated (the order of elimination does not matter). Eliminating each {a mathematical formula}v∈Sj has three effects on score difference between p and other candidates:
       </paragraph>
       <list>
        <list-item label="1.">
         the score difference between all {a mathematical formula}ak with {a mathematical formula}v∈Sk and p is increased by 2m;
        </list-item>
        <list-item label="2.">
         the score difference between b and p is decreased by m;
        </list-item>
        <list-item label="3.">
         the score difference between d and p is decreased by the number of copies of {a mathematical formula}W(d,v) in P.
        </list-item>
       </list>
       <paragraph>
        Therefore, the unweighted manipulation problem under Baldwin's rule is NP-complete with only a single manipulator.  □
       </paragraph>
      </paragraph>
     </section>
     <section label="3.3">
      <section-title>
       Nanson's rule
      </section-title>
      <paragraph>
       We reduce the exact 3-cover (X3C) problem to a manipulation problem under Nanson's rule.
      </paragraph>
      <paragraph label="Proof">
       Unweighted manipulation for Nanson's rule is NP-complete with one manipulator.The idea of the proof is similar to that of the proof of Theorem 2. We prove NP-completeness by reduction from X3C with {a mathematical formula}t≥3q (this is without loss of generality because if {a mathematical formula}t&lt;q then we can add dummy {a mathematical formula}S1's to {a mathematical formula}S). Given an X3C instance {a mathematical formula}V={v1,…,vq}, {a mathematical formula}S={S1,…,St}, we let the set of alternatives be {a mathematical formula}C={p,d,b1,b2}∪V∪A, where p is the manipulator's preferred candidate, {a mathematical formula}V={v1,…,vq}, {a mathematical formula}A={a1,…,at}, and d, {a mathematical formula}b1, and {a mathematical formula}b2 are auxiliary alternatives. Without loss of generality, both q and t are even, and {a mathematical formula}t≥3q. We will use the votes {a mathematical formula}W(c1,c2) defined in Section 2 to construct the profile. For any {a mathematical formula}C′⊊C, we make the following observations about {a mathematical formula}W(c1,c2).{a mathematical formula} We note that {a mathematical formula}|C∖C′|−1 is the average score of the alternatives in {a mathematical formula}W(c1,c2)|C∖C′.Let {a mathematical formula}m=q+t+4. Again, the profile has two parts: {a mathematical formula}P1, which is used to control the score differences between the alternatives and the average score, and {a mathematical formula}P2, which is used to set the initial scores. {a mathematical formula}P1 consists of the following votes:
       <list>
        for every {a mathematical formula}j≤t there are {a mathematical formula}7m/2−q/3 copies of {a mathematical formula}W(aj,b1);for every {a mathematical formula}vi∈Sj (there are three of them), there are m copies of {a mathematical formula}W(vi,aj);for every {a mathematical formula}i≤q, there are m copies of {a mathematical formula}W(vi,p);there are mq copies of {a mathematical formula}W(p,b1);there are {a mathematical formula}mq+t(7m/2−q/3) copies of {a mathematical formula}W(b1,b2).The second part of the profile,
       </list>
       <paragraph>
        {a mathematical formula}P2, consists of the following votes, where {a mathematical formula}occ(vi) is the number of times that {a mathematical formula}vi is covered by the 3-sets in {a mathematical formula}S:
       </paragraph>
       <list>
        <list-item label="•">
         for any {a mathematical formula}i≤q, there are {a mathematical formula}m⋅occ(vi) copies of {a mathematical formula}W(d,vi),
        </list-item>
       </list>
       <paragraph>
        Let {a mathematical formula}P=P1∪P2 and let {a mathematical formula}avg(P)=(m−1)|P|/2. We make the following observations about P:
       </paragraph>
       <list>
        <list-item label="•">
         {a mathematical formula}s(p,P)−avg(P)=0.
        </list-item>
        <list-item label="•">
         {a mathematical formula}s(d,P)−avg(P)=m(∑i=1qocc(vi))=3mt.
        </list-item>
        <list-item label="•">
         {a mathematical formula}s(b1,P)−avg(P)=0.
        </list-item>
        <list-item label="•">
         {a mathematical formula}s(b2,P)−avg(P)=−(mq+t(7m/2−q/3)).
        </list-item>
        <list-item label="•">
         For any {a mathematical formula}j≤t, {a mathematical formula}s(aj,P)−avg(P)=m/2−q/3.
        </list-item>
        <list-item label="•">
         For any {a mathematical formula}i≤q, {a mathematical formula}s(vi,P)−avg(P)=m.
        </list-item>
       </list>
       <paragraph>
        Therefore, the unweighted manipulation problem under Nanson's rule is NP-complete when there is only one manipulator.  □
       </paragraph>
      </paragraph>
      <paragraph>
       Our results about the complexity of manipulating Baldwin's and Nanson's rules significantly increase the size of the set of voting rules used in practice that are known to be NP-hard to manipulate with a single manipulator. They also contrast to Borda where computing a manipulation with a single manipulator can be done in polynomial time [3]. Adding elimination rounds to Borda to get Nanson's or Baldwin's rules increases the computational complexity of computing a manipulation with one manipulator from polynomial-time to NP-hard.
      </paragraph>
     </section>
    </section>
    <section label="4">
     <section-title>
      Weighted coalitional manipulation
     </section-title>
     <paragraph>
      In this section we show that weighted coalitional manipulation under Baldwin's or Nanson's rules is NP-complete. It has already been shown that the weighted coalitional manipulation problem for Borda is NP-hard for three or more candidates [12].
     </paragraph>
     <section label="4.1">
      <section-title>
       Baldwin's rule
      </section-title>
      <paragraph>
       Similar to the case of Borda, we prove that the weighted coalitional manipulation problem for Baldwin's rule is NP-hard for three or more candidates. Our result is proved by reduction from the Partition problem.
      </paragraph>
      <paragraph label="Definition 5">
       PartitionGiven a set of integers {a mathematical formula}A={k1,…,kq} such that {a mathematical formula}∑i=1qki=2K, does there exist a partition of these numbers into two sets the elements in each of which sum to K?
      </paragraph>
      <paragraph>
       A partition that witnesses the satisfiability of a Partition instance is called a perfect partition.
      </paragraph>
      <paragraph label="Proof">
       For Baldwin's rule and weighted votes, the coalitional manipulation problem is NP-hard with three or more candidates.We reduce from the partition problem. We construct a coalitional manipulation problem with three candidates (a, b, and p) in which the manipulators want to make p win.We suppose the non-manipulators have voted as in the following table.{a mathematical formula} At this point the scores of the candidates are{a mathematical formula}For each integer {a mathematical formula}ki∈A, we have a member of the manipulating coalition with weight {a mathematical formula}3ki.Suppose there is a perfect partition. Let the manipulators corresponding to the integers in one half of the partition vote {a mathematical formula}a≻p≻b, and the others vote {a mathematical formula}p≻a≻b. The scores are now as follows: {a mathematical formula}s(a)=48K−1, {a mathematical formula}s(b)=48K−2, {a mathematical formula}s(p)=48K. Hence b will be eliminated. In the next round, p wins as {a mathematical formula}s(a)=21K−1 but {a mathematical formula}s(p)=27K. Thus the manipulators can make p win if a perfect partition exists.Conversely, suppose there is a manipulation in which p wins. Suppose a is eliminated in the first round. Then the scores in the second round from the non-manipulators are: {a mathematical formula}s(b)=27K−1, and {a mathematical formula}s(p)=15K. The manipulators cannot now prevent b from winning. Hence b must be eliminated in the first round. If any manipulator puts b above last place, b will not be eliminated and will win. Thus all the votes of the manipulators are {a mathematical formula}a≻p≻b or {a mathematical formula}p≻a≻b. Consider the following partition of A constructed from any successful manipulation. In the first half of the partition, we put all integers associated with weighted votes of the manipulators of the form {a mathematical formula}a≻p≻b. In the second half, we put all integers associated with weighted votes of the form {a mathematical formula}p≻a≻b. Suppose the first half of the partition sums up to {a mathematical formula}K−x and the second half sums up to {a mathematical formula}K+x. Then we have scores: {a mathematical formula}s(a)=48K−1−3x, {a mathematical formula}s(b)=48K−2 and {a mathematical formula}s(p)=48K+3x. If {a mathematical formula}x≥1 then a is eliminated. On the other hand, if {a mathematical formula}x≤−1 then p is eliminated. Hence {a mathematical formula}x=0 and we have a perfect partition. For more than three candidates, we add “harmless” candidates that are in the last places of every vote of the non-manipulators.  □
      </paragraph>
      <paragraph>
       Note that Coleman and Teague in Theorem 13 of [11] provide an NP-hardness result for the weighted coalitional manipulation problem for voting rules like Baldwin's that eliminate candidates one by one. Our result for Baldwin's rule is different in two aspects. First, Coleman and Teague use a different tie-breaking rule. They break ties against the manipulator whilst, as is more common in the literature, we suppose ties are broken in their favour. The second difference is that Coleman and Teague do not specify a precise bound on the number of candidates, while we present a proof that weighted coalitional manipulation under Baldwin's rule is NP-hard for just three candidates.
      </paragraph>
     </section>
     <section label="4.2">
      <section-title>
       Nanson's rule
      </section-title>
      <paragraph label="Proof">
       We show that the weighted coalitional manipulation problem under Nanson's rule is NP-complete with four or more candidates. However, if there are at most three candidates, the computational complexity of computing a manipulation under Nanson's rule is polynomial-time. For Nanson's rule and weighted votes, the coalitional manipulation problem is NP-complete with four or more candidates.We reduce from partition. For any partition instance, we construct a coalitional manipulation problem with four candidates (a, b, c, and p) where p is the candidate that the manipulators wish to win. We suppose the non-manipulators have voted as in the following table.{a mathematical formula}The total scores from non-manipulators are as follows: {a mathematical formula}s(a)=28K+38, {a mathematical formula}s(b)=34K+37, {a mathematical formula}s(c)=34K+37 and {a mathematical formula}s(p)=24K+38. The average score is {a mathematical formula}30K+37.5. For each integer {a mathematical formula}ki, we have a member of the manipulating coalition with weight {a mathematical formula}2ki. Now, suppose there is a solution to the partition instance. Let the manipulators corresponding to the integers in one half of the partition vote {a mathematical formula}p≻a≻b≻c, and let the others vote {a mathematical formula}p≻a≻c≻b.The total scores are now as follows: {a mathematical formula}s(a)=36K+38, {a mathematical formula}s(b)=36K+37, {a mathematical formula}s(c)=36K+37 and {a mathematical formula}s(p)=36K+38. The average score is {a mathematical formula}36K+37.5.The alternatives b and c are eliminated, and p wins in the second round. Thus the manipulators can make p win if a perfect partition exists.Conversely, suppose there is a successful manipulation. Clearly, we need to ensure that p is not eliminated in the first round. To ensure this, all manipulators must rank p first. Otherwise, the score of p would be less than the average score {a mathematical formula}36K+37.5, so p would be eliminated. Next, we show that if b and c are not eliminated in the first round, p cannot win overall. We consider all possible sets of candidates besides b and c that could be eliminated in the first round. There are six cases.
       <list>
        only a is eliminated in the first round. The scores from non-manipulators in the second round are as follows: {a mathematical formula}s(b)=24K+27, {a mathematical formula}s(c)=24K+27, and {a mathematical formula}s(p)=12K+21. The average score is {a mathematical formula}20K+25. Even with the maximum possible score of 8K from the manipulators, p is eliminated. This contradicts the assumption that p wins.only b is eliminated in the first round. Note that if a is not ranked second in the votes of all manipulators, its score will be less than the average {a mathematical formula}36K+37.5 and it will be eliminated. This contradicts our assumption that p and a are not eliminated in the first round. Hence, all manipulators have to cast votes that rank p first and a second. The votes of the manipulators in the second round will then be {a mathematical formula}p≻a≻c, giving scores {a mathematical formula}s(a)=22K+23, {a mathematical formula}s(c)=24K+25, and {a mathematical formula}s(p)=26K+27. The average score is {a mathematical formula}24K+25. Hence, a is eliminated. In the next round, p is eliminated, as {a mathematical formula}s(p)=10K+10, {a mathematical formula}s(c)=14K+15, and the average score is {a mathematical formula}12K+12.5. This contradicts the assumption that p wins.only c is eliminated in the first round. This case is symmetric to the second case.a and b are eliminated in the first round. In the second round, the scores from non-manipulators are {a mathematical formula}s(c)=14K+15 and {a mathematical formula}s(p)=6K+10. The 4K points from the manipulators cannot now prevent p from being eliminated. This contradicts the assumption that p wins.a and c are eliminated in the first round. This is symmetric to the fourth case.a, b, and c are all eliminated in the first round. This case is impossible because if b and c are eliminated then a must get 8K points from the manipulators. Hence, a reaches the second round.Thus, the only way for
       </list>
       <paragraph>
        p to win is if b and c are eliminated in the first round. For this to occur, the manipulators have to put p in first place, and a in second place. If b gets more than a score of 2K from the manipulators in the first round, then its total score will be greater then the average of {a mathematical formula}36K+37.5 and it will not be eliminated in the first round. Similarly, if c gets more than a score of 2K from the manipulators, then it will not eliminated in the first round. However, as both the first and second place in the manipulators votes are fixed, there is exactly 4K points to divide between them. Hence, they must divide the 4K points equally. Hence, there exists a solution to the partition instance. For more than four candidates, we add “harmless” candidates that are in last place in every vote of the non-manipulators.  □
       </paragraph>
      </paragraph>
      <paragraph>
       Clearly, there is a polynomial-time algorithm to compute a manipulation of Baldwin's rule with two candidates (since this case degenerates to majority voting). For Nanson's rule, on the other hand, there is a polynomial-time algorithm for up to three candidates.
      </paragraph>
      <paragraph label="Theorem 6">
       For Nanson's rule and weighted votes, the coalitional manipulation problem can be solved in polynomial time for up to three candidates.
      </paragraph>
      <paragraph label="Proof">
       Consider an election with three candidates ({a mathematical formula}a,b, and p) in which the manipulators want p to win. We prove that in a successful manipulation, either all manipulators vote {a mathematical formula}p≻a≻b or they all vote {a mathematical formula}p≻b≻a. If p does not win using one of these two votes, then p cannot win. Therefore we simply try out the two votes and compute if p wins in either case.Suppose the manipulators can make p win. We first note that there is no harm in raising p to the first position while keeping the other parts of their preferences the same. By doing so, we ensure that the score of p goes up and the scores of a and b go down. The only possible change in the elimination process is that now both a and b drop out in the first round, so that p still wins.Now, suppose that all manipulators rank p in their top positions. Let {a mathematical formula}PM denote a profile for the manipulators that makes p win. Because Nanson's rule never selects the Condorcet loser, it cannot be the case that both a majority of voters prefer a to p, and b to p. Without loss of generality, suppose that a majority of voters prefer p to a. We argue that if all manipulators vote {a mathematical formula}p≻a≻b, then p still wins. For the sake of contradiction, suppose all manipulators vote {a mathematical formula}p≻a≻b but p does not win. As the manipulators still rank p in their top positions, the score of p in the first round is the same as in {a mathematical formula}PM. Therefore, p must enter (and lose) the second round. Hence, only a is eliminated in the first round, and in the second round a majority of voters prefer b to p. However, having the manipulators vote {a mathematical formula}p≻a≻b only lowers b's score in the first round, compared to the case where they vote {a mathematical formula}PM. Hence, when the manipulators vote {a mathematical formula}PM, b also enters the second round and then a majority of voters prefer b to p, which is a contradiction.Therefore, if the manipulators can make p win, then they can make p win by all voting {a mathematical formula}p≻a≻b, or all voting {a mathematical formula}p≻b≻a.  □
      </paragraph>
      <paragraph>
       The reason that the above algorithm does not work for manipulating Baldwin's rule is that the algorithm requires that we can place p as the first choice in every manipulating vote. However, in a successful manipulation in the proof of Theorem 4, the manipulators are split between {a mathematical formula}p≻a≻b and {a mathematical formula}a≻p≻b, and switching the votes of the latter group into {a mathematical formula}p≻a≻b spoils the manipulation.
      </paragraph>
      <paragraph>
       The results in this section suggest that Baldwin's rule is arguably harder to manipulate because Nanson's rule is polynomial to manipulate with three candidates, and requires at least four candidates to be NP-hard, but Baldwin's is NP-hard already with three candidates. It follows that computing a manipulation is NP-hard for both rules when votes are unweighted, the number of candidates is small, and there is uncertainty about how agents have voted in the form of a probability distribution [12]. Note that the coalitional manipulation problem for Borda with weighted votes is NP-hard for three or more candidates [12]. Thus, somewhat surprisingly, adding an elimination round to Borda, which gives us Nanson's rule, decreases the computational complexity of computing a manipulation with three manipulators from NP-hard to polynomial-time.
      </paragraph>
     </section>
    </section>
    <section label="5">
     <section-title>
      Heuristic methods
     </section-title>
     <paragraph>
      NP-hardness only characterises the worst-case complexity of computing a manipulation. Given enough manipulators, we can easily make any candidate win. We consider next minimising the number of manipulators required. For example, Reverse is a simple heuristic method proposed to compute Borda manipulations [43]. The method constructs each manipulator's vote in turn: preferred candidate p is put in first place, and the remaining candidates are put in reverse order of their current Borda scores. The method continues constructing manipulating votes until p wins. A long and intricate argument shows that Reverse constructs a manipulation which uses at most one more manipulator than is optimal.
     </paragraph>
     <paragraph label="Example 1">
      Suppose we have four candidates, {a mathematical formula}c1,c2,c3,p, and the two non-manipulators have cast votes: {a mathematical formula}c3≻c1≻c2≻p and {a mathematical formula}c2≻c3≻c1≻p. Then we have the score vector {a mathematical formula}〈3,4,5,0〉. We use Reverse to construct a manipulation that makes candidate p win. Reverse first constructs the vote: {a mathematical formula}p≻c1≻c2≻c3. The score vector is now {a mathematical formula}〈5,5,5,3〉. Reverse next constructs the vote: {a mathematical formula}p≻c1≻c2≻c3. (It will not matter how ties between 1, 2, and 3 are broken.) The score vector is now {a mathematical formula}〈7,6,5,6〉. Finally, Reverse constructs the vote: {a mathematical formula}p≻c3≻c2≻c1. The score vector is {a mathematical formula}〈7,7,7,9〉. Hence, Reverse requires three manipulating votes to make candidate p win. As we will see later, this is one more vote than in the optimal solution.
     </paragraph>
     <paragraph>
      Following [43], we propose four new heuristic methods. The first two algorithms work with all three voting rules. However, the last two algorithms are designed specifically for the elimination style of Baldwin's and Nanson's rules. All algorithms attempt to construct a manipulation with a specific number of manipulators. Hence, in order to find the best possible number of manipulators using one of these algorithms, we run it for one manipulator, then two and so on until a manipulation is found. We refer to a manipulation with k manipulators as a k-manipulation.
     </paragraph>
     <section label="5.1">
      <section-title>
       Manipulation matrices
      </section-title>
      <paragraph>
       In this section we prove some auxiliary results that are needed to develop our heuristic algorithms.
      </paragraph>
      <paragraph>
       We can view Reverse as greedily constructing a manipulation matrix. A manipulation matrix is an n by m matrix A, where n is the number of manipulators, m is the number of candidates, and {a mathematical formula}A(i,j)=k if and only if the ith manipulator adds a score of k to candidate {a mathematical formula}cj. The jth column of the matrix, {a mathematical formula}A(j), is the set of scores received by candidate {a mathematical formula}cj, and each of the n rows is a permutation of 0 to {a mathematical formula}m−1. We require that the sum of the jth column is less than or equal to {a mathematical formula}g(cj), the maximum score candidate {a mathematical formula}cj can receive without defeating p. Reverse constructs this matrix row by row.
      </paragraph>
      <paragraph>
       Our new methods break out of the straightjacket of constructing a manipulation matrix in row-wise order. To achieve this, we take advantage of an interesting result that relaxes the constraint that each row is a permutation of 0 to {a mathematical formula}m−1. This lets us construct a relaxed manipulation matrix. This is an n by m matrix that contains n copies of 0 to {a mathematical formula}m−1 in which the sum of the jth column is again less than or equal to {a mathematical formula}g(cj). In a relaxed manipulation matrix, a row can repeat an integer provided other rows compensate by not having that integer at all.
      </paragraph>
      <paragraph label="Proof">
       Suppose there is an n by m relaxed manipulation matrix A. Then there is an n by m manipulation matrix B with the same column sums.The proof is by induction on n. In the base case, {a mathematical formula}n=1 and we just set {a mathematical formula}B(1,j)=A(1,j) for all {a mathematical formula}j∈{1,…,m}. In the inductive step, we assume the theorem holds for all relaxed manipulation matrices with {a mathematical formula}n−1 rows. Let {a mathematical formula}h(i) be the sum of the ith column of A. We use a perfect matching in a suitable bipartite graph to construct the first row of B and then appeal to the induction hypothesis on an {a mathematical formula}n−1 by m relaxed manipulation matrix constructed by removing the values in the first row from A.We build a bipartite graph as follows. The first half of the bipartite graph consists of m vertices {a mathematical formula}{Vi}|i=0m−1, while the second half of the graph consists of m vertices {a mathematical formula}{Wj}|j=1m. Each vertex {a mathematical formula}Vi represents a score, i, that must appear in the first row of B. Each vertex {a mathematical formula}Wj represents the jth column of A.We add the edge {a mathematical formula}(Vi,Wj) to this bipartite graph for each {a mathematical formula}i∈[0,m−1], {a mathematical formula}j∈[1,m], and {a mathematical formula}k∈[1,n] where {a mathematical formula}A(k,j)=i. An edge {a mathematical formula}(Vi,Wj) therefore means that score i can be taken from the jth column of A.Note that there can be multiple edges between any pair of vertices. By construction, the degree of each vertex is n.Suppose we take any {a mathematical formula}U⊆{Vi|i∈[0,m−1]}. Recall first that the Hall condition [25] states that a perfect matching exists if and only if {a mathematical formula}|V|≤|N(V)| for all sets of vertices V (where {a mathematical formula}N(V) is the neighbourhood of V). Since the degree of each vertex is n, there are {a mathematical formula}n|U| edges leaving U. For the same reason, each vertex in {a mathematical formula}N(U) can accommodate at most n incoming edges. Therefore {a mathematical formula}n|U|≤n|N(U)|. Hence, the Hall condition holds and a perfect matching exists. Consider an edge {a mathematical formula}(Vi,Wj) in such a perfect matching. We construct the first row of B by setting {a mathematical formula}B(1,j)=i. As this is a matching, each {a mathematical formula}i∈[0,m−1] occurs once, and each column is used exactly one time. We now construct an {a mathematical formula}n−1 by m matrix from A by removing one element equal to {a mathematical formula}B(1,j) from each column j. By construction, each value {a mathematical formula}i∈[0,m−1] occurs {a mathematical formula}n−1 times, and the column sums are now {a mathematical formula}h(j)−B(1,j). Hence it is a relaxed manipulation matrix. We can therefore appeal to the induction hypothesis. This gives us an n by m manipulation matrix B with the same column sums as A.  □
      </paragraph>
      <paragraph>
       We can extract from this proof a polynomial-time method to convert a relaxed manipulation matrix into a manipulation matrix. Hence, it is enough to propose new heuristic methods that construct relaxed manipulation matrices. This is advantageous for greedy methods like those proposed here, as we have more flexibility in placing integers into good positions in a relaxed manipulation matrix.
      </paragraph>
     </section>
     <section label="5.2">
      Largest Fit
      <paragraph>
       Our first heuristic method, Largest Fit is inspired by bin packing and multiprocessor scheduling. Constructing an n by m relaxed manipulation matrix is similar to packing nm objects into m bins with a constraint on the capacity of the different bins and an extra constraint on the number of items (n) that can be placed in each bin. The problem is also similar to scheduling nm unit length jobs with different memory requirements on n different processors with a constraint on the total memory footprint of the n different jobs running at every clock tick and schedule length fixed to m. Krause et al. [27] have proposed a simple heuristic for this problem that schedules the unassigned job with the largest memory requirement to the time step with the maximum remaining available memory that has less than n jobs assigned.
      </paragraph>
      <paragraph>
       Largest Fit works in a similar way to construct a relaxed manipulation matrix. It assigns the largest unallocated score to the largest gap. More precisely, it first assigns n instances of {a mathematical formula}m−1 to column p of the matrix (since it is best for the manipulators to put p in first place in their votes). It then allocates the remaining {a mathematical formula}(n−1)m numbers in reverse order to the columns corresponding to the candidate with the currently smallest score who has not yet received n votes from the manipulators. Unlike Reverse, we do not necessarily fill the matrix in row-wise order.
      </paragraph>
      <paragraph label="Example 2">
       Consider again Example 1. We start with the score vector {a mathematical formula}〈3,4,5,0〉. One manipulator alone cannot increase the score of candidate p enough to beat {a mathematical formula}c2 or {a mathematical formula}c3. Therefore, we need at least two manipulators. Largest Fit first puts two 3s in column 4 of the relaxed manipulation matrix. This gives the score vector {a mathematical formula}〈3,4,5,6〉. The next largest score is 2. Largest Fit puts this into column 1 as this has the larger gap. This gives the score vector {a mathematical formula}〈5,4,5,6〉. The next largest score is again 2. Largest Fit puts this into column 2 giving the score vector {a mathematical formula}〈5,6,5,6〉. The two next largest scores are 1. Largest Fit puts them in columns 1 and 3, giving the score vector {a mathematical formula}〈6,6,6,6〉. Finally, the two remaining scores of 0 are put in columns 2 and 3, so all columns contain two scores. This gives a relaxed manipulation matrix corresponding to the manipulating votes: {a mathematical formula}p≻c2≻c1≻c3 and {a mathematical formula}p≻c1≻c3≻c2. With these votes, p wins based on the tie-breaking rule. Unlike Reverse, Largest Fit constructs an optimal manipulation with just two manipulators.
      </paragraph>
      <paragraph>
       As we show in Section 5.5, Largest Fit and Reverse, are, in fact, incomparable. There is an infinite family of problems on which Largest Fit finds an optimal manipulation but Reverse does not, and vice versa.
      </paragraph>
     </section>
     <section label="5.3">
      Average Fit
      <paragraph>
       Our second heuristic method, Average Fit takes into account both the size of the gap and the number of scores still to be added to each column. If two columns have the same gap, we want to choose the column that contains fewer scores. To achieve this, we look at the average score required to fill each gap: that is, the size of the gap divided by the number of scores still to be added to the column. Each manipulator gives their largest score, {a mathematical formula}m−1, to the preferred candidate p and then has to distribute their remaining scores among other candidates. Initially, a manipulator has {a mathematical formula}m−1 scores to distribute. We call all manipulator scores that have not been distributed so far “unassigned scores”. At each step, Average Fit selects a column and a score to distribute to that column. First, the column is chosen, by selecting the column for which the size of the remaining gap divided by the number of scores still to be added to the column is largest. We tie-break by choosing the column containing the fewest scores. Then, an unassigned score is chosen to distribute to that column. We choose the largest unassigned score that will fit into that column's gap. If there is no unassigned score that will fit into the gap, then the largest unassigned score is chosen.
      </paragraph>
      <paragraph label="Example 3">
       Consider again Example 1, Example 2. We start with the score vector {a mathematical formula}〈3,4,5,0〉. This method computes, identically to Largest Fit, that two manipulators are needed. Like Largest Fit, Average Fit first puts two 3s in column 4 of the relaxed manipulation matrix. This gives the score vector {a mathematical formula}〈3,4,5,6〉. The next largest score is 2. Average Fit puts this into column 1 as this has the largest average 3/2. This gives the score vector {a mathematical formula}〈5,4,5,6〉. The next largest score is again 2. Average Fit puts this into column 2, which has average {a mathematical formula}2/2=1, giving the score vector {a mathematical formula}〈5,6,5,6〉. The two next largest scores are 1. Average Fit puts the first 1 in column 1, which has average 1/1 and the next 1 in column 3 which has average 1/2. This gives the score vector {a mathematical formula}〈6,6,6,6〉. Finally, the two remaining scores of 0 are put in columns 2 and 3, so all columns contain two scores. This is identical to the manipulation computed by Largest Fit, with votes {a mathematical formula}p≻c2≻c1≻c3 and {a mathematical formula}p≻c1≻c3≻c2.
      </paragraph>
      <paragraph>
       For an example on which Average Fit beats Largest Fit, see Theorem 9. For an example on which Largest Fit beats Average Fit, see Theorem 10.
      </paragraph>
     </section>
     <section label="5.4">
      <section-title>
       Eliminate and Reverse Eliminate
      </section-title>
      <paragraph>
       Our next methods are designed to take into account the elimination style nature of Baldwin's and Nanson's rules.
      </paragraph>
      <paragraph>
       The first method, which we call Eliminate, repeatedly constructs votes in which the desired candidate is put in first place, and the other candidates in the reverse of the current elimination order. Thus, the first candidate eliminated is put in last place, the second candidate eliminated is put in the penultimate place, and so on. For Nanson's rule, we order candidates eliminated in the same round by their Borda score in that round. The intuition behind Eliminate is to move the desired candidate up the elimination order whilst keeping the rest of the order unchanged.
      </paragraph>
      <paragraph>
       Our final method, which we call RevEliminate, repeatedly construct votes in which the desired candidate is put in first place, and the other candidates in the current elimination order. For instance, the first candidate eliminated is put in second place. For Nanson's rule, we order candidates eliminated in the same round by the inverse of their Borda score in that round. The intuition behind RevEliminate is to move the desired candidate up the elimination order, and to assign the largest Borda scores to the least dangerous candidates.
      </paragraph>
      <paragraph>
       It is easy to show that all methods will eventually compute a manipulation of Nanson's or Baldwin's rule in which the desired candidate wins.
      </paragraph>
      <paragraph label="Example 4">
       We revisit Examples 1–3 and show the operation of Eliminate for Baldwin's rule. The initial score vector is {a mathematical formula}〈3,4,5,0〉, so p is eliminated in the first round. In the second round, the score vector is {a mathematical formula}〈1,2,3〉, so {a mathematical formula}c1 gets eliminated, and in the last round {a mathematical formula}c3 and {a mathematical formula}c2 are in a tie with the score vector {a mathematical formula}〈1,1〉. We assume the tie is broken in favour of {a mathematical formula}c2, so it wins the election. Therefore, Eliminate will have the first manipulator vote {a mathematical formula}p≻c2≻c3≻c1. With one manipulator, this gives the score vector {a mathematical formula}〈3,6,6,3〉. With tie breaking in favour of p, {a mathematical formula}c1 is eliminated in the first round, so the score vector in the second round is {a mathematical formula}〈4,3,2〉, so p is eliminated in the second round. This means that we need at least one more manipulator. By construction, Eliminate can only change the step in which p is eliminated. The other candidates are eliminated in the same order amongst themselves. Hence, the vote of the second manipulator is also {a mathematical formula}p≻c2≻c3≻c1. The initial score vector is now {a mathematical formula}〈3,8,7,6〉. The candidate {a mathematical formula}c1 is again eliminated in the first round. In the second round, the score vector is {a mathematical formula}〈5,3,4〉. Therefore, {a mathematical formula}c3 is eliminated. In the third round, {a mathematical formula}c2 and p are tied with the score vector {a mathematical formula}〈2,2〉. Since we break ties in favour of the preferred candidate, Eliminate has computed a manipulation with two manipulators. This is optimal.With RevEliminate, the first manipulator votes {a mathematical formula}p≻c1≻c3≻c2. This gives the score vector {a mathematical formula}〈5,4,6,3〉. Hence p is again eliminated in the first round. The score vector in the second round is {a mathematical formula}〈3,2,4〉. Hence {a mathematical formula}c2 is eliminated. In the third round, The score vector in the second round is {a mathematical formula}〈1,2〉. Hence {a mathematical formula}c1 is eliminated and {a mathematical formula}c3 wins. The vote of the second manipulator is therefore {a mathematical formula}p≻c2≻c1≻c3. This gives the score vector {a mathematical formula}〈6,6,6,6〉. We suppose tie breaking eliminates {a mathematical formula}c3. The score vector in the second round is {a mathematical formula}〈4,4,4〉. We suppose tie breaking now eliminates {a mathematical formula}c2. The score vector in the third round is {a mathematical formula}〈2,2〉. Since we break ties in favour of p, RevEliminate has also computed an optimal manipulation.
      </paragraph>
     </section>
     <section label="5.5">
      <section-title>
       Theoretical properties
      </section-title>
      <paragraph>
       First, we show that Largest Fit is incomparable to Reverse since there exists an infinite family of problems on which Largest Fit finds an optimal manipulation but Reverse does not, and vice versa.
      </paragraph>
      <paragraph label="Proof">
       For Borda voting, there exists an election for whichLargest Fitfinds an optimal 2-manipulation, butReverseproduces a 3-manipulation.We suppose there are just two non-manipulators with votes σ and {a mathematical formula}σ′, and the preferred candidate p is {a mathematical formula}cm. Let {a mathematical formula}σ=〈1,2,…,m−1,0〉 and let{a mathematical formula} Then{a mathematical formula} This gives {a mathematical formula}m2+2x for {a mathematical formula}1≤x≤m2−1 and {a mathematical formula}m2+2x−1 for {a mathematical formula}1≤x≤m2, or in other words, there exists a score {a mathematical formula}m2+i for all {a mathematical formula}1≤i≤m−1. Before continuing, we rename the candidates so that {a mathematical formula}s(cm,P)=0 and {a mathematical formula}s(ci,P)=m2+i for all {a mathematical formula}1≤i≤m−1.Recall that the preferred candidate is {a mathematical formula}p=cm. The first vote generated by Reverse is {a mathematical formula}v1=p≻c1≻c2≻⋯≻cm−1, after which {a mathematical formula}s(ci,P∪{v1})=m2+m−1 for all candidates {a mathematical formula}ci≠cm. This is larger than the score of the distinguished candidate {a mathematical formula}s(p,P∪{v1})=m−1. Therefore another manipulator is added. Without loss of generality, we suppose its vote is {a mathematical formula}v2=cm≻c1≻c2≻⋯≻cm−1. The resulting scores of the competing candidates are {a mathematical formula}s(ci,P∪{v1,v2})=m2+(m−1)+(m−i−1)=(5/2)m−2−i. So candidate {a mathematical formula}c1 still has larger score than {a mathematical formula}s(p,P∪{v1,v2})=2m−2. Therefore, Reverse does not find a 2-manipulation. Note that, as Reverse never uses more than one additional manipulator than is optimal, it will successfully find a 3-manipulation.Largest Fit will first give the highest scores, {a mathematical formula}m−1, from both manipulators to the preferred candidate. Then in each iteration, Largest Fit will place a score from the multi-set {a mathematical formula}S2={0,…,m−2}⊎{0,…,m−2} into the manipulation matrix B. The first {a mathematical formula}m−1 iterations of Largest Fit will place the kth largest score from {a mathematical formula}S2 into the kth column of matrix B for {a mathematical formula}1≤k≤m−1. Note that the kth largest score is {a mathematical formula}m−2−⌊(k−1)/2⌋. Let {a mathematical formula}Bm−1 be the tentative manipulation matrix at this point and write {a mathematical formula}sum(Bm−1(i)) for the sum of the elements of its ith column. Then, the score of candidate {a mathematical formula}ci under this partial manipulation is {a mathematical formula}sum(Bm−1(i))+s(ci,P)=(m−2−⌊(i−1)/2⌋)+m2+i for all i, hence {a mathematical formula}sum(Bm−1(i))+s(ci,P)≤sum(Bm−1(i+1))+s(ci+1,P) for all {a mathematical formula}1≤i≤m−2, and so the relative order of the candidates' scores does not change. The multi-set of scores available at this point is {a mathematical formula}S2′={0,…,m2−1}⊎{0,…,m2−2}. The next {a mathematical formula}m−1 iterations of Largest Fit will place the kth largest score from {a mathematical formula}S2′ into the kth column of matrix B for {a mathematical formula}1≤k≤m−1. So column i will receive the element {a mathematical formula}m2−1−⌈(i−1)/2⌉. Let {a mathematical formula}B2(m−1) be the matrix when the loop terminates. The score of candidate {a mathematical formula}ci under the manipulation {a mathematical formula}B2(m−1) is {a mathematical formula}sum(B2(m−1)(i))+s(ci,P)=(m−2−⌊(i−1)/2⌋)+(m2+i)+(m2−1−⌈(i−1)/2⌉)=2(m−1) for all i, while the achievable score of candidate p is also {a mathematical formula}2(m−1). Therefore, Largest Fit finds a 2-manipulation. Fig. 1 illustrates how the scores are placed in matrix B by Largest Fit, where the shaded area represents the scores {a mathematical formula}s(ci,P).  □
      </paragraph>
      <paragraph>
       Unfortunately, Largest Fit does not share the guarantee of Reverse that in the worst case it requires one more manipulator than is optimal. In fact the number of extra manipulators used by Largest Fit is not bounded.
      </paragraph>
      <paragraph label="Proof">
       For Borda voting, there exists an election with 4 candidates and 2k votes (k divisible by 36) on which bothReverseandAverage Fitwill find an optimal manipulation butLargest Fitrequires at least{a mathematical formula}k/9−3additional manipulators.Consider a Borda election in which the scores of four candidates after the non-manipulators P vote are {a mathematical formula}s(c1,P)=6k, {a mathematical formula}s(c2,P)=4k, {a mathematical formula}s(c3,P)=2k, {a mathematical formula}s(p,P)=0. These scores can be achieved if all 2k votes are {a mathematical formula}c1≻c2≻c3≻p. Reverse will use 2k manipulators, all voting {a mathematical formula}p≻c3≻c2≻c1, to achieve a score of 6k for all candidates. This is the only optimal manipulation. To see that Average Fit will find the optimal manipulation, note that the initial gaps are {a mathematical formula}0,2k, and 4k and the averages {a mathematical formula}0,1, and 2 for candidates {a mathematical formula}c1, {a mathematical formula}c2 and {a mathematical formula}c3, respectively. In the first step, Average Fit will assign a score of 2 to candidate {a mathematical formula}c3 and will continue to do that as long as the average of candidate {a mathematical formula}c3 is greater than that of candidate {a mathematical formula}c2. To find when that happens, we let x be the number of iterations and solve {a mathematical formula}4k−2x2k−x=1⇒x=2k. This means that Average Fit will give all 2k scores of 2 to candidate {a mathematical formula}c3. Similarly, we see that it will give all scores of 1 to candidate {a mathematical formula}c2 and only scores of 0 to candidate {a mathematical formula}c1. This means that all manipulators will vote {a mathematical formula}p≻c3≻c2≻c1, the only optimal manipulation.It remains to argue that Largest Fit requires more than {a mathematical formula}2k+k/9−4 manipulators. We exploit the fact that Largest Fit is monotonic, in the sense that if it finds a successful Borda manipulation with a given number of manipulators, it also succeeds with more. Additional manipulators only give Largest Fit more opportunity to increase the score of the preferred candidate over the other candidates. Assume for contradiction that we find a manipulation using {a mathematical formula}n=2k+k/9−4=19k/9−4 manipulators. We will follow the execution of Largest Fit until a contradiction is obtained. By monotonicity, Largest Fit cannot use {a mathematical formula}2k+k/9−4 or fewer manipulators. Note that given our definition of n, since k is divisible by 4 and 9, {a mathematical formula}n−k2 is an integer.Let B denote the relaxed manipulation matrix constructed by Largest Fit, and let {a mathematical formula}B(i), {a mathematical formula}i∈{1,…,m} denote its ith column. We write {a mathematical formula}sum(B(i)) for the sum of the elements in {a mathematical formula}B(i). First, the algorithm will place k 2's in {a mathematical formula}B(3), at which point {a mathematical formula}sum(B(3))=2k+2k=4k=s(2,P). Then it will begin to place 2's in columns {a mathematical formula}B(2) and {a mathematical formula}B(3) evenly, until all remaining {a mathematical formula}n−k 2's have been placed into B. At this point, {a mathematical formula}B(2) contains {a mathematical formula}n−k2 2's, and the number of 2's that {a mathematical formula}B(3) contains is {a mathematical formula}k+n−k2=k/2+n/2=k/2+(19k/9−4)/2=14k/9−2&lt;19k/9−4=n. So at this point, neither {a mathematical formula}B(3) nor {a mathematical formula}B(2) is full yet ({a mathematical formula}B(2) has fewer elements than {a mathematical formula}B(3)). Both columns sum to {a mathematical formula}4k+2(n−k2)=46k/9−4=5k+k/9−4&lt;6k. Therefore, the algorithm will start putting 1's in both {a mathematical formula}B(2) and {a mathematical formula}B(3) evenly, until either their column sums reach 6k or {a mathematical formula}B(3) gets filled. In fact, {a mathematical formula}B(3) will be filled before its sum reaches 6k, since {a mathematical formula}B(3) requires {a mathematical formula}n−k2 more elements to be filled, but at this point, {a mathematical formula}sum(B(2))=sum(B(3))=46k/9−4+n−k2=51k/9−6=5k+2k/3−6&lt;6k.Now, the algorithm will continue by putting {a mathematical formula}k/3+6 1's into {a mathematical formula}B(2), at which point {a mathematical formula}sum(B(2))=51k/9−6+k/3+6=6k. Then the algorithm will start putting 1's evenly in both {a mathematical formula}B(1) and {a mathematical formula}B(2), until either it runs out of 1's or {a mathematical formula}B(2) is filled. In fact, the 1's will run out before {a mathematical formula}B(2) is filled, since {a mathematical formula}B(2) requires {a mathematical formula}n−(n−k2+n−k2+k/3+6)=2k/3−6 more elements, which is equal to the number of remaining 1's, but these are spread between {a mathematical formula}B(1) and {a mathematical formula}B(2). So {a mathematical formula}B(2) will get {a mathematical formula}(2k/3−6)/2=k/3−3 additional 1's, for a total of {a mathematical formula}sum(B(2))=4k+2(n−k2)+n−k2+k/3+6+k/3−3=19k/3−3&gt;19k/3−12=3n. Since {a mathematical formula}sum(B(2))&gt;3n there is no manipulation using {a mathematical formula}n=19k/9−4 manipulators. Therefore, Largest Fit requires at least {a mathematical formula}n+1=2k+k/9−3 manipulators.  □
      </paragraph>
      <paragraph>
       Average Fit is also incomparable to Largest Fit. Like Reverse, Average Fit finds optimal manipulations on the elections in the proof of Theorem 9. However, there exist examples on which Largest Fit finds an optimal manipulation but Average Fit does not.
      </paragraph>
      <paragraph label="Proof">
       For Borda voting, there exist an election on whichLargest Fitfinds an optimal manipulation butAverage Fitrequires an additional vote.We failed to find a simple example but a computer search using randomly generated instances gave the following. Consider an election in which the manipulators wish candidate {a mathematical formula}c8 to win, and 8 non-manipulators have voted as follows:{a mathematical formula} This gives the score vector for {a mathematical formula}〈c1,…,c8〉 of:{a mathematical formula} On this problem, Largest Fit finds an optimal manipulation that makes the final candidate win but Average Fit requires an additional vote. The calculations are shown in Appendix A.  □
      </paragraph>
      <paragraph>
       So far we have not found any instances where Reverse performs better than Average Fit.
      </paragraph>
      <paragraph>
       Finally, we consider properties of heuristic algorithms with respect to Baldwin's and Nanson's rules. It appears that it is harder to find an approximately optimal manipulation for these rules than for the Borda rule. For all our heuristic methods, we can give examples where the heuristic computes a manipulation that uses several more manipulators than is optimal. The most interesting result is that although Reverse was shown to never require more than one extra manipulator than optimal under the Borda rule [43], the result does not transfer to Baldwin's and Nanson's rules. Indeed, even with a fixed number of candidates, Reverse can require an unbounded number of extra manipulators.
      </paragraph>
      <paragraph label="Proof">
       This manipulation provides an upper bound on the size of an optimal manipulation for Baldwin's rule.Reverse will put p in the first place, then a and f in some order, and then the remaining candidates. Without loss of generality, we suppose Reverse breaks ties by constructing the vote {a mathematical formula}p≻a≻f≻b≻c≻d≻e. It alternates this vote with {a mathematical formula}p≻a≻f≻e≻d≻c≻b. After n such manipulating votes have been constructed, the scores of candidates a to f are level at {a mathematical formula}142n+n/2, and p is at 48n. From then on, the manipulators put p in first place and alternate the order of the other candidates. Without loss of generality, we suppose Reverse breaks ties by constructing the vote {a mathematical formula}p≻a≻b≻c≻d≻e≻f. It alternates this vote with {a mathematical formula}p≻f≻e≻d≻c≻b≻a. At least 28n votes are therefore required in total for p to move out of last place. Hence, Reverse requires at least 10n extra manipulators compared to the optimum number for Baldwin's.  □
      </paragraph>
      <paragraph label="Proof">
       This manipulation provides an upper bound on the size of an optimal manipulation for Nanson's rule.Reverse will construct the vote {a mathematical formula}p≻c≻a≻b. After 5n such manipulating votes, the scores of a and b will become level. Reverse will then alternate between {a mathematical formula}p≻c≻b≻a and {a mathematical formula}p≻c≻a≻b. In total, Reverse will construct 25n such manipulating votes, 15n for {a mathematical formula}p≻c≻a≻b and 10n for {a mathematical formula}p≻c≻b≻a. At this point, p wins under Nanson's rule as demonstrated in the following table.{a mathematical formula} Note that p wins in the second round by our tie-breaking assumption. Hence, Reverse uses 4n extra manipulators compared to the optimum number for Nanson's.  □
      </paragraph>
      <paragraph>
       These results demonstrate that, for Baldwin's and Nanson's rules, Reverse does not approximate the optimal number of manipulators by an additive constant (as it does for Borda).
      </paragraph>
     </section>
    </section>
    <section label="6">
     <section-title>
      Experimental results
     </section-title>
     <paragraph>
      To test the performance of these heuristic methods in practice, we ran some experiments. Our experimental setup is based on that in [38]. We generated votes drawn either from the impartial culture model, or the Polya–Eggenberger urn model [5]. In the urn model, votes are placed in an urn and drawn at random. Votes are placed back into the urn along with b other votes of the same type. This captures varying degrees of social homogeneity. We set {a mathematical formula}b=m! so that there is an approximately 50% chance that the second vote is the same as the first. In both models, we generated between 2{sup:2} and 2{sup:7} votes for varying m.
     </paragraph>
     <section label="6.1">
      <section-title>
       Borda rule
      </section-title>
      <paragraph>
       First we present our results for the Borda rule. Manipulation under the Borda rule can be easily modelled as a constraint satisfaction problem. We used this property to obtain optimal solutions for our instances. We tested 1000 instances at each problem size and determined if the returned manipulations are optimal, by modelling the problem of finding an optimal manipulation as a constraint satisfaction problem and solving it using the solver Gecode [23].
      </paragraph>
      <paragraph>
       The constraint solver found an optimal manipulation in 32 502 out of the 32 679 distinct impartial culture elections within the 1 hour time-out. Results are shown in Table 1. Both Largest Fit and Average Fit provide a significant improvement over Reverse, solving 83% and 99% of instances to optimality. Reverse solves fewer problems to optimality as the number of candidates increases, while Average Fit does not seem to suffer from this problem as much: Average Fit solved all of the four candidate instances and 98% of the 128 candidate ones. Table 3 shows the average number of manipulators used by each of the heuristics, compared to the average optimal number of manipulators. We also note that in every one of the 32 502 instances, if Reverse found a k vote manipulation either Average Fit did too, or Average Fit found a {a mathematical formula}(k−1) vote manipulation, i.e., Average Fit never found a worse solution than Reverse. Furthermore, Largest Fit used at most two more manipulators than the optimum.
      </paragraph>
      <paragraph>
       With the urn model, we were able to find an optimal manipulation for 31 529 out of the 31 530 elections within the 1 hour time-out. Table 2, Table 4 give results. Reverse solves about the same proportion of the urn instances as impartial culture instances, 76%. However, the performance of Largest Fit drops significantly. It is much worse than Reverse solving only 42% of instances to optimality. Furthermore, in contrast to the impartial culture elections where Largest Fit used at most two extra manipulators, here Largest Fit used up to 14 more manipulators than the optimum. The reason for such behaviour is that the non-manipulators' profiles in urn instances are similar to the profiles in the proof of Theorem 9, where Largest Fit requires an unbounded number of additional manipulators. The good performance of Average Fit is maintained. It found an optimal manipulation on more than 99% of the instances. It never lost to Reverse and was only beaten by Largest Fit on one instance in our experiments.
      </paragraph>
      <paragraph>
       These results suggest that while Borda manipulation is NP-hard, in practice the simple heuristic algorithms that we proposed can compute optimal manipulations in the vast majority of cases. Thus, it appears that Borda elections are vulnerable to manipulation.
      </paragraph>
     </section>
     <section label="6.2">
      <section-title>
       Baldwin's and Nanson's rules
      </section-title>
      <paragraph>
       It is much more difficult to model the unweighted coalitional manipulation problem under Baldwin's and Nanson's rules as a constraint satisfaction problem since the scores of the candidates in each vote change in each round. Hence, we partitioned our experiments into two parts: small problems where we can find an optimum solution in a brute-force manner and large problems that show how heuristic algorithms scale.
      </paragraph>
      <paragraph>
       Our first set of experiments used 3000 elections with five candidates and five non-manipulating voters. This is small enough to find the optimal number of manipulators using brute force search, and thus to determine how often a heuristic computes an optimal solution. We threw out the 20% or so of instances generated in which the preferred candidate has already won before the manipulators vote. Results are given in Table 5, Table 6. The tables demonstrate that heuristics that are very effective at finding an optimal manipulation for the Borda rule do not perform as well for Baldwin's and Nanson's rules. For example, AverageFit almost always finds an optimal manipulation of the Borda rule but can only find optimal solutions about three quarters of the time for Baldwin's or Nanson's rules. Note that Eliminate and RevEliminate are strictly speaking defined just for Nanson's and Baldwin's rules. With the Borda rule, we can simply use the same manipulating votes they construct with, say, Baldwin's rule. These put the preferred candidate in first place so eventually must be successful in constructing a successful Borda manipulation.
      </paragraph>
      <paragraph>
       In our second set of experiments, we eschew computation of an optimal manipulation in order to use larger problems. This amplifies the differences between the different heuristic methods. Similarly to Section 6.1, we tested 1000 instances at each problem size, which gives 6000 instances in total.
      </paragraph>
      <paragraph>
       Table 7, Table 8, Table 9, Table 10 show the results for the average number of manipulators. The results show that, with Nanson's and Baldwin's rules, Reverse works slightly better overall compared to LargestFit and AverageFit, which themselves outperform the other two methods especially for problems with large number of candidates. This contrasts with the results on the Borda rule in the previous section, where LargestFit and AverageFit do much better than Reverse. In most cases AverageFit is less effective than LargestFit except urn elections with Nanson's rule.
      </paragraph>
      <paragraph>
       These experimental results suggest that Baldwin's and Nanson's rules are harder to manipulate in practice than Borda. Heuristic methods that work well on the Borda rule are significantly less effective on these rules. Overall, Reverse, LargestFit, and AverageFit appear to offer the best performance, though no heuristic dominates.
      </paragraph>
     </section>
    </section>
    <section label="7">
     <section-title>
      Related problems
     </section-title>
     <paragraph>
      There exists an interesting connection between the problem of finding a coalition of two manipulators for the Borda voting rule and two other problems in discrete mathematics: the problem of finding a permutation matrix with restricted diagonals sums (PMRDS) [9] and the problem of finding multi Skolem sequences [30]. We consider this connection for two reasons. First, future advances in these adjacent areas may give insights into new manipulation algorithms or into the complexity of manipulation. Second, this connection reveals an interesting open case for Borda manipulation – Nordh has conjectured that when the gaps {a mathematical formula}g(i) of all candidates are distinct, then manipulation can be done in polynomial time [31].
     </paragraph>
     <paragraph>
      A permutation matrix is an n by n Boolean matrix which is obtained from an identity matrix by a permutation of its columns. Hence, a permutation matrix contains a single value 1 in each row and each column. Consider the {a mathematical formula}2n−1 diagonals of the matrix, numbering them from the top right to bottom left, and let {a mathematical formula}di be the sum of the elements of the ith diagonal. Finding a permutation matrix such that its diagonal sums form a given sequence {a mathematical formula}(d1,…,d2n−1) is the permutation matrix with restricted diagonals sums problem. This problem occurs in discrete tomography, where we need to construct a permutation matrix from its X-rays for each row, column, and diagonal. The X-ray values for each row and column are one, while the values for the diagonal are represented by the sequence {a mathematical formula}(d1,…,d2n−1).
     </paragraph>
     <paragraph>
      We transform a Borda manipulation problem with {a mathematical formula}m+1 candidates and 2 manipulators such that {a mathematical formula}∑i=1mg(i)=m(m−1) to a PMRDS problem on an m by m matrix. Note that here we use m to denote the number of candidates excluding the preferred candidate. Note that such a manipulation problem is tight, i.e., all gaps will be matched exactly, and all candidates will have the same score after the manipulation. In parallel with the description of the transformation, we illustrate it with the following example with five candidates. Our preferred candidate is 4. Let {a mathematical formula}〈4,4,6,6,0〉 be a score vector, where our preferred candidate has 0 score, and {a mathematical formula}〈4,4,2,2〉 be the corresponding gap vector. We label rows of a permutation matrix with scores given by the first manipulator, and columns of the permutation matrix with the reverse of the scores given by the second manipulator. We label each element of the matrix with the sum of its row and column labels. Fig. 2a shows the labelling for our example in gray.
     </paragraph>
     <paragraph>
      Note that each element on a diagonal is labelled with the same value. Therefore, each diagonal labelled with value k represents the gap of size k in the manipulation problem. Hence, the sum of the diagonal {a mathematical formula}di labelled with k encodes the number of occurrences of gaps of size k. For example, {a mathematical formula}d3=2 ensures that there are two gaps of size 2 and {a mathematical formula}d5=2 ensures that there are two gaps of size 4. The remaining diagonal sums, {a mathematical formula}di, {a mathematical formula}i∈{1,2,4,6,7}, are fixed to zero.
     </paragraph>
     <paragraph>
      Consider a solution of PMRDS (Fig. 2b). Suppose the cell {a mathematical formula}P(x,y) contains the value one. We conclude that the first manipulator gives the score x and the second gives the score {a mathematical formula}m−y−1 to a candidate with the gap {a mathematical formula}x+(m−y−1). In our example, cell {a mathematical formula}P(0,1) contains one, hence the first manipulator gives the score 0 and the second gives the score {a mathematical formula}m−y−1=4−1−1=2 to a candidate with the gap 2. By examining all cells with the value one, we obtain the complete votes of the manipulators, which in our example are {a mathematical formula}(4≻1≻2≻0≻3) for the first manipulator and {a mathematical formula}(4≻0≻3≻1≻2) for the second, to fill the gaps {a mathematical formula}〈4,4,2,2〉. As the number of ones in each diagonal is equal to the number of occurrences of the corresponding gap, the constructed two manipulator votes make our candidate a winner. The total scores are {a mathematical formula}〈8,8,8,8,8〉.
     </paragraph>
     <paragraph>
      Finding a coalitional manipulation under the Borda rule using two manipulators is also connected to the problem of finding multi Skolem sequences used for the construction of Steiner triple system [30]. Given a multi-set of positive integers {a mathematical formula}H={h1,…,hm} we need to decide whether there exists a partition P of the set {a mathematical formula}{1,…,2m} into pairs {a mathematical formula}(pi,pi′), {a mathematical formula}i=1,…,m, so that {a mathematical formula}H≡{pi−pi′|(pi,pi′)∈P}. There is a reduction from a manipulation problem with {a mathematical formula}m+1 candidates and 2 manipulators with gaps {a mathematical formula}G={g(1),…,g(m)} such that {a mathematical formula}∑i=1mg(i)=m(m−1) to a special case of multi Skolem sequences with {a mathematical formula}∑i=1mhi=m2 similar to the reduction from a scheduling problem in [30].{sup:2} The multi Skolem sequence instance that corresponds to a manipulation instance is defined by {a mathematical formula}H={2m−g(1)−1,…,2m−g(m)−1}. If a manipulation is given by the votes {a mathematical formula}σ,π, then the partitions {a mathematical formula}(2m−σ(i),π(i)+1) satisfy {a mathematical formula}2m−σ(i)−π(i)−1=2m−g(i)−1. Conversely, suppose there exists partition P of the set {a mathematical formula}{1,…,2m} into pairs {a mathematical formula}(pi,pi′), {a mathematical formula}i=1,…,m, so that {a mathematical formula}hi=pi−pi′,(pi,pi′)∈P,i=1,…,m. Then the votes are given by {a mathematical formula}σ(i)=2m−pi,π(i)=pi′−1, which satisfy {a mathematical formula}σ(i)+π(i)=2m−pi+pi′−1=2m−(2m−g(i)−1)−1=g(i).
     </paragraph>
    </section>
    <section label="8">
     <section-title>
      Conclusions
     </section-title>
     <paragraph>
      In this paper we have investigated theoretically and empirically the computational complexity of manipulation problems for the Borda voting rule and two extensions of Borda voting, Baldwin's and Nanson's rules. We proved that it is NP-hard to compute a coalitional manipulation of the Borda rule with just two manipulators. This resolves a long-standing open question regarding the computational complexity of unweighted coalitional manipulation for common voting rules. We showed that two other rules, Baldwin's and Nanson's rules, which are derived from the Borda rule are also NP-hard to manipulate both with weighted and unweighted votes. Because of these NP-hardness results, we proposed several simple heuristic methods. We showed that they can compute optimal manipulations of the Borda rule in almost all the randomly generated elections. This suggests that the Borda rule is not resistant to manipulation in practice. In contrast, these heuristic algorithms did not perform as well in either Baldwin or Nanson elections, suggesting that these elimination style rules are more resistant to manipulation than the Borda rule.
     </paragraph>
    </section>
   </content>
   <appendices>
    <section label="Appendix A">
     Proof of Theorem 10
     <paragraph>
      In Table 11, we show the operation of Largest Fit when trying to find a manipulation with four manipulators. This is easily seen to be optimal because the maximum score of the preferred candidate that can be achieved with three manipulators is 35, which is not enough to defeat the 1st candidate. Based on these assignments, we find a perfect matching on the manipulation matrix (not shown), as described in Theorem 7. This gives the following votes for the manipulators:{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula} In Table 12, we show the operation of Average Fit. At this point, the algorithm has yet to place a 2, but all candidates have gap of at most 1, so it has failed to find a manipulation.  □
     </paragraph>
    </section>
   </appendices>
  </root>
 </body>
</html>