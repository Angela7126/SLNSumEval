<?xml version="1.0" encoding="utf-8"?>
<html>
 <body>
  <root>
   <title>
    Variable symmetry breaking in numerical constraint problems.
   </title>
   <content>
    <section label="1">
     <section-title>
      Introduction
     </section-title>
     <paragraph>
      Numerical constraint solvers are nowadays beginning to be competitive and even to outperform, in some cases, classical methods for solving systems of equations and inequalities over the reals. As a consequence, their application has raised interest in fields as diverse as neurophysiology and economics [2], biochemistry, crystallography, robotics [3] and, more generally, in those related to global optimization [4]. Symmetries naturally occur in many of these applications, and it is advisable to exploit them in order to reduce the search space and, thus, to increase the efficiency of the solvers.
     </paragraph>
     <paragraph>
      Numerical solvers follow the Branch&amp;Prune scheme, similarly to discrete constraint solvers: At each iteration, a sub-domain is selected, pruned according to the constraints, and then split into several sub-domains to be further explored. The main differences with discrete solvers are that (sub)domains being continuous only their boundaries are contracted, and that a sub-domain is declared to be a solution whenever it reaches some prescribed computational precision. Because of the resemblance of the solving processes, it is tempting to port symmetry breaking methods designed for discrete Constraint Satisfaction Problems (CSPs) to numerical ones.
     </paragraph>
     <paragraph>
      Considerable work on symmetry breaking has been done for discrete CSPs in the last decades [5], [6], [7]. Two main symmetry-breaking strategies have been pursued: 1) to devise specialized search algorithms that avoid symmetric portions of the search space [8], [9]; and 2) to add symmetry-breaking constraints (SBCs) that filter out redundant subspaces [10], [11]. Contrarily, there exists very little work on symmetry breaking for numerical problems. For cyclic variables permutations, an approach divides the initial space into boxes and eliminates symmetric ones before the solving starts [12]. SBCs have also been proposed, but only for either specific problems [13], [14] or specific symmetry classes [15], [16], [17], and often only partially breaking the considered symmetries.
     </paragraph>
     <paragraph>
      In this paper, we propose the first general SBCs for numerical constraint problems that (partially) break any variable symmetry. These SBCs take the form of simple binary inequalities of the form {a mathematical formula}xi≤xj where {a mathematical formula}xi and {a mathematical formula}xj are two distinct variables of the problem and {a mathematical formula}i&lt;j. Thus, at most {a mathematical formula}n(n−1)2 inequalities are generated to deal with any symmetry. They can be generated in polynomial time knowing a generator of the symmetry group, using classical group theory algorithms. Moreover we demonstrate that these SBCs are suitable and optimal for numerical problems, i.e., they enclose tightly an asymmetric search subspace and thus have a better, or similar, pruning power than other SBCs.
     </paragraph>
     <paragraph>
      The outline of the paper is as follows: Section 2 provides the necessary background on numerical problems and symmetries; Section 3 introduces our SBCs as a relaxation of the lexicographic-ordering based SBCs [18] widely used by the discrete CSP community, and it also establishes the good properties of this relaxation; Section 4 introduces the state-of-the-art and compares our SBCs to existing alternatives; Section 5 assesses the practical interest of our SBCs on a benchmark of standard problems and analyzes the factors influencing their impact. Section 6 concludes the paper with future research directions.
     </paragraph>
    </section>
    <section label="2">
     <section-title>
      Principles of variable symmetry breaking
     </section-title>
     <paragraph>
      A CSP is defined as a triple {a mathematical formula}〈x,d,c〉, where {a mathematical formula}x=(x1,…,xn) is a list of variables, {a mathematical formula}d=(d1,…,dn) is a list of domains for the variables, and {a mathematical formula}c=(c1,…,cm) is a list of constraints. The focus of this paper is on numerical CSPs (NCSPs), whose variables are continuous, and thus domains are subsets of {a mathematical formula}R, typically represented as a set of intervals (box) x. To conform mathematical notations in use for numerical problems, the same symbols are used for variables and their valuations, i.e., x will often denote a point in {a mathematical formula}Rn. For the same reason, we adopt a functional notation for the evaluation of a constraint {a mathematical formula}ci:Rn→{true,false} and for the evaluation of the conjunction of the constraints {a mathematical formula}c:Rn→{true,false}. Hence a solution of a NCSP is a point {a mathematical formula}x∈x that satisfies {a mathematical formula}c(x), and its solution set is {a mathematical formula}χ={x∈x:c(x)}.
     </paragraph>
     <paragraph>
      A bijective function {a mathematical formula}s:Rn→Rn is a symmetry of a (N)CSP if it maps solutions to solutions,{sup:1} i.e., for any {a mathematical formula}x∈x such that {a mathematical formula}c(x)=true, {a mathematical formula}s(x)∈x and {a mathematical formula}c(s(x))=true. We say x and {a mathematical formula}s(x) are symmetric points and, in case they are solutions, symmetric solutions. The symmetries of a (N)CSP form a group for the composition law. This symmetry group is denoted Σ in the following. Though the identity function is forcibly part of Σ, since it is a trivial symmetry of any CSP, it is not considered in the following as it is irrelevant to break.
     </paragraph>
     <paragraph>
      In this paper, we consider only symmetries that are permutations of variables. Let {a mathematical formula}Sn be the set of all permutations of {a mathematical formula}{1,…,n}. The image of i by a permutation σ is denoted by {a mathematical formula}iσ. Any permutation σ is completely defined by the image of each integer in {a mathematical formula}{1,…,n}, and it is usually described as a vector {a mathematical formula}[1σ,2σ,…,nσ]. A symmetry s is a variable symmetry iff there is a permutation {a mathematical formula}σ∈Sn such that for any point {a mathematical formula}x∈x, {a mathematical formula}s(x)=(x1σ,…,xnσ). We identify such symmetries with their associated permutations and denote both by σ in the following. Consequently, the group of variable symmetries of a CSP is isomorphic to a permutation subgroup of {a mathematical formula}Sn, which are both identified and denoted by Σ in the following. The application of a variable symmetry σ to a point x is denoted by {a mathematical formula}xσ, this notation being extended to sets (discrete or continuous) of points {a mathematical formula}X⊆x by {a mathematical formula}Xσ={xσ:x∈X}.
     </paragraph>
     <paragraph label="Example 1">
      The 3-cyclic roots problem consists in finding all {a mathematical formula}(x1,x2,x3)∈R3 satisfying {a mathematical formula}(x1+x2+x3=0)∧(x1x2+x2x3+x3x1=0)∧(x1x2x3=1). This problem has six variable symmetries (including identity):{a mathematical formula} i.e., {a mathematical formula}Σ=S3. Indeed, all the variables are syntactically interchangeable within all the constraints by the commutativity laws of product and sum.
     </paragraph>
     <paragraph>
      We can define the symmetry class of any point {a mathematical formula}x∈x as the set of the images {a mathematical formula}s(x) for all the symmetries s of the problem. In the case of variable symmetries, it can be noted {a mathematical formula}xΣ={xσ:σ∈Σ}. Provided that the domain satisfy the symmetries, i.e. {a mathematical formula}x=xσ for all {a mathematical formula}σ∈Σ, being in the same class is an equivalence relation and thus the symmetry classes form a partition of x.
     </paragraph>
     <paragraph>
      The symmetries of a (N)CSP are broken when a single representative in each symmetry class is retained. To this end, it is possible to add symmetry-breaking constraints (SBCs) which exclude all but a single representative in each symmetry class [5], [7], [20]. Crawford et al. [18] proposed lexicographic ordering constraints (lex) to address variable symmetry breaking. Recall that given x and y in {a mathematical formula}Rn, the lexicographic order is defined inductively as:{a mathematical formula} where, given a list {a mathematical formula}z=(z1,z2,…,zn), {a mathematical formula}zi:j denotes the sublist {a mathematical formula}(zi,zi+1,…,zj).
     </paragraph>
     <paragraph>
      Given a variable symmetry σ, Crawford et al. define the corresponding SBC{a mathematical formula} Intuitively, this constraint imposes a total order on the symmetric points, hence allowing to retain a single one w.r.t. a given symmetry σ. One such constraint is thus imposed for each of the symmetries of a problem in order to break them all, yielding the complete symmetry-breaking constraint{a mathematical formula}
     </paragraph>
     <paragraph label="Example 2">
      The lex constraints for the symmetries of the 3-cyclic-roots problem are:{a mathematical formula}{a mathematical formula}{a mathematical formula}
     </paragraph>
     <paragraph>
      lex constraints can be efficiently propagated over finite domains (e.g., [21]). However, this approach has the critical drawback that the number of symmetries in Σ can be factorial in the number of variables even in some simple situations (e.g., {a mathematical formula}|Sn|=n!). While in general the corresponding SBCs cannot be simplified to a polynomial number of constraints (in line with the NP-hardness of symmetry breaking proved in [18] and further explored in [20]), simplifying specific symmetry groups into tractable ones has been the topic of several works in the symmetry breaking literature (e.g., [18], [11], [22]). For instance, Crawford et al. noted that when {a mathematical formula}Σ=Sn, the n! terms in {a mathematical formula}lexΣ can be simplified to the {a mathematical formula}n−1 inequalities {a mathematical formula}⋀i∈{1,…,n−1}xi≤xi+1.
     </paragraph>
    </section>
    <section label="3">
     <section-title>
      Symmetry-breaking constraints for numerical CSPs
     </section-title>
     <paragraph>
      In this section we first explain the reason why lex SBCs are impractical for numerical CSPs. We also point out the intuition behind the partial SBCs we introduce, and we discuss their properties in the rest of the section.
     </paragraph>
     <section label="3.1">
      lex intractability and impracticality for NCSPs
      <paragraph>
       The first and foremost reason why lex SBCs are intractable, whether domains are continuous or discrete, is because they can be overwhelmingly numerous. However, even when the symmetry group is of reasonable size or when lex SBCs can be reduced to a reasonable number, they remain impractical in the context of NCSPs.
      </paragraph>
      <paragraph>
       A geometric interpretation of lex constraints highlights their complexity and indicates the intuition behind the relaxation we propose in the next section. Let us denote {a mathematical formula}Lσ(x) (resp. {a mathematical formula}LΣ(x)) the solution set of a lex constraint breaking a symmetry σ (resp. a whole symmetry group Σ) on a domain x, i.e.,{a mathematical formula}{a mathematical formula} For convenience, we will omit the domain x when it spans the whole set of real vectors {a mathematical formula}Rn.
      </paragraph>
      <paragraph>
       Breaking the symmetries of a NCSP by adding the SBC {a mathematical formula}lexΣ(x) to its constraints allows restricting its search space to {a mathematical formula}LΣ(x), hence retaining only one solution by symmetric class. We first remark that {a mathematical formula}lexΣ(x) being the conjunction of all {a mathematical formula}lexσ(x), {a mathematical formula}LΣ(x) is thus the intersection of all {a mathematical formula}Lσ(x), i.e.,{a mathematical formula} Second, the recursive definition of the lexicographic relation in Equation (2) indicates that the form of each {a mathematical formula}lexσ(x) is the union of 1) an open half-space ({a mathematical formula}x1&lt;x1σ) and 2) a portion of its boundary “plane” ({a mathematical formula}x1=x1σ), this portion being itself recursively defined similarly as the union of 3) a half-plane ({a mathematical formula}x2&lt;x2σ) and 4) a portion of its boundary “line”, etc. Hence, the structure of {a mathematical formula}Lσ(x) becomes more and more complicated as the number of variables increases.
      </paragraph>
      <paragraph label="Example 3">
       When {a mathematical formula}n=2 the only possible symmetry is the interchangeability of {a mathematical formula}x1 and {a mathematical formula}x2, i.e., permutation {a mathematical formula}[2,1]. It yields the lex constraint{a mathematical formula} which boils down to {a mathematical formula}x1≤x2, i.e., the union of 1) the open half-plane {a mathematical formula}x1&lt;x2 with 2) the line {a mathematical formula}x1=x2, as depicted in Fig. 1.Things get more complicated when {a mathematical formula}n=3. Consider for instance permutation {a mathematical formula}[2,3,1] and the corresponding lex SBC{a mathematical formula} which simplifies to{a mathematical formula} i.e., the union of 1) the open half-space {a mathematical formula}(x1&lt;x2) with 2) the open half-plane {a mathematical formula}(x1=x2∧x2&lt;x3) and with 3) the line {a mathematical formula}(x1=x2=x3) as depicted in Fig. 2.Though it becomes impossible to depict the geometry of a lex constraint when {a mathematical formula}n&gt;3, one can easily imagine its general structure, and thus its complexity in the numerical context.
      </paragraph>
      <paragraph>
       As a consequence, the geometric shape of {a mathematical formula}LΣ(x) is the intersection of a (potentially factorial) number of complex asymmetric subspaces {a mathematical formula}Lσ(x), resulting in a very complex subspace having the form of a polyhedral cone, whose essential complexity lies on the boundaries while its main part is the simple intersection of open half-spaces {a mathematical formula}xi&lt;xj, whose number is at most {a mathematical formula}n(n−1)2 in dimension n.
      </paragraph>
      <paragraph label="Example 4">
       {a mathematical formula}LC3 for the cyclic symmetry group in 3D is the intersection of two subspaces corresponding to {a mathematical formula}lex[2,3,1] and {a mathematical formula}lex[3,1,2], as depicted in Fig. 3.
      </paragraph>
      <paragraph>
       In conclusion, the complexity of lex SBCs,{sup:2} which makes them impractical for NCSPs, lays in the boundaries of their solution sets while these boundaries are somehow negligible in numerical domains (this will be formalized in Subsection 3.3). In the following subsection, we propose a relaxation of lex constraints that consists in accepting all their boundaries, leading to partial SBCs much better suited to NCSPs.
      </paragraph>
     </section>
     <section label="3.2">
      Definition of the rlex partial SBCs
      <paragraph>
       Partial symmetry-breaking constraints (PSBCs) can be defined by considering a tractable subset of complete symmetry-breaking constraints [22]. The key idea of our approach is instead to simplify every lex SBC by considering the closure of the geometric space it defines, i.e. the main open half-space together with its boundary. The main half-space of an SBC {a mathematical formula}lexσ corresponds to the inequality {a mathematical formula}xσˆ&lt;xσˆσ, where {a mathematical formula}σˆ is the smallest integer in {a mathematical formula}{1,…,n} such that {a mathematical formula}σˆ≠σˆσ (e.g., for {a mathematical formula}σ=[1,2,3,5,4] we have {a mathematical formula}σˆ=4). Note that this integer is well-defined for all symmetries except the identity permutation, which cannot be broken and is thus disregarded in the following. We define the relaxedlex constraint by{a mathematical formula} Accordingly, the acceptance of x by the whole set of rlex constraints is{a mathematical formula}
      </paragraph>
      <paragraph>
       The following proposition shows that this is indeed a relaxation of lex, and that it can thus be used as a PSBC.
      </paragraph>
      <paragraph label="Proposition 1">
       {a mathematical formula}lexσ(x)⟹rlexσ(x).
      </paragraph>
      <paragraph label="Proof">
       Since {a mathematical formula}i&lt;σˆ implies {a mathematical formula}i=iσ, we have {a mathematical formula}xi=xiσ for all {a mathematical formula}i&lt;σˆ. Therefore {a mathematical formula}lexσ(x), which is {a mathematical formula}x⪯lexxσ, is actually equivalent to {a mathematical formula}xσˆ:n⪯lexxσˆ:nσ, i.e., {a mathematical formula}(xσˆ&lt;xσˆσ)∨((xσˆ=xσˆσ)∧(xσˆ+1:n⪯lexxσˆ+1:nσ)), which logically implies {a mathematical formula}(xσˆ&lt;xσˆσ)∨(xσˆ=xσˆσ), that is {a mathematical formula}rlexσ(x). □
      </paragraph>
      <paragraph>
       Similarly to what we have done for lex constraints, we define the portions of a domain x satisfying rlex constraints as{a mathematical formula}{a mathematical formula} For convenience, we will omit the domain x when it spans the whole set of real vectors {a mathematical formula}Rn.
      </paragraph>
      <paragraph label="Example 5">
       The rlex constraint for the cyclic symmetry groups {a mathematical formula}C2 is just {a mathematical formula}rlex[2,1]:=x1≤x2. That for {a mathematical formula}C3 are {a mathematical formula}rlex[2,3,1]:=x1≤x2 and {a mathematical formula}rlex[3,1,2]:=x1≤x3. The corresponding domains are depicted in Fig. 4, which illustrates their relation to the corresponding lex constraints (see Fig. 1, Fig. 3 above).Also, the rlex constraints corresponding to Example 2 are the two inequalities {a mathematical formula}x1≤x2 and {a mathematical formula}x2≤x3 ({a mathematical formula}x1≤x3 also appears, but is redundant).
      </paragraph>
     </section>
     <section label="3.3">
      Properties of the rlex PSBCs
      <paragraph>
       The rlex PSBCs are now compared to the lex SBCs. We first show in Subsection 3.3.1 that rlex are suitable for NCSPs. We also provide a detailed analysis of the difference between rlex PSBCs and lex SBCs in Subsection 3.3.2, indicating that the former are in fact complete SBCs, just as powerful as the latter, in many cases.
      </paragraph>
      <section label="3.3.1">
       On the suitability of rlex constraints for NCSPs
       <paragraph>
        We now establish some properties of the rlex PSBCs that make them suitable for breaking variable symmetries in NCSPs, i.e., both reasonable in number whatever the symmetry group, natively handleable by numerical constraint solvers, and optimal in terms of pruning capabilities.
       </paragraph>
       <section>
        <section-title>
         Number of constraints and their generation
        </section-title>
        <paragraph>
         There are at most {a mathematical formula}n(n−1)2rlex constraints whatever the symmetry group since they all have the form {a mathematical formula}xi≤xj with {a mathematical formula}i&lt;j. This number can even be reduced to {a mathematical formula}n−1 using transitivity reduction [23] and according to Theorem 4 in [24].
        </paragraph>
        <paragraph>
         The naive way of generating rlex PSBCs is to generate all lex SBCs and relax them. However, this entails generating all lex SBCs, which is intractable.
        </paragraph>
        <paragraph>
         The very same indexes of variables are used in [24] where SBCs of the form {a mathematical formula}xσˆ&lt;xσˆσ are derived for discrete CSPs including an alldiff global constraint. In that paper, a polynomial-time algorithm is proposed to generate these variables index, based on Shreier–Sims group theory algorithm [25]. This method can be used to generated rlex constraints as well.
        </paragraph>
        <paragraph>
         For simplicity, we recall this generation algorithm{sup:3} here:
        </paragraph>
        <list>
         <list-item>
          Input:groupG(actingonthesetofvariableindices)Output:listIofvariableindicespairsI=[]whileG.order()!=1:x=G.smallest_moved_point()foryinG.orbit(x):I+=[(x,y)]G=G.stabilizer(x)
         </list-item>
        </list>
        <paragraph>
         where function smallest_moved_point returns the smallest index {a mathematical formula}σˆ of all permutations {a mathematical formula}σ∈G and functions orbit and stabilizer compute the corresponding classical group theory elements.
        </paragraph>
        <paragraph>
         The relationship between rlex PSBCs and the SBCs proposed in [24] is further investigated in Subsection 4.1.
        </paragraph>
       </section>
       <section>
        <section-title>
         Pruning optimality for numerical solvers
        </section-title>
        <paragraph>
         At the heart of the unsuitability of lex constraints lies the open-set nature of the subspace they delimit. Numerical constraint solvers based on intervals{sup:4} cannot take advantage of the difference between the subspace defined by the problem constraints and its closure. We now prove that rlex constraints define just the closure of the subspace defined by lex constraints, which implies that numerical constraint solvers cannot distinguish lex and rlex constraints in general.{sup:5}
        </paragraph>
        <paragraph label="Proposition 2">
         {a mathematical formula}RΣ=cl(LΣ).
        </paragraph>
        <paragraph label="Proof">
         Consider the interior and closure sets of the subspace defined by a single lex constraint. Both {a mathematical formula}int(Lσ)={x∈Rn:xσˆ&lt;xσˆσ} and {a mathematical formula}cl(Lσ)={x∈Rn:xσˆ≤xσˆσ}=Rσ obviously hold for any permutation σ. By definition, {a mathematical formula}RΣ=∩σ∈ΣRσ and {a mathematical formula}LΣ=∩σ∈ΣLσ, therefore {a mathematical formula}RΣ⊇cl(LΣ) is a direct consequence of the property that the closure of an intersection is a subset of the intersection of the closures. For the reverse inclusion, note that {a mathematical formula}y=(1,2,3,4,…,n)∈int(LΣ), and consider an arbitrary {a mathematical formula}x∈RΣ. For each {a mathematical formula}σ∈Σ we thus have {a mathematical formula}yσˆ&lt;yσˆσ and {a mathematical formula}xσˆ≤xσˆσ. For {a mathematical formula}λ∈[0,1], define {a mathematical formula}zλ=λx+(1−λ)y, and note that for {a mathematical formula}0≤λ&lt;1 we have both {a mathematical formula}λxσˆ≤λxσˆσ and {a mathematical formula}(1−λ)yσˆ&lt;(1−λ)yσˆσ, which implies {a mathematical formula}zσˆλ&lt;zσˆσλ and thus {a mathematical formula}zλ∈int(Lσ). As this holds for each {a mathematical formula}σ∈Σ, we conclude that {a mathematical formula}zλ∈int(LΣ). As a consequence, {a mathematical formula}x=limλ→1⁡zλ∈cl(int(LΣ))⊆cl(LΣ), which proves the reverse inclusion. □
        </paragraph>
        <paragraph>
         Finally, we remark that rlex constraints must be more efficient to propagate than lex constraints. Indeed, they are just binary inequalities while lex constraints involve all the variables of the symmetries in a large combination of logical operations. Hence, pruning rlex constraints requires no specific algorithm since simple non-strict inequalities are natively handled by most numerical solvers; and their propagation, following the AC3-like fix-point process in use in most numerical constraint solvers, triggers only constraints depending on two variables at most instead of n at most (entailing all constraints are enqueued).
        </paragraph>
       </section>
       <section>
        <section-title>
         Search-space reduction factor
        </section-title>
        <paragraph>
         In the context of NCSPs, the size of the search space cannot be measured using the number of elements it contains, since there are infinitely many elements in any continuous set S. Instead, we can quantify it using its hypervolume,{sup:6} denoted volS. For example, the search space {a mathematical formula}([−1,1],[−1,1],[−1,1]) has a (hyper)volume equal to 8, while its half {a mathematical formula}([0,1],[−1,1],[−1,1]) has a (hyper)volume equal to 4.
        </paragraph>
        <paragraph>
         The aim of this section is to study the hypervolume reduction of the search space provided by the rlex constraints in comparison to the corresponding lex constraints. As rlex is a relaxation of lex, we have {a mathematical formula}LΣ(x)⊆RΣ(x). In fact, we have a more accurate relationship between these sets: Informally, any solution accepted by some {a mathematical formula}rlexσ constraint and rejected by the corresponding {a mathematical formula}lexσ constraint has to have at least two equal components, namely {a mathematical formula}xσˆ=xσˆσ. We define the set of vectors that have at least two equal components as {a mathematical formula}H:={x∈Rn:∃(i,j),i≠j∧xi=xj}, and note that {a mathematical formula}volH=0 since it is only composed of (hyper)planes, i.e., flat sets. We therefore see that {a mathematical formula}lexΣ and {a mathematical formula}rlexΣ solution sets have the same hypervolume, which is proved in the following proposition.
        </paragraph>
        <paragraph label="Proof">
         {a mathematical formula}volLΣ(x)=volRΣ(x).Since {a mathematical formula}LΣ(x)⊆RΣ(x) we have {a mathematical formula}volLΣ(x)≤volRΣ(x). Now note that {a mathematical formula}x∈RΣ(x)∧x∉LΣ(x) obviously implies {a mathematical formula}x∈H, so {a mathematical formula}RΣ(x)⊆LΣ(x)∪H and hence using the rule for measuring unions of sets {a mathematical formula}volRΣ(x)≤volLΣ(x)+volH−vol(LΣ(x)∩H). Since {a mathematical formula}volH=0, {a mathematical formula}vol(LΣ(x)∩H)=0 and we obtain {a mathematical formula}volRΣ(x)≤volLΣ(x).  □
        </paragraph>
        <paragraph label="Proof">
         The following proposition quantifies the reduction performed by the lex constraints, therefore by rlex constraints as well by Proposition 3, in term of hypervolume. Provided the domainxis symmetric, i.e.{a mathematical formula}x=xσfor all{a mathematical formula}σ∈Σ,{a mathematical formula}We suppose that {a mathematical formula}|Σ|≥2, otherwise {a mathematical formula}Σ={id} and the statement is trivial. First note that {a mathematical formula}volLΣ(x)=vol(LΣ(x)σ) because the map {a mathematical formula}x→xσ is an isometry and thus preserves the measure. Now note that for {a mathematical formula}x∈LΣ(x) and {a mathematical formula}σ,ϕ∈Σ, {a mathematical formula}σ≠ϕ obviously implies {a mathematical formula}xσ≠xϕ or {a mathematical formula}x∈H (indeed if {a mathematical formula}xσ=xϕ then {a mathematical formula}x=xϕσ−1 and hence {a mathematical formula}x∈H). Therefore, {a mathematical formula}LΣ(x)σ∩LΣ(x)ϕ⊆H. Recalling that {a mathematical formula}volH=0, we obtain using the rule for measuring unions of sets{a mathematical formula} It remains to prove that {a mathematical formula}⋃σ∈ΣLΣ(x)σ=x. Since the symmetry classes form a partition of x and {a mathematical formula}LΣ(x) contains exactly one representative of each symmetry class, we have{a mathematical formula} The proof is concluded by commuting the two unions.  □
        </paragraph>
        <paragraph>
         By Proposition 3, we can conclude that the same hypervolume reduction is enforced by the rlex constraints. In other words, rlex and lex constraints reduce the search space to a portion with identical hypervolume, the difference lying only on the boundaries of the remaining search space. The rlex PSBCs are optimal in this regard.
        </paragraph>
       </section>
      </section>
      <section label="3.3.2">
       A detailed look at the difference between rlex and lex filtering powers
       <paragraph>
        lex are always SBCs while rlex are PSBCs, hence the former have in principle a superior filtering power than the latter. However, in a continuous context, rlex act as SBCs in a set of points occupying the whole domain volume. Indeed, we have already explained that a point retained by rlex and not retained by lex must belong to the set H. Note also that all points of a class lies either in H or in {a mathematical formula}H‾. Hence rlex are SBCs in {a mathematical formula}H‾. Since H has no volume, the set {a mathematical formula}H‾ for which rlex can be guaranteed to be SBCs has the same volume as the domain. At the end of this section we will further conclude that rlex are also SBCs in a non-empty subset of H.
       </paragraph>
       <paragraph>
        The number of symmetric points of x satisfying rlex constraints is {a mathematical formula}|RΣ(xΣ)|, and we denote by {a mathematical formula}|xΣ|=|{xσ:σ∈Σ}| the number of different elements in the symmetry class of x. Both indicators are indeed properties of the symmetry class of the point rather than properties of the point itself. The pruning power of a PSBC on the symmetry class of a point x is optimal when {a mathematical formula}|RΣ(xΣ)|=1 and {a mathematical formula}|xΣ|=|Σ|. Indeed, in this case the PSBC acts as an SBC ({a mathematical formula}|RΣ(xΣ)|=1) and allows the greatest possible reduction ({a mathematical formula}|RΣ(xΣ)||xΣ|=1|Σ|). By abuse of language, we say a point x is rlex-optimal if it belongs to an optimally reduced symmetry class. Therefore, any point x in {a mathematical formula}H‾ is rlex-optimal since rlex being SBCs means that {a mathematical formula}|RΣ(xΣ)|=1, and {a mathematical formula}x∈H‾ means x does not have equal components, thus implying that all its permutations are different, i.e., {a mathematical formula}|xΣ|=|Σ|.
       </paragraph>
       <paragraph>
        With a more detailed analysis we will show that rlex-optimality, and therefore the fact rlex perform as SBCs, can be guaranteed for a set larger than {a mathematical formula}H‾, i.e., even in a subset of H. At the same time we will characterize completely rlex-optimal points.
       </paragraph>
       <paragraph>
        From a topological point of view, we can divide the subspace {a mathematical formula}RΣ(x) into two sets: interior points and frontier points. Interior points are those satisfying the strict part of the inequalities of rlex (i.e., points satisfying the constraints in [24]). Frontier points are those for which the equality in some of the rlex holds. The main result we will prove in this subsection is that interior points and optimal points are coincident.
       </paragraph>
       <paragraph label="Proposition 5">
        For this purpose, we will rely mainly on an intermediate characterization, Proposition 6, stating that the class of a point is optimal if and only if every symmetry of the point but one is rejected by rlex. Another interesting result in the way is Proposition 7: any symmetry of an interior point (except identity) will be rejected by rlex. Combined with the former it implies directly the main result, Proposition 8. The following statement is required by Proposition 6: All elements of{a mathematical formula}xΣare generated with the same number of symmetries of Σ, i.e.,{a mathematical formula}|{σ∈Σ:xσ=y}|=|{σ∈Σ:xσ=z}|,∀y,z∈xΣ.
       </paragraph>
       <paragraph label="Proof">
        Let {a mathematical formula}Ξ={σ∈Σ:xσ=y} and {a mathematical formula}ϒ={σ∈Σ:xσ=z} and let {a mathematical formula}σ1∈Ξ, {a mathematical formula}σ2∈ϒ be elements of these sets, i.e., {a mathematical formula}xσ1=y, {a mathematical formula}xσ2=z. Then {a mathematical formula}ϕ=σ1−1⋅σ2 is a permutation that transforms y into z, because {a mathematical formula}yϕ=yσ1−1⋅σ2=(xσ1)σ1−1⋅σ2=xσ2=z. As a consequence, {a mathematical formula}∀σ∈Ξ we have {a mathematical formula}xσ⋅ϕ=yϕ=z. Therefore, every permutation in Ξ ϕ belongs to ϒ. The application {a mathematical formula}fϕ(σ)=σϕ from Σ to Σ is known to be bijective, hence it must also be bijective in the restricted Ξ domain, which implies {a mathematical formula}|Ξϕ|=|Ξ|. Therefore ϒ has at least {a mathematical formula}|Ξ| symmetries, {a mathematical formula}|ϒ|≥|Ξ|. Inverting the roles of y and z and those of ϒ and Ξ at the beginning of the proof, we get {a mathematical formula}|ϒ|≤|Ξ|, leading to {a mathematical formula}|ϒ|=|Ξ|.  □
       </paragraph>
       <paragraph>
        In the next step we characterize optimal and non-optimal classes with the following proposition.
       </paragraph>
       <paragraph label="Proposition 6">
        The class{a mathematical formula}xΣof a point{a mathematical formula}x∈Rnis optimal, i.e.,
       </paragraph>
       <list>
        <list-item label="1.">
         {a mathematical formula}|xΣ|=|Σ|and{a mathematical formula}|RΣ(xΣ)|=1if and only if
        </list-item>
        <list-item label="2.">
         {a mathematical formula}∃σ1∈Σ:rlexΣ(xσ1)=trueand{a mathematical formula}∀σ2∈Σ∖σ1,rlexΣ(xσ2)=false.
        </list-item>
       </list>
       <paragraph label="Proof">
        We first prove {a mathematical formula}1⇒2 by contradiction: suppose {a mathematical formula}∃σ1,σ2,σ1≠σ2 such that {a mathematical formula}rlexΣ(xσ1)=rlexΣ(xσ2)=true. There are two possibilities. If {a mathematical formula}xσ1=xσ2 then, since the two symmetries are different, we have {a mathematical formula}|xΣ|&lt;|Σ| and we have arrived to a contradiction. In the opposite case, {a mathematical formula}xσ1≠xσ2, since both symmetries are accepted, we have {a mathematical formula}|RΣ(xΣ)|&gt;1, which is again a contradiction.Second, we prove {a mathematical formula}2⇒1: since {a mathematical formula}σ1 is the only symmetry accepted by rlex, obviously {a mathematical formula}|RΣ(xΣ)|=1. For the other statement, we note that {a mathematical formula}|xΣ|=|Σ| is equivalent to {a mathematical formula}xσ1≠xσ2∀σ1,σ2∈Σ,σ1≠σ2. Since {a mathematical formula}σ1 is the only permutation of x that is accepted by rlex, no other permutation can yield the same result as {a mathematical formula}σ1. Therefore, {a mathematical formula}|{σ∈Σ:xσ=xσ1}|=1. By Proposition 5, this leads to {a mathematical formula}|{σ∈Σ:xσ=xϕ}|=1∀ϕ∈Σ, which implies that each {a mathematical formula}ϕ∈Σ yields a result different from all the other permutations in the group, i.e., {a mathematical formula}xσ1≠xσ2∀σ1,σ2∈Σ,σ1≠σ2, as was required.  □
       </paragraph>
       <paragraph>
        As a consequence, the class of x is non-optimal iff {a mathematical formula}∃σ1,σ2,σ1≠σ2 such that {a mathematical formula}rlexΣ(xσ1)=rlexΣ(xσ2)=true.
       </paragraph>
       <paragraph label="Proof">
        x is interior{a mathematical formula}⇒∀σ∈Σ∖Id,rlexΣ(xσ)=false.Let's define {a mathematical formula}x≺lexy as in (2), but being equivalent for {a mathematical formula}n=1 to {a mathematical formula}(x1&lt;y1). That is, {a mathematical formula}x≺lexy≡(x⪯lexy)∧(x≠y) and {a mathematical formula}y⪯lexx≡¬(x≺lexy). If a point x is interior then {a mathematical formula}xσˆ&lt;xσˆσ∀σ∈Σ∖Id. This means that {a mathematical formula}x≠xσ∀σ∈Σ∖Id, but at the same time {a mathematical formula}x⪯lexxσ, since x satisfies rlex. Thus, if x is interior, {a mathematical formula}x≺lexxσ∀σ∈Σ∖Id. Now we investigate whether {a mathematical formula}xσ satisfies rlex{a mathematical formula}∀σ∈Σ∖Id. When the rlex associated to {a mathematical formula}σ−1 is applied to {a mathematical formula}xσ it results in {a mathematical formula}xσ⪯lex(xσ)σ−1≡xσ⪯lexx. But, because x is interior, {a mathematical formula}x≺lexxσ, which falsifies that rlex. Therefore, {a mathematical formula}xσ does not satisfy rlex{a mathematical formula}∀σ∈Σ∖Id.  □
       </paragraph>
       <paragraph>
        Let {a mathematical formula}IΣ denote the set of pairs of variable indexes involved in an rlex constraint, i.e., {a mathematical formula}IΣ:={(i,j):xi≤xjis aconstraintinrlexΣ}. The next proposition is the main result of this subsection: for a point, being interior is equivalent to being optimal.
       </paragraph>
       <paragraph label="Proposition 8">
        For any{a mathematical formula}x∈xsuch that{a mathematical formula}rlexΣ(x)=true(i.e., for any{a mathematical formula}x∈RΣ(x)), x is interior ⇔ the class{a mathematical formula}xΣis optimal.
       </paragraph>
       <paragraph label="Proof">
        Interior ⇒ optimal: Applying Proposition 7 to x we obtain the conditions for Proposition 6 to be applied with {a mathematical formula}σ1=Id.Optimal ⇒ interior: The statement “in an optimal class the member retained by rlex is interior” is equivalent to “if a point is frontier, its class is non-optimal”. We will prove the latter statement. So we assume that x is a frontier point, i.e., {a mathematical formula}∃(i,j)∈IΣ:xi=xj. To prove the non-optimality of {a mathematical formula}xΣ it is enough to show that {a mathematical formula}∃σ∈Σ∖Id such that {a mathematical formula}rlexΣ(xσ)=true. Let {a mathematical formula}δ:=min⁡{|xr−xs|:xr≠xs}/2, i.e., half of the smallest non-null difference between any two components in x, and {a mathematical formula}z=(z1,…,zn) such that {a mathematical formula}zk=xk, if {a mathematical formula}k≠i and {a mathematical formula}zk=xk+δ, if {a mathematical formula}k=i.Since {a mathematical formula}zi&gt;zj and {a mathematical formula}(i,j)∈IΣ, z must be rejected by rlex. However, at least one element of its class must by accepted by rlex. Thus, {a mathematical formula}∃σ∈Σ∖Id such that {a mathematical formula}rlexΣ(zσ)=true. We can show that this same permutation σ of x is also accepted by {a mathematical formula}rlexΣ. Let {a mathematical formula}E(i):={r:xr=xi}. We can divide the set of {a mathematical formula}rlexΣ constraints into two subsets. The first one corresponds to {a mathematical formula}{(k,l)∈IΣ:kσ∈E(i)∧lσ∈E(i)}, and for the elements of this set we know that {a mathematical formula}xkσ=xlσ and, therefore, the corresponding constraint for {a mathematical formula}xσ, {a mathematical formula}xkσ≤xlσ, is satisfied. By construction of z, it is easy to verify that for any {a mathematical formula}(s,r) such that {a mathematical formula}r∉E(i) or {a mathematical formula}s∉E(i), if {a mathematical formula}zr≤zs we have also {a mathematical formula}xr≤xs. Therefore, in the remaining second set of constraints, {a mathematical formula}{(k,l)∈IΣ:kσ∉E(i)∨lσ∉E(i)}, the fact that {a mathematical formula}zσ is accepted by rlex means that {a mathematical formula}zkσ≤zlσ, which in turn implies that {a mathematical formula}xkσ≤xlσ. The conclusion is that all {a mathematical formula}rlexΣ constraints are satisfied at {a mathematical formula}xσ and at x, thus its class is not optimal. □
       </paragraph>
       <paragraph label="Example 6">
        The 4-cyclic roots problem has a formulation similar to that of Example 1 in {a mathematical formula}R4. It has the following eight symmetries:{a mathematical formula} One can easily check that the non-redundant rlex for this set of permutations is {a mathematical formula}x1≤x2, {a mathematical formula}x1≤x3, {a mathematical formula}x1≤x4 and {a mathematical formula}x2≤x4. An interior point of the constrained space {a mathematical formula}RΣ(x) must satisfy {a mathematical formula}x1&lt;x2, {a mathematical formula}x1&lt;x3, {a mathematical formula}x1&lt;x4 and {a mathematical formula}x2&lt;x4, but can have some components equal, if they are not linked by the relaxed constraints. For instance, {a mathematical formula}(0.0,1.5,1.5,2.0) is an interior point even if {a mathematical formula}x2=x3.
       </paragraph>
       <paragraph>
        A consequence of the last proposition is that frontier points can be identified with non-optimal points. Thus, a frontier point must satisfy at least one of these conditions:
       </paragraph>
       <list>
        <list-item label="1.">
         It belongs to a class with less than {a mathematical formula}|Σ| members.
        </list-item>
        <list-item label="2.">
         Some of its symmetries are not broken by {a mathematical formula}rlexΣ.
        </list-item>
       </list>
       <paragraph>
        All the possibilities not forbidden by the above statement can be found in the set of frontier points:
       </paragraph>
       <list>
        <list-item label="•">
         Points whose symmetric points have not been completely eliminated by rlex, and having {a mathematical formula}|Σ| symmetries.For example, considering again the 4-cyclic roots problem, {a mathematical formula}(0.0,0.0,1.5,2.0) is a point with eight symmetries, which is retained by {a mathematical formula}rlexΣ jointly with one of its symmetric points, {a mathematical formula}(0.0,0.0,2.0,1.5).
        </list-item>
        <list-item label="•">
         Points for which all symmetries are broken and belonging to classes with less than {a mathematical formula}|Σ| members. For these classes, rlex are equivalent to lex.Examples for the 4-cyclic roots problem are the points {a mathematical formula}(0.0,1.0,0.0,1.0) and {a mathematical formula}(−2.0,5.0,5.0,5.0), which are the only members of their classes (of cardinality two and four, respectively) in the constrained subspace.
        </list-item>
        <list-item label="•">
         Points that belong to classes with less than {a mathematical formula}|Σ| members for which symmetries are not completely broken.An example for the 4-cyclic roots problem is {a mathematical formula}(−5.0,−5.0,2.0,−5.0), a point of a four-members class that has two representatives in the constrained subspace, namely the same point and {a mathematical formula}(−5.0,−5.0,−5.0,2.0).
        </list-item>
       </list>
       <paragraph>
        In sum, the frontier of the constrained subspace {a mathematical formula}RΣ(x) is the union of two non-disjoint sets of points belonging to classes with either less than {a mathematical formula}|Σ| members, or whose symmetries have not been entirely broken.
       </paragraph>
       <paragraph>
        Finally we want to remark that the SBC character of rlex is not limited to {a mathematical formula}H‾, or even to interior points, a superset of {a mathematical formula}H‾. Let's outline the situation in this respect. rlex always are, of course, SBCs in {a mathematical formula}H‾, which has the same volume as the domain. rlex are also SBCs for two subsets of H: a) Interior points belonging to H; b) Frontier points with all symmetries broken. Moreover, at least one of these subsets is not empty. If the set of rlex imposes a total order on the variables, they are SBCs in the whole domain including the set of frontier points, which coincides with H (because in this case rlex and lex are equivalent) and, thus, the set in b) is not empty. If rlex do not impose a total order then the set in a) is not empty, because there are interior points with variables not related by rlex constraints with equal values. The conclusion is that rlex are SBCs in a set always strictly greater than {a mathematical formula}H‾.
       </paragraph>
      </section>
     </section>
    </section>
    <section label="4">
     <section-title>
      Related work
     </section-title>
     <paragraph>
      The related work we present in this section concerns only variable symmetry breaking. It can be divided into two categories. The first one (Sections 4.1, 4.2 and 4.3) includes the simplified SBCs or PSBCs for general symmetries developed in the discrete constraint programing field. In general, they are not suited to numerical problems and they have never been applied to numerical solvers. The second group of related works (Sections 4.5 and 4.6) are those specifically addressing symmetries in numerical problems. They deal only with particular cases of symmetries and/or problems.
     </paragraph>
     <section label="4.1">
      <section-title>
       Puget's SBCs
      </section-title>
      <paragraph>
       In the case where a CSP contains an all-different constraint, Puget has proved in [24] that the lex SBCs can be drastically simplified. In fact, as shown in Subsection 3.1, the complexity of lex SBCs lays in their boundaries, which correspond to some equality between two distinct variables, while the presence of an all-different constraint implies that there is no solution on these boundaries. The comparison between Puget's SBCs and rlex PSBCs is summarized in Fig. 5: An arbitrary lex SBC is equivalent to Puget's {a mathematical formula}xσˆ&lt;xσˆσ SBC under the hypothesis that an all-different constraint is enforced, while this lex SBC implies the corresponding {a mathematical formula}xσˆ≤xσˆσrlex PSBC in general. Since the same indices are involved in both cases, the polynomial algorithm used by Puget to generate his constraints, which is based on the Shreier–Sims algorithm, can also be used for generating rlex PSBCs. Finally, although less natural than the derivation of rlex PSBCs given in Section 3.2, the following proposition shows that rlex PSBCs can be derived directly from Puget's SBCs. It is provided here for clarifying the relationship between Puget's SBCs and rlex PSBCs.
      </paragraph>
      <paragraph label="Proof">
       The fact Puget's constraints are SBCs in conjunction with an all-different constraint implies thatrlexare PSBCs in general.Consider a CSP with n variables and an arbitrary variable symmetry group Σ. Let x be an arbitrary variable instantiation. We are going to prove that the constraints {a mathematical formula}rlexΣ retain at least one element of {a mathematical formula}xΣ, hence that they are PSBCs, only using the fact that Puget's constraints are SBCs.Let {a mathematical formula}δ:=min⁡{|xi−xj|:xi≠xj}, i.e. the smallest non-null difference between any two components in x, and {a mathematical formula}y=(y1,…,yn) such that {a mathematical formula}yi=xi+iδn. Then all the components {a mathematical formula}yi are different. Indeed, {a mathematical formula}yi−yj=(xi−xj)+(i−j)δn is not zero for {a mathematical formula}i≠j, since when {a mathematical formula}xi−xj=0 the second summand is not null and, otherwise, we have {a mathematical formula}|i−j|&lt;n and {a mathematical formula}|i−j|δn&lt;δ≤|xi−xj|, which implies {a mathematical formula}(xi−xj)≠−(i−j)δn.Because y satisfies the all-different constraint, Puget's SBCs on Σ retain exactly one element of its symmetric class, i.e., there exist {a mathematical formula}σ∈Σ such that {a mathematical formula}yσ satisfies all Puget's constraints. We now show that {a mathematical formula}xσ satisfies all rlex constraints on Σ as well.Consider the application to {a mathematical formula}yσ of an arbitrary Puget's constraint {a mathematical formula}yiσ&lt;yjσ and suppose that the corresponding rlex constraint does not hold, i.e., {a mathematical formula}xiσ&gt;xjσ. By definition of y, Puget's constraint {a mathematical formula}yiσ&lt;yjσ is equivalent to {a mathematical formula}xiσ+iσδn&lt;xjσ+jσδn, which is equivalent to {a mathematical formula}xiσ−xjσ&lt;δjσ−iσn. Since we supposed {a mathematical formula}xiσ−xjσ&gt;0 and by definition of δ, we have {a mathematical formula}δ≤xiσ−xjσ&lt;δjσ−iσn, but because {a mathematical formula}jσ−iσ&lt;n this is contradictory.  □
      </paragraph>
     </section>
     <section label="4.2">
      <section-title>
       Jefferson's PSBCs
      </section-title>
      <paragraph>
       PSBCs in the discrete context follow two distinct principles: either (1) they completely break a subset of the symmetry group, or (2) they partially break the whole symmetry group.{sup:7} Jefferson and Petrie have investigated the two approaches in [22]: following principle (1), they use lex constraints to completely break random subsets of permutations, or the generators computed by Nauty [26], or the generators obtained using a modification of Nauty; following (2), they use rlex constraints (called ArityOne in their work and informally derived from Puget's SBCs) to partially break all symmetries. Their experiments show that, in the context of discrete CSP, rlex are quite efficient but not the best PSBCs: the lex constraints on the generators computed using their modification of Nauty appears more efficient in general. These conclusions cannot however be transposed to the continuous context, since approaches following principle (1) are not suitable for continuous solvers due to the impracticality of lex constraints in this context (see Section 3.1).
      </paragraph>
     </section>
     <section label="4.3">
      <section-title>
       Friedman's PSBCs
      </section-title>
      <paragraph>
       Friedman et al. introduce the notion of fundamental domains for (binary) integer programs [27] then for continuous domains [28]. They are defined as subsets F of the initial domain D such that {a mathematical formula}FΣ=D, i.e., F contains at least one representative of the symmetry class of any point by Σ in D. This definition applies in particular to {a mathematical formula}LΣ(D) and to {a mathematical formula}RΣ(D). They also define minimal fundamental domains as fundamental domains with no proper closed subset being itself a fundamental domain, a property which also applies to {a mathematical formula}LΣ(D) and to {a mathematical formula}RΣ(D) (see Proposition 2).
      </paragraph>
      <paragraph>
       Considering domains restricted to {a mathematical formula}[0,1]n for simplicity,{sup:8} they propose a method for constructing a fundamental domain {a mathematical formula}Fc considering an ordering vector{a mathematical formula}c∈Rn (where n is the number of variables of the problem){sup:9}:{a mathematical formula}
      </paragraph>
      <paragraph>
       It is easy to see that the constraint {a mathematical formula}fdσ:=cTx≤cTxσ is a PSBC for the permutation σ, and {a mathematical formula}fdΣ:=⋀σ∈Σfdσ is a PSBC for the symmetry group Σ.
      </paragraph>
      <paragraph>
       They introduce the universal ordering vector {a mathematical formula}cˆ=(2n−1,2n−2,…,2,1) and prove {a mathematical formula}Fcˆ is a minimal fundamental domain. We illustrate the universal fundamental domain for the cyclic symmetry groups {a mathematical formula}C2 and {a mathematical formula}C3 in Fig. 6.
      </paragraph>
      <paragraph>
       As this illustration clearly shows, {a mathematical formula}Fcˆ(Σ) is equivalent to {a mathematical formula}LΣ and to {a mathematical formula}RΣ in 2D (see Figs. 1 page 108 and 4a page 110). However, contrarily to the situation for discrete domains, where they are also equivalent for higher dimensions, {a mathematical formula}Fcˆ(Σ) is in general not directly related to {a mathematical formula}LΣ (nor to {a mathematical formula}RΣ) in higher dimension. For instance, Fig. 4d (page 110) shows {a mathematical formula}RC3([0,1]3), which is significantly different from {a mathematical formula}Fcˆ(C3) shown in Fig. 6d. Still, it has the property of being a (closed) minimal fundamental domain and thus benefits from the same properties as rlex constraints. For instance, the volume of {a mathematical formula}Fcˆ(C3) can be formally computed and shown to be equal to {a mathematical formula}13, which is the same volume of {a mathematical formula}RC3([0,1]3), computed using Proposition 3 and Proposition 4. We however consider rlex PSBCs superior to fd PSBCs for several reasons:
      </paragraph>
      <list>
       <list-item label="•">
        The number of {a mathematical formula}fdσ constraints is by essence equal to the number of symmetries σ in the considered symmetry group, i.e., up to factorial, while there is no obvious simplification of this intractable set of constraint;
       </list-item>
       <list-item label="•">
        There is no known efficient (poly-time) way of generating them;
       </list-item>
       <list-item label="•">
        Like lex constraints, each individual fd constraint involves all the variables and is thus costly to prune and propagate;
       </list-item>
       <list-item label="•">
        The coefficients in {a mathematical formula}cˆ induce a numerical instability in floating-point computations since adding {a mathematical formula}2n−1xn−1 and {a mathematical formula}x0 can yield cancellation when n is large, leading to inaccurate comparisons.
       </list-item>
      </list>
     </section>
     <section label="4.4">
      <section-title>
       Frisch's SBCs
      </section-title>
      <paragraph>
       Frisch et al. propose in [29], [30] several alternative encodings of lex constraints. These encodings are equivalent to lex constraints in discrete domains. Some of them seem appropriate for numerical solvers, but they are in fact not equivalent to lex constraints in continuous domains.
      </paragraph>
      <paragraph>
       For instance, the arithmetic encoding is in fact equivalent to a fundamental domain {a mathematical formula}Fc with {a mathematical formula}c=(dn−1,dn−2,…,d,1), where d is the size of the discrete variable domains taken as {a mathematical formula}{0,1,…,d−1}n. Transposed in the normalized continuous domain {a mathematical formula}[0,1]n, this encoding thus becomes just the fd constraints, which we have shown to be different of both lex and rlex constraints in the previous section. These constraints are still PSBCs (not SBCs) in the numerical context, but we have explained why rlex constraints should be preferred.
      </paragraph>
      <paragraph>
       Another example is the Harvey encoding which employs a reification of binary comparison:{a mathematical formula} where Δ is the reification function which maps true to the integer 1 and false to the integer 0. In the discrete context, hlex constraints are equivalent to lex constraints, but it is not the case in the continuous context since there is no gap of size 1.0 between two possible valuations of a variable. hlex constraints can be adapted by changing the definition of the function Δ, making it closer and closer to lex constraints in the continuous context as true is mapped to smaller and smaller values {a mathematical formula}δ∈(0,1], see Fig. 7, giving birth to {a mathematical formula}hlexδ constraints which are valid PSBCs in the continuous context.{sup:10} The space they delimit however strictly contains {a mathematical formula}L and it has a volume strictly larger than {a mathematical formula}R, making {a mathematical formula}hlexδ a weaker (P)SBC than both lex and rlex.
      </paragraph>
      <paragraph>
       Again, and similarly to most proposed lex encodings, the first and foremost reason why such encodings are not appropriate in the continuous context is that they come in factorial number with respect to the number of variables in the worst case, without an efficient (poly-time) method for generating them, and involve all the variables implied in the symmetry in a formula much more complex than rlex constraints. These are the reasons why we consider rlex the most appropriate PSBCs in the continuous context.
      </paragraph>
     </section>
     <section label="4.5">
      <section-title>
       Specific PSBCs for NCSPs
      </section-title>
      <paragraph>
       The ad-hoc inequalities proposed in [15], [17], [16] to partially break specific classes of variable symmetries in NCSPs are just special cases of the rlex constraints. For instance, Gasca et al. [15] proposed PSBCs {a mathematical formula}xi≤xi+1 ({a mathematical formula}i∈{1,…,n−1}) for full permutations ({a mathematical formula}Σ=Sn), and PSBCs {a mathematical formula}x1≤xi ({a mathematical formula}i∈{2,…,n}) for cyclic permutations ({a mathematical formula}Σ=Cn). Similar PSBCs have been proposed for numerical optimization problems with more peculiar symmetry groups, e.g., {a mathematical formula}Σ=C2×Sn2 in [17] and {a mathematical formula}Σ=∏iSpi in [16].
      </paragraph>
      <paragraph>
       Liberti et al. [13], [14] suggest some general PSBCs for MINLP (Mixed Integer NonLinear Programming) problems involving inequality constraints only. However no analysis is provided regarding the completeness and optimality of these PSBCs for this class of problems.
      </paragraph>
     </section>
     <section label="4.6">
      <section-title>
       Symmetric boxes for single-cycle symmetries
      </section-title>
      <paragraph>
       A very different strategy from the preceding previous works, not relying on the addition of SBCs, is [12]. From the fact that numerical solvers process only boxes, the authors suggest the utility of the notion of box symmetry, which is the set of points symmetric to those belonging to the box. In the context of variable permutations, the symmetry of a box can be understood as a permutation of its component intervals and, therefore, is another box. Classes of box symmetry are naturally defined, as well as representatives, a member of the class representing the whole class. The approach works by producing a set of representatives, whose symmetries cover the whole domain. The solver is launched with the original problem using each representative as domain, and solutions symmetric to those found within it are generated according to the symmetries of the representative. This approach has been followed in [12] in the context of cyclic permutations. Its main advantage is that the potential burden that SBCs add to the original problem is avoided. However it needs a small program to manage the launching of the representatives. A more serious disadvantage of the algorithm is that the number of representatives grows exponentially with the dimension, which becomes unmanageable when n is large.
      </paragraph>
     </section>
    </section>
    <section label="5">
     <section-title>
      Experimental results
     </section-title>
     <paragraph>
      In this section, we provide experimental evidence of the important performance gains rlex constraints can bring when solving symmetric NCSPs. For this purpose, we will use a single measure, called gain in the following: the ratio of time{sup:11} to solve the problem without rlex over that to solve the problem with rlex. Indeed, we expect rlex constraints to quickly eliminate symmetric portions of the search space, isolating an asymmetric search subspace whose volume is divided by {a mathematical formula}|Σ| w.r.t. the initial search space. As a result, we expect to observe gains proportional to {a mathematical formula}|Σ|.
     </paragraph>
     <paragraph>
      All experiments are conducted on a dual-core equipped machine (2.5 GHz, 4 Gb RAM) using the Realpaver [31] constraint solver with default settings, i.e., AC3-like fixed-point propagation loop using Hull-consistency and Box-consistency contracting operators followed by an Interval Newton application, and balanced bisection splitting following a round-robin principle.
     </paragraph>
     <paragraph>
      We consider a benchmark composed of standard problems picked from [32], [33], [34], [35]. The selected test set has representative characteristics: fixed or scalable dimension, various constraint types and complexity, satisfiable or unsatisfiable problems, discrete or continuous solution sets, and of course various symmetry groups. Table 1, Table 2 provide the characteristics (columns “n” and “{a mathematical formula}|Σ|”) of the considered problems and the experimentally obtained gain (column “time”) and number of solutions (column “{a mathematical formula}|χ|”), summarizing 68 individual experiments on problems instances with (columns “rlex”) and without (columns “standard”) our PSBCs. For each scalable problem, the obtained ratios are also graphically depicted in Fig. 8 in comparison to their symmetry group order.
     </paragraph>
     <paragraph>
      We do not compare rlex performances to the related work mentioned in the previous section because, as explained there, they either do not apply in the continuous context, or are subsumed by rlex, and are thus identical to rlex for the classes of symmetry for which they can be applied.
     </paragraph>
     <section label="5.1">
      <section-title>
       Global analysis of the results
      </section-title>
      <paragraph>
       Without rlex, the solving time varies from 0.8 s to 3 818 828 s (44d04h47m08s{sup:12}), with a total solving time of 7 851 611 s (90d21h00m11s) for the 68 experiments. With rlex, the solving time varies from 0.13 s to 132 070 s (1d12h41m10s{sup:13}), with a total solving time of 228 253.1 s (2d15h24m13s) for the 68 experiments. The gain varies from 0.98{sup:14} to {a mathematical formula}10166.2,{sup:15} for an overall gain (ratio of total solving times for the 68 instances) of 34.4. These figures are a bit biased because our test set comprises problems solved in widely different times. In order to allow a more precise comparison, Table 3 partitions our test set into three classes with respect to their solving time without rlex: easy instances solved in less than an hour, hard instances solved in less than day and intractable instances solved in more than a day. For each category, we provide the total, minimum and maximum solving times and gains. These statistics are complemented by Table 4 which depicts, for the same three classes, the total number of instances, those with gains lower than 1.0, between 1.0 and 10.0 (excluded), between 10.0 and 100.0 (excluded), and larger than 100.0.
      </paragraph>
      <paragraph>
       A counter-productive performance occur for only 1 run out of the 68 experiments, the instance of problem Eiger at dimension {a mathematical formula}n=100, and the loss in solving time is {a mathematical formula}2% of 22.3 s, i.e., 0.3 s. A more detailed look at this problem reveals it has only a cyclic symmetry group (order n), very simple binary quadratic constraints and only two fully frontier solutions (see Section 5.2.1 for a detailed analysis of the influence of these features). Another problem in our benchmark has similar characteristics: Vrahatis. As expected, its gains, though never counter-productive, also appear very small in comparison to its symmetry group order. The fact rlex constraints are inefficient for these two problems is easily explained: the original constraints in both problems are already efficiently filtered (as testified by the very large dimensions that can be tackled, and the fact their solving require a single split) and thus propagating rlex constraints (numerous due to the large considered dimensions) does not bring useful additional reductions while it induces a small additional cost.
      </paragraph>
      <paragraph>
       Oppositely, very good performances (i.e., gains greater than 10.0) occur for 33 runs out of 68, 17 of them providing gains even greater than 100.0. Such outstanding gains are obtained for problems Brown, Cpdm, Extended-Powell, Noon and Wright at large enough dimensions. This is again easily explained: these problems have factorial-order symmetry groups and, in general,{sup:16} an exponentially growing solution set with n, also exponentially reduced by rlex.
      </paragraph>
      <paragraph>
       To sum up, these general statistics demonstrate that rlex constraints can provide important gains in solving time and seem harmless to use since the additional propagation cost they may induce is only slightly counter-productive in the worst case. In our opinion, this validates their practical relevance.
      </paragraph>
     </section>
     <section label="5.2">
      <section-title>
       Detailed analysis of the results
      </section-title>
      <paragraph>
       A detailed look at Table 1, Table 2 reveals that rlex performance does not live up to our expectations in many cases, i.e., the gain is often much lower than, and even not proportional to, the order of the symmetry group of the considered instance. Apart from the cases where rlex constraints are counter-productive and that we have already explained, one can note that for most of the problems with factorial-order symmetry groups, the gains seem smaller than factorial, apparently exponential for many problems, and even polynomial for Sparse and constant for Extended-Freudenstein (see Fig. 8). In fact the observed gain is always lower than the order of the symmetry group, with the exception of Virasoro for which rlex constraints strangely perform even better than expected.
      </paragraph>
      <paragraph>
       This leads us to examine more closely the rationale behind our gain expectation, and to suggest that there are two very general factors affecting such gain, which emerge from the ways the rationale can be falsified in our benchmark. Then, we exemplify the dependency of the gain on the features of the solver. Finally, we offer some insights on the potential effect of using different variations of rlex, like transitive closure application and lex ordering.
      </paragraph>
      <section label="5.2.1">
       <section-title>
        Rationale for the gain expectation
       </section-title>
       <paragraph>
        From now on, we will call Constrained Space (CS) the space previously denoted by {a mathematical formula}RΣ(x). The argument for an expected gain given by the ratio between the domain volume and the CS volume, {a mathematical formula}|Σ|, relies on the following assumptions:
       </paragraph>
       <list>
        <list-item label="A">
         The time for processing a box inside CS is approximately the same with or without rlex constraints. The base of this assumption is that rlex constraints are much simpler than typical nonlinear constraints. For this reason, the cost of propagating rlex should be negligible compared to the cost of propagating the constraints of the problem.
        </list-item>
        <list-item label="B">
         The time for discarding boxes outside CS with rlex can be neglected with respect to the global solving time. This assumption relies on the fact that a box outside CS violates some rlex constraint which, when considered during the propagation loop, will discard the box instantly at a very low cost. Then we can consider that, when rlex constraints are added, the domain of the problem is virtually restricted to CS at no cost.
        </list-item>
        <list-item label="C">
         The processing time is homogeneous across the domain. That is, the time to process a fixed-size volume is the same everywhere.
        </list-item>
       </list>
       <paragraph>
        If the above assumptions hold, one can then conclude that the time to solve the problem without and with rlex should respectively be proportional to the initial domain volume and to the CS volume, yielding a gain equal to {a mathematical formula}|Σ|. The first two assumptions can be easily trusted for most problems of interest (i.e., difficult ones), which are composed of complex nonlinear constraints. The cases when they are evidently not valid are the counter-performing ones we have already discussed. The validity of the third assumption is less obvious as the following paragraphs reveal.
       </paragraph>
       <section>
        <section-title>
         Solution processing prevalence
        </section-title>
        <paragraph>
         Assumption (C) gets too far away from reality in many problems. Indeed, the processing time is often concentrated in the areas around the solutions whereas large infeasible portions of the domains are discarded instantly. For that specific kind of problems it is appropriate to substitute Assumption (C) by:
        </paragraph>
        <list>
         <list-item label="D">
          A distinct box exists for each solution such that the cost of processing such boxes of symmetric solutions is the same and that the time to process the space outside all these boxes is negligible.
         </list-item>
        </list>
        <paragraph>
         If we further assume that the processing cost of such a box is the same for all classes, assumptions (A), (B) and (D) together yield the conclusion that the solving time gain should be the ratio of the number of solutions without rlex over that with rlex. This ratio depends on the cardinality and the number of elements satisfying rlex for each solution class:{a mathematical formula} For an interior solution x, we have {a mathematical formula}|xΣ|=|Σ| and {a mathematical formula}|RΣ(xΣ)|=1. Thus, if a problem has only interior solutions the above ratio is {a mathematical formula}|Σ|. Therefore, in this kind of problems, homogeneity and solution processing prevalence assumptions yield the same gain expectation. In our test set, only problems Cyclic-roots in dimensions {a mathematical formula}n=5,7 and Reimer are of this kind.
        </paragraph>
        <paragraph>
         The gains observed for problems Feigenbaum, Henon and Ikeda are also clearly influenced by this factor and they follow quite closely (19) though these problems do not have only interior solutions. In fact, it turns out they have a large majority of interior solutions and only a few frontier solutions, explaining the observed behavior.
        </paragraph>
        <paragraph>
         Although the set of frontier points has zero volume, in practice it is not so rare that symmetric problems have frontier solutions. The existence of frontier solutions makes (19) smaller than {a mathematical formula}|Σ|. This is particularly striking for problems Brown, Extended-Freudenstein, Eiger and Vrahatis which have only fully-frontier solutions (i.e., the same set of solutions is found with and without rlex). The two latter problems have already been discussed as they present inefficient gains. The two former ones have factorial order symmetry groups but only exponential and constant gains, respectively.
        </paragraph>
        <paragraph>
         Problems with continuous solution sets, like Cyclic-roots of dimension {a mathematical formula}n=4 and Cpdm of dimension {a mathematical formula}n=3, are another case of the solution prevalence type. Moreover, in most cases they have a gain not too far from {a mathematical formula}|Σ|. Although their solution manifolds may intersect with the frontier of CS, it is sufficient that the dimensionality of the overlap is lower than that of their solution set to have a majority of boxes enclosing interior solutions. Therefore gains of the order of {a mathematical formula}|Σ| are generally obtained, sometimes with significant accuracy.
        </paragraph>
        <paragraph>
         In order to confirm the impact of solution prevalence on the expected gain, we have prepared a specific problem generator parameterized by the dimension of the problem n, the number of repetitions r of the smallest coordinate in the single solution class representative s to the problem, and the symmetry group Σ. The generated problems have a single constraint of the form{a mathematical formula} where the solution class representative s satisfies {a mathematical formula}si=max⁡(0,i−r−1)2, i.e., the solutions are all symmetries of {a mathematical formula}s=(0,…,0︸r+1times,1,4,9,…). When {a mathematical formula}r=0, the generated problems have only interior solutions, all members of the same symmetry class. In this case, we expect the gains to be proportional to the order of the considered symmetry group at the considered dimension. When r increases, the size of the solution class decreases, eventually reaching 1 when {a mathematical formula}r=n−1, in which case the solution is {a mathematical formula}s=(0,…,0). The gains should also decrease according to (19). Fig. 9 displays the evolution of the gain in dimension {a mathematical formula}n=6 for three different symmetry groups when the number of repetitions r varies. In all cases, it is clear that the gain decreases with the increase in the number of repetitions, i.e., the degree of frontierness of the solutions, which in turn determines the numbers of solutions with and without rlex, having an important impact on the gain. The shapes of gain evolution and ratios of solution numbers are indeed strikingly proportional. Still they are not identical and the gains are always worse than the expected ones according to (19). We explain this phenomenon with another factor: the frontier effect.
        </paragraph>
       </section>
       <section>
        <section-title>
         Frontier effect
        </section-title>
        <paragraph>
         There are problems with no solution prevalence or without solutions at all in which gains are very different from {a mathematical formula}|Σ|. Something besides homogeneous processing is failing in the premises of Subsection 5.2.1. One symptom is box classification in inside and outside CS; frontier boxes, partially inside and partially outside CS are neglected. And they turn out to be a significant fraction, or even the predominant type of boxes in some problems, e.g., Ext.-Freudenstein, Wright and, in minor degree, Feigenbaum.
        </paragraph>
        <paragraph>
         The reason is that the assumption of constant time cost for a fixed volume size can be falsified not only by the position but also by the shape of the volume when using a box-oriented solver. Suppose we have to pave the domain and CS with boxes. If only one box is used, the tightest enclosing one, the box is the same in both cases and coincides with the domain, itself a frontier box. Thus, there is no difference in the paving despite CS is {a mathematical formula}|Σ| times smaller. If we allow a greater number of boxes, they become smaller, the volumes covered in the CS and the domain case differ progressively. Asymptotically, the ratio of volumes covered tend to {a mathematical formula}|Σ| and the fraction of frontier boxes in CS tends to zero.
        </paragraph>
        <paragraph>
         Another facet of the same frontier effect phenomenon, is considering the size of the leaf boxes in the search tree when rlex are added. It can happen that the size of a leaf is too big to be completely inside CS (because of its shape, the leaf can be at the same time much smaller than the domain), but small enough to be discarded or to converge to a solution in the given problem. It is, thus, a frontier box, eventually one scarcely overlapping CS. This would mean that the pruning power of rlex has not been exploited effectively. The smaller the CS size with respect to the domain size, the more easily this may occur. On the opposite side, given a fixed a symmetry and its associated CS, the smaller the leaf boxes, the more immune the problem to the frontier effect.
        </paragraph>
        <paragraph>
         The frontier effect thus depends on two factors: the relative volumes of CS and initial domain, and the precision at which the problem is solved.
        </paragraph>
        <paragraph>
         To sum up, solution processing prevalence overrides the importance of the volume in the time cost. When there is no solution prevalence, the ratio of volume processing cost is mainly influenced by the frontier effect.
        </paragraph>
       </section>
      </section>
      <section label="5.2.2">
       Impact of rlex variants
       <paragraph>
        The set of rlex constraints for a given symmetry group is in general not unique. We study here the impact of various possible sets on the observed gains.
       </paragraph>
       <section>
        <section-title>
         Transitive closure
        </section-title>
        <paragraph>
         The set of rlex constraints of a given symmetry group can be minimized, keeping only inequalities which are not transitively implied by other inequalities in the set. Such a minimal set comprises at most n inequalities for a problem in dimension n. Conversely, it can be maximized considering the transitive closure of all inequalities, yielding at most {a mathematical formula}n2 inequalities for a problem in dimension n. Of course, all intermediate sets between these two extremes also constitute a valid set of PSBCs.
        </paragraph>
        <paragraph>
         In theory, the maximal set could be preferred because it may accelerate interval propagation. For instance, the reduction of the domain of {a mathematical formula}x1 in a problem with full permutation symmetry can be propagated instantly to the domain of {a mathematical formula}xn if the rlex inequality {a mathematical formula}x1≤xn is imposed, while it will require {a mathematical formula}n−1 propagation loops if only rlex inequalities of the form {a mathematical formula}xi≤xi+1 are considered. On the other hand, the minimal set could be preferred since it may comprise significantly less constraints, possibly reducing importantly the number of applied contracting operators to achieve a fix-point of interval propagation. For example, in order to realize that no reduction at all is possible on the domain of any variable, each contracting operator must be applied once, i.e., only n for the minimal set in contrast with {a mathematical formula}n2 for the maximal set.
        </paragraph>
        <paragraph>
         In practice, however, we have observed that considering either the minimal set or the maximal set results in very similar timings for most problems. This is in particular the case for problems Brown, Cyclohexane, Extended-Powell, Noon, Sparse and Wright, i.e., problems with very different minimal and maximal sets (typically n and {a mathematical formula}n2 inequalities, respectively) and for which the gain with maximal PSBCs over that with minimal PSBCs vary between {a mathematical formula}0% and {a mathematical formula}8%, sometimes in favor of the maximal set, sometimes in favor of the minimal set. The only exception is for problem Extended-Freudenstein for which solving times are approximately 3 times faster with the maximal set than with the minimal set. This problem, like the Extended-Powell problem, has a very specific structure: it is made of the repetition {a mathematical formula}n2 times of a subsystem of 2 equations. But unlike Extended-Powell, this one has a single solution. Hence, the contraction of the domain of the variables in any subproblem of 2 equations can be immediately propagated to the domains of the variables of all other duplicated subproblems. It appears that the maximal set of rlex, with its redundant inequalities, exploits this property to its best, allowing a much faster convergence of the solver towards the unique solution.
        </paragraph>
        <paragraph>
         Except for such peculiar cases, we should thus conclude that using a minimal set of rlex or a maximal set of rlex has almost no impact, and so we recommend using the minimal, non-redundant, set as it involves a lot fewer constraints in general.
        </paragraph>
       </section>
       <section>
        <section-title>
         Lexicographic order
        </section-title>
        <paragraph>
         The variable ordering underlying the considered lexicographic order also impacts the set of generated rlex, not only in the name of the involved variables but even in cardinality. For instance, consider the symmetry group generated by compositions of {a mathematical formula}σ=[2,1,4,5,6,3]. It is composed of two synchronized cyclic symmetries, one on the first two variables, the other one on the last four variables. The two corresponding rlex constraints obtained with the standard variable order are {a mathematical formula}x1≤x2 and {a mathematical formula}x3≤x5. If the variable order chosen to build rlex begins by {a mathematical formula}x3 instead of {a mathematical formula}x1, we obtain the rlex constraints {a mathematical formula}x3≤x4, {a mathematical formula}x3≤x5 and {a mathematical formula}x3≤x6, i.e., a set of three PSBCs instead of two.
        </paragraph>
        <paragraph>
         Besides the variables involved and cardinality of the generated rlex, the variable order can influence also the number of symmetries broken for the solutions and, thus, the number of symmetric solutions found with rlex. Indeed, a variable order can confer a frontier character to a solution while another one can make it an interior point. However, it is difficult to take advantage from this in practice because it requires the previous knowledge of the solutions.
        </paragraph>
        <paragraph>
         For the problems in our benchmark more prone to be impacted by a change in variable ordering (we have excluded those with full permutation of all variables and those with full cycle of all variables), we have compared runs with several variable orderings and it appears this factor does not have a very important impact on the observed gains: {a mathematical formula}0% to {a mathematical formula}10% difference in solving time.
        </paragraph>
        <paragraph>
         We conclude the variable ordering does not have a very important role in the performance of rlex constraints in general.
        </paragraph>
       </section>
      </section>
      <section label="5.2.3">
       Interest of rlex in other solving contexts
       <paragraph>
        In the whole previous section, we have considered only the problem of finding all solutions (up to a given precision) of the considered problems, whether they have continuous solution sets, discrete solution sets or empty solution sets. Another perspective on rlex efficiency consists in searching for a single solution of the considered NCSPs, i.e., solving them as decision problems.
       </paragraph>
       <paragraph>
        Part of the answer is already included in Table 1, Table 2: for problems having no solution (Sparse), a single solution (Extended Freudenstein), or an identical (and small) solution set with or without rlex constraints (Brown, Eiger, Vrahatis), the obtained gains validate their interest in such settings too.
       </paragraph>
       <paragraph>
        Considering the other problems in our test set, those with large, or largely varying with and without rlex constraints, solution sets, the figures are very unstable: for problems with continuous solution sets (CPDM at {a mathematical formula}n=3, Cyclic-roots at {a mathematical formula}n=4), the decision problem is answered identically fast ({a mathematical formula}&lt;0.05s) with and without rlex; For other problems, either the decision problem is solved faster without rlex (CPDM at {a mathematical formula}n=4,5,6, Cyclic-roots at {a mathematical formula}n=5,7, Extended Powell at {a mathematical formula}n=22,24,26), or it is solved almost as fast with and without rlex (Feigenbaum at {a mathematical formula}n=11,13, Ikeda at all considered n, Noon at {a mathematical formula}n=5,6,7), or else it is solved faster with rlex constraints (all other 48 instances).
       </paragraph>
       <paragraph>
        The fact no predictable behavior is observed is easily interpreted: the search with and without rlex constraints proceeds in a totally different way since, due to contracting boxes with rlex constraints, the split points are generally different in both cases yielding a totally unrelated search tree, unlike what happens in the discrete case where the search-tree with PSBCs is a subpart of that without PSBCs.
       </paragraph>
       <paragraph>
        The overall statistics are however in favor of rlex constraints since when they are counter-productive the solving time are typically small{sup:17} and the gain remains above 0.2 in all cases, while solving time vary from small to significant ({a mathematical formula}&gt;100s) and gains grow up to 816{sup:18} when rlex constraints are used. The most favorable gains are in fact observed when the first solution found is identical with and without rlex, indicating the search strategy operates similarly in both cases, just avoiding unnecessary branches that are pruned by our PSBCs.
       </paragraph>
      </section>
     </section>
    </section>
    <section label="6">
     <section-title>
      Conclusion and future prospects
     </section-title>
     <paragraph>
      lex constraints are known to break exactly every variable symmetry retaining only a representative member of each class. They are valid for all kinds of problems, independently of the nature of the domains. However, the number of lex constraints is potentially factorial in the number of variables. Moreover, we have shown they are impractical for numerical solvers.
     </paragraph>
     <paragraph>
      To overcome these drawbacks, we have proposed the rlex PSBCs, a set of simple inequalities between two variables. The maximum number of non-redundant constraints in rlex is linear in the number of variables. Besides they are easily handled by numerical solvers, which are able to quickly propagate them. They can be considered a generalization of PSBCs proposed for particular symmetry groups in some previous works.
     </paragraph>
     <paragraph>
      We have shown that rlex are a relaxation of lex with optimal properties. In fact, they enclose a space which is the closure of that enclosed by lex SBCs, and we have proved both have the same volume. A detailed analysis of rlex PSBCs also shows that their filtering power is almost identical to complete SBCs in the context of numerical CSPs.
     </paragraph>
     <paragraph>
      The experiments we have conducted on a benchmark of standard problems with various characteristics and sizes demonstrate the practical efficacy of rlex constraints: (almost) never counterproductive, they induce gains in solving time which can be factorial for problems with symmetry groups of large orders. Still, the presented results also demonstrate these gains are not always directly proportional to the symmetry group order, and we have thoroughly analyzed the reasons why.
     </paragraph>
     <paragraph>
      All the arguments we have used are also valid for continuous (constrained) optimization. rlex can also be interesting in discrete domains, though Jefferson and Petrie [22] have demonstrated there exist superior PSBCs in this context. Still, in discrete domains with many values for each variable, the frontier (in which reside the only symmetry classes not completely broken by rlex) will be small with respect to the domain. Hence, we should also consider Mixed-Integer Nonlinear Programming and Integer Linear Programming for which some of the PSBCs we have generalized have been proposed [17], [36].
     </paragraph>
    </section>
   </content>
  </root>
 </body>
</html>