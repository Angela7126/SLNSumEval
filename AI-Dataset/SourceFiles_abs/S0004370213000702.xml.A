<?xml version="1.0" encoding="utf-8"?>
<html>
 <body>
  <root>
   <title>
    Model-theoretic inseparability and modularity of description logic ontologies.
   </title>
   <content>
    <section label="1">
     <section-title>
      Introduction
     </section-title>
     <paragraph>
      The main use of ontologies in computer and information science is to formalise the vocabulary of an application domain; i.e., to fix the vocabulary as a logical signature and to provide a logical theory that defines the semantics of the terms and relations in the vocabulary. The wide adoption of the W3C-endorsed ontology language OWL and its profiles [1], [2], the success of logic-based reasoning support for concept classification and instance retrieval [3], [4], [5], [6], and the availability of ontology editors and management systems such as Protégé and SWOOP[7], [8] has led to the development and use of large-scale and complex ontologies that capture the vocabulary and knowledge of a wide diversity of domains. Especially in the Life Sciences and other knowledge intensive domains, many such ontologies have been created. Important examples are the National Cancer Instituteʼs (NCI) thesaurus and ontology, the gene ontology (GO), and Snomed ct, the Systematized Nomenclature of Medicine, Clinical Terms, which comprises about three hundred thousand vocabulary items and is used in the healthcare systems of more than twenty countries [9], [10], [11].
     </paragraph>
     <paragraph>
      Engineering and maintaining professional ontologies such as the ones mentioned above is a complex and challenging task, and it has to be carried out with great care for the resulting ontology to be of high quality. Ontology design may involve a group of ontology engineers and domain experts that co-operate in order to design the ontology, update it to reflect changes/developments in the domain, and integrate it with other ontologies so as to cover larger domains. In such an environment, automated tool support for comparing, merging, updating, modularising, and reusing ontologies is of critical importance.
     </paragraph>
     <paragraph>
      The aim of this paper is to propose and investigate a model-theoretic notion of inseparability between ontologies that can serve as a logical underpinning for many of these operations. From an application perspective, two ontologies are inseparable if they can be equivalently replaced by one another in any context. In logic, this can be formalised by the notion of logical equivalence, according to which two ontologies are inseparable if they have the same models. However, logical equivalence as such is clearly not sufficiently flexible to serve as a logical underpinning of modularity. For example, a module of an ontology is typically not logically equivalent to the ontology itself, and an updated ontology is typically not logically equivalent to the original ontology. By parameterising logical equivalence with a signature Σ of vocabulary items of interest, we obtain a notion of inseparability that has exactly the flexibility and properties required. We say that two ontologies are Σ-inseparable if the Σ-reducts of their models coincide, where the Σ-reduct of a structure is simply the restriction of that structure to the symbols in Σ. Then, a module can be defined as a subset of an ontology that is self-contained in the sense that it is Σ-inseparable from the ontology, where Σ is the set of vocabulary items that occur in the module. Similarly, an update can be categorised as not harmful for a signature Σ if the updated ontology is Σ-inseparable from the original ontology. Many other relevant notions such as controlled import of ontologies and safety of an ontology for a signature as studied in [12] can be formalised as well using Σ-inseparability, see [12], [13].
     </paragraph>
     <paragraph>
      An important feature of model-theoretic inseparability is its language independence. Alternative notions of inseparability are based on deduction and use logical consequence within a given language to define inseparability of TBoxes. For example, two {a mathematical formula}ALC-TBoxes are called deductively Σ-inseparable in {a mathematical formula}ALC iff they entail the same {a mathematical formula}ALC-concept inclusions in Σ. Distinct description logics typically define distinct versions of deductive inseparability [14] which is clearly undesirable if one moves from one language to another. In contrast, model-theoretic inseparability implies inseparability w.r.t. any standard description logic and even w.r.t. second-order logic.
     </paragraph>
     <paragraph>
      The first main contribution of this paper is a systematic analysis of the complexity of deciding whether two ontologies are Σ-inseparable. We focus on ontologies that are formulated as a general or acyclic TBox in the description logic {a mathematical formula}EL that underpins the OWL2 EL profile, the paradigmatic expressive description logic {a mathematical formula}ALC, and their extensions with inverse roles {a mathematical formula}ELI and {a mathematical formula}ALCI. Our analysis starts with two fundamental undecidability results: Σ-inseparability is undecidable for {a mathematical formula}ALC-TBoxes even if one TBox is acyclic and the other is empty; for {a mathematical formula}EL, the undecidability result is slightly weaker, applying to the case where one TBox is empty and the other is a general TBox. It is due to such undecidability results that automated tool support for modular ontology design and maintenance is currently not based on model-theoretic inseparability, but either on deductive versions of inseparability (see, for example, [14]) or stronger inseparability notions based on locality [12]. However, the second part of our complexity analysis reveals that there are natural conditions on the TBox and/or signature that lead to a dramatic drop in complexity.
     </paragraph>
     <paragraph>
      The first such condition is the restriction of the signature to a concept signature, i.e., a signature that comprises only concept names, but no role names. In this case, deciding Σ-inseparability becomes {a mathematical formula}coNExpNP-complete for general {a mathematical formula}EL- and {a mathematical formula}ALC-TBoxes. The proof of this result is of particular interest since it reveals a close connection between Σ-inseparability on the one hand and satisfiability in non-monotonic description logics based on circumscription on the other hand. By combining concept signatures with the additional condition that one TBox is empty, the complexity goes down to {a mathematical formula}Π2p for {a mathematical formula}ALC and PTime for {a mathematical formula}EL. Finally, Σ-inseparability of acyclic {a mathematical formula}EL-TBoxes from the empty TBox also turns out to be in PTime, even for signatures with role names. While these cases appear to be rather restricted at first glance, they actually play a central role in our algorithms for module checking and module extraction, discussed below. All mentioned results also hold for the extensions of {a mathematical formula}EL and {a mathematical formula}ALC with inverse roles. Note that, in various relevant cases, model-theoretic inseparability thus turns out to be strictly less complex than standard reasoning tasks such as subsumption, which is PSpace-complete for acyclic TBoxes formulated in {a mathematical formula}ALC and in {a mathematical formula}ELI[15]. It is also interesting that the difference in complexity of subsumption between {a mathematical formula}EL and {a mathematical formula}ELI (PTime vs. ExpTime[15]) is not reflected in the complexity of inseparability.
     </paragraph>
     <paragraph>
      The PTime and {a mathematical formula}Π2p-complexity results indicate that model-theoretic Σ-inseparability can be useful not only as a theoretical tool to define an “ideal” form of modularity, but also for practical purposes. The second aim of this paper is to apply Σ-inseparability to define several notions of a module in a TBox, and to develop algorithms for module checking and for extracting minimal modules. The former task is, given a TBox and a subset of the TBox, to decide whether the subset is a module; the latter task is, given a TBox and a signature Σ of interest, to extract an as small as possible module for the signature Σ. We give a polynomial time algorithm for module checking in acyclic {a mathematical formula}ELI-TBoxes and a {a mathematical formula}Π2p-module checking algorithm for acyclic {a mathematical formula}ALCI-TBoxes under a natural additional syntactic condition. Note that acyclic TBoxes are used in relevant practical applications, including Snomed ct, several versions of NCI, and GO. For module extraction, we consider two approaches. First, we show that a generic module extraction algorithm can be applied to acyclic {a mathematical formula}ELI- and {a mathematical formula}ALCI-TBoxes in a black box manner by using our module checking algorithm as an oracle. Second, we pursue a white box approach in which we directly use the module checking algorithm for acyclic {a mathematical formula}ELI-TBoxes to obtain a more direct module extraction algorithm. Finally, we introduce the module extraction software MEX that implements the white box approach and carry out a case study by extracting minimal modules from the Snomed ct ontology. The study shows that our algorithms scale effortlessly to ontologies of very large size and very often extract modules that are significantly smaller than those produced by the standard {a mathematical formula}⊤⊥⁎-module extraction algorithm [16], [17] and all other existing approaches.
     </paragraph>
     <paragraph>
      The paper is organised as follows. After a section introducing basic definitions and terminology we define model-theoretic inseparability in Section 3. In this section, we also introduce and investigate basic properties and applications of model-theoretic inseparability. In Sections 4 and 5, we investigate the computational complexity of deciding Σ-inseparability and then, in Sections 6 and 7 we introduce and investigate module checking and module extraction based on Σ-inseparability. A case study with experiments follows in Section 8. The paper closes with a section on related work and a discussion of future work.
     </paragraph>
     <paragraph>
      This journal article is an extended version of the conference paper [18]. For the sake of readability, some proofs are deferred to Appendices Appendix A Proofs for Section, Appendix B Proofs for Section, Appendix C Proofs for Section, Appendix D Proofs for Section, Appendix E Proofs for Section.
     </paragraph>
    </section>
    <section label="2">
     <section-title>
      Preliminaries
     </section-title>
     <paragraph>
      We introduce the syntax and semantics of the description logics considered in this paper, which are {a mathematical formula}EL, {a mathematical formula}ELI, {a mathematical formula}ALC, and {a mathematical formula}ALCI; for a more thorough introduction, the reader is referred to the DL handbook [19]. Fix two countably infinite and disjoint sets {a mathematical formula}NC and {a mathematical formula}NR whose elements are the concept names and the role names, respectively. {a mathematical formula}ALCI-concepts are built according to the syntax rule{a mathematical formula} where A ranges over {a mathematical formula}NC and r over {a mathematical formula}NR. As usual, we use ⊥ to abbreviate ¬⊤, {a mathematical formula}C⊔D for {a mathematical formula}¬(¬C⊓¬D), {a mathematical formula}C→D for {a mathematical formula}¬C⊔D, and {a mathematical formula}∀r.C for {a mathematical formula}¬∃r.¬C. A role is either a role name or an inverse role, i.e., an expression {a mathematical formula}r− with {a mathematical formula}r∈NR. For each inverse role {a mathematical formula}s=r−, we set {a mathematical formula}s−=r. Throughout the paper, we typically use A, B to denote concept names, r, s, t to denote roles, and C, D, E to denote composite concepts.
     </paragraph>
     <paragraph>
      An {a mathematical formula}ALC-concept is an {a mathematical formula}ALCI-concept that does not use inverse roles, i.e., the constructor {a mathematical formula}∃r−.C and the abbreviation {a mathematical formula}∀r−.C are not allowed. An {a mathematical formula}ELI-concept is an {a mathematical formula}ALCI-concept that does not use negation ¬C, and thus also disallows the abbreviations ⊥, {a mathematical formula}C⊔D, {a mathematical formula}C→D, and {a mathematical formula}∀r.C. Finally, an {a mathematical formula}EL-concept is an {a mathematical formula}ELI-concept that does not use inverse roles.
     </paragraph>
     <paragraph>
      Concepts are used in TBoxes to describe a domain of interest. Formally, a concept inclusion (CI) is an expression {a mathematical formula}C⊑D, a concept equality (CE) is an expression {a mathematical formula}C≡D, and a TBox is a finite set of CIs and CEs. When a TBox {a mathematical formula}T uses only {a mathematical formula}L-concepts with {a mathematical formula}L∈{EL,ELI,ALC,ALCI}, then we call {a mathematical formula}T an {a mathematical formula}L-TBox. For uniform reference, we sometimes call CIs and CEs TBox statements. To explicitly distinguish the TBoxes introduced here from acyclic TBoxes as introduced later on, we sometimes speak of general TBoxes.
     </paragraph>
     <paragraph>
      We are sometimes using also first-order logic (FO) and second-order logic (SO) over the signature {a mathematical formula}NC of unary predicates and {a mathematical formula}NR of binary predicates, identifying unary predicates with concept names and binary predicates with role names. Equality is admitted. SO-formulas are thus built according to the syntax rule{a mathematical formula} where {a mathematical formula}x,y range over first-order variables, A over {a mathematical formula}NC, {a mathematical formula}Xi over second-order variables of arity i, r over {a mathematical formula}NR, and X over second-order variables of arity one or two. FO is the fragment of SO without second-order variables and second-order quantifiers. When speaking of an FO-TBox and an SO-TBox, we mean a finite set of FO-sentences and SO-sentences, respectively.
     </paragraph>
     <paragraph>
      A signature Σ is a finite subset of {a mathematical formula}NC∪NR. In this context, we refer to both concept names and role names as symbols. The signature {a mathematical formula}sig(C) of a concept C is the set of concept and role names that occur in C. If {a mathematical formula}sig(C)⊆Σ, we call C a Σ-concept. The same terminology is applied to TBox statements, TBoxes, and FO- and SO-formulas.
     </paragraph>
     <paragraph>
      The semantics of DLs and of FO- and SO-formulas is given by interpretations{a mathematical formula}I=(ΔI,⋅I), where the domain{a mathematical formula}ΔI is a non-empty set and {a mathematical formula}⋅I is an interpretation function that maps each {a mathematical formula}A∈NC to a subset {a mathematical formula}AI of {a mathematical formula}ΔI and each {a mathematical formula}r∈NR to a binary relation {a mathematical formula}rI⊆ΔI×ΔI. Sometimes it will be convenient to work with partial interpretations in which the interpretation function can be undefined for some symbols in {a mathematical formula}NC∪NR. As usual, {a mathematical formula}I⊨φ denotes that the interpretation {a mathematical formula}I is a model of an SO-sentence φ, and {a mathematical formula}Φ⊨φ denotes that the SO-sentence φ follows from the set of SO-sentences Φ. We define the semantics of DL-concepts by the standard translation {a mathematical formula}⋅♯ into FO-formulas with one free variable shown in the upper half of Fig. 1. For each concept C, and an interpretation {a mathematical formula}I, we set {a mathematical formula}CI={d∈ΔI|I⊨C♯[d]}. The semantics of TBox statements is given by a translation into FO-sentences, as shown in the lower half of Fig. 1; it can be extended to TBoxes {a mathematical formula}T in the obvious way, setting {a mathematical formula}T♯={α♯|α∈T}. We often confuse concepts with their FO-translations and do the same also for TBox statements and TBoxes, which allows us to speak of an interpretation being a model of a TBox {a mathematical formula}T, to write {a mathematical formula}T⊨C⊑D when {a mathematical formula}T is an SO-TBox and {a mathematical formula}C⊑D is a CI formulated in some DL, and to write {a mathematical formula}T⊨φ when {a mathematical formula}T is a DL TBox and φ an SO-sentence.
     </paragraph>
     <paragraph>
      The standard reasoning problem in DLs is subsumption: given a TBox {a mathematical formula}T and a CI {a mathematical formula}C⊑D, decide whether {a mathematical formula}T⊨C⊑D. Subsumption is ExpTime-complete in {a mathematical formula}ELI, {a mathematical formula}ALC, and {a mathematical formula}ALCI[20], [19], and in PTime in {a mathematical formula}EL[21]. We say that TBoxes {a mathematical formula}T1 and {a mathematical formula}T2 are equivalent, in symbols {a mathematical formula}T1≡T2, if they have the same models.
     </paragraph>
     <section label="2.1">
      <section-title>
       Acyclic TBoxes
      </section-title>
      <paragraph>
       It will often be useful to also study a weaker form of TBoxes, which we introduce next. A TBox {a mathematical formula}T is acyclic if it satisfies the following conditions:
      </paragraph>
      <list>
       <list-item label="•">
        all CEs in {a mathematical formula}T are of the form {a mathematical formula}A≡C (concept definitions) and all CIs in {a mathematical formula}T are of the form {a mathematical formula}A⊑C (primitive concept inclusions), where A is a concept name;
       </list-item>
       <list-item label="•">
        no concept name occurs more than once on the left-hand side of a statement in {a mathematical formula}T;
       </list-item>
       <list-item label="•">
        {a mathematical formula}T contains no cyclic definitions, as detailed below.
       </list-item>
      </list>
      <paragraph>
       Let {a mathematical formula}T be a TBox that contains only concept definitions and primitive concept inclusions. The relation {a mathematical formula}≺T⊆NC×sig(T) is defined by setting {a mathematical formula}A≺TX if there exists a TBox statement {a mathematical formula}A⋈C such that X occurs in C, where ⋈ ranges over {a mathematical formula}{⊑,≡}. A concept name A depends on a symbol {a mathematical formula}X∈NC∪NR if {a mathematical formula}A≺T+X, where {a mathematical formula}⋅+ denotes transitive closure. We use {a mathematical formula}dependT(A) to denote the set of all symbols X such that A depends on X. We can now make precise what it means for {a mathematical formula}T to contain no cyclic definitions: {a mathematical formula}A∉dependT(A), for all {a mathematical formula}A∈NC.
      </paragraph>
      <paragraph>
       When proving results about acyclic TBoxes {a mathematical formula}T, it is often convenient to refer to the definitorial depth of concept names in {a mathematical formula}T, defined as follows: {a mathematical formula}dT(A)=0 if A does not occur in any statement {a mathematical formula}A⋈C in {a mathematical formula}T; otherwise, there is a unique {a mathematical formula}A⋈C∈T and {a mathematical formula}dT(A)=1+max{dT(B)|B occurs in C} with the maximum of the empty set defined as 0.
      </paragraph>
     </section>
    </section>
    <section label="3">
     <section-title>
      Model-theoretic inseparability
     </section-title>
     <paragraph>
      We introduce model-theoretic inseparability, explain its relevance for TBox interoperation and modularity, and establish some fundamental properties. Let {a mathematical formula}I be an interpretation and Σ a signature. The Σ-reduct{a mathematical formula}I|Σ of {a mathematical formula}I is the interpretation obtained from {a mathematical formula}I by setting
     </paragraph>
     <list>
      <list-item label="•">
       {a mathematical formula}ΔI|Σ:=ΔI;
      </list-item>
      <list-item label="•">
       {a mathematical formula}XI|Σ:=XI, for all {a mathematical formula}X∈Σ;
      </list-item>
      <list-item label="•">
       {a mathematical formula}XI|Σ is undefined for all {a mathematical formula}X∈(NC∪NR)∖Σ.
      </list-item>
     </list>
     <paragraph>
      Two interpretations {a mathematical formula}I and {a mathematical formula}Jcoincide on a signature Σ if {a mathematical formula}I|Σ=J|Σ.
     </paragraph>
     <paragraph label="Definition 1">
      Σ-inseparabilityLet {a mathematical formula}T1 and {a mathematical formula}T2 be SO-TBoxes and Σ a signature. Then {a mathematical formula}T1 and {a mathematical formula}T2 are Σ-inseparable, in symbols {a mathematical formula}T1≡ΣT2, if {a mathematical formula}{I|Σ|I⊨T1}={I|Σ|I⊨T2}.
     </paragraph>
     <paragraph label="Example 2">
      Note that Σ-inseparability generalises logical equivalence: for every signature Σ such that {a mathematical formula}sig(T1)∪sig(T2)⊆Σ, it is easy to see that {a mathematical formula}T1≡ΣT2 if, and only if, {a mathematical formula}T1≡T2. However, being able to choose a signature makes inseparability a more flexible and versatile tool than equivalence, as illustrated by the examples below. (1) Consider the following two fragments {a mathematical formula}T1 and {a mathematical formula}T2 of ontologies defining Cystic_fibrosis_screening. {a mathematical formula}T1 consists of the definition{a mathematical formula} and {a mathematical formula}T2 consists of the inclusions{a mathematical formula} Clearly, {a mathematical formula}T1≢T2. However, for {a mathematical formula}Σ={Cystic_fibrosis_screening,Screening} we have {a mathematical formula}T1≡ΣT2. In fact, let {a mathematical formula}T3 consist of{a mathematical formula} Then one can show that {a mathematical formula}T1≡ΣT2≡ΣT3.(2) Assume that a TBox {a mathematical formula}T′ is a definitorial extension of a TBox {a mathematical formula}T; i.e., {a mathematical formula}T′ is obtained from {a mathematical formula}T by adding new concept definitions {a mathematical formula}A≡C so that A does neither occur in {a mathematical formula}T nor on the right-hand side of any of the new definitions. For example, suppose that {a mathematical formula}T1 from above has been extended with{a mathematical formula} where {a mathematical formula}Tuberculosis_screening is a new concept name. Intuitively, {a mathematical formula}T′ does not interfere with the meaning of symbols in {a mathematical formula}T, but only introduces new names for complex concepts. Indeed, one can show that {a mathematical formula}T≡sig(T)T′ whenever {a mathematical formula}T′ is a definitorial extension of {a mathematical formula}T.
     </paragraph>
     <paragraph>
      One can show that {a mathematical formula}≡Σ is an equivalence relation on the set of SO-TBoxes. Note that {a mathematical formula}Σ⊆Σ′ implies {a mathematical formula}≡Σ⊇≡Σ′, i.e., shrinking the signature cannot result in additional TBoxes to become separable. In what follows, we call this property the monotonicity property of inseparability.
     </paragraph>
     <paragraph label="Proof">
      In the same way that logical equivalence can be decomposed into two implications, inseparability can be decomposed into two Σ-entailments[13], defined next. We say that a TBox {a mathematical formula}T1Σ-entails a TBox {a mathematical formula}T2, in symbols {a mathematical formula}T1⊨ΣT2, if {a mathematical formula}{I|Σ|I⊨T1}⊆{I|Σ|I⊨T2}. Although we are mainly concerned with Σ-inseparability, it will sometimes be convenient to also use Σ-entailment. The following observation shows that, as far as computational complexity is concerned, there is no difference between the two notions. Σ-entailment and Σ-inseparability are mutually reducible in polynomial time.Obviously, {a mathematical formula}T1 and {a mathematical formula}T2 are Σ-inseparable if {a mathematical formula}T1Σ-entails {a mathematical formula}T2 and vice versa.{sup:1} Now assume that we want to decide {a mathematical formula}T1⊨ΣT2. By replacing every non-Σ-symbol X shared by {a mathematical formula}T1 and {a mathematical formula}T2 with a fresh symbol {a mathematical formula}X1 in {a mathematical formula}T1 and a distinct fresh symbol {a mathematical formula}X2 in {a mathematical formula}T2, we can achieve that {a mathematical formula}Σ⊇sig(T1)∩sig(T2) without changing the original (non-)Σ-entailment of {a mathematical formula}T2 by {a mathematical formula}T1. We then have {a mathematical formula}T1⊨ΣT2 iff {a mathematical formula}T1≡ΣT1∪T2.  □
     </paragraph>
     <paragraph>
      The further discussion of inseparability is guided by three use cases.
     </paragraph>
     <paragraph label="Theorem 4">
      In applications, it can be necessary or beneficial to replace an existing TBox {a mathematical formula}T1 with a new TBox {a mathematical formula}T2, for instance with the aim to speed up reasoning when {a mathematical formula}T2 is significantly smaller than {a mathematical formula}T1 or when a reference TBox {a mathematical formula}T1 is updated to a new version {a mathematical formula}T2. In such a replacement, one would like to ensure some form of equivalence of {a mathematical formula}T1 and {a mathematical formula}T2 to guarantee that correctness is not compromised. Σ-inseparability provides a very strong form of equivalence as {a mathematical formula}T1≡ΣT2 guarantees that {a mathematical formula}T1 can be replaced with {a mathematical formula}T2 in any application that refers only to symbols from Σ. For example, the main purpose of many bio-medical ontologies is to produce a systematic concept hierarchy, the partial order on concept names that is induced by subsumption. When we are only interested in computing the Σ-part of this hierarchy and we know that the TBox {a mathematical formula}T1 is Σ-inseparable from {a mathematical formula}T2, then we can classify {a mathematical formula}T2 instead of {a mathematical formula}T1 since {a mathematical formula}T1⊨A⊑B iff {a mathematical formula}T2⊨A⊑B for all {a mathematical formula}A,B∈NC∩Σ. Several authors have used this observation to optimise practical reasoning, see for example [22], [23], [24]. However, {a mathematical formula}T1≡ΣT2 does not only mean that the same subsumptions between concept names from Σ are entailed: the same is true for composite Σ-concepts formulated in any DL. This is a consequence of the following useful characterisation of Σ-inseparability in terms of logical consequence, taken from [13].Let{a mathematical formula}T1and{a mathematical formula}T2be SO-TBoxes and Σ a signature. The following conditions are equivalent:
     </paragraph>
     <list>
      <list-item label="1.">
       {a mathematical formula}T1and{a mathematical formula}T2are Σ-inseparable;
      </list-item>
      <list-item label="2.">
       {a mathematical formula}T1⊨φiff{a mathematical formula}T2⊨φfor every an SO-sentence φ with{a mathematical formula}sig(φ)⊆Σ.
      </list-item>
     </list>
     <paragraph label="Proof">
      {a mathematical formula}(1)⇒(2). Let {a mathematical formula}T1 and {a mathematical formula}T2 be Σ-inseparable and φ an SO-sentence such that {a mathematical formula}sig(φ)⊆Σ. Then {a mathematical formula}T1⊭φ iff there is a model {a mathematical formula}I of {a mathematical formula}T1 with {a mathematical formula}I⊭φ iff there is a model {a mathematical formula}J of {a mathematical formula}T2 with {a mathematical formula}J⊭φ (use the definition of Σ-inseparability and choose {a mathematical formula}I (respectively {a mathematical formula}J) such that {a mathematical formula}I|Σ=J|Σ) iff {a mathematical formula}T2⊭φ.{a mathematical formula}(2)⇒(1). Assume (2) holds and let {a mathematical formula}I be a model of {a mathematical formula}T1 (for models {a mathematical formula}J of {a mathematical formula}T2 we can proceed in the same way). We have to show that there exists a model {a mathematical formula}J of {a mathematical formula}T2 such that {a mathematical formula}I|Σ=J|Σ. To this end, it is sufficient to show that {a mathematical formula}I⊨∃S1′⋯∃Sn′(⋀α∈T2α′), where {a mathematical formula}{S1,…,Sn}=sig(T2)∖Σ, {a mathematical formula}Si′ is a second-variable of the same arity as {a mathematical formula}Si ({a mathematical formula}1⩽i⩽n) and {a mathematical formula}α′ is the result of replacing in α each {a mathematical formula}Si with {a mathematical formula}Si′. We clearly have {a mathematical formula}T2⊨∃S1′⋯∃Sn′(⋀α∈T2α′) and thus (2) yields {a mathematical formula}T1⊨∃S1′⋯∃Sn′(⋀α∈T2α′). Since {a mathematical formula}I is a model of {a mathematical formula}T1, we are done.  □
     </paragraph>
     <paragraph>
      As another application in which equivalent replacement is useful, consider ontology-based data access (OBDA) where queries are posed against instance data that is stored in an ABox while a TBox is used to enrich the data and to obtain more complete answers [25], [26]. Typical query languages include conjunctive queries, positive existential queries, Datalog, and regular path queries. When using a reference ontology such as Snomed ct in an OBDA application, it is often the case that only a fragment Σ of the overall signature is used in the data and in the query—for instance only symbols that describe patients and findings, but no symbols that concern medical legislation, drug compounds, and so on. As reference ontologies tend to be updated regularly, suppose that the currently used TBox {a mathematical formula}T1 has to be replaced with a revised version {a mathematical formula}T2 in which the Σ-part was not changed, formalised by {a mathematical formula}T1≡ΣT2. Then Theorem 4 guarantees that, for any Σ-instance data and for any Σ-query formulated in one of the query languages mentioned above, query answers coincide relative to {a mathematical formula}T1 and {a mathematical formula}T2. More details and formal definitions can be found in [13].
     </paragraph>
     <paragraph label="Proof">
      During ontology development and when customising ontologies for applications, it may be necessary to merge different ontologies into a single one. Then, a major challenge is to control the consequences of the merged ontology and to prevent the merged ontologies from interacting in undesired ways. For example, if an application needs ontologies for two different domains that are formalised by TBoxes {a mathematical formula}T1 and {a mathematical formula}T2 with signatures {a mathematical formula}Σ1 and {a mathematical formula}Σ2, then it is natural to take the union {a mathematical formula}T1∪T2. To formalise that any interaction between {a mathematical formula}T1 and {a mathematical formula}T2 is avoided, one can demand that {a mathematical formula}T1∪T2 is {a mathematical formula}Σi-inseparable from {a mathematical formula}Ti for {a mathematical formula}i=1,2. Interestingly, this can be ensured by demanding that {a mathematical formula}T1 and {a mathematical formula}T2 are {a mathematical formula}Σ1∩Σ2-inseparable. This property of an inseparability relation is called robustness under joins[13], [14].As another example, consider the import of a TBox {a mathematical formula}Tim into a TBox {a mathematical formula}T during the development of {a mathematical formula}T, with the aim of reusing the existing formalisation for a particular subdomain instead of modelling it from scratch—an operation that is used frequently in the development of thematically broad reference ontologies such as Snomed ct. As in the previous example, the resulting operation is taking the union {a mathematical formula}T∪Tim. The difference between merging and import is in the desired interactions: while {a mathematical formula}T is not supposed to interfere with the meaning of the symbols from {a mathematical formula}Tim, {a mathematical formula}T would usually define new concepts based on the symbols in {a mathematical formula}Tim (cf. Point 2 of Example 2) and thus it is expected that importing {a mathematical formula}Tim has an impact on the symbols in {a mathematical formula}T. Using inseparability, we can formalise the resulting requirement as {a mathematical formula}T∪Tim≡ΣTim, for {a mathematical formula}Σ=sig(Tim).Finally, we consider the case where a TBox {a mathematical formula}T1 is replaced with a TBox {a mathematical formula}T2 as in equivalent replacement above, but where this happens in the context of a TBox {a mathematical formula}T into which {a mathematical formula}T1 was imported. The central observation is that {a mathematical formula}T1≡ΣT2 (for an appropriate Σ) yields a notion of equivalence strong enough to also prevent undesired interactions in the presence of the importing TBox {a mathematical formula}T, provided that {a mathematical formula}T uses no symbols from {a mathematical formula}T1 and {a mathematical formula}T2 except those in Σ. Formally, this can be captured by the following property of robustness under replacement, taken from [13]. We state it as a theorem since robustness under replacements will be used in several proofs later on.Robustness under replacementLet{a mathematical formula}T,{a mathematical formula}T1, and{a mathematical formula}T2be SO-TBoxes and Σ a signature. If{a mathematical formula}T1≡ΣT2and{a mathematical formula}sig(T)∩sig(T1∪T2)⊆Σ, then{a mathematical formula}T1∪T≡ΣT2∪T.Assume that {a mathematical formula}T1≡ΣT2 and {a mathematical formula}sig(T)∩sig(T1∪T2)⊆Σ. To show {a mathematical formula}T1∪T≡ΣT2∪T, let {a mathematical formula}I be a model of {a mathematical formula}T1∪T. We have to show that there is a model {a mathematical formula}J of {a mathematical formula}T2∪T such that {a mathematical formula}I|Σ=J|Σ. By {a mathematical formula}T1≡ΣT2, there exists a model {a mathematical formula}J of {a mathematical formula}T2 such that {a mathematical formula}I|Σ=J|Σ. We may assume w.l.o.g. that, additionally, {a mathematical formula}J coincides with {a mathematical formula}I on all symbols that are not in {a mathematical formula}sig(T2). Since {a mathematical formula}sig(T)∩sig(T2)⊆Σ, {a mathematical formula}J coincides with {a mathematical formula}I even on {a mathematical formula}sig(T). It follows that {a mathematical formula}J is also a model of {a mathematical formula}T, as required.  □
     </paragraph>
     <paragraph label="Proof">
      In the ontology import scenario discussed above, it is possible that the imported ontology {a mathematical formula}Tim is revised frequently. In this case, one would like to design the importing TBox {a mathematical formula}T such that any TBox {a mathematical formula}Tim can be imported into {a mathematical formula}T without undesired interaction, as long as the signature of {a mathematical formula}Tim is not changed. Intuitively, {a mathematical formula}T provides a safe interface for importing ontologies that only share symbols from some fixed signature Σ with {a mathematical formula}T. This idea has led to the definition of safety for a signature in [12]: an SO-TBox {a mathematical formula}T is safe for a signature Σ if {a mathematical formula}T∪Tim≡sig(Tim)Tim holds for all SO-TBoxes {a mathematical formula}Tim with {a mathematical formula}sig(T)∩sig(Tim)⊆Σ. Using robustness under replacement, safety can be formulated as inseparability from the empty TBox, eliminating the quantification over TBoxes used in the original definition. Implicitly this has been observed in [12] already.An SO-TBox{a mathematical formula}Tis safe for a signature Σ iff{a mathematical formula}T≡Σ∅.Assume first that {a mathematical formula}T≢Σ∅. Then {a mathematical formula}T∪Tim≢sig(Tim)Tim for the trivial TBox {a mathematical formula}Tim={A⊑A|A∈Σ∩NC}∪{∃r.⊤⊑⊤|r∈Σ∩NR} with {a mathematical formula}sig(Tim)=Σ. Hence {a mathematical formula}T is not safe for Σ. Now assume {a mathematical formula}T≡Σ∅ and let {a mathematical formula}Tim be a finite set of SO-sentences such that {a mathematical formula}sig(T)∩sig(Tim)⊆Σ. Then {a mathematical formula}T∪Tim≡sig(Tim)Tim follows from robustness under replacement.  □
     </paragraph>
     <paragraph>
      Theorem 6 paves the way towards deciding whether a TBox {a mathematical formula}T is safe for a signature Σ, by checking Σ-inseparability from the empty TBox. We will thus study the latter problem as an important special case of Σ-inseparability, with deciding safety and Theorem 6 as our main motivation.
     </paragraph>
     <paragraph label="Example 7">
      To illustrate the notion of safety, we consider a scenario inspired by [12]. An ontology engineer wants to build an ontology on scientific projects and intends to import the concept names in the signature {a mathematical formula}Σ={Nasopharyngitis,Cystic_Fibrosis} from an ontology on medical terms. Statements that could be part of the project ontology are{a mathematical formula} This TBox if safe for Σ. To see this, let {a mathematical formula}I be any interpretation. Define {a mathematical formula}J by interpreting {a mathematical formula}Nasopharyngitis and {a mathematical formula}Cystic_Fibrosis as in {a mathematical formula}I, selecting some {a mathematical formula}d∈ΔI, and setting{a mathematical formula} and finally interpreting {a mathematical formula}Genetic_Disorder_Project and {a mathematical formula}Cystic_Fibrosis_Project according to their definitions:{a mathematical formula} Then {a mathematical formula}J is a model of {a mathematical formula}T and {a mathematical formula}I|Σ=J|Σ, as required.We consider two natural extensions of {a mathematical formula}T that are not safe for Σ. First, after adding the concept inclusion{a mathematical formula} to {a mathematical formula}T the resulting TBox {a mathematical formula}T′ implies the disjointness of the imported concepts {a mathematical formula}Cystic_Fibrosis and {a mathematical formula}Nasopharyngitis and is, therefore, not safe for Σ. More formally, there does not exist any model {a mathematical formula}J of {a mathematical formula}T′ that coincides with the interpretation {a mathematical formula}I defined by {a mathematical formula}ΔI={d} and {a mathematical formula}Cystic_FibrosisI=NasopharyngitisI={d} on Σ.Second, by adding the disjointness condition{a mathematical formula} to {a mathematical formula}T one obtains a TBox {a mathematical formula}T″ which is not safe for Σ. This can be seen by showing that there does not exist a model of {a mathematical formula}T″ that coincides with the interpretation {a mathematical formula}I with {a mathematical formula}ΔI={d} and {a mathematical formula}NasopharyngitisI=Cystic_FibrosisI={d} on Σ.
     </paragraph>
    </section>
    <section label="4">
     Deciding inseparability in {a mathematical formula}ALC and {a mathematical formula}ALCI
     <paragraph>
      We study inseparability as a decision problem for {a mathematical formula}ALC and {a mathematical formula}ALCI: given TBoxes {a mathematical formula}T1 and {a mathematical formula}T2 and a signature Σ, decide whether {a mathematical formula}T1≡ΣT2. Since this general version of the problem turns out to be undecidable even for acyclic {a mathematical formula}ALC-TBoxes, we also consider three more restricted versions of the original problem: (i) The case where Σ contains only concept names, but no role names. We argue in Section 4.2 that this case captures several relevant applications. We exhibit an interesting connection to DLs with circumscription [27], [28] and use it to show {a mathematical formula}coNExpNP-completeness for the inseparability of acyclic and general TBoxes formulated in {a mathematical formula}ALC and {a mathematical formula}ALCI.{sup:2} (ii) The case where {a mathematical formula}T2=∅, which corresponds to deciding safety for a signature as discussed in the previous section, and which is still undecidable for acyclic {a mathematical formula}ALC-TBoxes. We also consider (iii) the combination of the cases (i) and (ii), which turns out to be {a mathematical formula}Π2p-complete for acyclic and general TBoxes formulated in {a mathematical formula}ALC and {a mathematical formula}ALCI. The results obtained in this and the subsequent section are summarised in Table 1 where {a mathematical formula}≡Σ∩NC means that Σ contains only concept names.
     </paragraph>
     <paragraph>
      We briefly comment on the two open problems in Table 1: nothing is known about the complexity of deciding {a mathematical formula}T1≡ΣT2 if {a mathematical formula}T1 and {a mathematical formula}T2 are acyclic {a mathematical formula}EL- or {a mathematical formula}ELI-TBoxes. For all we know, the problem could be undecidable (as in the case of general {a mathematical formula}EL-TBoxes) or in PTime (which holds if one TBox is empty). If Σ is a concept signature, then a {a mathematical formula}coNExpNP-upper bound follows from the corresponding upper bounds for {a mathematical formula}ALCI-TBoxes but no non-trivial lower bound is known. We believe that new ideas are required to address these two problems. It seems that the techniques developed to obtain the other complexity/decidability results in Table 1 are not applicable.
     </paragraph>
     <section label="4.1">
      <section-title>
       The general case
      </section-title>
      <paragraph label="Claim">
       We start with the fundamental observation that inseparability is undecidable even when {a mathematical formula}T1 is an acyclic {a mathematical formula}ALC-TBox and {a mathematical formula}T2 is empty. Given an acyclic{a mathematical formula}ALC-TBox{a mathematical formula}Tand a signature Σ, it is undecidable whether{a mathematical formula}T≡Σ∅.The proof is by reduction of the universal consistency problem in bimodal logic [31]. The DL version of this problem can be stated as follows. Fix two role names {a mathematical formula}r1 and {a mathematical formula}r2. A frame is a structure {a mathematical formula}F=(ΔF,r1F,r2F) with {a mathematical formula}ΔF a non-empty domain and {a mathematical formula}riF⊆ΔF×ΔF for {a mathematical formula}i∈{1,2}. An interpretation {a mathematical formula}I is based on{a mathematical formula}F if {a mathematical formula}ΔI=ΔF and {a mathematical formula}riI=riF for {a mathematical formula}i∈{1,2}. In other words, {a mathematical formula}I is based on {a mathematical formula}F iff {a mathematical formula}I|Σ=F for {a mathematical formula}Σ={r1,r2}. We say that an {a mathematical formula}ALC-concept C is valid on {a mathematical formula}F and write {a mathematical formula}F⊨C if {a mathematical formula}CI=ΔI for every interpretation {a mathematical formula}I based on {a mathematical formula}F. Then C is universally consistent if there is a frame {a mathematical formula}F with {a mathematical formula}F⊨C. The universal consistency problem is to decide, given an {a mathematical formula}ALC-concept C with {a mathematical formula}sig(C)⊆NC∪{r1,r2}, whether C is universally consistent. By a result of S. Thomason, this problem is undecidable; see Theorem 1(b) in [31].For the reduction, let C be an {a mathematical formula}ALC-concept with {a mathematical formula}sig(C)⊆NC∪{r1,r2}. Fix an {a mathematical formula}A∈NC that does not occur in C and a {a mathematical formula}v∈NR distinct from {a mathematical formula}r1,r2.C is universally consistent iff{a mathematical formula}T≢Σ∅, where{a mathematical formula}T={A⊑∃v.¬C}and{a mathematical formula}Σ={A,r1,r2}.Assume first that C is universally consistent. Then there is a frame {a mathematical formula}F with {a mathematical formula}F⊨C. To show that {a mathematical formula}T≢Σ∅, we have to find an interpretation {a mathematical formula}J such that for all interpretations {a mathematical formula}I with {a mathematical formula}I≡ΣJ, we have {a mathematical formula}I⊭T. Choose as {a mathematical formula}J any interpretation based on {a mathematical formula}F such that {a mathematical formula}AJ≠∅ and let {a mathematical formula}I be such that {a mathematical formula}I≡ΣJ. Then {a mathematical formula}I is based on {a mathematical formula}F and thus {a mathematical formula}CI=ΔI and {a mathematical formula}(∃v.¬C)I=∅. We also have {a mathematical formula}AI≠∅, and consequently {a mathematical formula}I⊭T as required.Conversely, suppose that {a mathematical formula}T≢Σ∅. Then there is an interpretation {a mathematical formula}J such that {a mathematical formula}I⊭T for all {a mathematical formula}I with {a mathematical formula}I≡ΣJ. Let {a mathematical formula}F be the frame on which {a mathematical formula}J is based. To prove that C is universally consistent, we show that {a mathematical formula}F⊨C. Assume to the contrary of what is to be shown that there is an interpretation {a mathematical formula}I′ based on {a mathematical formula}F with {a mathematical formula}CI′≠ΔF. Let {a mathematical formula}I be identical to {a mathematical formula}I′ except that {a mathematical formula}AI=AJ and {a mathematical formula}vI=ΔF×ΔF. Obviously, {a mathematical formula}I|Σ=J|Σ. Moreover, {a mathematical formula}I is a model of {a mathematical formula}T: it suffices to note that we have {a mathematical formula}(¬C)I=(¬C)I′≠∅ and thus {a mathematical formula}(∃v.¬C)I=ΔF. This is a contradiction to the choice of {a mathematical formula}I.  □
      </paragraph>
     </section>
     <section label="4.2">
      <section-title>
       Concept signatures
      </section-title>
      <paragraph>
       We now consider the case where the signature Σ contains only concept names, but no role names. From now on, we will call such a signature Σ a concept signature. This case is of interest for two reasons. First, it lays the technical foundations for the results about ontology modules obtained in Sections 6 and 7. And second, it covers relevant special cases of ontology import and merging. For safe ontology import, the focus of description logics on modelling concepts rather than roles suggests that importing only concept names is a relevant special case. By Theorem 6, checking safety can in this case be realised by deciding {a mathematical formula}T≡Σ∅ with Σ a concept signature.{sup:3} For ontology merging recall that, by robustness under joins, {a mathematical formula}T1∪T2 is {a mathematical formula}sig(Ti)-inseparable from {a mathematical formula}Ti for {a mathematical formula}i=1,2 if, and only if, {a mathematical formula}T1 and {a mathematical formula}T2 are {a mathematical formula}sig(T1)∩sig(T2)-inseparable. If {a mathematical formula}T1 and {a mathematical formula}T2 cover different domains, it might well be that they do not share any role names. In this case, the signature {a mathematical formula}sig(T1)∩sig(T2) relevant for testing inseparability is a concept signature.
      </paragraph>
      <paragraph>
       In the following, we show that deciding Σ-inseparability w.r.t. concept signatures is {a mathematical formula}coNExpNP-complete for both {a mathematical formula}ALC and {a mathematical formula}ALCI. Our main technical tool is a close correspondence between Σ-inseparability w.r.t. concept signatures and satisfiability of a certain kind of TBoxes with circumscription [28], which is interesting in its own right. We start with introducing TBoxes with circumscription.
      </paragraph>
      <paragraph>
       A circumscribed TBox{sup:4}{a mathematical formula}CircM,F(T) consists of a (general) TBox {a mathematical formula}T and disjoint finite sets of concept names M and F, where M identifies those concept names that are circumscribed (i.e., whose extension is minimised) and F identifies those concept names whose extension must remain fixed during circumscription. The extension of all other symbols, including those of all role names, can be varied freely during circumscription. To formally define the semantics of circumscribed TBoxes, we define a preference relation {a mathematical formula}&lt;M,F on interpretations by setting {a mathematical formula}I&lt;M,FI′ if {a mathematical formula}ΔI=ΔI′, {a mathematical formula}AI=AI′ for all {a mathematical formula}A∈F, {a mathematical formula}AI⊆AI′ for all {a mathematical formula}A∈M, and there exists an {a mathematical formula}A∈M such that {a mathematical formula}AI⊊AI′. An interpretation {a mathematical formula}I is a model of {a mathematical formula}CircM,F(T) if {a mathematical formula}I is a model of {a mathematical formula}T and there is no model {a mathematical formula}I′ of {a mathematical formula}T with {a mathematical formula}I′&lt;M,FI. A concept C is satisfiable w.r.t.{a mathematical formula}CircM,F(T) if there is a model {a mathematical formula}I of {a mathematical formula}CircM,F(T) with {a mathematical formula}CI≠∅. It is shown in [28] that satisfiability of concepts w.r.t. circumscribed TBoxes formulated in {a mathematical formula}ALC or {a mathematical formula}ALCI is {a mathematical formula}NExpNP-complete.
      </paragraph>
      <paragraph label="Proof">
       We establish an upper bound for the inseparability of general {a mathematical formula}ALCI-TBoxes w.r.t. concept signatures in Theorem 9 and a corresponding lower bound for acyclic {a mathematical formula}ALC-TBoxes in Theorem 10. Together, the proofs of these theorems establish the announced connection between inseparability and circumscription. Given{a mathematical formula}ALCI-TBoxes{a mathematical formula}T1and{a mathematical formula}T2and a concept signature Σ, it is in{a mathematical formula}coNExpNPto decide whether{a mathematical formula}T1≡ΣT2.By Lemma 3, it suffices to give a polynomial reduction of Σ-entailment for {a mathematical formula}ALCI-TBoxes to concept unsatisfiability w.r.t. circumscribed {a mathematical formula}ALCI-TBoxes. Assume that we want to decide whether {a mathematical formula}T1⊨ΣT2 with {a mathematical formula}Σ⊆NC. We may assume that {a mathematical formula}T2={C≡⊤}, for some {a mathematical formula}ALCI-concept C, and that {a mathematical formula}sig(T1)∩sig(T2)⊆Σ (see proof of Lemma 3). Set {a mathematical formula}M={A} with A a fresh concept name, {a mathematical formula}F=Σ, and {a mathematical formula}T=T1∪{A≡¬C}.{a mathematical formula}T1⊨ΣT2iff A is unsatisfiable w.r.t.{a mathematical formula}CircM,F(T).Assume that A is satisfiable w.r.t. {a mathematical formula}CircM,F(T) and let {a mathematical formula}I be a model of {a mathematical formula}CircM,F(T) with {a mathematical formula}AI≠∅. Then {a mathematical formula}I is a model of {a mathematical formula}T1. To show that {a mathematical formula}T1⊭ΣT2, it is enough to show that there is no model {a mathematical formula}J of {a mathematical formula}T2 with {a mathematical formula}J|Σ=I|Σ. Assume to the contrary that there is such a {a mathematical formula}J. Since {a mathematical formula}sig(T1)∩sig(T2)⊆Σ and {a mathematical formula}J|Σ=I|Σ, we can take the {a mathematical formula}Σ∪sig(T1)-part of {a mathematical formula}I and the {a mathematical formula}Σ∪sig(T2)-part of {a mathematical formula}J to build a new interpretation {a mathematical formula}J′ that is a model of both {a mathematical formula}T1 and {a mathematical formula}T2. Since A does not occur in Σ, {a mathematical formula}T1, and {a mathematical formula}T2, we can further assume {a mathematical formula}AJ′=∅. Since {a mathematical formula}J′ is a model of {a mathematical formula}T2, we have {a mathematical formula}CJ′=ΔJ′, thus {a mathematical formula}J′ is not only a model of {a mathematical formula}T1, but also of {a mathematical formula}T. It can be checked that {a mathematical formula}J′&lt;M,FI, in contradiction to {a mathematical formula}I being a model of {a mathematical formula}CircM,F(T).Conversely, assume that {a mathematical formula}T1 does not Σ-entail {a mathematical formula}T2. Let {a mathematical formula}Iˆ be a model of {a mathematical formula}T1 such that there is no model {a mathematical formula}J of {a mathematical formula}T2 with {a mathematical formula}J|Σ=Iˆ|Σ. Using filtration, we show in Appendix A that {a mathematical formula}Iˆ can be assumed to be finite. Consider the class of models{a mathematical formula} Since A does not occur in Σ, {a mathematical formula}T1, and {a mathematical formula}T2, we may assume that {a mathematical formula}AI=¬CI for all {a mathematical formula}I∈I. Thus, all interpretations in {a mathematical formula}I are models of {a mathematical formula}T. Moreover, no interpretation {a mathematical formula}I∈I is a model of {a mathematical formula}T2, thus {a mathematical formula}C≠ΔI which implies {a mathematical formula}AI≠∅. Since {a mathematical formula}Iˆ is finite, we find an {a mathematical formula}I∈I such that {a mathematical formula}AI is minimal, i.e., there is no {a mathematical formula}I′∈I with {a mathematical formula}AI′⊊AI. It can be verified that there is no model {a mathematical formula}I″ of {a mathematical formula}T with {a mathematical formula}I′&lt;M,FI (any such model would have to be in {a mathematical formula}I and contradict the choice of {a mathematical formula}I). Hence, {a mathematical formula}I witnesses that A is satisfiable w.r.t. {a mathematical formula}CircM,F(T).  □
      </paragraph>
      <paragraph>
       We now establish a matching lower bound. It applies to acyclic {a mathematical formula}ALC-TBoxes, and even to the case where the union of the input TBoxes {a mathematical formula}T1 and {a mathematical formula}T2 is acyclic. Note that this need not be the case even if {a mathematical formula}T1 and {a mathematical formula}T2 are both acyclic by themselves. Acyclicity of {a mathematical formula}T1∪T2 will play a role in the proof of Theorem 33 below.
      </paragraph>
      <paragraph label="Proof">
       Given acyclic{a mathematical formula}ALC-TBoxes{a mathematical formula}T1and{a mathematical formula}T2and a concept signature Σ, it is{a mathematical formula}coNExpNP-hard to decide whether{a mathematical formula}T1≡ΣT2. This is even true when{a mathematical formula}T1∪T2is acyclic.We only treat general {a mathematical formula}ALC-TBoxes here. The proof for {a mathematical formula}T1∪T2 acyclic is significantly more technical and deferred to Appendix A.  □
      </paragraph>
      <paragraph>
       By Lemma 3, it is sufficient to give a polynomial reduction of concept satisfiability w.r.t. circumscribed {a mathematical formula}ALC-TBoxes to the complement of Σ-entailment. Assume that we want to decide whether an {a mathematical formula}ALC-concept C is satisfiable w.r.t. a circumscribed TBox {a mathematical formula}CircM,F(T), where {a mathematical formula}T is also formulated in {a mathematical formula}ALC. Let{a mathematical formula} with {a mathematical formula}aux a fresh role name. Note that C is satisfiable w.r.t. the non-circumscribed TBox {a mathematical formula}T iff {a mathematical formula}T1 has a model. We shall introduce a second TBox {a mathematical formula}T2 and inseparability-signature Σ to simulate circumscription, i.e., we want to achieve that {a mathematical formula}T1⊭ΣT2 iff {a mathematical formula}T1 is satisfiable in a model that is minimal w.r.t. {a mathematical formula}&lt;M,F. Set {a mathematical formula}Σ=M∪F. To construct {a mathematical formula}T2, introduce for each symbol {a mathematical formula}X∈sig(T)∪M∪F a primed copy {a mathematical formula}X′ of X and denote by {a mathematical formula}T′ the TBox resulting from {a mathematical formula}T when every occurrence of X is replaced with {a mathematical formula}X′. Take a fresh role name {a mathematical formula}aux′ and define {a mathematical formula}T2 by taking the union of
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}T∪T′;
       </list-item>
       <list-item label="•">
        {a mathematical formula}A′⊑A, for every {a mathematical formula}A∈M;
       </list-item>
       <list-item label="•">
        {a mathematical formula}A′≡A, for every {a mathematical formula}A∈F;
       </list-item>
       <list-item label="•">
        {a mathematical formula}⊤⊑∃aux′.⨆A∈M(A⊓¬A′).
       </list-item>
      </list>
      <paragraph label="Claim">
       C is satisfiable w.r.t.{a mathematical formula}CircM,F(T)iff{a mathematical formula}T1does not Σ-entail{a mathematical formula}T2.
      </paragraph>
      <paragraph label="Proof">
       Assume that C is satisfiable w.r.t. {a mathematical formula}CircM,F(T) and let {a mathematical formula}I be a model of {a mathematical formula}CircM,F(T) with {a mathematical formula}CI≠∅. By setting {a mathematical formula}auxI=ΔI×ΔI, we may assume that {a mathematical formula}I is a model of {a mathematical formula}T1. We prove that there is no model {a mathematical formula}J of {a mathematical formula}T2 with {a mathematical formula}J|Σ=I|Σ. Assume to the contrary that there is such a {a mathematical formula}J. Let {a mathematical formula}J′ be obtained from {a mathematical formula}J by setting {a mathematical formula}XJ′=(X′)J, for all {a mathematical formula}X∈sig(T)∪M∪F. We show that {a mathematical formula}J′&lt;M,FI:
       <list>
        For {a mathematical formula}A∈M, we have {a mathematical formula}AJ′=(A′)J⊆AJ=AI, with the inclusion due to {a mathematical formula}A′⊑A∈T2 and the last equation due to {a mathematical formula}J|Σ=I|Σ and {a mathematical formula}A∈Σ.For {a mathematical formula}A∈F, we have {a mathematical formula}AJ′=(A′)J=AJ=AI.There is an {a mathematical formula}A∈M with {a mathematical formula}AJ′⊊AI since {a mathematical formula}⊤⊑∃aux′.⨆A∈M(A⊓¬A′)∈T2.Conversely, assume that
       </list>
       <paragraph>
        {a mathematical formula}T1⊭ΣT2. Take a model {a mathematical formula}I of {a mathematical formula}T1 such that there is no model {a mathematical formula}J of {a mathematical formula}T2 with {a mathematical formula}J|Σ=I|Σ. Then {a mathematical formula}CI≠∅. To show that C is satisfiable w.r.t. {a mathematical formula}CircM,F(T), it thus suffices to show that there is no model {a mathematical formula}J of {a mathematical formula}T with {a mathematical formula}J&lt;M,FI. Assume to the contrary that there is such a {a mathematical formula}J. Consider the interpretation {a mathematical formula}J′ defined by setting {a mathematical formula}XJ′=XI and {a mathematical formula}(X′)J′=XJ, for every {a mathematical formula}X∈sig(T)∪M∪F. It can be checked that {a mathematical formula}J′ is a model of {a mathematical formula}T2 such that {a mathematical formula}J|Σ=I|Σ, in contradiction to the non-existence of such a model.  □
       </paragraph>
      </paragraph>
     </section>
     <section label="4.3">
      <section-title>
       Concept signatures and the empty TBox
      </section-title>
      <paragraph>
       We now consider deciding whether {a mathematical formula}T≡Σ∅ for a concept signature Σ and an {a mathematical formula}ALC- or {a mathematical formula}ALCI-TBox {a mathematical formula}T. As mentioned before, this problem corresponds to deciding safety of {a mathematical formula}T w.r.t. Σ. It turns out that {a mathematical formula}T≡Σ∅ is equivalent to the property that, for every interpretation {a mathematical formula}Iof cardinality one, there is a model {a mathematical formula}J of {a mathematical formula}T with {a mathematical formula}J|Σ=I|Σ. This suggests a {a mathematical formula}Π2p-upper bound for deciding {a mathematical formula}T≡Σ∅, which turns out to be tight. Both the characterisation of inseparability in terms of interpretations of cardinality one and the {a mathematical formula}Π2p-completeness carry over to FO-TBoxes whose classes of models are closed under disjoint unions.
      </paragraph>
      <paragraph>
       We start with introducing some preliminaries. A one-point interpretation is an interpretation {a mathematical formula}I with {a mathematical formula}|ΔI|=1. A model of {a mathematical formula}T is a one-point-model if it is a one-point interpretation. Let {a mathematical formula}Ii, {a mathematical formula}i∈I, be a family of interpretations. The disjoint union{a mathematical formula}I=⨄i∈IIi of {a mathematical formula}Ii,i∈I, is defined as
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}ΔI=⋃i∈I{i}×ΔIi;
       </list-item>
       <list-item label="•">
        {a mathematical formula}AI=⋃i∈I{i}×AIi, for all {a mathematical formula}A∈NC;
       </list-item>
       <list-item label="•">
        {a mathematical formula}rI=⋃i∈I{((i,x),(i,y))|(x,y)∈rIi}, for all {a mathematical formula}r∈NR.
       </list-item>
      </list>
      <paragraph label="Lemma 11">
       A TBox {a mathematical formula}T is preserved under disjoint unions if the disjoint union of any family of models of {a mathematical formula}T is again a model of {a mathematical formula}T. A description logic {a mathematical formula}L is preserved under disjoint unions if all {a mathematical formula}L-TBoxes are preserved under disjoint unions. The following is well known (see for example [32]) and even applies to much more expressive DLs such as {a mathematical formula}SHIQ. {a mathematical formula}ALCIis preserved under disjoint unions.
      </paragraph>
      <paragraph label="Proof">
       The following lemma states the announced characterisation of inseparability from the empty TBox w.r.t. concept signatures in terms of one-point interpretations. One-point criterionLet{a mathematical formula}Tbe an FO-TBox preserved under disjoint unions and Σ a concept signature. Then{a mathematical formula}T≡Σ∅iff for every one-point interpretation{a mathematical formula}Ithere exists a model{a mathematical formula}Jof{a mathematical formula}Tsuch that{a mathematical formula}J|Σ=I|Σ.The implication from left to right is trivial. For the converse direction, assume that for every one-point interpretation {a mathematical formula}I there exists a model {a mathematical formula}J of {a mathematical formula}T such that {a mathematical formula}J|Σ=I|Σ. We have to show that, then, the same holds for any interpretation {a mathematical formula}I. This can be done as follows. For every {a mathematical formula}d∈ΔI, let {a mathematical formula}Id be the restriction of {a mathematical formula}I to the singleton domain {a mathematical formula}{d}: {a mathematical formula}ΔId={d}, {a mathematical formula}AId={d|d∈AI} for all {a mathematical formula}A∈NC and {a mathematical formula}rId={(d,d)|(d,d)∈rI} for all {a mathematical formula}r∈NR. For every {a mathematical formula}d∈ΔI, by assumption there is a model {a mathematical formula}Jd of {a mathematical formula}T with {a mathematical formula}Jd|Σ=Id|Σ. Let {a mathematical formula}J=⨄d∈ΔIJd. By preservation under disjoint unions {a mathematical formula}J is a model of {a mathematical formula}T. We have {a mathematical formula}I|Σ=J|Σ because Σ consists of concept names only.  □
      </paragraph>
      <paragraph label="Example 13">
       Note that Lemma 12 fails if Σ contains a role name or we want to check inseparability from unrestricted TBoxes rather than from the empty one. The former is illustrated by the following example. Consider the {a mathematical formula}EL-TBox {a mathematical formula}T={∃r.A⊑A} and {a mathematical formula}Σ={A,r}. For every one-point interpretation {a mathematical formula}I we have {a mathematical formula}I⊨T. However, for the interpretation {a mathematical formula}J with {a mathematical formula}ΔJ={d1,d2}, {a mathematical formula}rJ={(d1,d2)} and {a mathematical formula}AJ={d2}, we have {a mathematical formula}J⊭T. Since {a mathematical formula}T does not contain any non-Σ-symbols, there is no {a mathematical formula}J′ such that {a mathematical formula}J|Σ=J′|Σ and {a mathematical formula}J′⊨T.
      </paragraph>
      <paragraph>
       Lemma 12 suggests a straightforward alternating procedure for deciding {a mathematical formula}T≡Σ∅ that yields a {a mathematical formula}Π2p-upper bound; note that when {a mathematical formula}I is a singleton and {a mathematical formula}J|Σ=I|Σ, then {a mathematical formula}J must also be a singleton, so all quantification in Lemma 12 is over objects of polynomial size. A matching lower bound can be established by reduction of ∀∃-QBF, i.e., the validity of QBF formulas of the form {a mathematical formula}∀q→∃p→φ, which is well-known to be {a mathematical formula}Π2p-complete. In the proof of the following theorem, we actually show the upper bound by reduction to ∀∃-QBF instead of by an alternating procedure. This paves the way to using highly optimised QBF solvers [33] for deciding {a mathematical formula}T≡Σ∅.
      </paragraph>
      <paragraph label="Proof">
       Given an{a mathematical formula}ALCI-TBox{a mathematical formula}Tand a concept signature Σ, it is in{a mathematical formula}Π2pto decide{a mathematical formula}T≡Σ∅. The same problem is{a mathematical formula}Π2p-hard for acyclic{a mathematical formula}ALC-TBoxes.We start with the upper bound. Assume we want to decide {a mathematical formula}T≡Σ∅ with {a mathematical formula}T an {a mathematical formula}ALCI-TBox and Σ a concept signature. Take a propositional variables {a mathematical formula}pA for each concept name {a mathematical formula}A∈Σ and a (distinct) propositional variable {a mathematical formula}qX for each symbol {a mathematical formula}X∈sig(T)∖Σ. Translate concepts D in the signature {a mathematical formula}sig(T) into propositional formulas {a mathematical formula}D† by setting{a mathematical formula} Note that if {a mathematical formula}I is a one-point interpretation with {a mathematical formula}ΔI={d} and v is a propositional truth assignment such that
       <list>
        {a mathematical formula}d∈AI iff {a mathematical formula}v(pA)=1, for all {a mathematical formula}A∈sig(T)∩Σ∩NC,{a mathematical formula}d∈AI iff {a mathematical formula}v(qA)=1, for all {a mathematical formula}A∈(sig(T)∩NC)∖Σ, and{a mathematical formula}(d,d)∈rI iff {a mathematical formula}v(qr)=1, for all {a mathematical formula}r∈(sig(T)∩NC),For the lower bound, we first reduce ∀∃-QBF to the following problem:
       </list>
       <list>
        <list-item label="(‡)">
         Given a finite set M of propositional formulas, is {a mathematical formula}χP=⋀φ∈Pφ∧⋀φ∈M∖P¬φ satisfiable for all {a mathematical formula}P⊆M?
        </list-item>
       </list>
       <paragraph>
        For the reduction, let {a mathematical formula}ψ=∀p1⋯∀pn∃q1⋯∃qmφ be a ∀∃-QBF. Then ψ is valid iff (‡) holds for {a mathematical formula}M={p1,…,pn,φ∧p} with p a fresh propositional variable. To prove this assume that ψ is not valid and let {a mathematical formula}v(pi)∈{0,1} for {a mathematical formula}1⩽i⩽n be a truth assignment such that there does not exist any truth assignment extending v and satisfying φ. Then {a mathematical formula}χP is not satisfiable for {a mathematical formula}P={pi|v(pi)=1}∪{p∧φ}. Conversely, assume that {a mathematical formula}χP is not satisfiable for some {a mathematical formula}P⊆M. Then P contains {a mathematical formula}φ∧p. Let {a mathematical formula}v(pi)=1 iff {a mathematical formula}pi∈P, for {a mathematical formula}1⩽i⩽n. Then there does not exist any extension of v satisfying φ and so ψ is not valid.Now we reduce (‡) to {a mathematical formula}T≡Σ∅. Assume {a mathematical formula}M={φ1,…,φn} is given. We can regard each {a mathematical formula}φi as an {a mathematical formula}ALC-concept {a mathematical formula}Cφi by replacing each propositional variable p with a concept name {a mathematical formula}Ap. Let {a mathematical formula}A1,…,An be fresh concept names and set {a mathematical formula}Σ={A1,…,An} and {a mathematical formula}T={Ai≡Cφi|1⩽i⩽n}. Then, {a mathematical formula}χP=⋀φi∈Pφi∧⋀φi∈M∖P¬φi is satisfiable for every {a mathematical formula}P⊆M iff {a mathematical formula}T≡Σ∅. To prove this, assume that {a mathematical formula}χP is not satisfiable for some {a mathematical formula}P⊆M. Let {a mathematical formula}I be the interpretation with domain {a mathematical formula}ΔI={d} and {a mathematical formula}d∈AiI iff {a mathematical formula}φi∈P. Then there does not exist any model {a mathematical formula}J of {a mathematical formula}T with {a mathematical formula}I|Σ=J|Σ. Conversely, assume that {a mathematical formula}I is a model of {a mathematical formula}T such that there does not exist any model {a mathematical formula}J of {a mathematical formula}T with {a mathematical formula}I|Σ=J|Σ. We may assume that {a mathematical formula}I is a one-point interpretation with domain {a mathematical formula}ΔI={d}. But then {a mathematical formula}χP is not satisfiable for {a mathematical formula}P={φi|d∈AiI}.  □
       </paragraph>
      </paragraph>
      <paragraph>
       Note that the reductions in the proof of Theorem 14 are quite robust under modifications to the description logic used. For example, the {a mathematical formula}Π2p-lower bound already holds for acyclic {a mathematical formula}ALC-TBoxes without role names and the {a mathematical formula}Π2p-upper bound still holds for very expressive DLs such as {a mathematical formula}SHIQ and even for FO-TBoxes preserved under disjoint unions.
      </paragraph>
     </section>
    </section>
    <section label="5">
     Inseparability in {a mathematical formula}EL and {a mathematical formula}ELI
     <paragraph>
      We switch from the description logics {a mathematical formula}ALC and {a mathematical formula}ALCI to the less expressive variants {a mathematical formula}EL and {a mathematical formula}ELI that lack negation, disjunction, and universal quantification. Our first results are that inseparability of {a mathematical formula}EL-TBoxes from the empty TBoxes w.r.t. unrestricted signatures is still undecidable and inseparability of {a mathematical formula}EL- and {a mathematical formula}ELI-TBoxes w.r.t. concept signatures is still {a mathematical formula}coNExpNP-complete, showing that in these cases the reduction of expressive power does not seem to pay off in terms of reduced complexity. One difference, however, is that in the {a mathematical formula}EL-case, our lower bounds only apply to general TBoxes while they work even for acyclic TBoxes in the {a mathematical formula}ALC-case. We then show that there is a complexity reduction for inseparability from the empty TBox when only concept signatures or only acyclic TBoxes are allowed. In the first case, the complexity drops from {a mathematical formula}Π2p to PTime and in the second case from undecidable to PTime. Both PTime upper bounds apply to {a mathematical formula}ELI-TBoxes and thus, in all analysed cases, the complexity coincides for {a mathematical formula}EL and {a mathematical formula}ELI. This is remarkable since the standard reasoning problem of concept subsumption w.r.t. TBoxes is in PTime for {a mathematical formula}EL, while it is ExpTime-complete for general {a mathematical formula}ELI-TBoxes and PSpace-complete for acyclic {a mathematical formula}ELI-TBoxes [15].
     </paragraph>
     <section label="5.1">
      <section-title>
       The general case and concept signatures
      </section-title>
      <paragraph label="Theorem 15">
       We start with the announced undecidability result. Note that, in contrast to the case of {a mathematical formula}ALC, the undecidability result for {a mathematical formula}EL applies only to general TBoxes, but not to acyclic ones. In fact, we leave it open whether inseparability of acyclic {a mathematical formula}EL-TBoxes is decidable. Given an{a mathematical formula}EL-TBox{a mathematical formula}Tand signature Σ, it is undecidable whether{a mathematical formula}T≡Σ∅.
      </paragraph>
      <paragraph>
       The proof of Theorem 15 is by reduction of the word problem for semigroups and somewhat technical. Details are given in Appendix B.
      </paragraph>
      <paragraph label="Theorem 16">
       We now consider inseparability w.r.t. concept signatures and show that there is no gain in complexity when replacing {a mathematical formula}ALC/ALCI with {a mathematical formula}EL/ELI as far as general TBoxes are concerned. Again, the case of acyclic TBoxes is left open. Given{a mathematical formula}EL- or{a mathematical formula}ELI-TBoxes{a mathematical formula}T1and{a mathematical formula}T2and concept signatures Σ, it is{a mathematical formula}coNExpNP-complete to decide{a mathematical formula}T1≡ΣT2.
      </paragraph>
      <paragraph>
       The upper bound in Theorem 16 is immediate from Theorem 9. The lower bound is proved by a reduction of (a slight variation of) inseparability of {a mathematical formula}ALC-TBoxes w.r.t. concept signatures. The technical details of this reduction are given in Appendix B.
      </paragraph>
     </section>
     <section label="5.2">
      <section-title>
       Concept signatures and the empty TBox
      </section-title>
      <paragraph>
       By Theorem 15, inseparability of {a mathematical formula}EL-TBoxes is still undecidable when one of the TBoxes must be empty. Like in {a mathematical formula}ALC/ALCI, the situation improves when we allow only concept signatures. In contrast to {a mathematical formula}ALC/ALCI, we can also attain decidability by replacing general TBoxes with acyclic ones. In both cases, we even obtain PTime complexity. The next theorem analyses the case of concept signatures.
      </paragraph>
      <paragraph label="Proof">
       Given an{a mathematical formula}ELI-TBox{a mathematical formula}Tand a concept signature Σ, it is in PTime to decide{a mathematical formula}T≡Σ∅.Let {a mathematical formula}T be an {a mathematical formula}ELI-TBox and Σ a concept signature. Consider the ∀∃-QBF {a mathematical formula}φT constructed in the proof of Theorem 14. As proved there, we have {a mathematical formula}T≡Σ∅ iff {a mathematical formula}φT=∀p→∃q→T† is valid. It is easy to check that, when {a mathematical formula}T is an {a mathematical formula}ELI-TBox, then {a mathematical formula}T† is a conjunction of propositional Horn formulas, i.e., formulas of the form {a mathematical formula}w1∧⋯∧wk→v1∧⋯∧vl where the {a mathematical formula}wi and {a mathematical formula}vi are propositional variables. It remains to recall that the validity of quantified Boolean Horn formulas can be decided in PTime[34]. □
      </paragraph>
     </section>
     <section label="5.3">
      <section-title>
       Acyclic TBoxes and the empty TBox
      </section-title>
      <paragraph>
       We now explore the second way of overcoming undecidability of inseparability of {a mathematical formula}EL- and {a mathematical formula}ELI-TBoxes from the empty TBox: restrict the input to acyclic TBoxes. Note that, in this case, we do not limit ourselves to concept signatures. As in the previous section, we obtain a PTime upper bound, though with a different and more subtle approach. The approach is based on a characterisation of {a mathematical formula}T≡Σ∅ in terms of certain syntactic and semantic dependencies that will also play a central role when we deal with modules and module extraction in Sections 6 and 7.
      </paragraph>
      <paragraph label="Example 18">
       We start with introducing syntactic dependencies. The following example shows two cases of how an acyclic {a mathematical formula}EL-TBox can fail to be Σ-inseparable from the empty TBox. These two cases will then give rise to two types of syntactic dependencies. (a) Let {a mathematical formula}T={A⊑∃r.B} and {a mathematical formula}Σ={A,B}. Then {a mathematical formula}T≢Σ∅: for the interpretation {a mathematical formula}I with {a mathematical formula}ΔI={d}, {a mathematical formula}AI={d}, and {a mathematical formula}BI=∅, there is no model {a mathematical formula}J of {a mathematical formula}T with {a mathematical formula}J|Σ=I|Σ. A slightly more complex example illustrating the same observation is given by setting {a mathematical formula}T={A⊑∃r.B,B⊑∃s.E} and {a mathematical formula}Σ={A,s}. Then {a mathematical formula}T≢Σ∅: for the interpretation {a mathematical formula}I with {a mathematical formula}ΔI={d}, {a mathematical formula}AI={d}, and {a mathematical formula}sI=∅, there is no model {a mathematical formula}J of {a mathematical formula}T with {a mathematical formula}J|Σ=I|Σ.(b) Let {a mathematical formula}T={A1⊑∃r.B1,A2⊑∃r.B2,A≡B1⊓B2} and {a mathematical formula}Σ={A1,A2,A}. Then {a mathematical formula}T≢Σ∅: for the interpretation {a mathematical formula}I with {a mathematical formula}ΔI={d}, {a mathematical formula}A1I=A2I={d}, and {a mathematical formula}AI=∅, there is no model {a mathematical formula}J of {a mathematical formula}T with {a mathematical formula}J|Σ=I|Σ.
      </paragraph>
      <paragraph>
       Intuitively, in part (a) of Example 18, the reason for separability from the empty TBox is that one Σ-symbol occurs in the definition of another one; in part (b), this is not the case, but there are interacting definitions of different Σ-concept names. To generalise these examples, we introduce some notation. For an acyclic TBox {a mathematical formula}T,
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}Lhs(T) denotes the set of concept names A such that there is a statement {a mathematical formula}A⋈C∈T;
       </list-item>
       <list-item label="•">
        {a mathematical formula}Def(T) denotes the set of concept names such that there is a definition {a mathematical formula}A≡C∈T;
       </list-item>
       <list-item label="•">
        {a mathematical formula}dependT≡(A) is defined exactly as {a mathematical formula}dependT(A) (introduced in Section 2), except that only concept definitions {a mathematical formula}A≡C are considered while concept inclusions {a mathematical formula}A⊑C are disregarded.
       </list-item>
      </list>
      <paragraph label="Definition 19">
       Let {a mathematical formula}T be an acyclic {a mathematical formula}ELI-TBox, Σ a signature, and {a mathematical formula}A∈Σ. We say that
      </paragraph>
      <list>
       <list-item label="•">
        A has a direct Σ-dependency in{a mathematical formula}T if {a mathematical formula}dependT(A)∩Σ≠∅.
       </list-item>
       <list-item label="•">
        A has an indirect Σ-dependency in{a mathematical formula}T if {a mathematical formula}A∈Def(T)∩Σ and there are {a mathematical formula}A1,…,An∈Lhs(T)∩Σ such that {a mathematical formula}A∉{A1,…,An} and{a mathematical formula}
       </list-item>
      </list>
      <paragraph label="Lemma 20">
       To understand the “{a mathematical formula}∖Def(T)”-part in indirect Σ-dependencies, reconsider part (b) of Example 18, replace {a mathematical formula}A≡B1⊓B2 with {a mathematical formula}A≡B1⊓B1′⊓B2 and {a mathematical formula}B1′≡B1, and observe that {a mathematical formula}T≢Σ∅ still holds. Note that many A that have a direct Σ-dependency also have an indirect Σ-dependency. The following lemma can be proved by a straightforward generalisation of the arguments in Example 18 and shows that, as expected, syntactic dependencies result in separability from the empty TBox. Let{a mathematical formula}Tbe an acyclic{a mathematical formula}ELI-TBox and Σ a signature. If{a mathematical formula}Tcontains a direct or indirect syntactic Σ-dependency, then{a mathematical formula}T≢Σ∅.
      </paragraph>
      <paragraph>
       In the remainder of this section, we show that the converse of Lemma 20 is also true and then use this observation to devise the announced PTime decision procedure.
      </paragraph>
      <paragraph label="Definition 21">
       To prove the converse of Lemma 20 (and also to prepare for the use of Σ-dependencies in the context of acyclic {a mathematical formula}ALCI-TBoxes in Section 6), it is convenient to replace indirect Σ-dependencies with the following semantic condition. Let {a mathematical formula}T be an acyclic {a mathematical formula}ELI-TBox, Σ a signature. We say that {a mathematical formula}T contains a Boolean Σ-constraint if there is a {a mathematical formula}P⊆Lhs(T)∩Σ such that the concept{a mathematical formula} is not satisfiable in a one-point model of {a mathematical formula}T.
      </paragraph>
      <paragraph label="Example 22">
       It can be seen that Boolean Σ-constraints are actually not an equivalent replacement of indirect Σ-dependencies. There are direct Σ-dependencies that give rise to Boolean Σ-constraints but do not give rise to indirect Σ-dependencies. Let {a mathematical formula}T={A⊑∃r.B,B⊑B′} and {a mathematical formula}Σ={A,B}. Then {a mathematical formula}T contains a direct Σ-dependency since {a mathematical formula}B∈dependT(A) and {a mathematical formula}T contains a Boolean Σ-constraint since {a mathematical formula}A⊓¬B is not satisfiable in any one-point model of {a mathematical formula}T. However, {a mathematical formula}T contains no indirect Σ-dependency since {a mathematical formula}T contains no concept equations.
      </paragraph>
      <paragraph label="Lemma 23">
       However, we have the following (joint) equivalence. Let{a mathematical formula}Tbe an acyclic{a mathematical formula}ELI-TBox and Σ a signature. Then the following are equivalent:
      </paragraph>
      <list>
       <list-item label="(a)">
        {a mathematical formula}Tcontains neither a direct nor an indirect Σ-dependency;
       </list-item>
       <list-item label="(b)">
        {a mathematical formula}Tcontains neither a direct Σ-dependency nor a Boolean Σ-constraint.
       </list-item>
      </list>
      <paragraph label="Proof">
       (a) ⇒ (b) Assume that {a mathematical formula}T contains neither a direct nor an indirect Σ-dependency. We have to show that {a mathematical formula}T does not contain a Boolean Σ-constraint, i.e., that for every {a mathematical formula}P⊆Lhs(T)∩Σ the concept {a mathematical formula}CP from Definition 21 is satisfiable in a one-point model of {a mathematical formula}T. Assume {a mathematical formula}P⊆Lhs(T)∩Σ is given. We construct a one-point model {a mathematical formula}I of {a mathematical formula}T satisfying {a mathematical formula}CP as follows. Set {a mathematical formula}ΔI={d} and for all {a mathematical formula}r∈NR,{a mathematical formula} The extension {a mathematical formula}AI of concept names A is defined by induction on the definitorial depth {a mathematical formula}dT(A) of A in {a mathematical formula}T: if {a mathematical formula}A∈NC with {a mathematical formula}dT(A)=0, then set{a mathematical formula} Now let {a mathematical formula}A∈NC such that {a mathematical formula}dT(A)&gt;0 and assume that {a mathematical formula}BI has already been defined for all concept names B with {a mathematical formula}dT(B)&lt;dT(A). Then define {a mathematical formula}AI as follows:
       <list label="Claim 1">
        if {a mathematical formula}A∈P∪⋃B∈PdependT(B), then set {a mathematical formula}AI={d};otherwise,{a mathematical formula}Isatisfies{a mathematical formula}T.To prove
       </list>
       <paragraph>
        Claim 1, let {a mathematical formula}A⋈C∈T. We distinguish the following cases:
       </paragraph>
       <list>
        <list-item label="•">
         {a mathematical formula}A∈P∪⋃B∈PdependT(B).By definition of {a mathematical formula}AI and {a mathematical formula}rI, we have {a mathematical formula}AI={d}, {a mathematical formula}rI={(d,d)} for all {a mathematical formula}r∈dependT(A), and {a mathematical formula}BI={d} for all {a mathematical formula}B∈dependT(A). Thus {a mathematical formula}CI={d} and {a mathematical formula}A⋈C is satisfied in {a mathematical formula}I.
        </list-item>
        <list-item label="•">
         {a mathematical formula}A∉P∪⋃B∈PdependT(B).If {a mathematical formula}⋈=⊑, then {a mathematical formula}A∉Def(T). By (2.1), {a mathematical formula}AI=∅ and so {a mathematical formula}I satisfies {a mathematical formula}A⊑C. If {a mathematical formula}⋈=≡, then {a mathematical formula}AI=CI by (2.2), and so {a mathematical formula}I satisfies {a mathematical formula}A≡C.
        </list-item>
       </list>
       <paragraph label="Claim 3">
        {a mathematical formula}d∈CPI.Recall that {a mathematical formula}CP=⨅A∈PA⊓⨅A∈(Lhs(T)∩Σ)∖P¬A. Since {a mathematical formula}P⊆Lhs(T) we have {a mathematical formula}dT(A)&gt;0 for all {a mathematical formula}A∈P. Thus {a mathematical formula}AI is defined in (1) for all {a mathematical formula}A∈P. It follows that {a mathematical formula}AI={d} for all {a mathematical formula}A∈P. Thus, {a mathematical formula}d∈(⨅A∈PA)I. To show that {a mathematical formula}d∈(⨅A∈(Lhs(T)∩Σ)∖P¬A)I, let {a mathematical formula}A∈(Lhs(T)∩Σ)∖P. We have to show that {a mathematical formula}AI=∅. Since {a mathematical formula}T does not contain direct Σ-dependencies, {a mathematical formula}A∉P∪⋃B∈PdependT(B). Hence Case (2) of the inductive definition of {a mathematical formula}AI applies. If Case (2.1) applies then {a mathematical formula}AI=∅, as required. If Case (2.2) applies then let {a mathematical formula}A≡C∈T and {a mathematical formula}P={A1,…,An}. Since {a mathematical formula}T does not contain indirect Σ-dependencies, there is a {a mathematical formula}B∈dependT≡(A)∖Def(T) such that {a mathematical formula}B∉⋃1⩽i⩽ndependT(Ai). Since {a mathematical formula}T does not contain direct Σ-dependencies and {a mathematical formula}A∈(Lhs(T)∩Σ), we have {a mathematical formula}B∉Σ. Thus {a mathematical formula}B∉P since {a mathematical formula}P⊆Σ. We thus obtain that {a mathematical formula}B∉P∪⋃B′∈PdependT(B′) and so {a mathematical formula}BI=∅ follows from the definition of {a mathematical formula}I. Since {a mathematical formula}I is a model of {a mathematical formula}T, this yields {a mathematical formula}AI=∅, as required.(b) ⇒ (a) Assume {a mathematical formula}T contains neither a direct Σ-dependency nor a Boolean Σ-constraint. We have to show that {a mathematical formula}T does not contain an indirect Σ-dependency. Assume to the contrary that there are {a mathematical formula}A1,…,An∈Lhs(T)∩Σ and {a mathematical formula}A∈Def(T)∩Σ such that {a mathematical formula}A∉{A1,…,An} and{a mathematical formula} We show that the concept {a mathematical formula}CP=A1⊓⋯⊓An⊓¬A is not satisfiable in a one-point model {a mathematical formula}I of {a mathematical formula}T, in contradiction to the fact that {a mathematical formula}T does not contain a Boolean Σ-constraint. We first note the following observation, which is easy to prove by induction on the definitorial depth of A in {a mathematical formula}T.For an acyclic{a mathematical formula}ELI-TBox{a mathematical formula}T, one-point model{a mathematical formula}Iof{a mathematical formula}Tand{a mathematical formula}A∈Def(T)with{a mathematical formula}AI=∅, we have{a mathematical formula}BI=∅for some{a mathematical formula}B∈dependT≡(A)∖Def(T).Now assume that there is a one-point model {a mathematical formula}I of {a mathematical formula}T with {a mathematical formula}ΔI={d} and {a mathematical formula}d∈CPI. We show that this leads to a contradiction. From {a mathematical formula}d∈CPI we obtain {a mathematical formula}AI=∅. By Claim 3 there exists {a mathematical formula}B∈dependT≡(A)∖Def(T) such that {a mathematical formula}BI=∅. By (⁎), we have {a mathematical formula}B∈⋃1⩽i⩽ndependT(Ai). On the other hand, from the condition that {a mathematical formula}I is a model of {a mathematical formula}T with {a mathematical formula}d∈AiI for {a mathematical formula}1⩽i⩽n we obtain {a mathematical formula}d∈EI for all {a mathematical formula}E∈⋃1⩽i⩽ndependT(Ai). We have derived a contradiction.  □
       </paragraph>
      </paragraph>
      <paragraph label="Proof">
       We are now ready to establish the converse of Lemma 20. Since we will use direct Σ-dependencies and Boolean Σ-constraints also in the context of acyclic {a mathematical formula}ALCI-TBoxes in Section 6, we formulate the result for this more general type of TBox. Let{a mathematical formula}Tbe an acyclic{a mathematical formula}ALCI-TBox and Σ a signature. If{a mathematical formula}Tcontains no direct Σ-dependencies and no Boolean Σ-constraints, then{a mathematical formula}T≡Σ∅.Let {a mathematical formula}T be an acyclic {a mathematical formula}ALCI-TBox containing no direct Σ-dependencies and no Boolean Σ-constraints. We show that {a mathematical formula}T≡Σ∅. Let {a mathematical formula}I be an interpretation. We have to show that there is a model {a mathematical formula}J of {a mathematical formula}T with {a mathematical formula}J|Σ=I|Σ. For each {a mathematical formula}d∈ΔI, let{a mathematical formula} and let {a mathematical formula}CPd be the concept defined in Definition 21. Since {a mathematical formula}T does not contain any Boolean Σ-constraints, for each {a mathematical formula}d∈ΔI there is a one-point model {a mathematical formula}Id of {a mathematical formula}T satisfying {a mathematical formula}CPd. We may assume that {a mathematical formula}ΔId={d} and so {a mathematical formula}d∈CPdId, for all {a mathematical formula}d∈ΔI. The construction of {a mathematical formula}J uses both the interpretation {a mathematical formula}I and the one-point interpretations {a mathematical formula}Id for {a mathematical formula}d∈ΔI. In detail, {a mathematical formula}J is defined as follows. Set {a mathematical formula}ΔJ=ΔI and define for each symbol {a mathematical formula}X∈(NC∖Lhs(T))∪NR,{a mathematical formula} It remains to define the extension {a mathematical formula}AJ for all concept names {a mathematical formula}A∈Lhs(T). The definition is by induction on the definitorial depth {a mathematical formula}dT(A) of A in {a mathematical formula}T. Note that {a mathematical formula}AJ has been defined already for all A with {a mathematical formula}dT(A)=0 (since then {a mathematical formula}A∉Lhs(T)). Now let {a mathematical formula}A∈Lhs(T) and assume that {a mathematical formula}BJ has already been defined for all concept names B with {a mathematical formula}dT(B)&lt;dT(A). Let {a mathematical formula}A⋈C be the definition of A in {a mathematical formula}T and set{a mathematical formula} Note that {a mathematical formula}AJ is well-defined since if {a mathematical formula}A⋈C∈T then {a mathematical formula}CJ is defined before {a mathematical formula}AJ. We first show that {a mathematical formula}J|Σ=I|Σ. By definition, {a mathematical formula}XI=XJ for all symbols {a mathematical formula}X∈Σ with {a mathematical formula}X∈(NC∖Lhs(T))∪NR. It thus remains to consider the concept names {a mathematical formula}A∈Lhs(T)∩Σ. By definition of the interpretations {a mathematical formula}Id, we have {a mathematical formula}AI=⋃d∈ΔIAId. By definition of {a mathematical formula}J, we have {a mathematical formula}AJ=⋃d∈ΔIAId. Thus {a mathematical formula}AI=AJ, as required.We now show that {a mathematical formula}J is a model of {a mathematical formula}T. Let {a mathematical formula}A⋈C∈T. We distinguish two cases:
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}A∈Σ∪⋃B∈Lhs(T)∩ΣdependT(B).By definition of {a mathematical formula}J, we have {a mathematical formula}AJ=⋃d∈ΔIAId. Since {a mathematical formula}T does not contain a direct Σ-dependency, {a mathematical formula}dependT(A) does not contain any Σ-symbols. Observe that {a mathematical formula}XJ=⋃d∈ΔIXId for all symbols {a mathematical formula}X∈dependT(A): if {a mathematical formula}X∈(NC∖Lhs(T))∪NR, then this follows from {a mathematical formula}X∉Σ and the definition of {a mathematical formula}J. If {a mathematical formula}X∈Lhs(T), then {a mathematical formula}X∈dependT(A) yields {a mathematical formula}X∈⋃B∈Lhs(T)∩ΣdependT(B) and so {a mathematical formula}XJ=⋃d∈ΔIXId by definition of {a mathematical formula}J. By the semantics of {a mathematical formula}ALCI-concepts, it follows that {a mathematical formula}CJ=⋃d∈ΔICId. Since every {a mathematical formula}Id is a model of {a mathematical formula}T, {a mathematical formula}J satisfies {a mathematical formula}A⋈C.
       </list-item>
       <list-item label="•">
        {a mathematical formula}A∉Σ∪⋃B∈Lhs(T)∩ΣdependT(B).Then {a mathematical formula}AJ=CJ by definition of {a mathematical formula}J. Thus {a mathematical formula}J satisfies {a mathematical formula}A⋈C.
       </list-item>
      </list>
      <paragraph label="Theorem 25">
       We now prove the main result of this section.
      </paragraph>
      <list>
       <list-item label="(1)">
        For every acyclic{a mathematical formula}ELI-TBox{a mathematical formula}Tand signature Σ,{a mathematical formula}T≡Σ∅iff{a mathematical formula}Thas no direct nor indirect Σ-dependencies.
       </list-item>
       <list-item label="(2)">
        For acyclic{a mathematical formula}ELI-TBoxes{a mathematical formula}Tand signatures Σ, it is inPTimeto decide whether{a mathematical formula}T≡Σ∅.
       </list-item>
      </list>
      <paragraph label="Proof">
       (1) follows from Lemma 20, Lemma 23, Lemma 24. To show (2), it is sufficient to prove that the presence of direct and indirect Σ-dependencies in an acyclic {a mathematical formula}ELI-TBox can be decided in PTime. First note that for each concept name A, the set {a mathematical formula}dependT(A) and {a mathematical formula}dependT≡(A) can be computed by a straightforward reachability analysis. Thus, the existence of direct Σ-dependencies can be checked in polynomial time. For indirect Σ-dependencies, the same is true because if a concept name {a mathematical formula}A∈Σ has an indirect Σ-dependency in {a mathematical formula}T induced by concept names {a mathematical formula}A1,…,An∈Lhs(T)∩Σ, then A has an indirect Σ-dependency in {a mathematical formula}T induced by the set of concept names {a mathematical formula}(Lhs(T)∩Σ)∖{A}. Thus, to check weather {a mathematical formula}T contains an indirect Σ-dependency it is sufficient to check whether there is {a mathematical formula}A∈Def(T)∩Σ such that{a mathematical formula} which is in polynomial time.  □
      </paragraph>
     </section>
    </section>
    <section label="6">
     <section-title>
      Ontology modules
     </section-title>
     <paragraph>
      We employ Σ-inseparability to define different notions of a module in a TBox, analyse their relationship and properties, and determine the complexity of checking whether a given subset {a mathematical formula}T′⊆T is a module (from now on called module checking). Each notion of a module is parameterised with a signature Σ of interest. This is motivated by the main applications of modules such as replacing the original TBox in an application that uses only a certain subsignature Σ or summarising what a given TBox says about a given signature Σ. The signature Σ is also important for module extraction studied in Section 7.
     </paragraph>
     <paragraph>
      Arguably, the most direct way to define a Σ-module {a mathematical formula}M in a TBox {a mathematical formula}T is thus to demand that {a mathematical formula}M⊆T and {a mathematical formula}M≡ΣT. By Theorem 4, we then have that {a mathematical formula}M and {a mathematical formula}T entail the same SO-sentences over Σ, and by Theorem 5, this even holds in the context of other ontologies used together with {a mathematical formula}M and {a mathematical formula}T. From now on, we call this kind of module a plain Σ-module. Note that it might clearly happen that a plain Σ-module {a mathematical formula}M must contain also non-Σ-symbols, simply because they occur together with Σ-symbols in the same statement in {a mathematical formula}T. However, according to its definition, {a mathematical formula}M does not need to be inseparable from {a mathematical formula}T regarding these additional symbols, which might be regarded as {a mathematical formula}M being incomplete. Moreover, a plain Σ-module {a mathematical formula}M does not need to contain all non-tautological statements from {a mathematical formula}T that concern Σ because those statements might be implied by other statements that are contained in {a mathematical formula}M. Again, this might be viewed as a kind of incompleteness of {a mathematical formula}M.
     </paragraph>
     <paragraph label="Definition 26">
      To address these issues, we define two additional kinds of modules: self-contained Σ-modules {a mathematical formula}M that must be inseparable from {a mathematical formula}T not only regarding Σ, but regarding {a mathematical formula}Σ∪sig(M); and depleting Σ-modules {a mathematical formula}M for which we require that {a mathematical formula}T∖M is inseparable from the empty TBox, again regarding {a mathematical formula}Σ∪sig(M). Let {a mathematical formula}M⊆T be TBoxes and Σ a signature. Then {a mathematical formula}M is a
     </paragraph>
     <list>
      <list-item label="•">
       plain Σ-module of {a mathematical formula}T if {a mathematical formula}M≡ΣT;
      </list-item>
      <list-item label="•">
       self-contained Σ-module of {a mathematical formula}T if {a mathematical formula}M≡Σ∪sig(M)T;
      </list-item>
      <list-item label="•">
       depleting Σ-module of {a mathematical formula}T if {a mathematical formula}T∖M≡Σ∪sig(M)∅.
      </list-item>
     </list>
     <paragraph label="Proposition 27">
      Plain and depleting Σ-modules were introduced in [18], where they are called weak and strong Σ-modules. Self-contained and depleting Σ-modules are implicit in [16] and were first explicitly studied in [35], [14]. Note that if {a mathematical formula}M is a depleting Σ-module, then {a mathematical formula}T∖M is safe for {a mathematical formula}sig(M) and so the module {a mathematical formula}M can be maintained separately outside of {a mathematical formula}T without the risk of unintended interactions with the rest of {a mathematical formula}T. Also note that checking depleting Σ-modules is exactly the same problem as deciding Σ-inseparability from the empty TBox. The relationship between the different kinds of modules is as follows, as first observed in [35].
     </paragraph>
     <list>
      <list-item label="1.">
       If{a mathematical formula}Mis a self-contained Σ-module of{a mathematical formula}T, then it is a plain Σ-module.
      </list-item>
      <list-item label="2.">
       If{a mathematical formula}Mis a depleting Σ-module of{a mathematical formula}T, then it is a self-contained Σ-module.
      </list-item>
     </list>
     <paragraph label="Proof">
      Point 1 follows from the monotonicity of inseparability, and Point 2 follows from robustness under replacement: assume {a mathematical formula}M⊆T and let {a mathematical formula}Σ′=Σ∪sig(M). If {a mathematical formula}T∖M≡Σ′∅, then {a mathematical formula}(T∖M)∪M≡Σ′M and so {a mathematical formula}T≡Σ′M, as required.  □
     </paragraph>
     <paragraph label="Example 28">
      In this paper, we concentrate on self-contained and depleting modules, and do not further consider plain modules. One reason is that we do not have much positive to say about the latter. For example, the basic task of module checking is equivalent to deciding Σ-inseparability in the case of plain modules. As can be seen in Table 1, this problem is undecidable in all cases that we were able to solve, the only open case being acyclic {a mathematical formula}EL- and {a mathematical formula}ELI-TBoxes. Another reason for preferring self-contained and depleting modules is that, as first observed in [16], these types of modules are very useful for module extraction, as studied in Section 7. The following examples show that depleting modules and self-contained modules are not the same notion. (1) Let {a mathematical formula}T={A⊑B⊓A1,A⊑B⊓A2}, {a mathematical formula}M={A⊑B⊓A1}, and {a mathematical formula}Σ={A,B}. {a mathematical formula}M is a self-contained Σ-module of {a mathematical formula}T, but not a depleting Σ-module of {a mathematical formula}T.(2) The difference between depleting and self-contained modules is ‘felt’ even by acyclic {a mathematical formula}EL-TBoxes. Take {a mathematical formula}T={B⊑A,A≡⊤}, {a mathematical formula}M={A≡⊤}, and {a mathematical formula}Σ={A,B}. Then {a mathematical formula}M is a self-contained Σ-module of {a mathematical formula}T, but not a depleting one. We will see below that no such example exists if concept definitions the form {a mathematical formula}A≡⊤⊓⋯⊓⊤ are disallowed.
     </paragraph>
     <section label="6.1">
      Modules in acyclic {a mathematical formula}EL/ELI
      <paragraph label="Theorem 29">
       We consider module checking in acyclic {a mathematical formula}EL- and {a mathematical formula}ELI-TBoxes. Note that, by Theorem 25, depleting modules can be checked in PTime. Our main result is that, for acyclic {a mathematical formula}ELI-TBoxes that do not contain concept definitions of the form {a mathematical formula}A≡⊤⊓⋯⊓⊤, self-contained Σ-modules coincide with depleting Σ-modules. Note that, in applications, concepts defined as ⊤ are rather exotic and it should always be possible to remove them by replacing A with ⊤ throughout {a mathematical formula}T. In summary, depleting and (equivalently) self-contained modules can be checked in PTime for acyclic {a mathematical formula}EL- and {a mathematical formula}ELI-TBoxes. As we mentioned before, it is interesting to contrast this with the PSpace-completeness of subsumption in acyclic {a mathematical formula}ELI-TBoxes [15]. Let{a mathematical formula}Tbe an acyclic{a mathematical formula}ELI-TBox,{a mathematical formula}M⊆T, and Σ a signature. If{a mathematical formula}Tdoes not contain concept names defined as ⊤ then the following are equivalent:
      </paragraph>
      <list>
       <list-item label="1.">
        {a mathematical formula}Mis a depleting Σ-module of{a mathematical formula}T;
       </list-item>
       <list-item label="2.">
        {a mathematical formula}Mis a self-contained Σ-module of{a mathematical formula}T.
       </list-item>
      </list>
      <paragraph label="Proof">
       The implication from Point 1 to Point 2 follows from Theorem 27. Consider the implication from Point 2 to Point 1. Assume that {a mathematical formula}M is a self-contained Σ-module of {a mathematical formula}T. Let {a mathematical formula}Σ′=Σ∪sig(M). We have to show that {a mathematical formula}T∖M≡Σ′∅. By Lemma 24, it is sufficient to show
       <list>
        {a mathematical formula}T∖M does not contain a Boolean {a mathematical formula}Σ′-constraint;{a mathematical formula}T∖M does not contain a direct {a mathematical formula}Σ′-dependency.As
       </list>
       <paragraph>
        {a mathematical formula}sig(CP)⊆Σ′, we have that {a mathematical formula}CP is satisfied in any interpretation {a mathematical formula}J with {a mathematical formula}I|Σ′=J|Σ′. Thus, since we assume that {a mathematical formula}CP is not satisfiable in any one-point model of {a mathematical formula}T∖M and {a mathematical formula}sig(M)⊆Σ′, there is no model {a mathematical formula}J of {a mathematical formula}T with {a mathematical formula}I|Σ′=J|Σ′. This contradicts the assumption that {a mathematical formula}M is a self-contained Σ-module of {a mathematical formula}T.We prove Point (b). For a proof by contradiction, assume that Point (b) does not hold. There is an {a mathematical formula}A∈Lhs(T∖M)∩Σ′ such that {a mathematical formula}X∈dependT∖M(A)∩Σ′, for some symbol {a mathematical formula}X∈Σ′. We construct a one-point model {a mathematical formula}I of {a mathematical formula}M with {a mathematical formula}XI=∅ and {a mathematical formula}AI≠∅. Let {a mathematical formula}ΔI={d} and set {a mathematical formula}rI=∅, for all {a mathematical formula}r∈NR. The interpretation of concept names is defined by induction over the definitorial depth in {a mathematical formula}M. Observe that {a mathematical formula}dM(A)=0 and set {a mathematical formula}AI={d} and {a mathematical formula}BI=∅ for all {a mathematical formula}B∈NC∖{A} with {a mathematical formula}dM(B)=0. We complete this interpretation in the obvious way: assume that {a mathematical formula}B⋈C∈M and that {a mathematical formula}EI has been defined for all E in C. Then set {a mathematical formula}BI=CI.By construction, {a mathematical formula}I is a model of {a mathematical formula}M. Since {a mathematical formula}M does not contain concept names defined as ⊤, we have {a mathematical formula}BI=∅ for all concept names B distinct from A with {a mathematical formula}A∉dependM(B). It follows that {a mathematical formula}XI=∅: if X is a role name, then this follows from the definition of {a mathematical formula}I. If X is a concept name, then note that {a mathematical formula}A∉dependM(X) since {a mathematical formula}T is acyclic and so {a mathematical formula}XI=∅, as required.Since {a mathematical formula}AI={d}, {a mathematical formula}XI=∅ and {a mathematical formula}X∈dependT∖M(A)∩Σ′ there is no model {a mathematical formula}J of {a mathematical formula}T with {a mathematical formula}I|Σ′=J|Σ′. This contradicts the assumption that {a mathematical formula}M is a self-contained Σ-module of {a mathematical formula}T.  □
       </paragraph>
      </paragraph>
      <paragraph label="Theorem 30">
       The following result now follows with Theorem 25. Checking depleting and (equivalently) self-contained Σ-modules in acyclic{a mathematical formula}ELI-TBoxes is inPTime.
      </paragraph>
     </section>
     <section label="6.2">
      Modules in acyclic {a mathematical formula}ALC/ALCI
      <paragraph>
       For module checking in acyclic {a mathematical formula}ALC- and {a mathematical formula}ALCI-TBoxes, we cannot hope to obtain general positive results that parallel those obtained for {a mathematical formula}EL and {a mathematical formula}ELI in the previous section: by Theorem 8, checking depleting modules in acyclic {a mathematical formula}ALC-TBoxes is undecidable, and the same is true for checking self-contained modules since inseparability from the empty TBox can be reduced to checking self-contained modules by observing that a TBox {a mathematical formula}T is Σ-inseparable from the empty TBox iff the empty TBox is a self-contained Σ-module of {a mathematical formula}T. Interestingly, though, the direct Σ-dependencies used for {a mathematical formula}EL and {a mathematical formula}ELI in Sections 5.3 and 6.1 still turn out to be useful also in the context of {a mathematical formula}ALC and {a mathematical formula}ALCI (while indirect ones appear to be less relevant). In particular, we identify two syntactic conditions that both result in checking depleting and self-contained modules in {a mathematical formula}ALC- and {a mathematical formula}ALCI-TBoxes to become decidable: one requires that the TBox {a mathematical formula}T∖M is free of direct {a mathematical formula}Σ∪sig(M)-dependencies and the other is a relaxation of this condition. We actually start with the latter condition and show that checking self-contained modules is {a mathematical formula}coNExpNP-complete while checking depleting modules is {a mathematical formula}Π2p-complete. Under the first mentioned condition, checking depleting and self-contained modules is both {a mathematical formula}Π2p-complete, and the two kinds of module coincide.
      </paragraph>
      <paragraph label="Example 31">
       We believe that the syntactic restrictions considered in this section are very natural from an application perspective, i.e., the question whether {a mathematical formula}M⊆T is a Σ-module of {a mathematical formula}T should arise only if {a mathematical formula}T∖M contains no direct Σ-dependencies. This is illustrated by the following example. Let {a mathematical formula}T={A⊑B⊔¬B}∪M with {a mathematical formula}M={E⊑A⊓B}, and let {a mathematical formula}Σ={A,B,E}=sig(M). Note that {a mathematical formula}T∖M contains a direct Σ-dependency since {a mathematical formula}B∈dependT∖M(A). If {a mathematical formula}T was an acyclic {a mathematical formula}EL-TBox, this would immediately imply that {a mathematical formula}M is not a depleting Σ-module of {a mathematical formula}T. However, for the acyclic {a mathematical formula}ALC-TBox {a mathematical formula}T given above, we clearly have {a mathematical formula}T∖M≡Σ∅ (even {a mathematical formula}T∖M≡∅), so {a mathematical formula}M is a depleting Σ-module of {a mathematical formula}T. The example can clearly be generalised by replacing {a mathematical formula}B⊔¬B with any concept C that is valid (i.e., {a mathematical formula}CI=ΔI in every model {a mathematical formula}I) and contains a Σ-symbol. However, the example relies on the fact that the TBox statements in {a mathematical formula}T∖M define the meaning of one Σ-symbol by employing another Σ-symbol without asserting any non-trivial semantic relationship between the two Σ-symbols. This seems to be rather untypical for real-world ontologies and most likely indicates a modelling error.
      </paragraph>
      <paragraph label="Definition 32">
       As announced, we start with a syntactic condition that is weaker than {a mathematical formula}T∖M not containing a direct {a mathematical formula}Σ∪sig(M)-dependency, but turns out to be sufficient to regain decidability of module checking. Let {a mathematical formula}T be an acyclic {a mathematical formula}ALCI-TBox and Σ a signature. We say that {a mathematical formula}Tcontains a direct Σ-dependency between concept and role names if there exists {a mathematical formula}A∈Σ∩NC and {a mathematical formula}r∈Σ∩NR such that {a mathematical formula}r∈dependT(A).
      </paragraph>
      <paragraph label="Theorem 33">
       Now, the weaker condition is that {a mathematical formula}T∖M does not contain a direct {a mathematical formula}Σ∪sig(M)-dependency between concept and role names. Interestingly, self-contained and depleting modules turn out to not coincide under the weaker condition, while they do under the stronger one. In fact, for the weaker condition, checking self-contained and depleting modules is of rather different complexity. It is also interesting that, as shown by the proof of the following theorem, having no direct Σ-dependencies between concept and role names is very closely related to dealing with a concept signature Σ. Given an acyclic{a mathematical formula}ALC- or{a mathematical formula}ALCI-TBox{a mathematical formula}T, a signature Σ, and a subset{a mathematical formula}M⊆Tsuch that{a mathematical formula}T∖Mcontains no direct{a mathematical formula}Σ∪sig(M)-dependency between concept and role names, it is
      </paragraph>
      <list>
       <list-item label="1.">
        {a mathematical formula}Π2p-complete to decide whether{a mathematical formula}Mis a depleting Σ-module of{a mathematical formula}T;
       </list-item>
       <list-item label="2.">
        {a mathematical formula}coNExpNP-complete to decide whether{a mathematical formula}Mis a self-contained Σ-module of{a mathematical formula}T.
       </list-item>
      </list>
      <paragraph label="Claim">
       The lower bound for Point 1 is a consequence of Theorem 14, which states {a mathematical formula}Π2p-hardness for Σ-inseparability of acyclic {a mathematical formula}ALC-TBoxes from the empty TBox. It suffices to observe that (i) for all TBoxes {a mathematical formula}T and signatures Σ, we have {a mathematical formula}T≡Σ∅ iff {a mathematical formula}T∖M≡Σ∅ with {a mathematical formula}M:=∅ and (ii) {a mathematical formula}T∖M=T does not contain direct {a mathematical formula}Σ∪sig(M)-dependencies between concept and role names since Σ is a concept signature.Now for the lower bound for Point 2. By Theorem 10 and Lemma 3, Σ-entailment between acyclic {a mathematical formula}ALC-TBoxes is {a mathematical formula}coNExpNP-hard when Σ is a concept signature. It thus remains to note that we can use a small variation of the reduction from Σ-entailment to Σ-inseparability given in the proof of Lemma 3, replacing Σ-inseparability with checking self-contained modules. In detail, let {a mathematical formula}T1,T2 be acyclic TBoxes and Σ a concept signature. By our strengthened formulation of Theorem 10 (see comment before that theorem), we can assume that {a mathematical formula}T1∪T2 is acyclic. We show that we can also assume that {a mathematical formula}Σ=sig(T1)∩sig(T2). First, as in the proof of Lemma 3, we can assume that {a mathematical formula}Σ⊇sig(T1)∩sig(T2). Now, since we can also add fresh inclusions of the form {a mathematical formula}A0⊑A for {a mathematical formula}A∈Σ∩NC (and with {a mathematical formula}A0 fresh) to {a mathematical formula}T1 and {a mathematical formula}T2 we can assume that {a mathematical formula}Σ=sig(T1)∩sig(T2). Set {a mathematical formula}M=T1, {a mathematical formula}T=T1∪T2, and {a mathematical formula}Σ′=sig(T1). Then {a mathematical formula}T∖M contains no direct {a mathematical formula}Σ′∪sig(M)-dependency between concept and role names since Σ is a concept signature. Now it can be verified that {a mathematical formula}T1⊨ΣT2 iff {a mathematical formula}T1≡sig(T1)T1∪T2 iff {a mathematical formula}M≡Σ′∪sig(M)T iff {a mathematical formula}M is a self-contained {a mathematical formula}Σ′-module. In fact, the only interesting equivalence is the first one, where we exploit that {a mathematical formula}Σ=sig(T1)∩sig(T2).The upper bound proofs are by reduction to Σ-inseparability with Σ a concept signature, for which corresponding upper bounds have been established in Theorem 14, Theorem 9. We start with identifying the part of an acyclic TBox {a mathematical formula}T that is ‘relevant’ for deciding Σ-inseparability from {a mathematical formula}T. For an acyclic TBox {a mathematical formula}T and signature Σ, let{a mathematical formula} Intuitively, {a mathematical formula}LhsΣ(T) is the set of all inclusions in {a mathematical formula}T that are influenced by symbols from Σ. The following claim makes this observation precise. It shows that, as far as Σ-inseparability is concerned, {a mathematical formula}T can be equivalently replaced with {a mathematical formula}LhsΣ(T).For every interpretation{a mathematical formula}I, the following conditions are equivalent:
       <list>
        there is a model{a mathematical formula}Jof{a mathematical formula}Twith{a mathematical formula}J|Σ=I|Σ;there is a model{a mathematical formula}Jof{a mathematical formula}LhsΣ(T)with{a mathematical formula}J|Σ=I|Σ.The implication “(a) ⇒ (b)” is immediate, and “(b) ⇒ (a)” is shown in
       </list>
       <paragraph>
        Appendix C. The main reason for replacing certain TBoxes {a mathematical formula}T with {a mathematical formula}LhsΣ(T) in the remaining proof is the following property:
       </paragraph>
       <list>
        <list-item label="(⁎)">
         if a TBox {a mathematical formula}T contains no direct Σ-dependency between concept and role names, then {a mathematical formula}LhsΣ(T) does not contain a role name from Σ.
        </list-item>
       </list>
       <paragraph>
        Clearly, this is not true for {a mathematical formula}T itself. We now present the announced reductions.To prove the upper bound for Point 1, we have to show that it is in {a mathematical formula}Π2p to decide whether {a mathematical formula}T∖M≡Σ′∅, with {a mathematical formula}Σ′=Σ∪sig(M). By the claim, {a mathematical formula}T∖M≡Σ′∅ iff {a mathematical formula}LhsΣ′(T∖M)≡Σ′∅. By (⁎), {a mathematical formula}LhsΣ′(T∖M) does not contain a role name from {a mathematical formula}Σ′. Thus, we have {a mathematical formula}LhsΣ′(T∖M)≡Σ′∅ iff {a mathematical formula}LhsΣ′(T∖M)≡Σ′∩NC∅. By Theorem 14, the latter can be decided in {a mathematical formula}Π2p.To prove the upper bound for Point 2, we have to show that it is in {a mathematical formula}coNExpNP to decide whether {a mathematical formula}M≡Σ′T, with {a mathematical formula}Σ′=Σ∪sig(M). Clearly, {a mathematical formula}M≡Σ′T iff {a mathematical formula}M⊨Σ′T∖M iff {a mathematical formula}M⊨Σ′LhsΣ′(T∖M). By (⁎), {a mathematical formula}LhsΣ′(T∖M) does not contain a role name from {a mathematical formula}Σ′. Thus, {a mathematical formula}M⊨Σ′LhsΣ′(T∖M) iff {a mathematical formula}M⊨Σ′∩NCLhsΣ′(T∖M). By Theorem 9, the latter can be decided in {a mathematical formula}coNExpNP.  □
       </paragraph>
      </paragraph>
      <paragraph label="Theorem 34">
       We now consider the stronger syntactic condition that {a mathematical formula}T∖M does not contain a direct Σ-dependency in the original sense of Definition 19. We prove that, in this case, there is no difference between depleting and self-contained modules, and that module checking is {a mathematical formula}Π2p-complete. For all acyclic{a mathematical formula}ALCI-TBox{a mathematical formula}T, signatures Σ, and subsets{a mathematical formula}M⊆Tsuch that{a mathematical formula}T∖Mcontains no direct{a mathematical formula}Σ∪sig(M)-dependencies, the following are equivalent:
      </paragraph>
      <list>
       <list-item label="1.">
        {a mathematical formula}Mis a depleting Σ-module of{a mathematical formula}T;
       </list-item>
       <list-item label="2.">
        {a mathematical formula}Mis a self-contained Σ-module of{a mathematical formula}T.
       </list-item>
      </list>
      <paragraph label="Proof">
       The proof of the equivalence of Points 1 and 2 is similar to the proof of Theorem 29. The implication “Point 1 ⇒ Point 2” again follows from Theorem 27. The proof of “Point 2 ⇒ Point 1” is identical to the proof of Theorem 29 with the only exception that the absence of direct Σ-dependencies (Point (b) in the proof of Theorem 29) is stated explicitly in the conditions of Theorem 34 rather than deduced from the assumption that {a mathematical formula}M is a self-contained Σ-module of {a mathematical formula}T. Note that here we need that Lemma 24 applies not only to {a mathematical formula}ELI-TBoxes, but also to {a mathematical formula}ALCI-TBoxes (see comment before that lemma).Now for the complexity. The {a mathematical formula}Π2p-upper bound is inherited from Theorem 33. The lower bound can be established by an analysis of the proof of Theorem 14, where we show that Σ-inseparability of acyclic {a mathematical formula}ALCI-TBoxes from the empty TBox is {a mathematical formula}Π2p-hard. We have already noted that this problem is equivalent to checking depleting modules, and the TBoxes used in the proof do obviously not contain direct Σ-dependencies.  □
      </paragraph>
     </section>
    </section>
    <section label="7">
     <section-title>
      Module extraction
     </section-title>
     <paragraph>
      In this section we consider the problem to compute, given a TBox {a mathematical formula}T and a signature Σ, a subset {a mathematical formula}M of {a mathematical formula}T that is a minimal self-contained or depleting Σ-module of {a mathematical formula}T. We call this problem the module extraction problem. We present algorithms for module extraction from acyclic {a mathematical formula}ELI-TBoxes and from acyclic {a mathematical formula}ALCI-TBoxes, building on the results for module checking obtained in the previous section (Theorem 30, Theorem 34). For acyclic {a mathematical formula}ELI-TBoxes, we extract the unique minimal depleting Σ-module and for acyclic {a mathematical formula}ALCI-TBoxes we extract the unique minimal depleting Σ-module whose complement contains no direct {a mathematical formula}Σ∪sig(M)-dependency. Note that self-contained Σ-modules and depleting Σ-modules coincide in these cases (if there are no concept names defined as ⊤). For brevity, we will from now on only speak about depleting Σ-modules. All presented algorithms run in polynomial time when module checking is available as an oracle. For acyclic {a mathematical formula}ELI-TBoxes, by Theorem 30 we thus obtain overall polynomial runtime.
     </paragraph>
     <paragraph>
      We first consider the black box approach from [14], where module checking is used as an oracle in a generic module extraction algorithm. Together with Theorem 30, Theorem 34, this approach yields polynomial algorithms for module extraction in both of the {a mathematical formula}ELI- and the {a mathematical formula}ALCI-case mentioned above, modulo the oracle. We complement this approach by presenting a white box approach for module extraction from acyclic {a mathematical formula}ELI-TBoxes which also runs in polynomial time, but more tightly integrates the module checking into the module extraction and can be expected to be more efficient in practice.
     </paragraph>
     <section label="7.1">
      <section-title>
       Black box approach
      </section-title>
      <paragraph label="Theorem 35">
       The black box approach to module extraction described in [14] is based on the algorithm shown in Fig. 2. Notice that {a mathematical formula}W is used to find a TBox statement {a mathematical formula}α∈T∖M such that α is contained in some minimal subset {a mathematical formula}S of {a mathematical formula}T∖M with {a mathematical formula}S≢Σ∅. This subset {a mathematical formula}S is contained in {a mathematical formula}W, but need not be identical to it. It is proved in [14] that for any TBox {a mathematical formula}T formulated in first-order logic and signature Σ, there is a unique minimal depleting Σ-module of {a mathematical formula}T, and that this module is the output of the algorithm when started on {a mathematical formula}T and Σ.{sup:5} The runtime of the algorithm is {a mathematical formula}O((|T|+|Σ|)2×Tc(T,Σ)), where {a mathematical formula}Tc(T,Σ) is the time needed to check for a TBox {a mathematical formula}T and signature Σ whether {a mathematical formula}T≡Σ∅ (which is equivalent to checking depleting Σ-modules). As announced, by Theorem 30 we thus obtain an algorithm that runs in overall polynomial time. It also follows that minimal depleting Σ-modules of {a mathematical formula}ELI-TBoxes and of {a mathematical formula}ALCI-TBoxes are unique. We summarise this in the following theorem. For any{a mathematical formula}ALCI-TBox and signature Σ, there is a unique minimal depleting Σ-module of{a mathematical formula}T. For{a mathematical formula}ELI-TBoxes, these unique minimal modules can be extracted in polynomial time using the algorithm inFig. 2.
      </paragraph>
      <paragraph label="Theorem 36">
       Since checking depleting Σ-modules is undecidable for {a mathematical formula}ALCI, the generic algorithm in Fig. 2 cannot be applied directly to acyclic {a mathematical formula}ALCI-TBoxes. However, as observed in Theorem 34, decidability is regained when the remaining TBox {a mathematical formula}T∖M (respectively the set {a mathematical formula}W in the algorithm) does not contain a direct Σ-dependency. This suggests a variation of the algorithm in Fig. 2 that is capable of extracting, from an acyclic {a mathematical formula}ALCI-TBox {a mathematical formula}T, a depleting Σ-module {a mathematical formula}M⊆T that is not minimal in general, but minimal with the property that {a mathematical formula}T∖M does not contain a direct {a mathematical formula}Σ∪sig(M)-dependency. The following is proved in Appendix D. Let{a mathematical formula}Tbe an acyclic{a mathematical formula}ALCI-TBox and Σ a signature. Modify the algorithm inFig. 2by replacing the condition “{a mathematical formula}W≢Σ∪sig(M)∅” with“{a mathematical formula}Wcontains a direct{a mathematical formula}Σ∪sig(M)-dependency or{a mathematical formula}W≢Σ∪sig(M)∅”.The resulting algorithm computes the unique minimal depleting Σ-module{a mathematical formula}Mof{a mathematical formula}Tsuch that{a mathematical formula}T∖Mcontains no direct{a mathematical formula}Σ∪sig(M)-dependency.
      </paragraph>
      <paragraph>
       A central step in the proof of Theorem 36 is to show that if {a mathematical formula}W⊆T is minimal such that {a mathematical formula}W contains a direct {a mathematical formula}Σ∪sig(M)-dependency, then all of {a mathematical formula}W must be contained in {a mathematical formula}M. Note that this justifies including α in {a mathematical formula}M in the modified algorithm.
      </paragraph>
     </section>
     <section label="7.2">
      <section-title>
       White box approach
      </section-title>
      <paragraph label="Claim 1">
       The algorithm used for module extraction in the previous section uses the Σ-inseparability check in a black box manner. In the case of acyclic {a mathematical formula}ELI-TBoxes, it is possible to integrate the Σ-inseparability check described in the proof of Theorem 25 more tightly into the module extraction algorithm, which results in an algorithm that is more transparent and should be expected to be more efficient in practical cases. This algorithm is given in Fig. 3. Let{a mathematical formula}Tbe an acyclic{a mathematical formula}ELI-TBox and Σ a signature. The output{a mathematical formula}Mof the algorithm inFig. 3is the unique minimal depleting Σ-module of{a mathematical formula}T.Let {a mathematical formula}M be the output of the algorithm in Fig. 3. Then Rules (R1) and (R2) are not applicable and so {a mathematical formula}T∖M does not contain any direct or indirect {a mathematical formula}Σ∪sig(M)-dependency. By Lemma 20, Lemma 23, Lemma 24, it follows that {a mathematical formula}T∖M≡Σ∪sig(M)∅, as required.It remains to prove that {a mathematical formula}M is a minimal depleting Σ-module of {a mathematical formula}T, and that it is unique with this property.{sup:6} To this end, let {a mathematical formula}M0 be a depleting Σ-module of {a mathematical formula}T. We prove by induction on the number of rule applications that, at every iteration of the algorithm, we have {a mathematical formula}M⊆M0. It follows that the output {a mathematical formula}M of the algorithm is contained in every depleting Σ-module of {a mathematical formula}T and, therefore, {a mathematical formula}M is the unique minimal depleting Σ-module of {a mathematical formula}T.The induction start is trivial since {a mathematical formula}M=∅⊆M0. For the induction step, assume that, by induction hypothesis, {a mathematical formula}M⊆M0. We make a case distinction according to which rule is applied.Rule (R1) is applied. Then there is an {a mathematical formula}A∈Σ∪sig(M) that has a direct {a mathematical formula}Σ∪sig(M)-dependency in {a mathematical formula}T∖M and {a mathematical formula}A⋈C∈T∖M is added to {a mathematical formula}M. Assume for a proof by contradiction that {a mathematical formula}A⋈C∉M0. Let {a mathematical formula}X∈dependT∖M(A)∩(Σ∪sig(M)) (here and in what follows, {a mathematical formula}M refers to the state before the addition of {a mathematical formula}A⋈C). We make a case distinction as follows.Case 1. {a mathematical formula}X∈dependT∖M0(A). We have {a mathematical formula}A⋈C∈T∖M0. As {a mathematical formula}M⊆M0 and so {a mathematical formula}{A,X}⊆Σ∪sig(M0), we conclude that {a mathematical formula}T∖M0 has a direct {a mathematical formula}Σ∪sig(M0)-dependency. By Lemma 20, this contradicts the assumption that {a mathematical formula}M0 is a depleting Σ-module of {a mathematical formula}T.Case 2. {a mathematical formula}X∉dependT∖M0(A). Let {a mathematical formula}A=Y1,…,Yn=B be such that {a mathematical formula}Yi≺T∖MYi+1, that is, {a mathematical formula}Yi⋈Ci∈(T∖M), for some {a mathematical formula}Ci, and {a mathematical formula}Yi+1 occurs in {a mathematical formula}Ci. We have {a mathematical formula}Y1=A and {a mathematical formula}C1=C, thus {a mathematical formula}Y1⋈C1∈T∖M0. Let i be the smallest index such that {a mathematical formula}Yi⋈Ci∉T∖M0. Then {a mathematical formula}Yi⋈Ci∈M0 and thus {a mathematical formula}Yi∈sig(M0). Then we have {a mathematical formula}A≺T∖M0+Yi, that is, {a mathematical formula}T∖M0 has a direct {a mathematical formula}Σ∪sig(M0)-dependency, which again yields a contradiction.Rule (R2) is applied. Then there is an {a mathematical formula}A∈Σ∪sig(M) that has an indirect {a mathematical formula}Σ∪sig(M)-dependency in {a mathematical formula}T∖M, and {a mathematical formula}A≡C∈T∖M is added to {a mathematical formula}M. We have{a mathematical formula} for some set {a mathematical formula}{A1,…,An}⊆Lhs(T∖M)∩(Σ∪sig(M)) not containing A (where, again, {a mathematical formula}M generally refers to the state before the addition). Assume for a proof by contradiction that {a mathematical formula}A≡C∉M0. We show that {a mathematical formula}M0 contains an indirect {a mathematical formula}Σ∪Sig(M0)-dependency, i.e.,{a mathematical formula} This establishes a contradiction to Lemma 20 and the assumption that it is a depleting {a mathematical formula}Σ∪sig(M0)-module of {a mathematical formula}T. We first show that the left-hand side of Inclusion (1) is contained in that of Inclusion (2), i.e.,{a mathematical formula} As {a mathematical formula}M⊆M0, we have {a mathematical formula}(T∖M0)⊆(T∖M) and so {a mathematical formula}dependT∖M0≡(A)⊆dependT∖M≡(A). Suppose there exists {a mathematical formula}X∈dependT∖M0≡(A)∖Def(T∖M0) such that {a mathematical formula}X∈Def(T∖M). Then {a mathematical formula}M0∖M contains a definition {a mathematical formula}X≡C′, for some {a mathematical formula}C′. Thus {a mathematical formula}X∈sig(M0) and so {a mathematical formula}T∖M0 has a direct {a mathematical formula}Σ∪sig(M0)-dependency in contradiction with {a mathematical formula}M0 being a depleting Σ-module. This finishes the proof of Inclusion (3).To prove Inclusion (2), let {a mathematical formula}X∈dependT∖M0≡(A)∖Def(T∖M0). We have to show the following.{a mathematical formula}X∈dependT∖M0(B)for some{a mathematical formula}B∈(Σ∪sig(M0))∖{A}.It follows from Inclusion (3) that {a mathematical formula}X∈dependT∖M≡(A)∖Def(T∖M). We have {a mathematical formula}X∉Σ∪sig(M0) since {a mathematical formula}M0 does not contain a direct {a mathematical formula}Σ∪sig(M0)-dependency.By Inclusion (1), there is an {a mathematical formula}Ai∈(Σ∪sig(M))∖{A} such that {a mathematical formula}X∈dependT∖M(Ai). Let {a mathematical formula}Z1,…,Zn be such that {a mathematical formula}Ai=Z1≺T∖M⋯≺T∖MZn=X. If {a mathematical formula}X∈dependT∖M0(Ai), then Claim 1 is established by choosing {a mathematical formula}B=Ai. Thus assume {a mathematical formula}X∉dependT∖M0(Ai). Since {a mathematical formula}X∉(Σ∪sig(M0)), we have {a mathematical formula}Zn−1≺T∖M0Zn=X. Let j be the largest index such that for all {a mathematical formula}j&lt;i&lt;n, we have {a mathematical formula}Zi≺T∖M0Zi+1 and {a mathematical formula}Zj⊀T∖M0Zj+1. Then {a mathematical formula}Zj⋈C″∈M0 for some {a mathematical formula}C″ and {a mathematical formula}Zj+1∈sig(C″)⊆sig(M0). Thus Claim 1 is established by choosing {a mathematical formula}B=Zj+1 since {a mathematical formula}X∈dependT∖M0(Zj+1) and {a mathematical formula}Zj+1∈sig(M0). Note that we require {a mathematical formula}Zj+1≠A which is the case since otherwise {a mathematical formula}A∈dependT∖M(Ai) and so Rule (R1) would have been applied to {a mathematical formula}Ai first.  □
      </paragraph>
      <paragraph>
       Note that preference of (R1) over (R2) is necessary to ensure correctness of the module extraction algorithm. To see this, consider {a mathematical formula}T={A⊑B,B≡E} and {a mathematical formula}Σ={A,B}. We can apply Rule (R2) to {a mathematical formula}B≡E since {a mathematical formula}B∈Def(T) and {a mathematical formula}depend(B)⊆depend(A). Afterwards, we can apply Rule (R1) to A and obtain {a mathematical formula}M=T as the extracted module. This module is not minimal, however. By applying Rule (R1) first to {a mathematical formula}A⊑B, one obtains the module {a mathematical formula}{A⊑B} which is a minimal depleting Σ-module of {a mathematical formula}T.
      </paragraph>
     </section>
    </section>
    <section label="8">
     <section-title>
      Case study
     </section-title>
     <paragraph label="Proposition 38">
      We perform a case study by extracting minimal depleting (equivalently: self-contained) Σ-modules from the medical ontology Snomed ct[11], using (a variation of) the algorithm in Fig. 3. The purpose of the case study is twofold: first, we want to find out whether the extraction algorithm scales to very large real-world TBoxes with several hundred thousand concepts, and second we are interested in the typical size of the extracted modules. In particular, we compare the size of modules extracted by our approach with the size of modules extracted using the locality-based approach from [16], [17], concentrating on the {a mathematical formula}⊤⊥⁎-version of those modules which from now on we call STAR-modules for easier pronunciation. We use the implementation of the STAR-module extraction algorithm available as part of OWL API [36] Release 3.2.4. Locality-based module extraction computes an approximation of the minimal depleting Σ-module: the STAR-module for Σ is always a depleting Σ-module and, therefore, contains the minimal one extracted by our approach. In general, this inclusion is proper and so the STAR-module for Σ can be properly larger than the minimal depleting Σ-module. The following result determines an important class of acyclic {a mathematical formula}ELI-TBoxes in which they coincide.{sup:7}Let{a mathematical formula}Tbe an acyclic{a mathematical formula}ELI-TBox containing no concept definitions. Then the STAR-module of{a mathematical formula}Tw.r.t. Σ coincides with the minimal depleting Σ-module of{a mathematical formula}T, for every signature Σ.
     </paragraph>
     <paragraph>
      Note that, though not always minimal, the STAR-modules have the advantage of being efficiently computable also for TBoxes formulated in very expressive description logics. We do not include any other module extraction approach in the comparison as all currently available algorithms that are applicable to Snomed ct extract modules which are at least as large as STAR-modules; this applies, for example, to the algorithm from [38].
     </paragraph>
     <paragraph>
      Snomed ct is an acyclic {a mathematical formula}EL-TBox, extended with role inclusion statements of the form {a mathematical formula}r⊑s and one right-identity statement of the form {a mathematical formula}r∘s⊑r. To take into account the role inclusions, we extend the module extraction algorithm from Fig. 3 to acyclic {a mathematical formula}ELI-TBoxes with role inclusions, which we treat using a ⊥-local approximation (see [16], [17]). The extracted modules are depleting and self-contained Σ-modules but are, because of the approximation approach to role inclusions, not necessarily minimal. Details of the modified algorithm and a correctness proof can be found in Appendix E. The algorithm was implemented in the MEX system, which is written in OCaml. All experiments were carried out on a PC with Intel Core2 CPU running at 2.13 GHz and with 3 GB of RAM.
     </paragraph>
     <paragraph>
      We start with comparing MEX-modules with STAR-modules for signatures Σ that are Snomed ctsubsets. Such subsets are sets of concept names that are appropriate to deployment or use of Snomed ct for a particular language, dialect, country, speciality, organisation, user or context. They usually represent groups of concepts or other content which share specific characteristics.{sup:8} For the experiments, we extracted modules from version July 2009 of Snomed ct, which has 245 476 concept inclusions, 62 217 concept equations, 12 role inclusions, 307 694 concept names, and 62 role names. To facilitate the comparison, we added all role names from Snomed ct to the subsets. For 83 out of 159 cases, the STAR-module coincides with the MEX-module. Table 2 presents the sizes of STAR- and MEX-modules for the remaining 76 signatures, where the size is measured as the number of concept definitions and inclusions in the module. For all shown signatures, the MEX-modules are smaller than the STAR-modules, with the column labelled ‘Diff ’ showing how much smaller. The average size of the STAR- and MEX-modules is 7683 and 6480 concept definitions and inclusions, respectively, and the average difference in size is 1203. The largest difference between the module sizes is for the signature ‘Treatment-20091001’ (abbreviated ‘Treatme.’ in Table 2). Its STAR-module contains 70 980 concept definitions and inclusions while its MEX-module contains 54 975 axioms—a difference of 16 005 concept definitions and inclusions.
     </paragraph>
     <paragraph>
      Most of the cases in which there is no difference between the STAR-module and the MEX-module can be explained by Proposition 38. In the experiments above, only 89 out of 159 STAR-modules contain concept definitions. In all remaining cases the STAR-module coincides with the MEX-module simply because the extraction algorithm processes no concept definitions. Thus, there are only 13 cases in which the STAR-module coincides with the MEX-module and in which the module contains concept definitions.
     </paragraph>
     <paragraph>
      For further experiments based on randomly generated signatures, we have used a more recent version of Snomed ct from 2012, which has 227 962 concept inclusions, 66 507 concept equations, 12 role inclusions, 294 470 concept names, and 62 role names. The experiments are based on randomly selected signatures of size between 100 and 1000 concept names and 20 role names and they were carried out for 1000 different signatures of each size. The special role name RoleGroup, which is used for an encoding trick, was included in every signature.
     </paragraph>
     <paragraph>
      Fig. 4 shows the maximal, minimal, and average module sizes depending on the size of the signature. Fig. 5 shows the frequency distribution of the MEX-modules and STAR-modules. In each chart, there are five different histograms, one for each of the signature sizes ranging over 100, 250, 500, 750, and 1000. Each of these histograms displays the distribution of the module sizes of 1000 extracted Snomed ct modules for randomly selected signatures of a certain size. For instance, the histogram labelled with STAR100 in Fig. 5 shows the distribution of the size of 1000 STAR-modules for the signature size 100 extracted from Snomed ct.
     </paragraph>
     <paragraph>
      In the random experiments, for every signature size the largest MEX-module is smaller than the smallest STAR-module and the average size of MEX-modules is up to 3.5 times smaller than the average size of STAR-modules. These figures do not match the outcome of the experiments with non-random subsets of signatures of Snomed ct and demand an explanation. By Proposition 38, both extraction methods will show little difference in the output when the TBox contains very few concept definitions. As mentioned above already, only 89 out of 159 STAR-modules for the non-random subset signatures contain concept definitions. This suggests that the subset signatures are highly non-random and can ‘hit’ the part of Snomed ct where terms are not fully defined. On the other hand, since roughly one fifth of Snomed ct statements are concept definitions, it is very likely that sufficiently large random signatures ʼhitʼ enough concept definitions to cause significant differences in the module sizes.
     </paragraph>
     <paragraph>
      Finally, we report on the resource consumption by both methods. Fig. 6, Fig. 7 show the maximal, minimal, and average time and memory consumption for module extraction for the random signatures depending on the size of the signature. (In all cases we do not include the time needed to read the ontology.) To test the resource consumption of MEX- and STAR-modules for larger signatures we also considered randomly generated signatures with {a mathematical formula}10000 and {a mathematical formula}100000 symbols. The maximum time and space consumed by MEX when extracting a module for {a mathematical formula}10000 symbols is 1.73 seconds and 129.2 MByte. For {a mathematical formula}100000 symbols, it is 5.67 seconds and 138.4 MByte. For STAR-modules the maximum time and space consumed when extracting a module for {a mathematical formula}10000 symbols is 4.83 seconds and 580.4 MByte. When extracting a module for {a mathematical formula}100000 symbols is 6.59 seconds and 1160.2 MByte. To explain the significantly higher memory usage of the STAR-module computation, we measured the amount of memory required just to load the ontology without computing any modules. These were 66.6 MByte for MEX and 504.8 MByte for STAR. This experiment suggests that the difference in the memory usage is due to the fact that the OWL API is capable of handling TBoxes in expressive description logics, which requires some overhead in the data structures compared with MEX.
     </paragraph>
     <paragraph>
      In summary, MEX thus scales extremely well to large TBoxes and rather often extracts significantly smaller modules than the best locality-based approach available.
     </paragraph>
    </section>
    <section label="9">
     <section-title>
      Related work
     </section-title>
     <paragraph>
      Modularity is currently a very active research topic in description logics and in ontologies in general, and a large number of articles have been published on the subject. For this reason, it is not possible to provide a fully comprehensive literature survey in this section. Instead, we focus on work that is closely related to the material presented in this paper and refer the reader to [39] for a recent collection of articles on modular ontologies, and to the proceedings of the workshop on modular ontologies (WoMO) which is held annually since 2006. We start by discussing related work on inseparability and conservative extensions and then proceed to modules, module extraction, and ontology decomposition.
     </paragraph>
     <paragraph>
      A distinguishing feature of the notion of inseparability used in this paper is its model-theoretic nature. An important alternative is to define a deductive version of inseparability based on logical consequence within a languages. For example, one might call two {a mathematical formula}ALC-TBoxes {a mathematical formula}T1 and {a mathematical formula}T2 deductively Σ-inseparable if for all Σ-concept inclusions {a mathematical formula}C⊑D formulated in {a mathematical formula}ALC, we have {a mathematical formula}T1⊨C⊑D iff {a mathematical formula}T2⊨C⊑D. Note that deductive inseparability is language dependent in the sense that the description logic language in which the logical consequences {a mathematical formula}C⊑D are formulated has to be fixed and can be varied. For instance, two {a mathematical formula}ALC-TBoxes {a mathematical formula}T1 and {a mathematical formula}T2 may be Σ-inseparable w.r.t. {a mathematical formula}EL-consequences, but not w.r.t. {a mathematical formula}ALC-consequences. In contrast, there is no such language dependency in the notion of model-theoretic inseparability. In the following, we discuss both model-theoretic and deductive inseparability, as well as the closely related notion of (Σ-)conservative extension, i.e., Σ-inseparability of two TBoxes {a mathematical formula}T1 and {a mathematical formula}T2 with {a mathematical formula}T1⊆T2. Just like inseparability, conservative extensions can be defined in a model-theoretic way and in a deductive way.
     </paragraph>
     <paragraph>
      To the best of our knowledge, a model-theoretic notion of inseparability was first considered in a description logic context in [40], where it is shown that deciding model-theoretic conservative extensions is undecidable for general {a mathematical formula}ALC-TBoxes. Model-theoretic inseparability was then studied in more depth in [18], of which this paper is an extended version. Moreover, model-theoretic inseparability was considered in [14] in the context of the DL-Lite family of description logics, where it is shown that for TBoxes formulated in {a mathematical formula}DL-LiteboolN and {a mathematical formula}DL-LitehornN, model-theoretic inseparability is decidable and coNExp-hard. The precise complexity remains open.
     </paragraph>
     <paragraph>
      In the context of ontologies formulated in first-order logic, model-theoretic notions of conservative extension have been proposed in [41] and used to modularise consistency proofs for ontologies in [22]. This line of research in modularity is partly based on ideas from modular software specification and verification, where conservative extensions and inseparability have been used since more than twenty years. For more details, we refer the reader to [42], [43], [44], [45], [46] where, in particular, the distinction between model-theoretic and deductive versions of conservative extensions and inseparability is introduced and discussed.
     </paragraph>
     <paragraph>
      In description logic research, deductive notions of conservative extension and inseparability are investigated in [47], [40], [12], [14], [48], [49]. In contrast to model-theoretic inseparability, deductive inseparability is typically decidable; for example, it is ExpTime-complete for general {a mathematical formula}EL-TBoxes and 2ExpTime-complete for general {a mathematical formula}ALC- and {a mathematical formula}ALCI-TBoxes. In contrast, deductive conservative extensions turn out to be undecidable for the extension of {a mathematical formula}ALC with nominals [50], [40].
     </paragraph>
     <paragraph>
      We now discuss related work on modules and module extraction. As already mentioned in Section 8, the locality-based modules of [50] can be viewed as an approximation of model-theoretic modules and have the advantage that they can be efficiently computed also for TBoxes formulated in expressive description logics. Deductive inseparability-based module extraction algorithms are presented and discussed in [17], [35], [14], [49]. This work is based on the algorithm presented in Fig. 2 and uses algorithms deciding deductive inseparability as an oracle. To the best of our knowledge the module extraction algorithms presented in this paper are the first work so far based on model-theoretic inseparability. A significant amount of work on modules and module extraction for ontologies is based on the syntactic structure of ontologies rather than on their interpretation as logical theories. We mention [51], [52], [53], [54] and refer also to the references therein.
     </paragraph>
     <paragraph>
      Other related lines of research are the computation of uniform interpolants for ontologies and the automatic decomposition of ontologies into a set of modules. When computing uniform interpolants, one is interested in producing, for a given TBox {a mathematical formula}T and signature Σ, a new TBox {a mathematical formula}T′ that uses only symbols in Σ and is Σ-inseparable from {a mathematical formula}T. Note that, in contrast to module extraction, (i) the TBox {a mathematical formula}T′ need not be a subset of {a mathematical formula}T, and (ii) the resulting TBox {a mathematical formula}T′ is not allowed to include any non-Σ-symbols at all. Unlike a module, the uniform interpolant {a mathematical formula}T′ asked for need in general not exist. Since uniform interpolants based on model-theoretic Σ-inseparability are typically not computable, research has mostly concentrated on deductive conservative extensions, see [55], [56] for the case of {a mathematical formula}ALC-TBoxes, [57], [58], [59] for the case of {a mathematical formula}EL-TBoxes, and [60], [14] for the case of DL-Lite TBoxes. A combination of uniform interpolation and module extraction has been studied in [61].
     </paragraph>
     <paragraph>
      In ontology decomposition, the goal is to provide a partitioning of the ontology into independent modules, or of the ontology signature into independent subsignatures. Note that, in contrast to the kind of module extraction studied in this paper, the signatures of the desired modules are not given by the user; to the contrary, it is a main purpose of automatic ontology decomposition to reveal the symbols in the ontologies signature that ‘belong together’ and those that do not. Relevant work in this area can, for example, be found in [62], [63], [64], [65], [66].
     </paragraph>
    </section>
    <section label="10">
     <section-title>
      Conclusion and future work
     </section-title>
     <paragraph>
      We have introduced a model-theoretic notion of inseparability for description logic TBoxes, analysed the complexity of deciding inseparability in various cases, and explored several forms of modules based on inseparability. This has led to module extraction algorithms for acyclic {a mathematical formula}ALCI-TBoxes and acyclic {a mathematical formula}ELI-TBoxes. Experiments for the {a mathematical formula}ELI-case show that our algorithm often extracts modules of significantly smaller size than other state-of-the-art techniques, and that our algorithms scale very well to large TBoxes such as SNOMED CT.
     </paragraph>
     <paragraph>
      There are two main conclusions one can draw from this investigation: firstly, deciding model-theoretic inseparability for DLs that contain {a mathematical formula}ALC is undecidable or of very high computational complexity, even for acyclic TBoxes and even if one TBox is empty. For such expressive DLs, practical tools for checking inseparability and extracting modules should thus be based on approximations of model-theoretic inseparability. One important known methodology for approximations is based on locality. The results in this paper suggest to consider, in addition, approximations based on syntactic dependencies.
     </paragraph>
     <paragraph>
      Secondly, for the description logics {a mathematical formula}EL and its extension {a mathematical formula}ELI, model-theoretic inseparability becomes tractable in important cases and can be deployed in practical applications without resorting to approximations. In addition, the tractability results for checking inseparability of {a mathematical formula}ELI-TBoxes from the empty TBox show that the complexity of standard reasoning (subsumption) can be significantly higher than the complexity of model-theoretic inseparability.
     </paragraph>
     <paragraph>
      As future research, it would be interesting to fill the gaps in Table 1 by determining the decidability/complexity of inseparability of acyclic {a mathematical formula}EL- and {a mathematical formula}ELI-TBoxes in the general case. From an application perspective, it would also be relevant to study inseparability of acyclic TBoxes formulated in mild extensions of {a mathematical formula}EL- and {a mathematical formula}ELI-TBoxes, such as with role inclusions, transitive roles, range restrictions, and nominals. In addition, it is of interest to investigate model-theoretic inseparability for DL-Lite dialects introduced in [67] and for which inseparability has not been investigated in [14]. Examples include {a mathematical formula}DL-Litecore and {a mathematical formula}DL-Litecore with role inclusions.
     </paragraph>
     <paragraph>
      From a practical viewpoint, it would be interesting to implement the module extraction algorithm for acyclic {a mathematical formula}ALCI-TBoxes. We are optimistic that the straightforward implementation using off-the-shelf QBF solvers can be applied to large-scale acyclic non-{a mathematical formula}ELI-TBoxes such as the NCI thesaurus. A further extension to practical minimal module extraction with mild syntactic restrictions seems to be in reach even for acyclic {a mathematical formula}SHIQ-TBoxes.
     </paragraph>
    </section>
   </content>
   <appendices>
    <section label="Appendix A">
     Proofs for Section 4
     <paragraph label="Lemma A.1">
      Let{a mathematical formula}T1and{a mathematical formula}T2be{a mathematical formula}ALCI-TBoxes and Σ a concept signature. Assume that{a mathematical formula}T1does not Σ-entail{a mathematical formula}T2. Then there exists a finite model{a mathematical formula}Iof{a mathematical formula}T1such that there is no model{a mathematical formula}Jof{a mathematical formula}T2which coincides with{a mathematical formula}Ion Σ.
     </paragraph>
     <paragraph label="Proof">
      Assume {a mathematical formula}T1 does not Σ-entail {a mathematical formula}T2. Let {a mathematical formula}I be a model of {a mathematical formula}T1 such that there is no model {a mathematical formula}J of {a mathematical formula}T2 which coincides with {a mathematical formula}I on Σ. Using {a mathematical formula}I, we construct a finite model as required in the lemma using the standard filtration technique. Define an equivalence relation ∼ of {a mathematical formula}ΔI by setting for all {a mathematical formula}d1,d2∈ΔI:
     </paragraph>
     <list>
      <list-item label="•">
       {a mathematical formula}d1∼d2 if, and only if, {a mathematical formula}d1∈DI⇔d2∈DI for all {a mathematical formula}D∈Σ∪sub(T1), where {a mathematical formula}sub(T1) is the set of subconcepts of concepts in {a mathematical formula}T1.
      </list-item>
     </list>
     <paragraph label="Theorem 10">
      Given acyclic{a mathematical formula}ALC-TBoxes{a mathematical formula}T1and{a mathematical formula}T2and a concept signature Σ, it is{a mathematical formula}coNExpNP-hard to decide whether{a mathematical formula}T1≡ΣT2. This is even true when{a mathematical formula}T1∪T2is acyclic.
     </paragraph>
     <paragraph label="Proof">
      We have to prove the {a mathematical formula}coNExpNP-lower bound under the condition that {a mathematical formula}T1∪T2 is an acyclic {a mathematical formula}ALC-TBox. The proof is by reduction of the complement of the concept satisfiability problem w.r.t. singleton concept-circumscribed ABoxes which is {a mathematical formula}NExpNP-hard (cf. [28] (Theorem 15)).In detail, the problem we reduce is defined as follows: given an ABox {a mathematical formula}A={C(a)} with C an {a mathematical formula}ALC-concept, an {a mathematical formula}ALC-concept {a mathematical formula}C0 and sets M and F of minimised and fixed concept names, decide whether {a mathematical formula}C0 is satisfiable w.r.t. {a mathematical formula}CircM,F(A); i.e., whether there exists a model {a mathematical formula}I of {a mathematical formula}CircM,F(A) such that {a mathematical formula}C0I≠∅. Here {a mathematical formula}I is a model of {a mathematical formula}CircM,F(A) iff it is a model of {a mathematical formula}A and there does not exist any model {a mathematical formula}J of {a mathematical formula}A such that {a mathematical formula}J&lt;M,FI (where we assume that the interpretation of the individual name a is fixed; i.e., {a mathematical formula}aI=aJ whenever {a mathematical formula}J&lt;M,FI).Assume {a mathematical formula}A={C(a)}, {a mathematical formula}C0, and sets M and F as above are given. We construct acyclic {a mathematical formula}ALC-TBoxes {a mathematical formula}T1 and {a mathematical formula}T2 with {a mathematical formula}T1∪T2 acyclic and a signature Σ consisting of concept names only such that {a mathematical formula}T1Σ-entails {a mathematical formula}T2 if, and only if, {a mathematical formula}C0 is not satisfiable w.r.t. {a mathematical formula}CircM,F(A).To construct {a mathematical formula}T1 and {a mathematical formula}T2, introduce for every {a mathematical formula}X∈M∪F∪sig(C)∪sig(C0) a fresh {a mathematical formula}X′ and denote by {a mathematical formula}C′ the resulting concept when every X is replaced by {a mathematical formula}X′. Take fresh role names {a mathematical formula}aux1,…,aux5 and concept names {a mathematical formula}A,B0,B1,B2. We set{a mathematical formula}{a mathematical formula}T2 consists of
     </paragraph>
     <list label="Proof">
      <list-item label="•">
       {a mathematical formula}B1⊑(∃aux3.B2)⊔(∃aux4.(A⊓C′)⊓∃aux5.⨆B∈M(B⊓¬B′)),
      </list-item>
      <list-item label="•">
       {a mathematical formula}B′⊑B, for all {a mathematical formula}B∈M, and
      </list-item>
      <list-item label="•">
       {a mathematical formula}B′≡B, for all {a mathematical formula}B∈F.
      </list-item>
      <paragraph>
       {a mathematical formula}C0is satisfiable w.r.t.{a mathematical formula}CircM,F(A)if, and only if,{a mathematical formula}T1does not Σ-entail{a mathematical formula}T2.
      </paragraph>
      <paragraph>
       We start with the direction from left to right. Let {a mathematical formula}I be a model of {a mathematical formula}CircM,F(A) with {a mathematical formula}C0I≠∅. Since {a mathematical formula}aux1, {a mathematical formula}aux2, A, {a mathematical formula}B0, {a mathematical formula}B1, {a mathematical formula}B2 are fresh symbols that do not occur in {a mathematical formula}C0 nor C, we may assume that {a mathematical formula}I is a model of {a mathematical formula}T1 such that {a mathematical formula}B0I=B1I=ΔI and {a mathematical formula}AI={aI} and {a mathematical formula}B2I=∅. We show that there does not exist any model {a mathematical formula}J of {a mathematical formula}T2 such that {a mathematical formula}J|Σ=I|Σ. For a proof by contradiction, assume there exists such an interpretation {a mathematical formula}J. We set {a mathematical formula}aJ=aI. Observe that {a mathematical formula}(∃aux3.B2)J=∅ since {a mathematical formula}B2I=∅ and {a mathematical formula}B2∈Σ. We also have {a mathematical formula}B1J=ΔI since {a mathematical formula}B1I=ΔI and {a mathematical formula}B1∈Σ. Hence{a mathematical formula} As {a mathematical formula}A∈Σ and {a mathematical formula}AI={aI}, we have {a mathematical formula}aJ∈C′J and there exists {a mathematical formula}B∈M with {a mathematical formula}B′J⊊BI. We show that this contradicts the condition that there does not exist any {a mathematical formula}J′&lt;M,FJ that is a model of {a mathematical formula}A: such a {a mathematical formula}J′ is obtained from {a mathematical formula}J by setting {a mathematical formula}XJ′:=X′J for all symbols X from {a mathematical formula}sig(C)∪sig(C0). Then {a mathematical formula}aJ′∈CJ′ since {a mathematical formula}aJ∈C′J and so {a mathematical formula}J′ is a model of {a mathematical formula}A. We have {a mathematical formula}J′&lt;M,FJ since {a mathematical formula}BJ′⊆BJ for {a mathematical formula}B∈M (since {a mathematical formula}B′⊑B∈T2), {a mathematical formula}BJ′=BJ for {a mathematical formula}B∈F (since {a mathematical formula}B′≡B∈T2) and we have that there exists {a mathematical formula}B∈M with {a mathematical formula}BJ′⊊BJ since there exists {a mathematical formula}B∈M with {a mathematical formula}B′J⊊BJ.
      </paragraph>
      <paragraph>
       Conversely, assume that {a mathematical formula}T1⊭ΣT2. Take a model {a mathematical formula}I of {a mathematical formula}T1 such that there does not exist any model {a mathematical formula}J of {a mathematical formula}T2 with {a mathematical formula}I|Σ=J|Σ.
      </paragraph>
      <paragraph>
       Observe first that {a mathematical formula}B2I=∅: if this is not the case then we can satisfy the inclusions of {a mathematical formula}T2 in a model {a mathematical formula}J with {a mathematical formula}J|Σ=I|Σ by taking some {a mathematical formula}d∈B2J and set {a mathematical formula}aux3J=ΔI×{d} and {a mathematical formula}B′J=BI, for all {a mathematical formula}B∈M∪F. Then, from {a mathematical formula}B2≡¬(∃aux1.(A⊓C)⊓∃aux2.C0)∈T1, it follows that {a mathematical formula}(∃aux1.(A⊓C)⊓∃aux2.C0)I≠∅. We may assume that {a mathematical formula}aI∈(A⊓C)I. Then {a mathematical formula}I is a model of {a mathematical formula}A and {a mathematical formula}C0I≠∅. It remains to show that there does not exist a model {a mathematical formula}J of {a mathematical formula}A such that {a mathematical formula}J&lt;M,FI. For a proof by contradiction assume that {a mathematical formula}J is such a model of {a mathematical formula}A. We show that then there exists a model {a mathematical formula}J′ of {a mathematical formula}T2 such that {a mathematical formula}J′|Σ=I|Σ and thus obtain a contradiction. Define {a mathematical formula}J′ by setting {a mathematical formula}X′J′:=XJ, for all {a mathematical formula}X∈sig(C)∪sig(C0), {a mathematical formula}aux4J′:=ΔI×{aI}, and {a mathematical formula}aux5J′=ΔJ×{e}, where {a mathematical formula}e∈BJ∖BI for some {a mathematical formula}B∈M that witnesses that {a mathematical formula}J&lt;M,FI. It is readily checked that {a mathematical formula}J′|Σ≡ΣI|Σ.  □
      </paragraph>
     </list>
    </section>
    <section label="Appendix B">
     Proofs for Section 5
     <paragraph>
      We start with some preliminaries. Let {a mathematical formula}I be an interpretation and {a mathematical formula}D⊆ΔI non-empty. Then the subinterpretation{a mathematical formula}IDof{a mathematical formula}Iinduced by D is defined as follows:
     </paragraph>
     <list>
      <list-item label="•">
       {a mathematical formula}ΔID=D;
      </list-item>
      <list-item label="•">
       {a mathematical formula}rID=rI∩(D×D), for all {a mathematical formula}r∈NR;
      </list-item>
      <list-item label="•">
       {a mathematical formula}AID=AI∩D, for all {a mathematical formula}A∈NC.
      </list-item>
     </list>
     <paragraph label="Lemma B.1">
      Let Σ be signature. Call a non-empty subset D of {a mathematical formula}ΔIΣ-closed if for all {a mathematical formula}d,d′∈ΔI and role names {a mathematical formula}r∈Σ: if {a mathematical formula}d∈D and {a mathematical formula}(d,d′)∈rI, then {a mathematical formula}d′∈D. (Note that the concept names in Σ are not relevant for being Σ-closed.) If D is Σ-closed, then {a mathematical formula}ID is called a Σ-generated subinterpretation of{a mathematical formula}I. The following lemma is straightforward. If{a mathematical formula}IDis a Σ-generated subinterpretation of{a mathematical formula}I, then{a mathematical formula}CID=CI∩D, for all{a mathematical formula}ALC-concepts C such that{a mathematical formula}sig(C)⊆Σ. In particular, if{a mathematical formula}Iis a model of an{a mathematical formula}ALC-TBox{a mathematical formula}Twith{a mathematical formula}sig(T)⊆Σ, then{a mathematical formula}IDis a model of{a mathematical formula}T.
     </paragraph>
     <paragraph>
      Let {a mathematical formula}x∈ΔI. Then {a mathematical formula}ID is called the {a mathematical formula}(x,Σ)-generated subinterpretation of{a mathematical formula}I if D is the smallest Σ-closed subset of {a mathematical formula}ΔI containing x. In this case we set {a mathematical formula}Ix:=ID.
     </paragraph>
     <paragraph label="Proof">
      Given an{a mathematical formula}EL-TBox{a mathematical formula}Tand signature Σ, it is undecidable whether{a mathematical formula}T≡Σ∅.The proof is by reduction of the undecidable word problem for semigroups. We use {a mathematical formula}r→ to denote a composition{a mathematical formula}r→=r1∘r2∘⋯∘rk of roles names, where {a mathematical formula}k⩾1 and {a mathematical formula}ri∈NR for all {a mathematical formula}i∈{1,…,k}. The semantics of role compositions is defined as usual. In detail, the extension{a mathematical formula}r→I of {a mathematical formula}r→=r1∘⋯∘rk in {a mathematical formula}I is defined by{a mathematical formula} For compositions {a mathematical formula}r→ and {a mathematical formula}s→, we define
      <list>
       {a mathematical formula}I⊨r→⊑s→ iff {a mathematical formula}r→I⊆s→I,{a mathematical formula}I⊨r→≡s→ iff {a mathematical formula}r→I=s→I,In what follows
      </list>
      <paragraph label="Claim">
       {a mathematical formula}∃r→.C stands for the {a mathematical formula}EL-concept {a mathematical formula}∃r1.⋯∃rk.C, where {a mathematical formula}r→=r1∘⋯∘rk.For the reduction assume that a problem instance {a mathematical formula}{r→1≡s→1,…,r→n≡s→n} and {a mathematical formula}r→≡s→ is given. Let Σ be the set of all roles names that occur in the problem instance and a fresh concept name A. Additionally, take fresh concept names {a mathematical formula}Ai,Bi,Ni,E,M and fresh role names {a mathematical formula}u0,ui, for {a mathematical formula}i∈{1,…,n}. Let {a mathematical formula}T be the set consisting of all instances of the following inclusions: for all role names {a mathematical formula}v∈Σ and all {a mathematical formula}i∈{1,…,n},{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula} We show the following{a mathematical formula}T≡Σ∅if, and only if,(B.1)holds.Assume first that {a mathematical formula}T≢Σ∅. We show that (B.1) does not hold. Take an interpretation {a mathematical formula}I such that there does not exist any model {a mathematical formula}J of {a mathematical formula}T with {a mathematical formula}J|Σ=I|Σ. We first show that {a mathematical formula}I is a model of {a mathematical formula}r→i≡s→i, for {a mathematical formula}1⩽i⩽n, such that for all {a mathematical formula}v∈Σ the domain of {a mathematical formula}vI coincides with {a mathematical formula}ΔI. Formally:
      </paragraph>
      <list>
       <list-item label="(a)">
        {a mathematical formula}I⊨⊤⊑∃v.⊤, for all role names {a mathematical formula}v∈Σ;
       </list-item>
       <list-item label="(b)">
        {a mathematical formula}r→iI=s→iI, for all {a mathematical formula}i∈{1,…,n}.
       </list-item>
      </list>
      <paragraph>
       We show both, (a) and (b), by contradiction. Suppose (a) does not hold. Let {a mathematical formula}J be an interpretation that coincides with {a mathematical formula}I on the symbols in Σ and that interprets the symbols in {a mathematical formula}sig(T)∖Σ as follows. Let x be a point without v-successor, for some role {a mathematical formula}v∈Σ. Set {a mathematical formula}EJ={x}, {a mathematical formula}MJ=∅, and, for all {a mathematical formula}i∈{1,…,n}, set {a mathematical formula}AiJ,BiJ,NiJ to {a mathematical formula}ΔJ and {a mathematical formula}u0J,uiJ to {a mathematical formula}ΔJ×ΔJ. It is readily checked that {a mathematical formula}J satisfies all inclusions in (B.3) to (B.9) and, thus, {a mathematical formula}J is a model of {a mathematical formula}T. We have derived a contradiction. Now consider (b). Suppose (b) does not hold, i.e., there is a pair {a mathematical formula}(x,y)∈r→iI such that {a mathematical formula}(x,y)∉s→iI, for some {a mathematical formula}i∈{1,…,n}. By (a), there is a point {a mathematical formula}z∈ΔI such that {a mathematical formula}(x,z)∈s→iI. Obtain {a mathematical formula}J from {a mathematical formula}I by interpreting the symbols in {a mathematical formula}sig(T)∖Σ as follows. Set {a mathematical formula}uiJ={(x′,x)|x′∈ΔJ}, {a mathematical formula}AiJ={y}, {a mathematical formula}BiJ={z}, and {a mathematical formula}NiJ=∅. Set {a mathematical formula}EJ,MJ,AjJ,BjJ,NjJ to {a mathematical formula}ΔJ and {a mathematical formula}u0J,ujJ to {a mathematical formula}ΔJ×ΔJ, for all {a mathematical formula}j∈{1,…,n} and {a mathematical formula}j≠i. It is readily checked that {a mathematical formula}J satisfies all inclusions in (B.3) to (B.9). Thus, {a mathematical formula}J is a model of {a mathematical formula}T. We have derived a contradiction.We now show that (B.1) does not hold. Since we have (a) and (b) already, it remains to show that {a mathematical formula}I⊭r→⊑s→. Obtain {a mathematical formula}J from {a mathematical formula}I by interpreting the symbols in {a mathematical formula}sig(T)∖Σ as follows. Set {a mathematical formula}EJ,MJ,AiJ,BiJ,NiJ to {a mathematical formula}ΔJ and {a mathematical formula}u0J,uiJ to {a mathematical formula}ΔJ×ΔJ, for all {a mathematical formula}i∈{1,…,n}. It is readily verified that {a mathematical formula}J satisfies the inclusions in (B.3) to (B.8). As there does not exist any model {a mathematical formula}J′ of {a mathematical formula}T such that {a mathematical formula}J′≡ΣI, (B.9) does not hold in {a mathematical formula}J. That is, there is a point {a mathematical formula}x∈ΔJ such that {a mathematical formula}x∈(∃r→.A)J but {a mathematical formula}x∉(∃s→.A)J. Hence, {a mathematical formula}J⊭r→⊑s→.Conversely, suppose {a mathematical formula}T≡Σ∅. We show (B.1) by contradiction. Suppose (B.1) does not hold. We may assume that there is an interpretation {a mathematical formula}I in which all role names in Σ are interpreted as functions such that {a mathematical formula}I⊨r→i≡s→i, for all {a mathematical formula}i∈{1,…,n}, but {a mathematical formula}I⊭r→⊑s→. There is a pair {a mathematical formula}(x,y)∈r→I such that {a mathematical formula}(x,y)∉s→I.We may assume that {a mathematical formula}AI={y} and, therefore, {a mathematical formula}x∈(∃r→.A)I. Let {a mathematical formula}Ix be the {a mathematical formula}(x,Σ)-generated subinterpretation of {a mathematical formula}I. Since {a mathematical formula}T≡Σ∅, there exists a model {a mathematical formula}J of {a mathematical formula}T that coincides with {a mathematical formula}Ix on Σ. By (B.6) we have {a mathematical formula}EJ≠∅. Therefore, by (B.7), {a mathematical formula}MJ≠∅. Every point in {a mathematical formula}MJ is reachable from x by following a Σ-path: this is the case since {a mathematical formula}J coincides with {a mathematical formula}Ix on Σ and {a mathematical formula}Ix is an {a mathematical formula}(x,Σ)-generated subinterpretation of {a mathematical formula}I. Hence {a mathematical formula}x∈MJ due to (B.8). Let {a mathematical formula}i∈{1,…,n}. We have that {a mathematical formula}(∃r→i.⊤)J=(∃s→i.⊤)J=ΔJ. By (B.3) there exists a {a mathematical formula}ui-successor {a mathematical formula}di of x from which, by the fact that {a mathematical formula}J⊨ri→≡si→ and the functionality of all {a mathematical formula}v∈Σ in {a mathematical formula}J, the role paths {a mathematical formula}ri→ and {a mathematical formula}si→ lead to a common point {a mathematical formula}di′ with {a mathematical formula}di′∈(Ai⊓Bi)J. By (B.4), {a mathematical formula}di′∈NiJ. As {a mathematical formula}di′ is reachable from x, we obtain {a mathematical formula}x∈NiJ due to (B.5). Thus, we have {a mathematical formula}x∈(∃r→.A⊓M⊓⨅i⩽nNi)J. Inclusion (B.9) yields that {a mathematical formula}x∈(∃s→.A)J. But then {a mathematical formula}(x,y)∈s→J and we have derived a contradiction.  □
      </paragraph>
     </paragraph>
     <paragraph label="Proof">
      Given{a mathematical formula}EL- or{a mathematical formula}ELI-TBoxes{a mathematical formula}T1and{a mathematical formula}T2and concept signatures Σ, it is{a mathematical formula}coNExpNP-complete to decide{a mathematical formula}T1≡ΣT2.Containment in {a mathematical formula}coNExpNP follows from Theorem 9, which shows that the problem is in {a mathematical formula}coNExpNP even for {a mathematical formula}ALCI-TBoxes.Hardness is (essentially) proved by reduction of Σ-entailment for {a mathematical formula}ALC-TBoxes and concept signatures Σ, which is {a mathematical formula}coNExpNP-hard by Theorem 10.More precisely, for {a mathematical formula}ALC-TBoxes {a mathematical formula}T1 and {a mathematical formula}T2 and a set Σ of concept names, we construct {a mathematical formula}EL-TBoxes {a mathematical formula}T1′,T2′ and a signature {a mathematical formula}Σ′ consisting of concept names only the following two statements are equivalent:
      <list>
       for every model {a mathematical formula}I of {a mathematical formula}T1 of cardinality ⩾2 there exists a model {a mathematical formula}J of {a mathematical formula}T2 such that {a mathematical formula}J|Σ=I|Σ;{a mathematical formula}T1′⊨Σ′T2′.Let
      </list>
      <paragraph label="Claim 1">
       {a mathematical formula}T1 and {a mathematical formula}T2 be {a mathematical formula}ALC-TBoxes and Σ a set of concept names. We may assume w.l.o.g. that {a mathematical formula}Σ=sig(T1)∩sig(T2) (see proof of Lemma 3) and that both, {a mathematical formula}T1 and {a mathematical formula}T2, consist of inclusions of the form{a mathematical formula} where A is a concept name and C is of the form ¬B, {a mathematical formula}B1⊓B2, or {a mathematical formula}∃r.B, where B, {a mathematical formula}B1, {a mathematical formula}B2 are concept names.We define the {a mathematical formula}EL-TBoxes {a mathematical formula}T1′ and {a mathematical formula}T2′. To simulate negation in {a mathematical formula}EL we introduce for every concept name {a mathematical formula}B∈sig(T1)∪sig(T2) a fresh concept name {a mathematical formula}B¯ that stands for ¬B. Denote for {a mathematical formula}C1⊑C2∈T1∪T2 by {a mathematical formula}C1′⊑C2′ the resulting {a mathematical formula}EL-inclusion when all ¬B in {a mathematical formula}C1⊑C2 are replaced by {a mathematical formula}B¯. To enforce the intended behaviour of {a mathematical formula}B¯, we require, in addition, fresh concept names V and {a mathematical formula}V¯, fresh role names e and f, and for every concept name {a mathematical formula}B∈sig(T1)∪sig(T2), a fresh role name {a mathematical formula}sB. To define {a mathematical formula}Ti′, first replace every {a mathematical formula}C1⊑C2∈Ti by the two inclusions{a mathematical formula} and denote the resulting {a mathematical formula}EL-TBoxes by {a mathematical formula}Ci, {a mathematical formula}i=1,2. Intuitively, we want {a mathematical formula}V¯ to behave similarly to ¬V in intended interpretations. Moreover, we want that if {a mathematical formula}V¯ behaves similarly to ¬V, then all {a mathematical formula}B¯ behave similarly to ¬B. Note that in an interpretation {a mathematical formula}I with {a mathematical formula}(V⊔V¯)I≠ΔI one can satisfy the inclusions in {a mathematical formula}Ci in a trivial way by setting {a mathematical formula}eI=ΔI×{d} for some {a mathematical formula}d∈ΔI∖(V⊔V¯)I. We use this property to enforce that in intended interpretations {a mathematical formula}I, {a mathematical formula}(V¯⊔V)I=ΔI. In addition, in the intended interpretations we want that {a mathematical formula}(V⊓V¯)I=∅. Since one cannot enforce this in {a mathematical formula}EL, we instead enforce that the subinterpretation induced by {a mathematical formula}(V⊓V¯)I does not interfere with the subinterpretation induced by {a mathematical formula}ΔI∖(V⊓V¯)I.To achieve all this, we consider the following set {a mathematical formula}C of {a mathematical formula}EL-inclusions: for all concept names {a mathematical formula}B∈sig(T1∪T2) and role names {a mathematical formula}r∈sig(T1)∪sig(T2)∪{f}∪{sB|B∈(sig(T1)∪sig(T2))∩NC},{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula} Let {a mathematical formula}Ti′=C∪Ci, for {a mathematical formula}i=1,2 and let{a mathematical formula} Note that there are no role names in {a mathematical formula}Σ′.If not (a), then not (b).Let {a mathematical formula}I1 be a model of {a mathematical formula}T1 of cardinality at least 2 such that there does not exist a model {a mathematical formula}I2 of {a mathematical formula}T2 with {a mathematical formula}I1|Σ=I2|Σ. Define {a mathematical formula}I1′ as {a mathematical formula}I1 with the following modifications: let {a mathematical formula}VI1′ and {a mathematical formula}V¯I1′ form a partition of {a mathematical formula}ΔI1 (this is possible since {a mathematical formula}ΔI1 has at least two elements) and
      </paragraph>
      <list>
       <list-item label="•">
        set {a mathematical formula}B¯I1′=ΔI1∖BI1;
       </list-item>
       <list-item label="•">
        fix {a mathematical formula}d1∈VI1 and {a mathematical formula}d2∈V¯I1 and set{a mathematical formula}
       </list-item>
       <list-item label="•">
        set {a mathematical formula}eI1′=fI1′=ΔI1×ΔI1.
       </list-item>
      </list>
      <paragraph>
       It is readily seen that {a mathematical formula}I1′ is a model of {a mathematical formula}T1′. To show not (b) it is sufficient to prove that there does not exist a model {a mathematical formula}J of {a mathematical formula}T2′ such that {a mathematical formula}J|Σ′=I1′|Σ′. For a proof by contradiction suppose there exists such a {a mathematical formula}J. We show that {a mathematical formula}J is a model of {a mathematical formula}T2. From this we obtain, since {a mathematical formula}I1′|Σ=I1|Σ and {a mathematical formula}Σ⊆Σ′, that {a mathematical formula}J is a model of {a mathematical formula}T2 such that {a mathematical formula}J|Σ=I1|Σ. Thus we have derived a contradiction. To show that {a mathematical formula}J is a model of {a mathematical formula}T2 it is sufficient to prove
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}B¯J=(¬B)J for all concept names {a mathematical formula}B∈sig(T2) and
       </list-item>
       <list-item label="•">
        {a mathematical formula}(∃e.V)J∪(∃e.V¯)J=ΔJ
       </list-item>
      </list>
      <paragraph label="Claim 2">
       since then the inclusions in {a mathematical formula}T2 follow from the inclusions in {a mathematical formula}C2. For Point 1, since {a mathematical formula}J coincides with {a mathematical formula}I1′ on {a mathematical formula}Σ′, we have {a mathematical formula}B¯J=(¬B)J, for all {a mathematical formula}B∈Σ. Let {a mathematical formula}B∈sig(T2)∖Σ′. As {a mathematical formula}V,V¯∈Σ′, their interpretation in {a mathematical formula}J is the same as in {a mathematical formula}I1′, i.e., they form a partition of {a mathematical formula}ΔJ. The concept inclusion in (B.12) yields that every node has an {a mathematical formula}sB-successor, which is either in {a mathematical formula}VJ or in {a mathematical formula}V¯J. Then, due to the axioms in (B.10) and (B.11), we have that {a mathematical formula}BJ∪B¯J=ΔJ. Moreover, {a mathematical formula}BJ and {a mathematical formula}B¯J are disjoint by disjointness of {a mathematical formula}VJ and {a mathematical formula}V¯J together with the fact that {a mathematical formula}(B⊓B¯)J=(V⊓V¯)J due to (B.15). It follows that {a mathematical formula}B¯J=(¬B)J, as required.Point 2 follows from (B.13) and the fact that {a mathematical formula}VJ and {a mathematical formula}V¯J form a partition of {a mathematical formula}ΔJ.If not (b), then not (a).Let {a mathematical formula}I1 be a model of {a mathematical formula}T1′ such that there does not exist a model {a mathematical formula}I2 of {a mathematical formula}T2′ with {a mathematical formula}I1|Σ′=I2|Σ′. We first show that:
      </paragraph>
      <list>
       <list-item label="(i)">
        {a mathematical formula}VI1∪V¯I1=ΔI1,
       </list-item>
       <list-item label="(ii)">
        {a mathematical formula}VI1≠∅ and {a mathematical formula}V¯I1≠∅,
       </list-item>
       <list-item label="(iii)">
        {a mathematical formula}VI1≠V¯I1, and
       </list-item>
       <list-item label="(iv)">
        {a mathematical formula}I1 contains two elements {a mathematical formula}d,d′ with {a mathematical formula}d∈VI1∖V¯I1 and {a mathematical formula}d′∈V¯I1∖VI1.
       </list-item>
      </list>
      <paragraph>
       For (i), suppose {a mathematical formula}VI1∪V¯I1≠ΔI1. As the role name e is not in {a mathematical formula}Σ′, we can choose an interpretation {a mathematical formula}I2 with {a mathematical formula}I1|Σ′=I2|Σ′ such that all {a mathematical formula}eI2=ΔI2×{d} for some {a mathematical formula}d∉VI2∪V¯I2. Then {a mathematical formula}(∃e.V)I2=(∃e.V¯)I2=∅ and, thus, {a mathematical formula}I2 trivially satisfies {a mathematical formula}C2. Moreover, since only the interpretation of e has changed and {a mathematical formula}I1 is a model of {a mathematical formula}C, {a mathematical formula}I2 is a model of {a mathematical formula}C as well since (B.13) is still true and is the only axiom in {a mathematical formula}C containing e. Hence, {a mathematical formula}I2 is a model of {a mathematical formula}T2′; a contradiction. Consider (ii). Given (i), at least one of {a mathematical formula}VI1 and {a mathematical formula}V¯I1 is non-empty. But then, the axioms in (B.14) yield that both {a mathematical formula}VI1 and {a mathematical formula}V¯I1 are non-empty. To prove (iii), assume that it does not hold; i.e., {a mathematical formula}VI1=V¯I1. By (i), we have that {a mathematical formula}VI1=V¯I1=ΔI1. Take the interpretation {a mathematical formula}I2 with {a mathematical formula}ΔI2=ΔI1 and
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}AI2=ΔI2 for all {a mathematical formula}A∈NC;
       </list-item>
       <list-item label="•">
        {a mathematical formula}rI2=ΔI2×ΔI2, for all {a mathematical formula}r∈NR.
       </list-item>
      </list>
      <paragraph>
       Note that {a mathematical formula}I2 satisfies every{a mathematical formula}EL-inclusion. In particular, {a mathematical formula}I2 is a model of {a mathematical formula}T2′. Moreover, {a mathematical formula}I1|Σ′=I2|Σ′ since by (B.15), all concept names in {a mathematical formula}Σ′ are interpreted as the full domain {a mathematical formula}ΔI2. We have derived a contradiction. Finally, to show (iv), assume that (iv) does not hold. By (i) and (iii), we can assume w.l.o.g. that {a mathematical formula}VI1⊊V¯I1=ΔI1. Let {a mathematical formula}d∈V¯I1∖VI1. By (B.14), all points in {a mathematical formula}V¯I1 have an f-successor in {a mathematical formula}VI1. Thus, there exists {a mathematical formula}d′∈VI1 such that {a mathematical formula}(d,d′)∈fI1. But then {a mathematical formula}d′∈(V⊓V¯)I1. By (B.16), {a mathematical formula}d∈V¯I1∩VI1; a contradiction.Note that items (i) to (iv) do not imply that {a mathematical formula}VI1 and {a mathematical formula}V¯I1 forms a partition of {a mathematical formula}ΔI1, i.e., we can have {a mathematical formula}VI1∩V¯I1≠∅. Set {a mathematical formula}Δ1=VI1∩V¯I1 and {a mathematical formula}Δ2=ΔI1∖Δ1. Note {a mathematical formula}VI1 and {a mathematical formula}V¯I1 form a partition of {a mathematical formula}Δ2. By (iv), we have that {a mathematical formula}|Δ2|⩾2. Due to (B.16), the set {a mathematical formula}Δ2 is Γ-closed, where {a mathematical formula}Γ=sig(T1)∪sig(T2)∪{f}∪{sB|B∈(sig(T1)∪sig(T2))∩NC}. Since we can re-define {a mathematical formula}eI1 without changing any of the properties of {a mathematical formula}I1 established above by setting{a mathematical formula} we can assume that {a mathematical formula}Δ2 is {a mathematical formula}Γ∪{e}-closed. It follows from Lemma B.1 that the subinterpretation of {a mathematical formula}I1 induced by {a mathematical formula}Δ2 satisfies {a mathematical formula}T1′. We denote this interpretation by {a mathematical formula}J1.We now show that {a mathematical formula}J1 is a model of {a mathematical formula}T1. To this end, it is sufficient to show
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}B¯J=(¬B)J for all concept names {a mathematical formula}B∈sig(T1) and
       </list-item>
       <list-item label="•">
        {a mathematical formula}(∃e.V)J∪(∃e.V¯)J=ΔJ
       </list-item>
      </list>
      <paragraph>
       since then the inclusions in {a mathematical formula}T1 follow from the inclusions in {a mathematical formula}C1. For Point 1, as {a mathematical formula}VJ1 and {a mathematical formula}V¯J1 cover {a mathematical formula}Δ2, the concept inclusions in (B.10) to (B.12) yield {a mathematical formula}BJ1∪B¯J1=Δ2. As {a mathematical formula}VJ1 and {a mathematical formula}V¯J1 are disjoint, we obtain disjointness of {a mathematical formula}BJ1 and {a mathematical formula}B¯J1 by (B.15). Point 1 follows. Point 2 follows from (B.13) and the fact that {a mathematical formula}VJ1 and {a mathematical formula}V¯J1 cover {a mathematical formula}Δ2.If there does not exist a model {a mathematical formula}J2 of {a mathematical formula}T2 such that {a mathematical formula}J2|Σ=J1|Σ then (a) does not hold and we are done. Assume there exists such a model {a mathematical formula}J2. Based on {a mathematical formula}J2 we construct a model {a mathematical formula}I2 of {a mathematical formula}T2′ such that {a mathematical formula}I2|Σ′=I1|Σ′, thus contradicting the assumption that no such interpretation {a mathematical formula}I2 exists.We start by constructing an interpretation {a mathematical formula}J2′ with domain {a mathematical formula}ΔJ2: all symbols not in {a mathematical formula}sig(T2)∖Σ as well as the symbols in {a mathematical formula}{B¯|B∈sig(T2)∖Σ)}∪{sB|B∈sig(T2)∖Σ} are interpreted in the same way as in {a mathematical formula}J1. For all concept names {a mathematical formula}B∈sig(T2)∖Σ let
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}BJ2′:=BJ2;
       </list-item>
       <list-item label="•">
        {a mathematical formula}B¯J2′:=ΔJ2′∖BJ2′;
       </list-item>
       <list-item label="•">
        fix {a mathematical formula}d1∈VJ2 and {a mathematical formula}d2∈V¯J2 and set {a mathematical formula}sBJ2′:={(d,d1)|d∈BJ2}∪{(d,d2)|d∈ΔJ2∖BJ2}.
       </list-item>
      </list>
      <paragraph>
       By definition, {a mathematical formula}J2′ is a model of {a mathematical formula}T2′ such that {a mathematical formula}J1|Σ′=J2′|Σ′.Define an interpretation {a mathematical formula}J2″ with domain {a mathematical formula}ΔJ″=Δ1 by setting
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}AI2=ΔI2 for all {a mathematical formula}A∈NC;
       </list-item>
       <list-item label="•">
        {a mathematical formula}rI2=ΔI2×ΔI2, for all {a mathematical formula}r∈NR.
       </list-item>
      </list>
      <paragraph>
       As before, {a mathematical formula}J2″ satisfies every{a mathematical formula}EL-inclusion and is, therefore, a model of {a mathematical formula}T2′. Let {a mathematical formula}K be the subinterpretation of {a mathematical formula}I1 induced by {a mathematical formula}Δ1. Then {a mathematical formula}K|Σ′=J2″|Σ′ since {a mathematical formula}VI1∩V¯I1=Δ1 and, by the inclusions (B.15), {a mathematical formula}AI1⊇Δ1 for all {a mathematical formula}A∈Σ′.Define {a mathematical formula}I2 as the (disjoint) union of {a mathematical formula}J2′ and {a mathematical formula}J2″. Then {a mathematical formula}I2 is a model of {a mathematical formula}T2′ since both {a mathematical formula}J2′ and {a mathematical formula}J2″ are models of {a mathematical formula}T2′ and {a mathematical formula}EL is preserved under disjoint unions. Moreover, {a mathematical formula}I2|Σ′=I1|Σ′, as required.  □
      </paragraph>
     </paragraph>
    </section>
    <section label="Appendix C">
     Proofs for Section 6
     <paragraph label="Lemma C.1">
      We supply the remaining proof step for Theorem 33. Let{a mathematical formula}Tbe an acyclic{a mathematical formula}ALCI-TBox and Σ a signature. For every interpretation{a mathematical formula}I, the following conditions are equivalent:
     </paragraph>
     <list>
      <list-item label="(a)">
       there exists a model{a mathematical formula}Jof{a mathematical formula}Tsuch that{a mathematical formula}J|Σ=I|Σ;
      </list-item>
      <list-item label="(b)">
       there exists a model{a mathematical formula}Jof{a mathematical formula}LhsΣ(T)such that{a mathematical formula}J|Σ=I|Σ.
      </list-item>
     </list>
     <paragraph label="Proof">
      We prove “(b) ⇒ (a)”. Let {a mathematical formula}J be a model of {a mathematical formula}LhsΣ(T) such that {a mathematical formula}J|Σ=I|Σ. Let {a mathematical formula}Σ′=sig(T)∖sig(LhsΣ(T)). Obtain an interpretation {a mathematical formula}J′ from {a mathematical formula}J by setting {a mathematical formula}ΔJ′=ΔJ and
     </paragraph>
     <list>
      <list-item label="•">
       {a mathematical formula}XJ′=XJ for all {a mathematical formula}X∈(NC∪NR)∖Σ′;
      </list-item>
      <list-item label="•">
       {a mathematical formula}rJ′=∅, for all r role names {a mathematical formula}r∈Σ′;
      </list-item>
      <list-item label="•">
       for concept names {a mathematical formula}A∈Σ′ the definition of {a mathematical formula}AJ′ is by induction on the definitorial depth of A: set {a mathematical formula}AJ′=∅, for all {a mathematical formula}A∈Σ′ with {a mathematical formula}dT(A)=0. Assume {a mathematical formula}BJ′ has been defined for all B with {a mathematical formula}dT(B)=n. Let {a mathematical formula}A∈Σ′ with {a mathematical formula}dT(A)=n+1. If {a mathematical formula}A∉Def(T), set {a mathematical formula}AJ′=∅; otherwise there is a unique concept definition {a mathematical formula}A≡C∈T such that {a mathematical formula}BJ′ is defined for all {a mathematical formula}B∈sig(C). Set {a mathematical formula}AJ′=CJ′.
      </list-item>
     </list>
    </section>
    <section label="Appendix D">
     Proofs for Section 7
     <paragraph label="Proof">
      The following lemma is a straightforward generalisation of a claim from the proof of Theorem 69 in [14]. Let{a mathematical formula}Tbe an acyclic{a mathematical formula}ALCI-TBox, Σ a signature, and{a mathematical formula}M⊆Tsuch that{a mathematical formula}T∖Mdoes not contain any direct{a mathematical formula}(Σ∪sig(M))-dependency and{a mathematical formula}T∖M≡(Σ∪sig(M))∅. Suppose{a mathematical formula}Σ′is such that{a mathematical formula}Σ⊆Σ′⊆(Σ∪sig(M))and let{a mathematical formula}W⊆Tbe a minimal set such that either{a mathematical formula}Wcontains a direct{a mathematical formula}Σ′-dependency or{a mathematical formula}W≢Σ′∅. Then{a mathematical formula}W⊆M.Suppose the lemma does not hold, i.e., {a mathematical formula}W⊈M. Let {a mathematical formula}X=M∩W. Then {a mathematical formula}X does not contain direct {a mathematical formula}Σ′-dependencies and {a mathematical formula}X≡Σ′∅ (for otherwise {a mathematical formula}X is a proper subset of {a mathematical formula}W such that either {a mathematical formula}X contains a direct {a mathematical formula}Σ′-dependency or {a mathematical formula}X≢Σ′∅, contrary to the minimality of {a mathematical formula}W). Notice that {a mathematical formula}(T∖M)∪X is an acyclic TBox.First we prove that {a mathematical formula}W does not have any direct {a mathematical formula}Σ′-dependency. We show this by demonstrating that {a mathematical formula}(T∖M)∪X⊇W does not have any direct {a mathematical formula}Σ′-dependency. If that is not the case, let {a mathematical formula}{A,B}⊆Σ′ be such that {a mathematical formula}A≺(T∖M)∪X+B. Let {a mathematical formula}A=Y1,…,Yn=B be such that {a mathematical formula}Yi⋈Ci∈(T∖M)∪X, for some {a mathematical formula}Ci, and {a mathematical formula}Yi+1 occurs in {a mathematical formula}Ci, for all {a mathematical formula}1⩽i&lt;n. Clearly, as {a mathematical formula}(T∖M)∪X is an acyclic TBox, every such {a mathematical formula}Yi⋈Ci either occurs in {a mathematical formula}T∖M or in {a mathematical formula}X. As {a mathematical formula}A⊀(T∖M)+B and {a mathematical formula}A⊀X+B, either there exists {a mathematical formula}X∈sig(X) such that {a mathematical formula}A≺T∖M+X or there exists {a mathematical formula}Y∈sig(X) such that {a mathematical formula}Y≺T∖M+B or there exists {a mathematical formula}{X,Y}⊆sig(X) such that {a mathematical formula}X≺T∖M+Y. In either case, as {a mathematical formula}(Σ′∪sig(X))⊆(Σ∪sig(M)), {a mathematical formula}T∖M contains a direct {a mathematical formula}(Σ∪sig(M))-dependency contradicting the assumptions of the lemma.Now we show that {a mathematical formula}W≡Σ′∅, which together with the fact that {a mathematical formula}W does not contain any direct {a mathematical formula}Σ′-dependency, contradicts the assumptions of the lemma. As {a mathematical formula}T∖M≡(Σ∪sig(M))∅, by Theorem 5 (robustness under replacement) we obtain {a mathematical formula}(T∖M)∪X≡(Σ∪sig(M))X. Using {a mathematical formula}Σ′⊆(Σ∪sig(M)) and the monotonicity property of inseparability we conclude from {a mathematical formula}X≡Σ′∅ that {a mathematical formula}(T∖M)∪X≡Σ′∅. As {a mathematical formula}∅⊆W⊆(T∖M)∪X, we obtain {a mathematical formula}W≡Σ′∅, as required.  □
     </paragraph>
     <paragraph label="Theorem 36">
      For the convenience of the reader, we explicitly present in Fig. 8 the modification of the algorithm given in Fig. 2 and re-state Theorem 36. Let{a mathematical formula}Tbe an acyclic{a mathematical formula}ALCI-TBox and Σ a signature. Then the algorithm given inFig. 8computes the unique minimal depleting Σ-module{a mathematical formula}Msuch that{a mathematical formula}T∖Mdoes not have any direct{a mathematical formula}(Σ∪sig(M))-dependencies.
     </paragraph>
     <paragraph label="Proof">
      By Theorem 34, we can check effectively (in fact in {a mathematical formula}Σ2p) whether {a mathematical formula}W has a {a mathematical formula}(Σ∪sig(M))-dependency or {a mathematical formula}W≡(Σ∪sig(M))∅. Thus, we indeed have an effective procedure. It partitions {a mathematical formula}T into two sets {a mathematical formula}M and {a mathematical formula}W with {a mathematical formula}W having no direct {a mathematical formula}(Σ∪sig(M))-dependency and {a mathematical formula}W≡(Σ∪sig(M))∅. So, {a mathematical formula}M is a depleting Σ-module of {a mathematical formula}T such that {a mathematical formula}T∖M does not have any direct {a mathematical formula}(Σ∪sig(M))-dependency.It remains to show that we obtain the unique minimal {a mathematical formula}M with this property. To this end, let {a mathematical formula}M0⊆T be such that {a mathematical formula}T∖M0 does not have direct any {a mathematical formula}(Σ∪sig(M0))-dependency and {a mathematical formula}T∖M0≡Σ∪sig(M0)∅. We prove by induction on the number of loop iterations that at every loop iteration the set {a mathematical formula}M is contained in {a mathematical formula}M0.Initially, {a mathematical formula}M=∅⊆M0. Now let {a mathematical formula}W and α from the while loop of the algorithm be such that {a mathematical formula}W does not have any direct {a mathematical formula}(Σ∪sig(M))-dependency and {a mathematical formula}W≡Σ∪sig(M)∅ but either {a mathematical formula}(W∪{α}) contains a direct {a mathematical formula}(Σ∪sig(M))-dependency or {a mathematical formula}(W∪{α})≢Σ∪sig(M)∅. By induction hypothesis, {a mathematical formula}sig(M)⊆sig(M0). There must exist a minimal {a mathematical formula}W′⊆(W∪{α}) such that either {a mathematical formula}W′ contains a direct {a mathematical formula}(Σ∪sig(M))-dependency or {a mathematical formula}W′≢Σ∪sig(M)∅. It should be clear that {a mathematical formula}α∈W′. But then we can apply Lemma D.1 (with {a mathematical formula}Σ′=Σ∪sig(M), {a mathematical formula}M=M0, and {a mathematical formula}W′=W) and conclude {a mathematical formula}W′⊆M0. Hence {a mathematical formula}α∈M0, as required.  □
     </paragraph>
    </section>
    <section label="Appendix E">
     Proofs for Section 8
     <paragraph>
      In this section, we first show Proposition 38 and then develop an algorithm that extracts depleting modules from acyclic {a mathematical formula}ELI-TBoxes with role inclusions.
     </paragraph>
     <paragraph>
      We first define locality-based module extraction specialised to acyclic {a mathematical formula}ELI-TBoxes without concept definitions. Let Σ be a signature. A primitive concept inclusion {a mathematical formula}A⊑C is called
     </paragraph>
     <list>
      <list-item label="•">
       non-⊥-local w.r.t. Σ if {a mathematical formula}A∈Σ;
      </list-item>
      <list-item label="•">
       non-⊤-local w.r.t. Σ if {a mathematical formula}sig(C)∩Σ≠∅.
      </list-item>
     </list>
     <paragraph>
      Let {a mathematical formula}M⊆T, where {a mathematical formula}T contains no concept definitions. For {a mathematical formula}x∈{⊤,⊥}, {a mathematical formula}M is the x-module of{a mathematical formula}Tw.r.t. Σ if it is the output of the algorithm from Fig. 9. Consider the sequence {a mathematical formula}M0⊇M1⊇M2⊇⋯ where {a mathematical formula}M0=T and {a mathematical formula}M2i+1 is the ⊥-module of {a mathematical formula}M2i w.r.t. Σ for all {a mathematical formula}i⩾0 and {a mathematical formula}M2i+2 is the ⊤-module of {a mathematical formula}M2i+1 w.r.t. Σ for all {a mathematical formula}i⩾0. Then {a mathematical formula}M is the STAR-module of{a mathematical formula}Tw.r.t. Σ if {a mathematical formula}M=Mi for the minimal {a mathematical formula}i&gt;0 such that {a mathematical formula}Mi+1=Mi. It is straightforward to check that in the case of acyclic {a mathematical formula}ELI-TBoxes containing no concept definitions the definition of STAR-module given here coincides with the definition given in [17].
     </paragraph>
     <paragraph label="Lemma E.1">
      ⊥-Modules can be characterised in terms of syntactic dependencies. The following lemma can be proved by induction on the number of rule application in the computation of {a mathematical formula}M by the ⊥-module extraction algorithm in Fig. 9. Let{a mathematical formula}Tbe an acyclic{a mathematical formula}ELI-TBox containing no concept definitions and Σ a signature. Let{a mathematical formula}Mbe the ⊥-module of{a mathematical formula}Tw.r.t. Σ. Then{a mathematical formula}A⊑C∈Mif, and only if,{a mathematical formula}A∈Σor there exists a concept name{a mathematical formula}B∈Σsuch that{a mathematical formula}A∈dependT(B).
     </paragraph>
     <paragraph>
      We also note the following properties of minimal depleting Σ-modules.
     </paragraph>
     <paragraph label="Lemma E.2">
      Let{a mathematical formula}Tbe an acyclic{a mathematical formula}ELI-TBox containing no concept definitions and Σ a signature. Let{a mathematical formula}Mbe the minimal depleting Σ-module of{a mathematical formula}T.
     </paragraph>
     <list>
      <list-item label="1.">
       Let{a mathematical formula}{A0⊑C0,…,An⊑Cn}⊆Tsuch that{a mathematical formula}A0∈Σ,{a mathematical formula}sig(Cn)∩Σ≠∅, and{a mathematical formula}Ai+1∈sig(Ci)for all{a mathematical formula}i&lt;n. Then{a mathematical formula}Ai⊑Ci∈M, for all{a mathematical formula}i⩽n.
      </list-item>
      <list-item label="2.">
       The minimal depleting{a mathematical formula}(Σ∪sig(M))-module of{a mathematical formula}Tcoincides with{a mathematical formula}M.
      </list-item>
     </list>
     <paragraph>
      We are in the position to prove Proposition 38.
     </paragraph>
     <paragraph label="Proof">
      Let{a mathematical formula}Tbe an acyclic{a mathematical formula}ELI-TBox containing no concept definitions. Then the STAR-module of{a mathematical formula}Tw.r.t. Σ coincides with the minimal depleting Σ-module of{a mathematical formula}T, for every signature Σ.Let {a mathematical formula}Mmin be the minimal depleting Σ-module of {a mathematical formula}T and let {a mathematical formula}M⁎ be the STAR-module of {a mathematical formula}T w.r.t. Σ. We have {a mathematical formula}Mmin⊆M⁎ since STAR-modules are depleting modules.To prove the inclusion {a mathematical formula}M⁎⊆Mmin, note that the ⊤-module of {a mathematical formula}M⁎ w.r.t. Σ (as well as ⊥-module of {a mathematical formula}M⁎ w.r.t. Σ) coincide with {a mathematical formula}M⁎ itself. Thus, the ⊤-module extraction algorithm in Fig. 9 applied to {a mathematical formula}M⁎ and Σ outputs {a mathematical formula}M⁎ itself. Let {a mathematical formula}∅=M0⁎⊊M1⁎⊊⋯⊊Mn⁎=M⁎, for some {a mathematical formula}n⩾0, be the steps in the computation of the ⊤-module of {a mathematical formula}M⁎ by the ⊤-module extraction algorithm in Fig. 9; that is, {a mathematical formula}Mi+1⁎, for {a mathematical formula}0⩽i&lt;n, is obtained from {a mathematical formula}Mi⁎ by adding one primitive concept inclusion {a mathematical formula}Ai+1⊑Ci+1∈M⁎∖Mi⁎ such that {a mathematical formula}Ai+1⊑Ci+1 is non-⊤-local w.r.t. {a mathematical formula}(Σ∪sig(Mi⁎)). We prove the following claim by induction on i for every {a mathematical formula}i&lt;n,{a mathematical formula}For {a mathematical formula}i=0 note that {a mathematical formula}M0⁎=∅. Hence {a mathematical formula}A1⊑C1 is non-⊤-local w.r.t. Σ, that is, {a mathematical formula}sig(C1)∩Σ≠∅. As {a mathematical formula}M⁎ itself is the ⊥-module of {a mathematical formula}M⁎ w.r.t. Σ, by Lemma E.1, either {a mathematical formula}A1∈Σ or there exists {a mathematical formula}B∈Σ∩NC such that {a mathematical formula}A1∈dependM⁎(B). As {a mathematical formula}M⁎⊆T we have {a mathematical formula}A1∈Σ or {a mathematical formula}A1∈dependT(B). By Lemma E.2(1) we obtain {a mathematical formula}A1⊑C1∈Mmin.For the induction step, assume that (⁎) is proved for all {a mathematical formula}i&lt;j, for some {a mathematical formula}j&lt;n. Then {a mathematical formula}Mj⁎⊆Mmin. Similar to the argument above, either {a mathematical formula}Aj+1∈Σ or there exists {a mathematical formula}B∈Σ∩NC such that {a mathematical formula}Aj+1∈dependT(B). As {a mathematical formula}Aj+1⊑Cj+1 is non-⊤-local w.r.t. {a mathematical formula}(Σ∪sig(Mj⁎)), we have {a mathematical formula}sig(Cj+1)∩(Σ∪sig(Mj⁎))≠∅. But then {a mathematical formula}sig(Cj+1)∩(Σ∪sig(Mmin))≠∅ and, by Lemma E.2(1), {a mathematical formula}Aj+1⊑Cj+1 belongs to the minimal depleting {a mathematical formula}(Σ∪sig(Mmin))-module of {a mathematical formula}T. Hence, by Lemma E.2(2), {a mathematical formula}Aj+1⊑Cj+1∈Mmin, as required.  □
     </paragraph>
     <paragraph>
      We present a module extraction algorithm for acyclic {a mathematical formula}ELI-TBoxes with role inclusions. The union {a mathematical formula}C of an acyclic {a mathematical formula}ELI-TBox {a mathematical formula}T and a set {a mathematical formula}R of role inclusions of the form {a mathematical formula}r⊑s, where r is a role name and s is a role (a role name or an inverse role), is called an acyclic{a mathematical formula}ELI-constraint box (CBox). An interpretation {a mathematical formula}Isatisfies{a mathematical formula}r⊑s if {a mathematical formula}rI⊆sI, and {a mathematical formula}I satisfies {a mathematical formula}C if {a mathematical formula}I satisfies {a mathematical formula}T and every role inclusion from {a mathematical formula}C. Other semantic notions and notions relevant for modularity introduced above (signature of a role inclusion, depleting and self-contained module, etc.) are extended to role inclusions and CBoxes in the obvious way.
     </paragraph>
     <paragraph>
      In particular, for an acyclic {a mathematical formula}ELI-CBox {a mathematical formula}C=T∪R, signature Σ, and {a mathematical formula}A∈Σ,
     </paragraph>
     <list>
      <list-item label="•">
       set {a mathematical formula}dependC(A)=dependT(A)∪{r∈NR|∃r′∈dependT(A) such that {a mathematical formula}C⊨r′⊑r or C⊨r′⊑r−};
      </list-item>
      <list-item label="•">
       say that A has a direct Σ-dependency in{a mathematical formula}C if {a mathematical formula}dependC(A)∩Σ≠∅;
      </list-item>
      <list-item label="•">
       say that A has an indirect Σ-dependency in{a mathematical formula}C if there are {a mathematical formula}A1,…,An∈Lhs(T)∩Σ and {a mathematical formula}A∈Def(T)∩Σ such that {a mathematical formula}A∉{A1,…,An} and{a mathematical formula}
      </list-item>
      <list-item label="•">
       and say that {a mathematical formula}Ccontains a Boolean Σ-constraint if there is a {a mathematical formula}P⊆Lhs(T)∩Σ such that the concept{a mathematical formula} is not satisfiable in a one-point model of {a mathematical formula}C.
      </list-item>
     </list>
     <paragraph label="Lemma E.3">
      The relationship between direct and indirect Σ-dependencies and Boolean Σ-constraints established in Lemma 23 carries over to CBoxes. CBox version of Lemma 23Let{a mathematical formula}C=T∪Rbe an acyclic{a mathematical formula}ELI-CBox and Σ be a signature. If{a mathematical formula}Cdoes not contain neither a direct nor an indirect Σ-dependency, then{a mathematical formula}Cdoes not contain any Boolean Σ-constraints.
     </paragraph>
     <paragraph label="Proof">
      For every {a mathematical formula}P⊆Lhs(T)∩Σ we define a one-point interpretation {a mathematical formula}I in the same way as in the proof of Lemma 23 with the only exception that for all {a mathematical formula}r∈NR, we set{a mathematical formula} (The difference is that we consider {a mathematical formula}dependC rather than {a mathematical formula}dependT.) Exactly the same argument as in the proof of Lemma 23 shows that {a mathematical formula}I is a model of {a mathematical formula}T and the concept {a mathematical formula}CP is satisfied in {a mathematical formula}I.To show that {a mathematical formula}I is a model of {a mathematical formula}R let {a mathematical formula}r⊑s∈R and suppose that {a mathematical formula}(d,d)∈rI. Then, by definition of {a mathematical formula}I, {a mathematical formula}r∈⋃B∈PdependC(B). But then {a mathematical formula}s∈⋃B∈PdependC(B), if s is a role name, and {a mathematical formula}s−∈⋃B∈PdependC(B), if s is an inverse role. In any case, {a mathematical formula}(d,d)∈sI, as required.  □
     </paragraph>
     <paragraph label="Example E.4">
      Notice that in contrast to our results for acyclic {a mathematical formula}ELI-TBoxes the absence of direct Σ-dependencies and Boolean Σ-constraints does not imply safety of acyclic {a mathematical formula}ELI-CBoxes. Consider {a mathematical formula}C={r⊑s,A≡∃s.X} and {a mathematical formula}Σ={A,r}. Clearly {a mathematical formula}C does not contain neither a direct nor an indirect Σ-dependency. On the other hand, for a two-point interpretation {a mathematical formula}I such that {a mathematical formula}ΔI={d1,d2}, {a mathematical formula}AI={d1}, {a mathematical formula}rI=ΔI×ΔI, it is easy to see that there exists no model {a mathematical formula}J of {a mathematical formula}C such that {a mathematical formula}J|Σ=I|Σ: to satisfy the CBox, {a mathematical formula}sJ has to be {a mathematical formula}ΔI×ΔI but then one cannot have both {a mathematical formula}d1∈(∃s.X)J and {a mathematical formula}d2∉(∃s.X)J.
     </paragraph>
     <paragraph label="Proof">
      Thus, without any additional conditions on the modules the module extraction algorithm developed above for acyclic TBoxes is not sound for acyclic CBoxes. We now show that being ⊥-local for Σ-role inclusions [12] is a condition on modules that facilitates a sound extension of our module extraction algorithm. {a mathematical formula}⊥-Locality for ΣLet {a mathematical formula}R be a set of role inclusions and Σ a signature. We say that {a mathematical formula}R is ⊥-local for Σ if, and only if, there exists no {a mathematical formula}r⊑r′∈R with {a mathematical formula}r∈Σ.CBox version of Lemma 24Let{a mathematical formula}C=T∪Rbe an acyclic{a mathematical formula}ELI-CBox and Σ a signature such that{a mathematical formula}Ris ⊥-local for Σ. If{a mathematical formula}Ccontains no direct Σ-dependency and no Boolean Σ-constraints then{a mathematical formula}C≡Σ∅.Let {a mathematical formula}I be an arbitrary interpretation. For each {a mathematical formula}d∈ΔI, let{a mathematical formula} Since {a mathematical formula}C does not contain any Boolean Σ-constraints, for each {a mathematical formula}d∈ΔI there is a one-point model {a mathematical formula}Id of {a mathematical formula}C that satisfies {a mathematical formula}CPd. Let {a mathematical formula}J be defined as in the proof of Lemma 24. Then {a mathematical formula}I|Σ=J|Σ and {a mathematical formula}J is a model of {a mathematical formula}T. Recall that for all {a mathematical formula}r∈NR{a mathematical formula} To prove that {a mathematical formula}J is a model of {a mathematical formula}R let {a mathematical formula}r⊑s∈R. As {a mathematical formula}R is ⊥-local for Σ, {a mathematical formula}r∉Σ. But then {a mathematical formula}rJ=⋃d∈ΔIrId. As every {a mathematical formula}Id is a model of {a mathematical formula}C, we have {a mathematical formula}J⊨r⊑s, as required.  □
     </paragraph>
     <paragraph label="Proof">
      We obtain the main result of this section. Soundness of module extraction algorithmFor any acyclic{a mathematical formula}ELI-CBox{a mathematical formula}Cand signature Σ the output of the algorithm inFig. 10is a depleting Σ-module of{a mathematical formula}C.Let {a mathematical formula}M be the output of the algorithm in Fig. 10. Then {a mathematical formula}C∖M does not contain neither a direct nor an indirect {a mathematical formula}(Σ∪sig(M))-dependency and the role inclusions of {a mathematical formula}C∖M are ⊥-local for {a mathematical formula}(Σ∪sig(M)). By Lemma E.3, Lemma E.6, {a mathematical formula}M is a depleting Σ-module of {a mathematical formula}T.  □
     </paragraph>
     <paragraph>
      Notice that if {a mathematical formula}C does not contain any role inclusions, the output of the algorithm in Fig. 10 coincides with the output of the algorithm in Fig. 3.
     </paragraph>
    </section>
   </appendices>
  </root>
 </body>
</html>