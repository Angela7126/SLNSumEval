<?xml version="1.0" encoding="utf-8"?>
<html>
 <body>
  <root>
   <title>
    On updates of hybrid knowledge bases composed of ontologies and rules.
   </title>
   <content>
    <section label="1">
     <section-title>
      Introduction
     </section-title>
     <paragraph>
      Recent standardisation efforts gave rise to widely accepted knowledge representation languages such as the Web Ontology Language (OWL){sup:1} and Rule Interchange Format (RIF),{sup:2} based on Description Logics [11] and Logic Programming [22], [42], [61], [74], respectively. This has fostered a large number of ontologies and rule bases with different levels of complexity and scale. Whereas description-logic based ontologies provide the logical underpinning of intelligent access and information integration, rules are widely used to represent business policies, regulations and declarative guidelines about information.
     </paragraph>
     <paragraph>
      Since both ontologies and rules offer important features for knowledge representation, considerable effort has been invested in identifying a unified hybrid knowledge framework where expressivity of both formalisms could be seamlessly combined. Over the years, work on hybrid knowledge bases has matured significantly and fundamental semantic as well as computational problems have been successfully addressed (see [25], [52] for an overview). MKNF Knowledge Bases [77] form one of the most mature proposals. MKNF knowledge bases provide a tight integration of the two paradigms, allowing predicates to be defined concurrently in the ontology and using rules, while at the same time being faithful to the semantics both of their ontology component and their rules component. Further, they have thoroughly examined decidability and complexity properties including a tractable variant of the formalism based on the well-founded semantics [41], [59].
     </paragraph>
     <paragraph>
      While such formalisms make it possible to seamlessly combine rules and ontologies in a single unified framework, they do not take into account the dynamic character of application areas where they are to be used. More particularly, the essential support for keeping a hybrid knowledge base up to date, by incorporating new and possibly conflicting information, is still missing. Nonetheless, this topic has been extensively addressed in the context of both Description Logics and Logic Programs, when taken separately.
     </paragraph>
     <paragraph>
      The formal underpinning of ontology updates originates in the ample area of belief change [3], more particularly in the principles and operators used to deal with change in action theories and relational databases with incomplete information [56], [57], [95], [96]. An update is generally understood as a change operation that consists in bringing a knowledge base up to date when the world described by it changes[56]. More technically, update operators are based on the idea that the models of a knowledge base correspond to possible states of the represented world. When a change in the world needs to be recorded, inertia is applied to each of these possible states, making only the smallest necessary modifications to reflect the change, arriving at a new collection of possible states that represent the world after the update. Later, these ideas, and particularly Winslett's update operator [57], [95], were applied to perform updates of Description Logic ontologies [15], [27], [28], [29], [36], [58], [73].
     </paragraph>
     <paragraph>
      When updates were tackled in the context of Logic Programming, it was only natural to consider adapting the classical update postulates and operators to deal with them. However, this led to counterintuitive results because simply applying inertia to the current stable model, or even a richer semantic characterisation, such as {a mathematical formula}SE-models [93], results in the loss of essential relationships between literals that are encoded in the rules [66], [85], [90]. Although state-of-the-art approaches to rule updates are guided by the same basic intuitions and aspirations as ontology updates, they build upon fundamentally different principles and methods.
     </paragraph>
     <paragraph>
      Many are based on the causal rejection principle[6], [7], [37], [66], [78], while others employ syntactic transformations and other methods, such as abduction [80], forgetting [98], prioritisation [97], preferences [31], or dependencies on defeasible assumptions [82]. Inertia, instead of being applied to the current state, is applied to rules. Furthermore, rather than operating on the models of a logic program, rule update semantics refer to its syntactic structure: the individual rules and, in many cases, also the literals in heads and bodies of these rules. These properties render them seemingly irreconcilable with ontology updates where state inertia and syntax-independence are central.
     </paragraph>
     <paragraph>
      In order to define generic hybrid update operators i.e., update operators that can deal with arbitrary hybrid knowledge bases, these apparently irreconcilable approaches to dealing with knowledge updates must first be integrated, both semantically and computationally. Despite the recent developments, which already provide a narrow bridge between ontology and rule updates [87], [88], [89], this problem is still far from having a suitable solution.
     </paragraph>
     <paragraph>
      In Section 3 we take an important first step to defining a generic hybrid update operator by following a different approach. In particular, we show how the static semantics for MKNF knowledge bases can be adapted to allow for updates of the ontology component of a hybrid knowledge base while the rule component remains static. This encompasses practical applications of hybrid knowledge bases where the ontology contains highly dynamic information and rules represent business policies, preferences or behaviour that does not change or can be maintained manually, and can be overridden by ontology updates when necessary. For illustrative purposes, consider the following simple scenario:
     </paragraph>
     <paragraph label="Example 1">
      While these axioms and rules remain pretty much the same throughout the lifetime of the knowledge base, information about particular products and users is highly dynamic and can be handled by updating the part of the ABox of the ontology.
     </paragraph>
     <paragraph>
      The resulting framework allows for a seamless two-way interaction between Logic Programming rules and Description Logic axioms and is significantly more expressive than other approaches to ontology updates with a firm formal underpinning but without support for rules [15], [27], [28], [29], [36], [58], [73].
     </paragraph>
     <paragraph>
      However, its applicability is limited since in many cases all parts of a knowledge base are subject to change. As an example, consider the following scenario where both an ontology and rules are needed to assess the risk of imported cargo.
     </paragraph>
     <paragraph label="Example 2">
      MKNF knowledge base for cargo importsThe customs service for any developed country assesses imported cargo for a variety of risk factors including terrorism, narcotics, food and consumer safety, pest infestation, tariff violations, and intellectual property rights.{sup:3} Assessing this risk, even at a preliminary level, involves extensive knowledge about commodities, business entities, trade patterns, government policies and trade agreements. Some of this knowledge may be external to a given customs agency: for instance the broad classification of commodities according to the international Harmonized Tariff System (HTS), or international trade agreements. Other knowledge may be internal to a customs agency, such as lists of suspected violators or of importers who have a history of good compliance with regulations. While some of this knowledge is relatively stable, much of it changes rapidly. Changes are made not only at a specific level, such as knowledge about the expected arrival date of a shipment; but at a more general level as well. For instance, while the broad HTS code for tomatoes (0702) does not change, the full classification and tariffs for cherry tomatoes for import into the US changes seasonally.Fig. 1 shows a knowledge base, {a mathematical formula}K which represents a simplified fragment of this domain. {a mathematical formula}K consists of both an ontology component {a mathematical formula}O and a program component {a mathematical formula}P which together define attributes of a shipment such as the country of its origination, the commodity it contains, its importer and producer. In particular, the ontology contains a geographic classification (e.g., the predicate {a mathematical formula}EUCountry), along with information about producers who are located in various countries ({a mathematical formula}RegisteredProducer). It also contains a classification of commodities based on their harmonised tariff information ({a mathematical formula}HTSChapter, {a mathematical formula}HTSHeading, and {a mathematical formula}HTSCode cf. http://www.usitc.gov/tata/hts). Tariff information is also present, based on the classification of commodities ({a mathematical formula}TariffCharge). Finally, the ontology contains (partial) information about three shipments: {a mathematical formula}s1, {a mathematical formula}s2 and {a mathematical formula}s3. There is also a set of rules indicating information about importers (e.g., {a mathematical formula}SuspectedBadGuy), and about whether to inspect a shipment either to check for compliance of tariff information or for food safety issues ({a mathematical formula}PartialInspection and {a mathematical formula}FullInspection).
     </paragraph>
     <paragraph>
      In order to address scenarios such as the one described above, we define a hybrid update semantics that is parameterised by a first-order update operator and a rule update semantics. It can deal with an interesting class of hybrid knowledge bases in which the interaction between the ontology and rules is limited, but where both the ontology and rules can be updated. One way to look at this semantics is as a modular combination of a first-order update operator with a rule update semantics.
     </paragraph>
     <paragraph>
      The main ideas for identifying this class of hybrid knowledge bases come from the splitting theorems for Logic Programs [71]. We extract the essence of this work as Abstract Splitting Properties to characterise modular combinations of hybrid knowledge bases as well as of update sequences of ontologies, programs and hybrid knowledge bases. Subsequently we show that for many semantics, such as MKNF models of MKNF knowledge bases, both the models assigned by Winslett's update operator to a sequence of ontologies, and the dynamic stable models assigned to a sequence of programs by a number of rule update semantics.
     </paragraph>
     <paragraph>
      Ultimately, these results enable us to define an update semantics for those hybrid knowledge bases that can be split into a sequence of ontology and rule layers that share information. Each ontology layer is updated using a first-order update operator, each rule layer is updated using a rule update semantics, and the partial results are combined to obtain an overall model.
     </paragraph>
     <paragraph>
      The main contributions of this paper are thus as follows:
     </paragraph>
     <list>
      <list-item label="•">
       We define a semantics for performing ontology updates in the presence of static rules, parametrised by an ontology update operator.
      </list-item>
      <list-item label="•">
       We reformulate the splitting properties of [71] in an abstract manner, so they can be easily formulated for any semantic framework. We also show that prominent static hybrid semantics, ontology update operators and rule update semantics all satisfy these properties.
      </list-item>
      <list-item label="•">
       We tackle updates of hybrid knowledge bases that can be split into a sequence of ontology and rule layers, and propose a semantics for it, parameterised by an ontology update operator and a rule update semantics.
      </list-item>
      <list-item label="•">
       We examine the fundamental formal properties of both proposed hybrid update semantics, showing that they are faithful to the static MKNF semantics as well as to the update semantics by which they are parameterised, and that they are fully compatible with one another.
      </list-item>
      <list-item label="•">
       We show how the semantics can be applied to properly deal with non-trivial updates in the scenarios from Example 1, Example 2.
      </list-item>
     </list>
     <paragraph>
      The remainder of this paper is structured as follows: We present the necessary theoretical background in Section 2 while in Section 3 we define the semantics for ontology updates in the presence of static rules, examine its properties and illustrate its use in the context of Example 1. In Section 4 we formulate the Abstract Splitting Properties and show that a variety of semantics satisfy them. Based on these results, in Section 5 we define another hybrid update semantics that modularly combines a given first-order update operator and a rule update semantics, analyse its formal properties and show how it can deal with non-trivial updates of the hybrid knowledge base in Example 2. Finally, we discuss our results and conclude in Section 7. The proofs of all formal results are presented in Appendix A Proofs: background, Appendix B Proofs: dynamic MKNF knowledge bases with static rules, Appendix C Proofs: semantics with splitting properties, Appendix D Proofs: layered dynamic MKNF knowledge bases.
     </paragraph>
    </section>
    <section label="2">
     <section-title>
      Background
     </section-title>
     <section label="2.1">
      <section-title>
       First-order logic and description logics
      </section-title>
      <paragraph>
       We first briefly summarise aspects of first-order logic that are relevant to the theoretical results that follow, along with special assumptions that are made throughout the paper. We assume a first-order language, {a mathematical formula}L that will form the basis for representing both ontological and rule-based knowledge. {a mathematical formula}L is function-free apart from constant functions so that first-order atomic predicates, formulas, and sentences, defined inductively over disjoint sets of constant symbols{a mathematical formula}C, predicate symbols{a mathematical formula}P, along with a countably infinite set of variable symbols. A first-order formula is ground if it contains no variables. The set of all first-order sentences is denoted by Φ. A first-order theory is a set of first-order sentences.
      </paragraph>
      <paragraph>
       An interpretation is a set of atoms. Throughout the paper we adopt the Standard Name Assumption about interpretations from [77].
      </paragraph>
      <paragraph label="Definition 3">
       A first-order interpretation I over {a mathematical formula}L employs the Standard Name Assumption if
      </paragraph>
      <list>
       <list-item label="•">
        Condition 1: The universe {a mathematical formula}LU of I contains all constant symbols in {a mathematical formula}C along with a countably infinite number of additional constants called parameters, {a mathematical formula}CParam.
       </list-item>
       <list-item label="•">
        Condition 2: {a mathematical formula}cI=c for each {a mathematical formula}c∈C.
       </list-item>
       <list-item label="•">
        Condition 3: The predicate ≈ is interpreted in I as a congruence relation – that is, it is reflexive, symmetric, transitive, and it allows the replacement of equals by equals.
       </list-item>
      </list>
      <paragraph>
       Using condition 3 of Definition 3 allows us to introduce the relation ≡ in ontologies by treating it as a congruence relation rather than as true equality (i.e., syntactic identity). However condition 2 also implies that any interpretation that satisfies the Standard Names Assumption is a Herbrand interpretation for {a mathematical formula}L. As will be discussed below, this assumption will support the logic programming semantics that will be used for rules. At the same time, Proposition 3.2 of [77] shows that any first-order formula is satisfiable if and only if it is satisfiable in a model that employs the Standard Name Assumption.
      </paragraph>
      <paragraph>
       We denote the set of all SNA interpretations that are models of a first-order theory {a mathematical formula}T by {a mathematical formula}〚T〛 and we write {a mathematical formula}I⊨T whenever I belongs to {a mathematical formula}〚T〛. Given two first-order theories {a mathematical formula}T, {a mathematical formula}S, we say that {a mathematical formula}Tentails{a mathematical formula}S, denoted by {a mathematical formula}T⊨S, if {a mathematical formula}〚T〛⊆〚S〛, and that {a mathematical formula}Tis equivalent to{a mathematical formula}S, denoted by {a mathematical formula}T≡S, if {a mathematical formula}〚T〛=〚S〛. The models, entailment and equivalence are specialised to first-order sentences by treating every sentence ϕ as the theory {a mathematical formula}{ϕ}.
      </paragraph>
      <section label="2.1.1">
       <section-title>
        Description logics
       </section-title>
       <paragraph>
        Description Logics (DLs) are specialised logics for which the standard reasoning tasks, such as satisfiability and entailment, are usually decidable; in this paper attention is restricted to DLs that are in fact fragments of first-order logic. We assume a basic familiarity with DLs (cf. e.g., [11]), although we review certain aspects of DLs here. DL formulas usually are written in a variable-free syntax, which we use in this paper (e.g., in the ontology portion, {a mathematical formula}O of Fig. 1). A DL is used to describe an ontology, i.e. to specify a shared conceptualisation of a domain of interest: thus (for our purposes) an ontology corresponds to a theory formulated in a fragment of first-order logic.
       </paragraph>
       <paragraph>
        As a specific instance, we briefly review the syntax and direct semantics of the DL {a mathematical formula}ALCIO, an extension of the DL {a mathematical formula}ALC (Attributive concept Language with Complements) with inverse roles ({a mathematical formula}I) and nominals ({a mathematical formula}O) that is used in examples throughout this work.
       </paragraph>
       <paragraph label="Definition 4">
        We start with a set of atomic concept and role names.The set of {a mathematical formula}ALCIOrole expressions is the smallest set containing all atomic role names, and the expression {a mathematical formula}R− for all role expressions R.The set of {a mathematical formula}ALCIOconcept expressions is the smallest set containing ⊤, ⊥, all atomic concept names and the expressions ¬C, {a mathematical formula}C⊓D, {a mathematical formula}C⊔D, {a mathematical formula}∀R.C, {a mathematical formula}∃R.C and {a mathematical formula}{a} for all concept expressions C, D, all role expressions R and every individual name {a mathematical formula}a∈C.An {a mathematical formula}ALCIOTBox is a finite set of axioms of the forms {a mathematical formula}C⊑D and {a mathematical formula}C≡D where C, D are concept expressions.An {a mathematical formula}ALCIOABox is a finite set of axioms (sometimes called assertions) of the forms {a mathematical formula}C(a), {a mathematical formula}R(a,b), {a mathematical formula}¬R(a,b), {a mathematical formula}a≈b where C is a concept expression, R is a role name and a, b are individual names.An {a mathematical formula}ALCIOontology is the union of an {a mathematical formula}ALCIO TBox and of an {a mathematical formula}ALCIO ABox.
       </paragraph>
       <paragraph>
        A direct semantics for {a mathematical formula}ALCIO can be defined as in Table 1, which describes an interpretation that satisfies the Standard Names Assumption Definition 3, for role and concept expressions. Note that by part 2 of Definition 3, the interpretation of a nominal expression {a mathematical formula}{a} is simply the singleton set containing a. Table 2 then shows the direct satisfiability of {a mathematical formula}ALCIO axioms and ontologies. The relation (role name) ≈ is simply a congruence relation as in Definition 3, with {a mathematical formula}a≉b shorthand for {a mathematical formula}¬(a≈b).
       </paragraph>
       <paragraph>
        Alternatively, a DL axiom of {a mathematical formula}ALCIO can be translated to a first-order sentence, which is captured at an abstract level by the following definition.
       </paragraph>
       <paragraph label="Definition 5">
        DL semantics by translationLet ϕ be a DL axiom. By {a mathematical formula}κ(ϕ) we denote a first-order sentence that semantically characterises ϕ.For a DL ontology {a mathematical formula}O, {a mathematical formula}κ(O)={κ(ϕ)|ϕ∈O}. Given two ontologies {a mathematical formula}O, {a mathematical formula}O′, we say that {a mathematical formula}Oentails{a mathematical formula}O′, denoted by {a mathematical formula}O⊨O′, if {a mathematical formula}κ(O)⊨κ(O′), and that {a mathematical formula}Ois equivalent to{a mathematical formula}O′, denoted by {a mathematical formula}O≡O′, if {a mathematical formula}κ(O)≡κ(O′). Given an ontology {a mathematical formula}O and a first-order sentence ϕ, we say that {a mathematical formula}Oentails ϕ, denoted by {a mathematical formula}O⊨ϕ, if {a mathematical formula}κ(O)⊨ϕ.
       </paragraph>
       <paragraph>
        We note that while some DLs, such as {a mathematical formula}ALC, are simply fragments of first-order logic, which are usually written in a variable-free syntax, others, including {a mathematical formula}ALCIO, can also be translated to first-order logic in a straightforward manner. Thus for most DLs, the κ translation function is quite simple, and the difference between {a mathematical formula}κ(O) and {a mathematical formula}O is largely a technical distinction. This is illustrated in the following example.
       </paragraph>
       <paragraph label="Example 6">
        Consider the translation of DL axioms from Example 2 into sentences in first-order logic. The axiom{a mathematical formula} can be translated to{a mathematical formula} while{a mathematical formula} can be translated to{a mathematical formula} Note that variables are not required in the DL syntax because a DL class expression corresponds to a logical formula with a very strict scoping of quantifiers. In fact, a {a mathematical formula}ALCIO DL axiom corresponds to a logical sentence that can be expressed in nor more than 2 variables, and theories that contain only sentences are known to be decidable [81].
       </paragraph>
       <paragraph>
        Unless stated otherwise, we do not constrain ourselves to {a mathematical formula}ALCIO or to any other particular DL for representing ontologies. Our main assumption is that the semantics of the DL is given by a translation into first-order logic.
       </paragraph>
      </section>
     </section>
     <section label="2.2">
      <section-title>
       Logic programming
      </section-title>
      <paragraph>
       Similarly to Description Logics, Logic Programming has its roots in classical first-order logic. However, logic programs diverge from first-order semantics by adopting the Closed World Assumption and allowing for non-monotonic inferences. In what follows, we introduce the syntax of extended generalised logic programs and define the stable model semantics[42], [43] for such programs.
      </paragraph>
      <paragraph>
       Syntactically, logic programs are built from atoms formed over the language {a mathematical formula}L (Section 2.1). An objective literal is an atom p or its (strong) negation ¬p. We denote the set of all objective literals by Lits and the set of ground objective literals by {a mathematical formula}LitsG. A default literal is an objective literal preceded by ∼ denoting default negation. A literal is either an objective literal or a default literal. Given a set of literals S, we introduce the following notation: {a mathematical formula}S+={l∈Lits|l∈S}, {a mathematical formula}S−={l∈Lits|∼l∈S}, {a mathematical formula}∼S={∼L|L∈S}. As a convention, double default negation is absorbed, so {a mathematical formula}∼∼l denotes the objective literal l.
      </paragraph>
      <paragraph>
       A rule is a pair {a mathematical formula}π=(Hπ,Bπ) where {a mathematical formula}Hπ is a literal,{sup:4} referred to as head of π, and {a mathematical formula}Bπ is a finite set of literals, referred to as body of π. Given a rule {a mathematical formula}π=(Hπ,Bπ) with {a mathematical formula}Hπ=l and {a mathematical formula}Bπ={p1,…,pm,∼pm+1,…,∼pn}, for convenience, we often write π as {a mathematical formula}(Hπ←Bπ+,∼Bπ−.) or as {a mathematical formula}l←p1,…,pm,∼pm+1,…,∼pn. A rule is called ground if it does not contain variables; positive if it does not contain any default literal; a fact if its body is empty. The grounding of a rule π is the set of rules {a mathematical formula}ground(π) obtained by replacing in π all variables with constant symbols from {a mathematical formula}C in all possible ways. A program is a set of rules. A program is ground if all its rules are ground; positive if all its rules are positive. The grounding of a program {a mathematical formula}P is defined as {a mathematical formula}ground(P)=⋃π∈Pground(π).
      </paragraph>
      <paragraph>
       An LP interpretation is a subset of {a mathematical formula}LitsG that does not contain both p and ¬p for any ground atom p. Note that LP interpretations are (possibly partial) Herbrand interpretation so that any SNA interpretation (Definition 3) is an LP-interpretation. The following conditions define when a LP interpretation J satisfies various constructs of {a mathematical formula}L. For a given ground objective literal l, ground default literal {a mathematical formula}∼l, set of ground literals S, ground rule π, and ground program {a mathematical formula}P:{a mathematical formula} We also say that J is a model of{a mathematical formula}P if {a mathematical formula}J⊨P and that {a mathematical formula}P is consistent if it has a model. Also, J is a stable model of{a mathematical formula}P if J is a subset-minimal model of the reduct of{a mathematical formula}Prelative to J:{a mathematical formula} The stable models of a non-ground program{a mathematical formula}P are the stable models of {a mathematical formula}ground(P). The set of all stable models of a program {a mathematical formula}P is denoted by {a mathematical formula}〚P〛SM.{sup:5}
      </paragraph>
     </section>
     <section label="2.3">
      <section-title>
       Logic of minimal knowledge and negation as failure
      </section-title>
      <paragraph>
       The logic of Minimal Knowledge and Negation as Failure (MKNF) [69] was introduced with the goal of unifying several existing approaches to nonmonotonic reasoning, such as default logic, autoepistemic logic, and logic programming. It was latter adopted as the basis for MKNF Knowledge Bases [77], used to join DL knowledge bases and logic programs in a seamless way. In this section we will briefly review MKNF, and leave MKNF Knowledge Bases to be reviewed in the next section.
      </paragraph>
      <paragraph>
       MKNF is an extension of first-order logic with two modal operators: K and {a mathematical formula}not. MKNF sentences and theories are defined by extending function-free first-order syntax by these modal operators in a natural way. In this paper, we assume that the language used for an MKNF theory is based on the language {a mathematical formula}L of Section 2.1.
      </paragraph>
      <paragraph label="Example 7">
       The theory {a mathematical formula}Tprop, consisting of the set with the following sentences, is an example of an MKNF theory:{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}
      </paragraph>
      <paragraph>
       The semantics of MKNF theories is determined by special Kripke structures as follows.
      </paragraph>
      <paragraph label="Definition 8">
       MKNF satisfiabilityLet {a mathematical formula}T be an MKNF theory, ϕ be an MKNF formula, and p an atom. An MKNF structure is a triple {a mathematical formula}(I,M,N) where {a mathematical formula}I∈IL and {a mathematical formula}M,N⊆IL.{sup:6} Let {a mathematical formula}ϕ[a/x] denote the formula obtained from ϕ by replacing every unbound occurrence of variable x with the constant symbol a. Satisfiability of {a mathematical formula}T in {a mathematical formula}(I,M,N) is defined as follows.{a mathematical formula}
      </paragraph>
      <paragraph>
       The symbols ⊤, ⊥, ∨, ∀ and ⊃ are interpreted in the usual manner. Intuitively, I is used to interpret the first-order parts of an MKNF theory while {a mathematical formula}M and {a mathematical formula}N can be thought of as sets of possible worlds over which the K and {a mathematical formula}not modalities are respectively evaluated. Note that as the size of {a mathematical formula}M or {a mathematical formula}N increases, the number of true formulas decreases for K and increases for {a mathematical formula}not.
      </paragraph>
      <paragraph label="Definition 9">
       MKNF modelFor any {a mathematical formula}M⊆IL and any MKNF theory {a mathematical formula}T, we write {a mathematical formula}M⊨T if {a mathematical formula}(I,M,M)⊨T for all {a mathematical formula}I∈M. An MKNF interpretation is a non-empty subset of {a mathematical formula}IL. We denote the set of all MKNF interpretations together with the empty set by {a mathematical formula}M, i.e. {a mathematical formula}M=2IL. Given an MKNF theory {a mathematical formula}T, an MKNF interpretation {a mathematical formula}M is an MKNF model of{a mathematical formula}T if {a mathematical formula}M⊨T, and, for every MKNF interpretation {a mathematical formula}M′⊋M, there is some {a mathematical formula}I′∈M′ such that {a mathematical formula}(I′,M′,M)⊭T.
      </paragraph>
      <paragraph label="Example 10">
       In order to provide a sense of how MKNF satisfiability and entailment function, we examine the validity of various formulas in this logic. In the following, ϕ is a first-order formula and {a mathematical formula}M⊆IL such that {a mathematical formula}M is non-empty.
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}M⊨ϕ≡Kϕ, as is evident directly from Definition 8, Definition 9.{sup:7}
       </list-item>
       <list-item label="•">
        {a mathematical formula}M⊨notϕ⊃Knotϕ. Suppose {a mathematical formula}M⊨notϕ. This means that for every {a mathematical formula}I∈M, {a mathematical formula}(I,M,M)⊨notϕ, which by Definition 8 implies that {a mathematical formula}M⊨Knotϕ.
       </list-item>
       <list-item label="•">
        {a mathematical formula}M⊨¬ϕ⊃notϕ. Let {a mathematical formula}M⊨¬ϕ. Then by Definition 8, for some {a mathematical formula}I∈M, {a mathematical formula}(I,M,M)⊭ϕ, which means that {a mathematical formula}M⊨notϕ. Note that the converse does not hold. If {a mathematical formula}M⊨notϕ, then there is some {a mathematical formula}I∈M such that {a mathematical formula}(I,M,M)⊭ϕ: however for {a mathematical formula}J∈M, such that {a mathematical formula}J≠I, it is not necessarily the case that {a mathematical formula}(J,M,M)⊨¬ϕ, which must be the case, as {a mathematical formula}¬ϕ≡K¬ϕ.
       </list-item>
       <list-item label="•">
        {a mathematical formula}M⊨ϕ⊃notnotϕ. Since {a mathematical formula}ϕ⊃Kϕ, then for any {a mathematical formula}I∈M, ϕ holds. Accordingly, for some {a mathematical formula}J∈M, {a mathematical formula}(J,M,M)⊭notϕ, so {a mathematical formula}M⊨notnotϕ. Note that the converse does not hold. Let {a mathematical formula}M be such that for {a mathematical formula}I1∈M, {a mathematical formula}(I1,M,M)⊨ϕ, but for all other {a mathematical formula}I∈ϕ, {a mathematical formula}(I,M,M)⊭ϕ. Then {a mathematical formula}M⊨notnotϕ, but {a mathematical formula}M⊭ϕ.
       </list-item>
      </list>
      <paragraph label="Example 11">
       Considering the MKNF theory of Example 7, {a mathematical formula}Tprop, its MKNF models {a mathematical formula}M are subsets of {a mathematical formula}〚p1⊃p2〛=〚¬p1〛∪〚p2〛. Additionally, they must also be subsets of either {a mathematical formula}〚p5〛 or {a mathematical formula}〚p6〛. Due to the maximality of MKNF models that is implicit in their definition, {a mathematical formula}Tprop has exactly two MKNF models:{a mathematical formula}
      </paragraph>
      <paragraph>
       As illustrated in the preceding example, the use of the K and {a mathematical formula}not modalities in MKNF allows classical models to be combined with non-monotonic features typically present in logic programming. The example itself suggests a relationship between MKNF sentences of the form{a mathematical formula} and logic programming rules of the form:{a mathematical formula} where the K operator captures the minimality of positive inference in logic programming, while the {a mathematical formula}not operator captures default negation.
      </paragraph>
      <paragraph>
       Additionally, it turns out that MKNF supports a number of general extensions of logic programming rules beyond the form described in Section 2.2 – for instance those whose heads contain existential variables. The relationships between MKNF, Description Logics and Logic Programming will be made clear when we introduce MKNF Knowledge Bases in the next subsection.
      </paragraph>
     </section>
     <section label="2.4">
      <section-title>
       MKNF knowledge bases
      </section-title>
      <paragraph>
       MKNF knowledge bases [77] consist of two components – an ontology {a mathematical formula}O and an MKNF program {a mathematical formula}P, both formed over the language {a mathematical formula}L of Section 2.1. Their semantics is given by translation to an MKNF theory as shown below.
      </paragraph>
      <paragraph>
       The programs used in MKNF knowledge bases generalise the logic programs of Section 2.2 in the following manner. A generalised atom is a first-order formula. A generalised atom is ground if it is a sentence – if the variables it contains are explicitly bound by a quantifier. A generalised atom base{a mathematical formula}B is a set of generalised atoms such that {a mathematical formula}ξ∈B implies {a mathematical formula}ξG∈B whenever {a mathematical formula}ξG is obtained from ξ by replacing all its free variables with constants from {a mathematical formula}C. Note that, if p is an atomic formula, it is also a generalised atom. However, p has no quantified variables, so for atomic formulas, this new definition of grounding specialises to the definition used in Section 2.2. Other logic programming related notions are naturally extended for generalised atoms. A generalised default literal is a generalised atom preceded by the symbol for default negation, ∼. A generalised literal is either a generalised atom or a generalised default literal. A K-atom is a generalised atom preceded by the K modal operator. Given a set of generalised literals S, we introduce the following notation:{a mathematical formula}
      </paragraph>
      <paragraph>
       An MKNF rule is a pair {a mathematical formula}π=(Hπ,Bπ) where {a mathematical formula}Hπ is a generalised literal, referred to as head of π, and {a mathematical formula}Bπ is a finite set of generalised literals, referred to as body of π. As before, given an MKNF rule {a mathematical formula}π=(Hπ,Bπ) with {a mathematical formula}Hπ={ξ} and {a mathematical formula}Bπ={ξ1,…,ξm,∼ξm+1,…,∼ξn}, for convenience, we often write π as {a mathematical formula}(Hπ←Bπ+,∼Bπ−.) or as {a mathematical formula}ξ←ξ1,…,ξm,∼ξm+1,…,∼ξn. An MKNF rule is called ground if it contains only ground generalised literals; positive if it does not contain any generalised default literal; a fact if its body is empty. An MKNF program is a set of MKNF rules. An MKNF knowledge base is a pair {a mathematical formula}(O,P) where {a mathematical formula}O is an ontology and {a mathematical formula}P is an MKNF program.{sup:8} The set of K-atoms occurring in the head of some rule in {a mathematical formula}P is denoted as {a mathematical formula}HA(P).
      </paragraph>
      <paragraph>
       The grounding of an MKNF rule π is the set of MKNF rules {a mathematical formula}ground(π) obtained by replacing all free (non-quantified) variables in π with constant symbols from {a mathematical formula}C in all possible ways. An MKNF program is ground if all its rules are ground; positive if all its rules are positive. The grounding of an MKNF program {a mathematical formula}P is defined as {a mathematical formula}ground(P)=⋃π∈Pground(π). An MKNF knowledge base is ground if {a mathematical formula}P is ground; positive if {a mathematical formula}P is positive. The grounding of an MKNF knowledge base {a mathematical formula}K is defined as {a mathematical formula}ground(K)=(O,ground(P)).
      </paragraph>
      <paragraph>
       The semantics of MKNF knowledge bases is determined by translation to an MKNF theory. To this end we extend the function κ (introduced in Definition 5 to translate an ontology to a first-order theory) to translate any MKNF knowledge base {a mathematical formula}K to an MKNF theory {a mathematical formula}κ(K).
      </paragraph>
      <paragraph label="Definition 12">
       Let ξ be a generalised atom, S as set of generalised literals, π a rule with a vector {a mathematical formula}x→ of free variables, {a mathematical formula}P an MKNF program, {a mathematical formula}O and ontology, and {a mathematical formula}K=(O,P) an MKNF knowledge base.{a mathematical formula} For any such syntactic unit Δ we write {a mathematical formula}M⊨Δ whenever {a mathematical formula}M⊨κ(Δ). Given an MKNF knowledge base {a mathematical formula}K, we say that an MKNF interpretation {a mathematical formula}M is an MKNF model of{a mathematical formula}K if it is an MKNF model of {a mathematical formula}κ(K).
      </paragraph>
      <paragraph label="Example 13">
       Consider the MKNF knowledge base {a mathematical formula}K=(O,P) where{a mathematical formula} Then, {a mathematical formula}κ(K) is the MKNF theory (discussed in Example 7, Example 11):{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula} whose MKNF models are{a mathematical formula}
      </paragraph>
      <paragraph>
       Definition 9, Definition 12 imply that an MKNF model {a mathematical formula}M of an MKNF knowledge base is an SNA interpretation over {a mathematical formula}L. However, {a mathematical formula}M also can be represented as a set of generalised atoms. To explain this, let {a mathematical formula}M be an MKNF interpretation, S a set of ground K atoms, and define the subset of S induced by {a mathematical formula}M as the set {a mathematical formula}{Kξ∈S|M⊨ξ}. Additionally, let J be a subset of {a mathematical formula}HA(ground(P)), and define the objective knowledge of J with respect to{a mathematical formula}ground(K),{a mathematical formula}OBO,J, as being a first-order theory defined as:{a mathematical formula}
      </paragraph>
      <paragraph label="Theorem 14">
       (See[77].) Let{a mathematical formula}Mbe a model of a ground MKNF knowledge base,{a mathematical formula}ground(K), and let J be the subset of{a mathematical formula}HA(ground(P))that is induced by{a mathematical formula}M. Then,{a mathematical formula}Mis equal to set of first order interpretations{a mathematical formula}M′={I|I⊨OBO,J}.
      </paragraph>
      <paragraph>
       Thus, for the purposes of modelling MKNF knowledge bases, a subset of MKNF structures (Definition 8) are taken to be MKNF models when they fulfil the conditions of Definition 9. Such an MKNF model can be represented as a subset of {a mathematical formula}IL. However, due to Theorem 14, it can be represented even more simply as a subset of {a mathematical formula}HA(ground(P)) which, if {a mathematical formula}P is a logic program with no generalised atoms, is simply an LP-interpretation. Although the results in this paper are based directly on MKNF models, the fact that such models can be represented by sets of head atoms is a critical feature to the practical usefulness of MKNF knowledge bases.
      </paragraph>
      <paragraph>
       We are now ready to review some of the desirable properties of MKNF knowledge bases.
      </paragraph>
      <paragraph label="Proposition 15">
       Basic properties of MKNF knowledge bases(See[77].)(Faithfulness to DLs)Let{a mathematical formula}Obe an ontology and ϕ a first-order sentence. Then{a mathematical formula}O⊨ϕif and only if for every MKNF model{a mathematical formula}Mof the MKNF knowledge base{a mathematical formula}(O,∅)it holds that{a mathematical formula}M⊨ϕ.{sup:9}(Faithfulness to Stable Models)Let{a mathematical formula}Pbe a logic program and{a mathematical formula}Kthe MKNF knowledge base{a mathematical formula}(∅,P). If J is a stable model of{a mathematical formula}P, then the MKNF interpretation corresponding to J is an MKNF model of{a mathematical formula}K. If{a mathematical formula}Mis an MKNF model of{a mathematical formula}K, then the LP interpretation corresponding to{a mathematical formula}Mis a stable model of{a mathematical formula}P.(Grounding)The MKNF models of an MKNF knowledge base{a mathematical formula}Kcoincide with the MKNF models of its grounding{a mathematical formula}ground(K).(Elimination of Default Negation in the Head)Let{a mathematical formula}Kbe an MKNF knowledge base and{a mathematical formula}K′the MKNF knowledge base obtained from{a mathematical formula}Kby replacing every rule with default negation in the head{a mathematical formula}where ⊥ is a generalised atom representing a contradiction. The MKNF models of{a mathematical formula}Kcoincide with the MKNF models of{a mathematical formula}K′.
      </paragraph>
      <section label="2.4.1">
       <section-title>
        Decidability of queries to MKNF knowledge bases
       </section-title>
       <paragraph>
        Given that an MKNF knowledge base, {a mathematical formula}K=(O,P), combines first-order logic with recursive rules, entailment of a ground atom from {a mathematical formula}K is not necessarily decidable even if entailment is decidable from {a mathematical formula}O and {a mathematical formula}P taken separately. In addition, as the model of {a mathematical formula}K is based on sets of interpretations, the question arises of how efficiently such a model can be computed, even in cases when {a mathematical formula}K is decidable.
       </paragraph>
       <paragraph>
        These questions were addressed in [77], and we informally summarise the results here, as motivation for the work in the following sections. At an informal level, the approach to computing the model of {a mathematical formula}K follows that of computing the stable model of a logic program {a mathematical formula}P alone. To compute a stand-alone stable model, {a mathematical formula}P is grounded, an LP-interpretation J is guessed, and J is checked to determine whether it is a subset-minimal model of the reduct of {a mathematical formula}P relative to J (cf. Section 2.2). To extend this approach to an MKNF knowledge base {a mathematical formula}K, {a mathematical formula}ground(K) is first constructed using the constants in {a mathematical formula}C, and a set {a mathematical formula}J⊆HA(ground(P)) is guessed.{sup:10} Then using Theorem 14, it is checked whether J corresponds to an MKNF model by determining whether {a mathematical formula}OBO,J entails all atoms in J, does not entail head atoms in {a mathematical formula}HA(ground(P))∖J, and that J is a subset-minimal model. It was shown in [77] that the models of {a mathematical formula}K coincide with those where {a mathematical formula}K is grounded in the above manner.
       </paragraph>
       <paragraph>
        Clearly, computing the model of {a mathematical formula}P will be decidable if {a mathematical formula}HA(ground(P)) is finite, and if {a mathematical formula}OBO,J is decidable for all {a mathematical formula}J⊆HA(ground(P)). When {a mathematical formula}HA(ground(P)) is finite, the latter condition will hold if the underlying DL of {a mathematical formula}O is decidable, and if {a mathematical formula}HA(ground(P)) contains only Abox assertions or sentences that correspond to axioms in the underlying description logic of {a mathematical formula}O. The condition of DL-safety is sufficient to guarantee that {a mathematical formula}HA(ground(P)) is finite, and is informally explained as follows (see Theorem 6.2 of [77] for technical details). A non-DL atom is an atom whose predicate symbol only occurs in {a mathematical formula}P. (The predicate ≈, however is always considered a DL-atom.) A rule π is DL-safe if each variable in π occurs in a positive non-DL atom in the body of π; a program is DL-safe if all of its rules are. Clearly DL-safety, which is defined using the finite set of predicate symbols in an MKNF knowledge base, is a decidable condition for finiteness of {a mathematical formula}P; and when entailment by {a mathematical formula}O is also decidable, DL-safety is a sufficient condition for entailment by {a mathematical formula}K itself.
       </paragraph>
       <paragraph>
        To efficiently implement MKNF reasoners, both the reasoners for {a mathematical formula}O and {a mathematical formula}P must be able to call one another at a fine-grained level. We know of no MKNF reasoners that support the full stable model semantics for {a mathematical formula}P. However, in the important special case where {a mathematical formula}P is a stratified program, MKNF reasoners have been implemented based on tabled resolution for MKNF [8].{sup:11} These include a stand-alone reasoner where the underlying DL of {a mathematical formula}O is based on {a mathematical formula}ALCQ[44], and the NoHR plug-in for the Protégé ontology editor where the underlying DL of {a mathematical formula}O is based on either {a mathematical formula}EL[53] or DL-Lite[23].
       </paragraph>
      </section>
     </section>
     <section label="2.5">
      <section-title>
       Ontology updates
      </section-title>
      <paragraph>
       An update is typically described as an operation that brings a knowledge base up to date when the world described by it changes[56], [57], [96]. From a generic perspective, update operators were studied within the context of propositional logic. We present the relevant concepts in the next subsection and subsequently discuss their first-order generalisations that are used to perform updates of DL ontologies [15], [27], [28], [29], [36], [58], [73].
      </paragraph>
      <section>
       <section>
        <section-title>
         Belief update postulates and operators
        </section-title>
        <paragraph>
         Propositional update operators are formalised as functions that take two propositional formulas, representing the original knowledge base and its update, as arguments, and return a formula representing the updated knowledge base. Any such operator ⋄ is inductively generalised to finite sequences of propositional formulas {a mathematical formula}〈ϕi〉i&lt;n as follows: {a mathematical formula}◇〈ϕ0〉=ϕ0 and {a mathematical formula}◇〈ϕi〉i&lt;n+1=(◇〈ϕi〉i&lt;n)⋄ϕn. To further specify the desired properties of update operators, the following eight postulates for a belief update operator ⋄ and formulas ϕ, ψ, μ, ν were proposed [56]:
        </paragraph>
        <list>
         <list-item>
          {a mathematical formula}ϕ⋄μ⊨μ.
         </list-item>
         <list-item>
          If {a mathematical formula}ϕ⊨μ, then {a mathematical formula}ϕ⋄μ≡ϕ.
         </list-item>
         <list-item>
          If {a mathematical formula}〚ϕ〛≠∅ and {a mathematical formula}〚μ〛≠∅, then {a mathematical formula}〚ϕ⋄μ〛≠∅.
         </list-item>
         <list-item>
          If {a mathematical formula}ϕ≡ψ and {a mathematical formula}μ≡ν, then {a mathematical formula}ϕ⋄μ≡ψ⋄ν.
         </list-item>
         <list-item>
          {a mathematical formula}(ϕ⋄μ)∧ν⊨ϕ⋄(μ∧ν).
         </list-item>
         <list-item>
          If {a mathematical formula}ϕ⋄μ⊨ν and {a mathematical formula}ϕ⋄ν⊨μ, then {a mathematical formula}ϕ⋄μ≡ϕ⋄ν.
         </list-item>
         <list-item>
          If ϕ has a single model, then {a mathematical formula}(ϕ⋄μ)∧(ϕ⋄ν)⊨ϕ⋄(μ∨ν).
         </list-item>
         <list-item>
          {a mathematical formula}(ϕ∨ψ)⋄μ≡(ϕ⋄μ)∨(ψ⋄μ).
         </list-item>
        </list>
        <paragraph>
         Most of these postulates can be given a simple intuitive reading. For instance, (B1) requires that information from the update be retained in the updated belief base. This is also frequently referred to as the principle of primacy of new information[24]. Sometimes it also becomes useful to consider weakenings of these postulates, such as the following ones [51]:
        </paragraph>
        <list>
         <list-item>
          {a mathematical formula}ϕ⋄⊤≡ϕ.
         </list-item>
         <list-item>
          If {a mathematical formula}ϕ≡ψ, then {a mathematical formula}ϕ⋄μ≡ψ⋄μ.
         </list-item>
         <list-item>
          If {a mathematical formula}μ≡ν, then {a mathematical formula}ϕ⋄μ≡ϕ⋄ν.
         </list-item>
         <list-item>
          {a mathematical formula}(ϕ∨ψ)⋄μ⊨(ϕ⋄μ)∨(ψ⋄μ).
         </list-item>
         <list-item>
          If {a mathematical formula}ϕ⊨ψ, then {a mathematical formula}ϕ⋄μ⊨ψ⋄μ.
         </list-item>
        </list>
        <paragraph>
         As the reader can verify, ({a mathematical formula}B2.⊤) is an immediate consequence of (B2) while (B4.1) and (B4.2) are together equivalent to (B4). Furthermore, in the presence of (B4.1), it can be shown that (B8.1) and (B8.2) are together equivalent to (B8).
        </paragraph>
        <paragraph>
         The property expressed by (B8) is at the heart of belief updates: Alternative models of the original belief base ϕ are treated as possible real states of the modelled world. Each of these models is updated independently of the others to make it consistent with the update μ, obtaining a new set of interpretations – the models of the updated belief base. Based on this view of updates, an important representation theorem makes it possible to constructively characterise and evaluate every operator ⋄ that satisfies postulates (B1)–(B8) [56]:
        </paragraph>
        <paragraph label="Theorem 16">
         Belief update representation theorem(See[56].) A belief update operator ⋄ satisfies conditions (B1)–(B8) if and only if there exist strict preorders{a mathematical formula}&lt;Ifor each interpretation I such that{a mathematical formula}I&lt;IJfor all interpretations{a mathematical formula}J≠I, and for all formulas ϕ, μ,{a mathematical formula}
        </paragraph>
        <paragraph>
         In words, an updated formula has models {a mathematical formula}〚ϕ⋄μ〛 that are models of the update μ and that are minimal for the preorder {a mathematical formula}&lt;I for some model of the original formula ϕ.{sup:12} Katsuno and Mendelzon's results provide a framework for belief update operators, each specified on the semantic level by strict preorders assigned to each propositional interpretation. The most influential instance of this framework is the Possible Models Approach by [95], based on minimising the set of atoms whose truth value changes when an interpretation is updated. Formally, for all interpretations I, J and K, the strict preorder {a mathematical formula}&lt;WI is defined as follows: {a mathematical formula}J&lt;WIK if and only if {a mathematical formula}(J÷I)⊊(K÷I), where ÷ denotes set-theoretic symmetric difference. The operator {a mathematical formula}⋄W by Winslett, unique up to equivalence of its inputs and output, thus satisfies the following equation:{a mathematical formula} Note that it follows from Theorem 16 that {a mathematical formula}⋄W satisfies postulates (B1)–(B8).
        </paragraph>
       </section>
       <section>
        <section-title>
         First-order update postulates and operators
        </section-title>
        <paragraph>
         The preceding approach to belief update can, for the most part, be generalised from propositional theories to deal with updates of first-order theories. In this context, a first-order update operator is a binary function on the set of all first-order theories and any such operator ⋄ is inductively generalised to finite sequences of first-order theories {a mathematical formula}〈Ti〉i&lt;n as follows: {a mathematical formula}◇〈T0〉=T0 and {a mathematical formula}◇〈Ti〉i&lt;n+1=(◇〈Ti〉i&lt;n)⋄Tn. A single first-order sentence ϕ is updated by treating it as the theory {a mathematical formula}{ϕ}. Furthermore, the update postulates discussed previously, except for (B7) and (B8.1) which require disjunction of a pair of theories to be defined, can be directly generalised to the first-order case:
        </paragraph>
        <list>
         <list-item>
          {a mathematical formula}T⋄U⊨U.
         </list-item>
         <list-item>
          If {a mathematical formula}T⊨U, then {a mathematical formula}T⋄U≡T.
         </list-item>
         <list-item>
          {a mathematical formula}T⋄∅≡T.
         </list-item>
         <list-item>
          If {a mathematical formula}〚T〛≠∅ and {a mathematical formula}〚U〛≠∅, then {a mathematical formula}〚T⋄U〛≠∅.
         </list-item>
         <list-item>
          If {a mathematical formula}T≡S and {a mathematical formula}U≡V, then {a mathematical formula}T⋄U≡S⋄V.
         </list-item>
         <list-item>
          If {a mathematical formula}T≡S, then {a mathematical formula}T⋄U≡S⋄U.
         </list-item>
         <list-item>
          If {a mathematical formula}U≡V, then {a mathematical formula}T⋄U≡T⋄V.
         </list-item>
         <list-item>
          {a mathematical formula}(T⋄U)∪V⊨T⋄(U∪V).
         </list-item>
         <list-item>
          If {a mathematical formula}T⋄U⊨V and {a mathematical formula}T⋄V⊨U, then {a mathematical formula}T⋄U≡T⋄V.
         </list-item>
         <list-item>
          If {a mathematical formula}T⊨S, then {a mathematical formula}T⋄U⊨S⋄U.
         </list-item>
        </list>
        <paragraph>
         Whereas postulates are meant to encode properties that are assumed or claimed to be true, their role in this paper is distinct. We are not claiming that first-order update operators should obey all of these. They are simply taken as properties that can serve to examine different classes of first-order update operators. For instance, in Section 3 we prove results that hold for all first-order update operators that satisfy (FO8.2). Nevertheless, because they were lifted from the belief update postulates for the propositional case, we decided to call them postulates.
        </paragraph>
        <paragraph>
         Winslett's operator for first-order theories [96] is defined just as its propositional counterpart, using equation (5), the difference is only that the strict preorders {a mathematical formula}&lt;WI are defined on predicate symbols in {a mathematical formula}P (Section 2.1) and for all interpretations {a mathematical formula}I,J,K∈IL as follows. {a mathematical formula}J&lt;WIK if and only if{a mathematical formula} Winslett's operator also forms the formal basis for ontology updates [15], [27], [28], [29], [36], [58], [73]. The basic idea here is quite simple: assuming that ⋄ is some first-order update operator, an update of an ontology {a mathematical formula}O1 by an ontology {a mathematical formula}O2 is determined by the first-order theory {a mathematical formula}κ(O1)⋄κ(O2). However, it may easily happen that this theory is not expressible in the Description Logic used to encode {a mathematical formula}O1 and {a mathematical formula}O2[10]. This problem has been addressed in the literature, either by identifying Description Logics that are closed with respect to applications of Winslett's operator, by using approximation techniques to arrive at the closest ontology that is still expressible in the original Description Logic, or finding a more expressive Description Logic in which the updates can be expressed. Whereas this is a very challenging, mostly open problem, it falls outside the focus point of this paper. So, in order to be able to proceed, and focus on issues with hybrid updates, in this paper we abstract away from these as well as the related representational issues, and will assume that they have been addressed in a suitable manner.
        </paragraph>
       </section>
      </section>
     </section>
     <section label="2.6">
      <section-title>
       Rule updates
      </section-title>
      <paragraph>
       State-of-the-art rule update semantics are based on fundamentally different principles and methods when compared to their ontology update counterparts. In the following we define one of the most advanced rule update semantics, the refined dynamic stable models for sequences of logic programs [7].
      </paragraph>
      <paragraph>
       A rule update semantics provides a way to assign stable models to a pair or sequence of programs where each component of the pair or sequence represents an update of the preceding ones. Formally, a dynamic logic program (DLP) is a finite sequence of logic programs and by {a mathematical formula}all(P) we denote the multiset of all rules in the components of P. A rule update semantics {a mathematical formula}S assigns a set of{a mathematical formula}S-models, denoted by {a mathematical formula}〚P〛S, to P.
      </paragraph>
      <paragraph>
       We concentrate on semantics based on the causal rejection principle [6], [7], [13], [37], [65], [66], [78] which states that a rule is rejected if it is in a direct conflict with a more recent rule. The basic type of conflict between rules π and σ occurs when the head literal of one rule is the default or strong negation of the head literal of the other rule. Similarly as in [65], we consider the conflicts between an objective literal and its default negation as primary while conflicts between objective literals are handled by expanding the DLP accordingly. In particular, whenever the DLP P contains a rule with an objective literal l in its head, its expansion {a mathematical formula}Pe also contains a rule with the same body and the literal {a mathematical formula}∼l‾ in its head, where {a mathematical formula}l‾ denotes the literal complementary to l, i.e. {a mathematical formula}l‾=¬p if l is the atom p and {a mathematical formula}l‾=p if l is the objective literal ¬p. Formally:{a mathematical formula} The additional rules in the expanded version capture the coherence principle: when an objective literal l is derived, its complement {a mathematical formula}l‾ cannot be concurrently true and thus {a mathematical formula}∼l‾ must be true. In this way, every conflict between conflicting objective literals directly translates into a conflict between an objective literal and its default negation. This enables us to define a conflict between a pair of rules as follows: we say that rules π, σ are in conflict, denoted by {a mathematical formula}π⋈σ, if and only if {a mathematical formula}Hπ=∼Hσ.
      </paragraph>
      <paragraph>
       Based on such conflicts and on a stable model candidate, a set of rejected rules can be determined and it can be verified that the candidate is indeed stable w.r.t. the remaining rules. One of the most mature of these semantics, the refined dynamic stable models[7], or {a mathematical formula}RD-semantics, is defined using a fixed point equation. Given a DLP {a mathematical formula}P=〈Pi〉i&lt;n and an interpretation J, the multisets of rejected rules {a mathematical formula}rej(P,J) and of default assumptions {a mathematical formula}def(P,J) are defined as follows:{a mathematical formula}{a mathematical formula} The set {a mathematical formula}〚P〛RD of {a mathematical formula}RD-models of P consists of all interpretations J such that{a mathematical formula} where {a mathematical formula}J⁎=J∪∼(LitsG∖J) and {a mathematical formula}least(⋅) denotes the least model of the argument program with all literals treated as atoms.
      </paragraph>
      <paragraph label="Example 17">
       (See [66].) Consider an agent with beliefs represented by the following program {a mathematical formula}P0:{a mathematical formula}{a mathematical formula}{a mathematical formula} The only stable model of {a mathematical formula}P0 is {a mathematical formula}J′={Money,GoRestaurant}, capturing that the agent has money by rule (9), so according to rule (8) it plans to go to a restaurant. Now consider an update {a mathematical formula}P1 with the following two rules:{a mathematical formula} The intended result is that, after the update by {a mathematical formula}P1, {a mathematical formula}GoRestaurant be false because its only justification, {a mathematical formula}Money, is no longer true. Furthermore, we expect {a mathematical formula}GoHome to become true, i.e. the rule (7) should be triggered because {a mathematical formula}Money became false. With {a mathematical formula}J={Robbed,GoHome}, we have {a mathematical formula}rej(〈P0,P1〉e,J)={Money.}, and J obeys the stability condition (6). Furthermore, J is the only interpretation with these properties.
      </paragraph>
      <paragraph>
       The following more abstract example aims at illustrating, with greater detail, the concepts of rejected rules {a mathematical formula}rej(P,J), default assumptions {a mathematical formula}def(P,J), and the stability condition (6).
      </paragraph>
      <paragraph label="Example 18">
       Consider the logic programs {a mathematical formula}P0, {a mathematical formula}P1, {a mathematical formula}P2 with{a mathematical formula} Their expanded versions are {a mathematical formula}P0e, {a mathematical formula}P1e, {a mathematical formula}P2e with{a mathematical formula} The interpretation {a mathematical formula}J={q,t,u} is the only dynamic stable model of the DLP {a mathematical formula}〈P0,P1〉. To check, we first determine that {a mathematical formula}rej(〈P0e,P1e〉,J)={s.}, {a mathematical formula}def(〈P0e,P1e〉,J)=∼{p,r,¬p,¬q,¬r,¬s,¬t,¬u}, and {a mathematical formula}J⁎={q,t,u}∪∼{p,r,s,¬p,¬q,¬r,¬s,¬t,¬u}. Then, we can confirm that{a mathematical formula} with all literals treated as atoms. If we now consider the DLP consisting of the three programs, {a mathematical formula}〈P0,P1,P2〉, the interpretation {a mathematical formula}J={q,r,¬s,t} is its only dynamic stable model. The sets of rejected rules and defaults are {a mathematical formula}rej(〈P0e,P1e,P2e〉,J)={s.,∼¬s.,u←∼r.}, {a mathematical formula}def(〈P0e,P1e,P2e〉,J)=∼{p,u,¬p,¬q,¬r,¬t,¬u}, and {a mathematical formula}J⁎={q,r,¬s,t}∪∼{p,s,u,¬p,¬q,¬r,¬t,¬u}. Then, we can confirm that{a mathematical formula} again, with all literals treated as atoms.
      </paragraph>
     </section>
    </section>
    <section label="3">
     <section-title>
      Dynamic MKNF knowledge bases with static rules
     </section-title>
     <paragraph>
      Now that all necessary technical background has been covered, we are ready to start addressing the problem of updating hybrid knowledge bases. We adopt MKNF knowledge bases (cf. Section 2.4) as the foundation for representing hybrid knowledge and, as with the rule update semantics, our general goal is to assign dynamic MKNF models to sequences of MKNF knowledge bases where each component represents an update of the preceding ones.{sup:13}
     </paragraph>
     <paragraph>
      We thus introduce the following concept:
     </paragraph>
     <paragraph label="Definition 19">
      Dynamic MKNF knowledge baseA finite sequence of MKNF knowledge bases is called a dynamic MKNF knowledge base (or DMKB for short).
     </paragraph>
     <paragraph>
      In this section we address a restricted version of this general problem by constraining ourselves to updates of the ontology component of MKNF knowledge bases while the rule component remains static. In other words, we assume that rules in a hybrid knowledge base remain static or change infrequently so they can be kept up to date by manual editing. Though this restricts the applicability of the resulting update semantics, it still encompasses many practical applications of hybrid knowledge bases, particularly those where the ontology contains highly dynamic information and rules represent default preferences or behaviour that can be overridden by ontology updates when necessary. Even under this assumption, knowledge bases allow for reasoning with assumptions and for exceptions to be naturally expressed, yet still support a seamless two-way interaction between the ontology and rules.
     </paragraph>
     <paragraph>
      From a more technical viewpoint, the proposed hybrid update semantics is obtained by generalising an immediate consequence operator that characterises MKNF models of MKNF knowledge bases. This operator is augmented with a first-order update operator that deals with ontology updates and is then used to define dynamic MKNF models of DMKBs with static rules. The semantics is thus parameterised by a first-order update operator; we particularly consider Winslett's operator as one way to instantiate the semantics and show how it can handle updates of the hybrid knowledge base presented in Example 1.
     </paragraph>
     <paragraph>
      As discussed in Section 2.1, we assume a language {a mathematical formula}L, and, without loss of generality, restrict our attention to SNA interpretations over {a mathematical formula}L (Definition 3). In addition, two important assumptions are made for the development of this section.
     </paragraph>
     <list>
      <list-item label="•">
       As in most existing work on rule updates, we assume that all MKNF rules are ground: in our case, this is done with respect to {a mathematical formula}C, the set of constants in {a mathematical formula}L, as discussed in Section 2.4.
      </list-item>
      <list-item label="•">
       We consider rules without default negation in their heads: as shown in Proposition 15, this restriction does not remove any expressivity. However, we do allow rules to contain generalised atoms as introduced in Section 2.4.
      </list-item>
     </list>
     <paragraph>
      In the remainder of this section, we start by defining the consequence operator for characterising MKNF models of MKNF knowledge bases (Section 3.1), then proceed by imbuing it with the ability to perform ontology updates and using it to define an update semantics for DMKBs with static rules (Section 3.2), for those update operators that satisfy the update postulate (FO8.2). Finally, we establish the basic formal properties of this hybrid update semantics (Section 3.3). The relevant proofs can be found in Appendix B.{sup:14}
     </paragraph>
     <section label="3.1">
      <section-title>
       A static consequence operator and its fixed points
      </section-title>
      <paragraph>
       To define our consequence operator and its fixed points, we first consider MKNF knowledge bases with positive programs, and then extend our approach to programs with default negation.
      </paragraph>
      <section label="3.1.1">
       <section-title>
        Positive programs
       </section-title>
       <paragraph>
        The consequence operator for MKNF knowledge bases is an extension to the usual two-valued immediate consequence operator from Logic Programming (cf. e.g., [74]): given a positive MKNF program (i.e., Section 2.4), the operator returns the heads of all MKNF rules whose bodies are satisfied by the argument interpretation. This idea can be generalised to deal with positive MKNF knowledge bases (i.e., MKNF knowledge bases whose underlying programs are positive) by conjoining the heads of rules whose bodies are satisfied together with the translation of the ontology, and returning the set of models of the resulting first-order theory. Formally:
       </paragraph>
       <paragraph label="Definition 20">
        Consequence operatorsLet {a mathematical formula}K=(O,P) be a positive MKNF knowledge base. The immediate consequence operators{a mathematical formula}TPand{a mathematical formula}TK are defined for all {a mathematical formula}M∈M as follows{sup:15}:{a mathematical formula}{a mathematical formula}
       </paragraph>
       <paragraph>
        An analogous consequence operator on sets of modal atoms was independently presented in [77]. Note also that there are important differences between the consequence operator of Definition 20 and the usual consequence operator in Logic Programming. As the set of K-atoms inferred from a positive MKNF knowledge base is anti-monotonic with respect to elements of {a mathematical formula}M, the {a mathematical formula}TP operator, which maps an MKNF interpretation {a mathematical formula}M to the K atoms that can be inferred under the MKNF semantics, will be anti-monotonic. The {a mathematical formula}TK operator on the other hand, maps an MKNF interpretation {a mathematical formula}M to the greatest MKNF interpretation that satisfies {a mathematical formula}TP(M)∪κ(O) and so is monotonic. Implicit in the use of {a mathematical formula}TK, is the representation from Definition 9 of an MKNF interpretations as a set of first-order interpretations {a mathematical formula}M⊆IL such that for an MKNF sentence ϕ, {a mathematical formula}M⊨ϕ iff {a mathematical formula}(I,M,M)⊨ϕ for all {a mathematical formula}I∈M.{sup:16} With this in mind, we view the set {a mathematical formula}M of all MKNF interpretations (including the empty set) as a complete lattice under set inclusion with the greatest element {a mathematical formula}IL.
       </paragraph>
       <paragraph label="Proposition 21">
        Monotonicity of {a mathematical formula}TKLet{a mathematical formula}Kbe a positive MKNF knowledge base. Then{a mathematical formula}TKis a monotonic function on the complete lattice{a mathematical formula}(M,⊆).
       </paragraph>
       <paragraph label="Proof">
        See Appendix B, page 72. □
       </paragraph>
       <paragraph>
        In order to make use of {a mathematical formula}TK, we construct its greatest fixed point on the lattice of MKNF interpretations, and show in Proposition 23, Proposition 26 that any MKNF model corresponds to this greatest fixed point. Note that construction of a greatest fixed point is adopted for notational ease, since larger MKNF interpretations reflect less knowledge (via the K operator) than MKNF interpretations.{sup:17} The following example illustrates how {a mathematical formula}TK is iterated, starting from the greatest element {a mathematical formula}IL, until a fixed point is reached which coincides with the MKNF model of the MKNF knowledge base.
       </paragraph>
       <paragraph label="Example 22">
        Iterating the consequence operatorsConsider the MKNF knowledge base {a mathematical formula}K=(O,P) where{sup:18}{a mathematical formula} Starting from the interpretation {a mathematical formula}M0=IL, we will iterate the operator {a mathematical formula}TK until we reach a fixed point. Since {a mathematical formula}M0 does not satisfy the body of the first two rules in {a mathematical formula}P but trivially satisfies the body of the last one, it follows that {a mathematical formula}TP(M0)={r} and the first application of {a mathematical formula}TK can determined as follows:{a mathematical formula} We can now see that {a mathematical formula}M1 satisfies the bodies of the first and third rule, yielding {a mathematical formula}TP(M1)={q,r} and thus{a mathematical formula} The interpretation {a mathematical formula}M2 is a fixed point of {a mathematical formula}TK because it satisfies the bodies of the same rules as {a mathematical formula}M1, so further applications of {a mathematical formula}TK have no effect on it. Moreover, {a mathematical formula}M2 is also the unique MKNF model of {a mathematical formula}K.
       </paragraph>
       <paragraph>
        Since {a mathematical formula}TK is monotonic (Proposition 21), by the Knaster–Tarski theorem, {a mathematical formula}TK has the greatest fixed point. This can be either the empty set, in which case {a mathematical formula}K has no MKNF model, or it coincides with the unique MKNF model of {a mathematical formula}K. In other words, {a mathematical formula}TK offers a constructive characterisation of the semantics of positive MKNF knowledge bases.
       </paragraph>
       <paragraph label="Proposition 23">
        MKNF model of a positive MKNF knowledge baseLet{a mathematical formula}Kbe a positive MKNF knowledge base. An MKNF interpretation is an MKNF model of{a mathematical formula}Kif and only if it is the greatest fixed point of{a mathematical formula}TK.
       </paragraph>
       <paragraph label="Proof">
        See Appendix B, page 73. □
       </paragraph>
      </section>
      <section label="3.1.2">
       <section-title>
        Programs with default negation
       </section-title>
       <paragraph>
        To add support for default negation in bodies of MKNF rules, we use essentially the same strategy as the one used for defining stable models [42]. Given an MKNF knowledge base {a mathematical formula}K, we first eliminate default negation by forming the reduct of {a mathematical formula}K w.r.t. a candidate model {a mathematical formula}M. This reduct consists of the original ontology and positive parts of rules whose negative bodies are satisfied in {a mathematical formula}M.
       </paragraph>
       <paragraph label="Definition 24">
        Reduct of an MKNF knowledge baseLet {a mathematical formula}K=(O,P) be an MKNF knowledge base and {a mathematical formula}M an MKNF interpretation. The reduct of{a mathematical formula}Kw.r.t.{a mathematical formula}M is the MKNF knowledge base {a mathematical formula}KM=(O,PM) where{a mathematical formula}
       </paragraph>
       <paragraph>
        The following example shows that using the reduct we can determine the semantics of an MKNF knowledge base {a mathematical formula}K: an interpretation {a mathematical formula}M is an MKNF model of {a mathematical formula}K if and only if {a mathematical formula}M is the MKNF model of the positive MKNF knowledge base {a mathematical formula}KM.
       </paragraph>
       <paragraph label="Example 25">
        Determining MKNF models using the reductLet {a mathematical formula}K′=(O,P′) be an MKNF knowledge base where {a mathematical formula}O={p∨¬q} is as in Example 22 and{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula} The reduct of {a mathematical formula}K′ w.r.t. {a mathematical formula}M2=〚{p,q,r}〛 is {a mathematical formula}(K′)M2=K=(O,P) where {a mathematical formula}P is as in Example 22. This is because {a mathematical formula}M2 does not satisfy the negative body {a mathematical formula}∼r of the last rule in {a mathematical formula}P′, so the rule is discarded, while it satisfies the negative body {a mathematical formula}∼s of the third rule, so the rule turns into the fact {a mathematical formula}(r.) in the reduct. We have already shown that {a mathematical formula}M2 is the MKNF model of {a mathematical formula}K. It is also one of the two MKNF models of {a mathematical formula}K′. The other MKNF model, {a mathematical formula}M2′=〚{p,q,s}〛, can be obtained in a similar manner, by first forming the reduct of {a mathematical formula}K′ w.r.t. {a mathematical formula}M2′ and then verifying that {a mathematical formula}M2′ is the MKNF model of the reduct.
       </paragraph>
       <paragraph>
        As the following proposition shows, this relationship holds in general.
       </paragraph>
       <paragraph label="Proposition 26">
        MKNF model of an MKNF knowledge baseLet{a mathematical formula}Kbe an MKNF knowledge base. An MKNF interpretation{a mathematical formula}Mis an MKNF model of{a mathematical formula}Kif and only if it is the MKNF model of{a mathematical formula}KM.
       </paragraph>
       <paragraph label="Proof">
        See Appendix B, page 74. □
       </paragraph>
      </section>
     </section>
     <section label="3.2">
      <section-title>
       Updating consequence operator
      </section-title>
      <paragraph>
       We have seen in the previous section that MKNF models of an MKNF knowledge base {a mathematical formula}K can be characterised in terms of reducts and the consequence operator {a mathematical formula}TK, similar to stable models of a logic program. In order to deal with updates to the ontology part of the knowledge base, we can modify the consequence operator so that the ontology gets updated accordingly whenever the operator is applied. At the same time, we constrain ourselves to dealing with are DMKBs that have static rules, as defined here:
      </paragraph>
      <paragraph label="Definition 27">
       DMKB with static rulesWe say that a DMKB {a mathematical formula}〈(Oi,Pi)〉i&lt;n has static rules if {a mathematical formula}Pi=∅ for all i such that {a mathematical formula}0&lt;i&lt;n.
      </paragraph>
      <section label="3.2.1">
       <section-title>
        Updating positive DMKBs with static rules
       </section-title>
       <paragraph>
        As a first step, assume that we are given a DMKB with static rules K and also that K is positive, i.e. all component MKNF knowledge bases of K are positive. Furthermore, suppose that we want to use the first-order update operator ⋄ to perform ontology updates. We can use ⋄ within the consequence operator to reflect the updates in K as follows:
       </paragraph>
       <paragraph label="Definition 28">
        Updating consequence operatorLet ⋄ be a first-order update operator and {a mathematical formula}K=〈(Oi,Pi)〉i&lt;n a positive DMKB with static rules. The updating immediate consequence operator{a mathematical formula}TK⋄ is defined for all {a mathematical formula}M∈M as follows:{a mathematical formula}
       </paragraph>
       <paragraph>
        The following example illustrates the workings of the introduced consequence operator when we adopt Winslett's operator to perform ontology updates.
       </paragraph>
       <paragraph label="Example 29">
        Iterating the updating consequence operatorConsider the DMKB {a mathematical formula}K=〈K0,K1〉 where {a mathematical formula}K0=(O0,P0), {a mathematical formula}K1=(O1,∅) and {a mathematical formula}O0, {a mathematical formula}P0 and {a mathematical formula}O1 are as follows:{a mathematical formula} Clearly, K has static rules. We can thus iteratively apply the updating consequence operator (parameterised by the Winslett update operator of Section 2.5), {a mathematical formula}TK⋄W, starting from the MKNF interpretation {a mathematical formula}M0=IL, until we reach a fixed point. After the first application we obtain the following:{a mathematical formula} Furthermore, {a mathematical formula}TK⋄W(M1)=M1 because {a mathematical formula}M1 triggers only the facts {a mathematical formula}(r.) and {a mathematical formula}(s.) in {a mathematical formula}P0, just as {a mathematical formula}M0 did. It is not difficult to verify that {a mathematical formula}M1 is the greatest fixed point of {a mathematical formula}TK⋄W and following the analogy with the static case, we can declare {a mathematical formula}M1 to be the dynamic MKNF model of K. Note that {a mathematical formula}M1 does not satisfy the two facts in {a mathematical formula}P0 since they were overridden by the updating ontology.
       </paragraph>
       <paragraph>
        If we can show that {a mathematical formula}TK⋄ is monotonic, then it is guaranteed to have the greatest fixed point which we can use to assign a semantics to any positive DMKB with static rules. As it turns out, {a mathematical formula}TK⋄ is monotonic if ⋄ satisfies the principle (FO8.2).
       </paragraph>
       <paragraph label="Proposition 30">
        Monotonicity of {a mathematical formula}TK⋄Let ⋄ be a first-order update operator and K a positive DMKB with static rules. If ⋄ satisfies (FO8.2), then{a mathematical formula}TK⋄is a monotonic function on the complete lattice{a mathematical formula}(M,⊆).
       </paragraph>
       <paragraph label="Proof">
        See Appendix B, page 74. □
       </paragraph>
       <paragraph>
        So assuming that ⋄ satisfies (FO8.2), we can declare the greatest fixed point of {a mathematical formula}TK⋄ as the semantics of K. The following definition establishes the notion of a ⋄-dynamic MKNF model.
       </paragraph>
       <paragraph label="Definition 31">
        Semantics for positive DMKBs with static rulesLet ⋄ be a first-order update operator that satisfies (FO8.2) and K a positive DMKB with static rules. An MKNF interpretation {a mathematical formula}M is a ⋄-dynamic MKNF model of K if it is the greatest fixed point of {a mathematical formula}TK⋄.
       </paragraph>
       <paragraph>
        Note that every positive DMKB with static rules has at most one ⋄-dynamic MKNF model. It may have no such model when the greatest fixed point of {a mathematical formula}TK⋄ is the empty set because the empty set is not an MKNF interpretation.
       </paragraph>
      </section>
      <section label="3.2.2">
       <section-title>
        Updating non-positive DMKBs with static rules
       </section-title>
       <paragraph>
        Default negation can now be treated the same way as in the static case. We first establish the notion of a reduct of a DMKB in the expected way.
       </paragraph>
       <paragraph label="Definition 32">
        Reduct of a DMKBLet {a mathematical formula}K=〈Ki〉i&lt;n be a DMKB with static rules and {a mathematical formula}M an MKNF interpretation. The reduct of K w.r.t.{a mathematical formula}M is the DMKB {a mathematical formula}KM=〈KiM〉i&lt;n.
       </paragraph>
       <paragraph>
        In the following example we illustrate how the reduct can be used to determine the semantics of a DMKB with static rules.
       </paragraph>
       <paragraph label="Example 33">
        Assigning dynamic MKNF models using the reductTake the DMKB {a mathematical formula}K′=〈K0′,K1〉 where {a mathematical formula}K0′=(O,P′). {a mathematical formula}O and {a mathematical formula}P′ are as in Example 25, namely {a mathematical formula}O={p∨¬q} and {a mathematical formula}P′ consists of the clauses {a mathematical formula}{q←r,q←s,r←∼s,s←∼r}. {a mathematical formula}K1 is as in Example 29, i.e., {a mathematical formula}K1=(O1,∅), where {a mathematical formula}O1={¬r∧¬s}.Consider the MKNF interpretation {a mathematical formula}M1=〚{p∨¬q,¬r,¬s}〛. The reduct of {a mathematical formula}K′ w.r.t. {a mathematical formula}M1 is {a mathematical formula}(K′)M1=K where K is the positive DMKB from Example 29: {a mathematical formula}{q←r,q←s,r,s}. This is because {a mathematical formula}M1 satisfies both {a mathematical formula}∼r and {a mathematical formula}∼s, so both rules with negative bodies from {a mathematical formula}P′ become facts in the reduct. Since {a mathematical formula}M1 is also the {a mathematical formula}⋄W-dynamic MKNF model of K, we declare it to be the {a mathematical formula}⋄W-dynamic MKNF model of{a mathematical formula}K′.Furthermore, note that {a mathematical formula}M1 is the only MKNF interpretation satisfying this condition. While the initial MKNF knowledge base {a mathematical formula}K′ had two MKNF models, after the update it only has one because the generating cycle in {a mathematical formula}P′ was overridden by information in {a mathematical formula}K1.
       </paragraph>
       <paragraph>
        Now we can define the dynamic MKNF models of an arbitrary DMKB with static rules K as those MKNF interpretations {a mathematical formula}M that are MKNF models of the reduct {a mathematical formula}KM.
       </paragraph>
       <paragraph label="Definition 34">
        Semantics for DMKBs with static rulesLet ⋄ be a first-order update operator that satisfies (FO8.2) and K a DMKB with static rules. An MKNF interpretation {a mathematical formula}M is a ⋄-dynamic MKNF model of K if it is a ⋄-dynamic MKNF model of {a mathematical formula}KM.
       </paragraph>
       <paragraph>
        Finally, we define a consequence relation by considering the credulous consequences of ⋄-dynamic MKNF models.
       </paragraph>
       <paragraph label="Definition 35">
        Consequence relationLet ⋄ be a first-order update operator that satisfies (FO8.2), K a DMKB with static rules and {a mathematical formula}T an MKNF theory. We say that K ⋄-MKNF entails{a mathematical formula}T, denoted by {a mathematical formula}K⊨MKNF⋄T, if {a mathematical formula}M⊨T for some ⋄-dynamic MKNF model {a mathematical formula}M of K.
       </paragraph>
       <paragraph>
        Credulous and other types of logical consequence can be obtained analogously.
       </paragraph>
       <paragraph>
        Let us now demonstrate the defined update semantics on a simple example in which we use Winslett's first-order operator {a mathematical formula}⋄W for performing ontology updates:
       </paragraph>
       <paragraph label="Example 36">
        Updating the electronic marketplace knowledge baseConsider again the simple hybrid knowledge base about an electronic marketplace presented in Example 1, formalised as the MKNF knowledge base {a mathematical formula}K0=(T,P) where{a mathematical formula}{a mathematical formula} Throughout this example, we will be keeping the terminological assertions in the TBox {a mathematical formula}T static by reasserting them in each update. We also assume that the constant symbol john is part of the language.Initially, all we can conclude from the DMKB {a mathematical formula}K0=〈K0〉 is that john does not belong to the concept {a mathematical formula}User because of the first rule in {a mathematical formula}P, and, consequently, he cannot belong to the concept {a mathematical formula}Seller because of the first axiom in {a mathematical formula}T. Formally:{a mathematical formula}Now consider an update by the ABox {a mathematical formula}A1={∃RecommendedBy.Seller(john)}, expressing that a new recommendation for john has been made by some member of the concept {a mathematical formula}Seller. In order to perform this update, we form the DMKB {a mathematical formula}K1=〈K0,K1〉 where {a mathematical formula}K1=(A1∪T,∅). We conclude the following:{a mathematical formula} In other words, we can now additionally conclude that the assertion in {a mathematical formula}A1 is true and, due to the second axiom in {a mathematical formula}T, john is now a {a mathematical formula}ProspectiveSeller.Based on this information, john is offered, and agrees, to become a {a mathematical formula}Seller at the marketplace. This update is formalised as the ABox {a mathematical formula}A2={Seller(john)}, resulting in the DMKB {a mathematical formula}K2=〈K0,K1,K2〉 where {a mathematical formula}K2=(A2∪T,∅), which allows us to conclude the following:{a mathematical formula} Note in particular that john is now both a {a mathematical formula}Seller and a {a mathematical formula}User, due to the first axiom in {a mathematical formula}T, and that he is no longer a {a mathematical formula}ProspectiveSeller because of its definition in {a mathematical formula}T and because he became a {a mathematical formula}Seller.Subsequently, john makes an inquiry to not be charged the service fee until his business becomes more established, and his request is approved. This update is represented as the ABox {a mathematical formula}A3={¬PaysServiceFee(john)}, resulting in the DMKB {a mathematical formula}K3=〈K0,K1,K2,K3〉 where {a mathematical formula}K3=(A3∪T,∅) and leading to the following consequences:{a mathematical formula} Note in particular that though the body of the second rule in {a mathematical formula}P is satisfied, its head is automatically overridden by the ontology update.Furthermore, it is later discovered that john is under eighteen years old, which is against the rules of the marketplace. His user account becomes disabled and any recommendations deleted, as expressed by the ABox {a mathematical formula}A4={¬User(john),¬∃RecommendedBy.⊤(john)}. The consequences of the DMKB {a mathematical formula}K4=〈K0,K1,K2,K3,K4〉, where {a mathematical formula}K4=(A4∪T,∅), are then as follows:{a mathematical formula}
       </paragraph>
      </section>
     </section>
     <section label="3.3">
      <section-title>
       Properties and relations
      </section-title>
      <paragraph>
       In the following we look more closely at the formal properties of the introduced update framework for DMKBs with static rules. Throughout this section we assume that ⋄ is some first-order update operator that satisfies (FO8.2).
      </paragraph>
      <paragraph>
       First we establish that our update semantics is faithful to the main ingredients it is based upon: the semantics of MKNF knowledge bases and the first-order update operator ⋄. The former property can be formulated as follows:
      </paragraph>
      <paragraph label="Theorem 37">
       Faithfulness w.r.t. MKNF knowledge basesLet{a mathematical formula}K=(O,P)be an MKNF knowledge base. An MKNF interpretation{a mathematical formula}Mis an MKNF model of{a mathematical formula}Kif and only if{a mathematical formula}Mis a ⋄-dynamic MKNF model of{a mathematical formula}〈K〉.
      </paragraph>
      <paragraph label="Proof">
       See Appendix B, page 74. □
      </paragraph>
      <paragraph>
       Note that a consequence of this result and of Proposition 15 (Section 2.4) is that the introduced update semantics is also faithful w.r.t. the ontology semantics and the stable model semantics.
      </paragraph>
      <paragraph>
       Turning to the relation with the first-order update operator ⋄, we show that if the initial program is empty, then the assigned dynamic MKNF model coincides with the semantics of updating the initial ontology with all subsequent ones in the DMKB. Formally:
      </paragraph>
      <paragraph label="Theorem 38">
       Faithfulness w.r.t. first-order update operatorLet{a mathematical formula}K=〈(Oi,∅)〉i&lt;nbe a DMKB. An MKNF interpretation{a mathematical formula}Mis a ⋄-dynamic MKNF model of K if and only if{a mathematical formula}M=〚◇〈Oi〉i&lt;n〛.
      </paragraph>
      <paragraph label="Proof">
       See Appendix B, page 75. □
      </paragraph>
      <paragraph>
       Now we consider other important properties that are typically expected of an update semantics. The first one, known as the principle of primacy of new information[24], guarantees that every dynamic MKNF model satisfies the most recent update. This can also be seen as a counterpart of the belief update postulate (FO1) and in order for the property to hold, the first-order update operator must satisfy (FO1).
      </paragraph>
      <paragraph label="Theorem 39">
       Primacy of new informationSuppose that ⋄ satisfies (FO1) and let{a mathematical formula}K=〈Ki〉i&lt;nbe a DMKB with static rules such that{a mathematical formula}n&gt;0. If{a mathematical formula}Mis a ⋄-dynamic MKNF model of K, then{a mathematical formula}M⊨κ(Kn−1).
      </paragraph>
      <paragraph label="Proof">
       See Appendix B, page 75. □
      </paragraph>
      <paragraph>
       The second property, inherited from the first-order update operator, states that updates by tautological ontologies do not influence the resulting models. This can be seen as a counterpart of the postulate ({a mathematical formula}FO2.⊤) and is satisfied if the first-order update operator satisfies ({a mathematical formula}FO2.⊤) and (FO4). Note that this desirable property is notoriously problematic when rule updates are considered, as witnessed by the many rule update semantics that violate it [6], [30], [31], [37], [65], [66], [80], [97].
      </paragraph>
      <paragraph label="Theorem 40">
       Immunity to tautological updatesSuppose that ⋄ satisfies ({a mathematical formula}FO2.⊤) and (FO4) and let{a mathematical formula}K=〈(Oi,Pi)〉i&lt;nbe a DMKB with static rules such that{a mathematical formula}Oj≡∅for some j with{a mathematical formula}0&lt;j&lt;nand{a mathematical formula}Then K and{a mathematical formula}K′have the same ⋄-dynamic MKNF models.
      </paragraph>
      <paragraph label="Proof">
       See Appendix B, page 75. □
      </paragraph>
      <paragraph>
       The final property guarantees that our update semantics does not depend on the syntax of ontologies, only on their semantics. It essentially shows that substituting an ontology for an equivalent one at any point in the DMKB does not affect the resulting dynamic MKNF models. This property can be seen as a counterpart of postulate (FO4.2) and partially also postulate (FO4.1). It holds if the first-order update operator satisfies (FO4).
      </paragraph>
      <paragraph label="Theorem 41">
       Syntax independenceSuppose that ⋄ satisfies (FO4). Let{a mathematical formula}K=〈(Oi,Pi)〉i&lt;nand{a mathematical formula}K′=〈(Oi′,Pi′)〉i&lt;nbe DMKBs with static rules such that{a mathematical formula}P0=P0′and{a mathematical formula}Oi≡Oi′for all{a mathematical formula}i&lt;n. Then K and{a mathematical formula}K′have the same ⋄-dynamic MKNF models.
      </paragraph>
      <paragraph label="Proof">
       See Appendix B, page 75. □
      </paragraph>
      <paragraph>
       Note that a similar property does not hold for the initial program {a mathematical formula}P0. For example, programs such as{a mathematical formula} have the same stable models and are even strongly equivalent [72], but an update by {a mathematical formula}O={¬q} produces different results for {a mathematical formula}P and {a mathematical formula}Q, respectively. More formally, {a mathematical formula}〈(∅,P),(O,∅)〉 has a {a mathematical formula}⋄W-dynamic MKNF model {a mathematical formula}M such that {a mathematical formula}M⊨p while {a mathematical formula}〈(∅,Q),(O,∅)〉 has a {a mathematical formula}⋄W-dynamic MKNF model {a mathematical formula}M′ such that {a mathematical formula}M′⊭p. We believe that this is in accord with intuitions regarding the two initial programs. It may be the case that for stronger notions of program equivalence that are better suited for updates, such as update equivalence proposed in [65], this property is satisfied.
      </paragraph>
      <paragraph>
       For similar reasons, it is not possible to prove properties that correspond to other belief update postulates. Consider for instance postulate (FO2). The first issue is that by relying on the defined consequence relation, we can only approximate its formulation as follows:{a mathematical formula} In other words, instead of equivalence on the right-hand side of the postulate, we only have entailment. But even this weaker principle is not satisfied. As a counterexample, consider the program{a mathematical formula} and the ontology {a mathematical formula}O′={r,s}. Though it is true that {a mathematical formula}(∅,P)⊨MKNFO′ because {a mathematical formula}(∅,P) has a single MKNF model that entails both r and s, it is not true that {a mathematical formula}〈(∅,P),(O′,∅)〉⊨MKNF⋄W(∅,P) because {a mathematical formula}〈(∅,P),(O′,∅)〉 has two {a mathematical formula}⋄W-dynamic MKNF models, one of which entails both q and s, so it does not satisfy the last rule in {a mathematical formula}P.
      </paragraph>
      <paragraph>
       In fact, this behaviour is inherited from stable models which do not satisfy the very similar property of cumulativity[34], [75]. Hence it is likely that (FO2) is not going to be satisfied by any hybrid update semantics that is faithful to the stable model semantics.
      </paragraph>
      <paragraph>
       A similar analysis can also be done for (FO3) if we identify “consistency” with existence of a (⋄-dynamic) MKNF model. Thus the corresponding property would read as follows:{a mathematical formula} It is not difficult to show that this property is not satisfied – as a counterexample, consider the program {a mathematical formula}P={p←q,∼p.} and ontology {a mathematical formula}O′={q}. Though both {a mathematical formula}(∅,P) and {a mathematical formula}(O′,∅) have MKNF models, the DMKB {a mathematical formula}〈(∅,P),(O′,∅)〉 does not have a {a mathematical formula}⋄W-dynamic MKNF model.{sup:19}
      </paragraph>
      <paragraph>
       The cases of most other belief update postulates are even more involved because they require notions such as disjunction of two MKNF knowledge bases and it is not clear how these can be defined appropriately.
      </paragraph>
     </section>
    </section>
    <section label="4">
     <section-title>
      Splitting properties
     </section-title>
     <paragraph>
      In this section we prepare the formal groundwork for introducing a hybrid update semantics to complement the semantics defined in Section 3 – instead of requiring that the rule part of a hybrid knowledge base remain static, it makes both ontology and rule updates possible at the cost of placing certain constraints on the interaction between the ontology and rules. These constraints are inspired by the ideas behind splitting theorems for Logic Programs as formulated in [71] on which we focus our attention here. Splitting properties have also been studied for various generalizations of stable models, and form the basis for several approaches to defining modules of logic programs under the stable model semantics [12], [54].
     </paragraph>
     <paragraph>
      First we formulate the splitting properties in an abstract manner, so they can be easily instantiated for any semantic framework (Section 4.1). Then we show that prominent static hybrid semantics as well as ontology and rule update semantics satisfy these properties (Section 4.2).
     </paragraph>
     <section label="4.1">
      <section-title>
       Abstract splitting properties
      </section-title>
      <paragraph>
       Splitting properties were first studied by [71] in the context of Logic Programs, generalising the notion of program stratification. Roughly speaking, the idea is to define a condition under which the stable models of a program {a mathematical formula}P can be completely determined from the stable models of its subprograms. For instance, this is certainly true if the subprograms are constructed over mutually disjoint sets of objective literals – indeed, in this case every stable model of {a mathematical formula}P is a union of stable models of its subprograms. The same holds vice versa if we check for consistency, i.e. every consistent union of stable models of the subprograms is a stable model of {a mathematical formula}P.
      </paragraph>
      <paragraph>
       The splitting properties of [71] take this idea further by allowing subprograms to share literals in a constrained, cascading manner. Assume that we aim for a split into two subprograms, one of them can “feed” information into the second one. The subprograms are then called the bottom and top of {a mathematical formula}P and the condition imposed on them is that literals shared between them must not occur in heads of rules in the top. This essentially ensures that rules in the top cannot influence inferences made in the bottom. It follows that each stable model of {a mathematical formula}P is a union of a stable model X of the bottom and of a stable model Y of the top in which all shared atoms have been pre-interpreted under X. The converse holds as well if consistency of {a mathematical formula}X∪Y is ensured. As a matter of fact, the same relationship holds if we split {a mathematical formula}P into an arbitrary sequence of layers where each layer is allowed to “feed” information into the following ones.
      </paragraph>
      <paragraph>
       Our aim in this section is to prepare the formal groundwork for defining an update semantics for DMKBs that consist of one or more ontology and rule layers that may feed information into subsequent layers. Updates of each layer, depending on whether it is an ontology or a rule layer, are handled by a first-order update operator or by a rule update semantics, respectively. The resulting models are then collected and an overall dynamic MKNF model is assembled. These ideas are materialised in Section 5 where we also show that if both the first-order update operator and rule update semantics have the Abstract Splitting Properties and satisfy two basic properties of updates, then regardless of which splitting of the DMKB we pick, we arrive at the same set of dynamic MKNF models.
      </paragraph>
      <paragraph>
       Since we rely so heavily on splitting properties, we first give their generic formulation that can be instantiated for different formalisms – not just normal logic programs under the stable model semantics [71], but also default logic, as was done in [92], and MKNF knowledge bases, first-order update operators, rule update and hybrid update semantics, as we do in Section 4.2. Some of the abstractions we use for this purpose, such as those for logical formalisms and semantics, are inspired by similar abstractions in [17].
      </paragraph>
      <paragraph>
       We consider logical formalisms and their semantics from an abstract perspective, as established by the following definition:
      </paragraph>
      <paragraph label="Definition 42">
       Logical formalism and semanticsA logical formalism is a pair {a mathematical formula}(T,S) where {a mathematical formula}T denotes a set of syntactically correct theories and {a mathematical formula}S a set of semantic structures to be assigned to such theories. A semantics{a mathematical formula}Sfor{a mathematical formula}(T,S) is given by a partial function {a mathematical formula}〚⋅〛S:T→2S that assigns sets of acceptable belief states from {a mathematical formula}S to theories from {a mathematical formula}T.
      </paragraph>
      <paragraph>
       For the rest of this section we assume that the logical formalism {a mathematical formula}(T,S) is fixed but the semantics {a mathematical formula}S is not. We also assume that there exists a binary operation ⊎ such that for all semantic structures {a mathematical formula}X,Y∈S, {a mathematical formula}X⊎Y denotes a structure that combines information from {a mathematical formula}X and {a mathematical formula}Y. Note that if {a mathematical formula}X is inconsistent with {a mathematical formula}Y, then {a mathematical formula}X⊎Y need not belong to {a mathematical formula}S. For example, if {a mathematical formula}S is the set of LP interpretations, then {a mathematical formula}I⊎J=I∪J and if {a mathematical formula}I∪J contains a pair of complementary literals, then it is itself not an LP interpretation. We also assume that ⊎ has a neutral element {a mathematical formula}0∈S, i.e. {a mathematical formula}X⊎0=0⊎X=X for all {a mathematical formula}X∈S, and that {a mathematical formula}〚∅〛S={0}. In the case of LP interpretations this neutral element is ∅.
      </paragraph>
      <paragraph>
       The splitting problem for{a mathematical formula}(T,S) is specified by
      </paragraph>
      <list>
       <list-item label="•">
        defining the splitting sets for every theory{a mathematical formula}T∈T and
       </list-item>
       <list-item label="•">
        defining, for every {a mathematical formula}T∈T, for every splitting set U for {a mathematical formula}T, and for every {a mathematical formula}X∈S: the theories {a mathematical formula}bU(T), {a mathematical formula}tU(T) and {a mathematical formula}eU(T,X).
       </list-item>
      </list>
      <paragraph>
       Intuitively, a splitting set U for a theory {a mathematical formula}T is a set of syntactic building blocks, such as literals or predicate symbols, such that {a mathematical formula}T can be split in two parts: a part that defines the semantics of elements of U and only of U, and a part that defines the semantics of the remaining elements based on the semantics of elements from U. The former is called the bottom of{a mathematical formula}Trelative to U and denoted by {a mathematical formula}bU(T). The latter is the top of{a mathematical formula}Trelative to U and is denoted by {a mathematical formula}tU(T). The set {a mathematical formula}eU(T,X) is the reduct of{a mathematical formula}Trelative to U and is obtained from the top {a mathematical formula}tU(T) by pre-interpreting elements of U in {a mathematical formula}X. The following example illustrates these notions:
      </paragraph>
      <paragraph label="Example 43">
       Splitting set, bottom, top and reduct of logic programsFor logic programs under the stable model semantics, {a mathematical formula}T is the set of all logic programs, {a mathematical formula}S is the set of all LP interpretations and every splitting set is some set of objective literals [71]. Consider the program{a mathematical formula} One splitting set for this program is {a mathematical formula}U={p} because {a mathematical formula}P can be split in two sets, {a mathematical formula}bU(P)={p.} and {a mathematical formula}tU(P)={q←p,∼r.}, such that {a mathematical formula}bU(P) only contains literals from U and {a mathematical formula}tU(P) does not contain literals from U in heads of rules.Furthermore, the reduct {a mathematical formula}eU(P,J) depends on the LP interpretation J. If {a mathematical formula}J⊨p, then {a mathematical formula}eU(P,J)={q←∼r.} while if {a mathematical formula}J⊭p, then {a mathematical formula}eU(P,J)=∅. In other words, {a mathematical formula}eU(P,J) consists of rules from {a mathematical formula}tU(P) with all literals from U pre-interpreted in J.
      </paragraph>
      <paragraph>
       In the next subsection we formally define splitting sets, bottoms and reducts for various formalisms, such as MKNF knowledge bases, finite sequences of ontologies, DLPs and DMKBs. Nevertheless, the specifics of these definitions are not required to define what it means for a semantics {a mathematical formula}S to satisfy the Abstract Splitting Set Property. Assuming that the notions of splitting set, bottom, top and reduct are known for the logical formalism {a mathematical formula}(T,S), we can define a solution w.r.t. a splitting set as follows:
      </paragraph>
      <paragraph label="Definition 44">
       Solution w.r.t. a splitting setLet {a mathematical formula}S be a semantics for {a mathematical formula}(T,S) and U a splitting set for a theory {a mathematical formula}T∈T. An {a mathematical formula}S-solution to{a mathematical formula}Tw.r.t. U is a pair of semantic structures {a mathematical formula}(X,Y) such that {a mathematical formula}X∈〚bU(T)〛S and {a mathematical formula}Y∈〚eU(T,X)〛S and {a mathematical formula}X⊎Y∈S.
      </paragraph>
      <paragraph>
       The Abstract Splitting Set Property requires that the models assigned to a theory {a mathematical formula}T correspond one to one with the solutions to {a mathematical formula}T w.r.t. some splitting set. Formally:
      </paragraph>
      <paragraph label="Definition 45">
       Abstract splitting set propertyWe say that a semantics {a mathematical formula}S for {a mathematical formula}(T,S)satisfies the Abstract Splitting Set Property if for all theories {a mathematical formula}T∈T for which {a mathematical formula}〚T〛S is defined and every splitting set U for {a mathematical formula}T,{a mathematical formula}
      </paragraph>
      <paragraph>
       If, instead of a single splitting set, we consider a sequence of such sets, we can divide a theory into a sequence of layers and formulate a generalised version of the Abstract Splitting Set Property. This part of the theory relies on transfinite sequences of sets, so we first introduce the following basic concepts:
      </paragraph>
      <paragraph label="Definition 46">
       SequenceA (transfinite) sequence is a family whose index set is an initial segment of ordinals, {a mathematical formula}{α|α&lt;μ}. The ordinal μ is the length of the sequence. A sequence of sets {a mathematical formula}〈Uα〉α&lt;μ is monotone if {a mathematical formula}Uβ⊆Uα whenever {a mathematical formula}β≤α, and continuous if, for each limit ordinal {a mathematical formula}α&lt;μ, {a mathematical formula}Uα=⋃β&lt;αUβ. A sequence {a mathematical formula}〈Ui〉i&lt;n is finite if {a mathematical formula}n&lt;ω.
      </paragraph>
      <paragraph>
       Assuming that all splitting sets are subsets of some fixed set {a mathematical formula}U, we define a splitting sequence as follows:
      </paragraph>
      <paragraph label="Definition 47">
       Splitting sequenceA splitting sequence for a theory {a mathematical formula}T∈T is a monotone, continuous sequence {a mathematical formula}〈Uα〉α&lt;μ of splitting sets for {a mathematical formula}T such that {a mathematical formula}⋃α&lt;μUα=U.
      </paragraph>
      <paragraph>
       The definition of splitting sequences allows transfinite sequences in order to allow generalizations to programs with, e.g., infinite stable models [14] as shown below. As we will see, the definition of update operators for MKNF knowledge bases will not require such transfinite sequences.
      </paragraph>
      <paragraph label="Example 48">
       The following program illustrates the use of transfinite splitting sequences. Note that this program admits a splitting sequence in which {a mathematical formula}Uα contains {a mathematical formula}exists_ill_defined_number only for a transfinite value of α.{a mathematical formula}
      </paragraph>
      <paragraph>
       In order to define a solution w.r.t. a splitting sequence, we need to collect models of layers of {a mathematical formula}T induced by the splitting sequence. The first layer of {a mathematical formula}T is the part of {a mathematical formula}T that only describes elements from {a mathematical formula}U0. Formally, this is exactly {a mathematical formula}bU0(T), so we obtain {a mathematical formula}X0 as one of its models. Proceeding inductively, for every sequence ordinal {a mathematical formula}α+1&lt;μ, the corresponding layer of {a mathematical formula}T is the part of {a mathematical formula}T that describes elements from {a mathematical formula}Uα+1, with elements from {a mathematical formula}Uα pre-interpreted in models of previous layers. Given our notation, and assuming (given its continuity) that the binary operator ⊎ can be generalised to arbitrary subsets of {a mathematical formula}S, {a mathematical formula}Xα+1 is chosen as one of the models of {a mathematical formula}eUα(bUα+1(T),⨄β≤αXβ). Limit ordinals form a marginal case – since the splitting sequence is continuous, the set {a mathematical formula}Uα∖⋃β&lt;αUβ is empty for every limit ordinal α, hence the corresponding layer of {a mathematical formula}T is empty as well and, consequently, {a mathematical formula}Xα=0. These observations lead to the following definition:
      </paragraph>
      <paragraph label="Definition 49">
       Solution w.r.t. a splitting sequenceLet {a mathematical formula}S be a semantics for {a mathematical formula}(T,S) and {a mathematical formula}U=〈Uα〉α&lt;μ a splitting sequence for a theory {a mathematical formula}T∈T. An {a mathematical formula}S-solution to{a mathematical formula}Tw.r.t. U is a sequence of semantic structures {a mathematical formula}〈Xα〉α&lt;μ such that
      </paragraph>
      <list>
       <list-item label="1.">
        {a mathematical formula}X0∈〚bU0(T)〛S.
       </list-item>
       <list-item label="2.">
        For any sequence ordinal α such that {a mathematical formula}α+1&lt;μ,{a mathematical formula}
       </list-item>
       <list-item label="3.">
        For any limit ordinal {a mathematical formula}α&lt;μ, {a mathematical formula}Xα=0.
       </list-item>
       <list-item label="4.">
        {a mathematical formula}⨄α&lt;μXα∈S.
       </list-item>
      </list>
      <paragraph>
       The Abstract Splitting Sequence Property is now a straightforward adaptation of the Abstract Splitting Set Property.
      </paragraph>
      <paragraph label="Definition 50">
       Abstract splitting sequence propertyWe say that a semantics {a mathematical formula}S for {a mathematical formula}(T,S)satisfies the Abstract Splitting Sequence Property if for all theories {a mathematical formula}T∈T for which {a mathematical formula}〚T〛S is defined and every splitting sequence {a mathematical formula}U=〈Uα〉α&lt;μ for {a mathematical formula}T,{a mathematical formula}
      </paragraph>
     </section>
     <section label="4.2">
      <section-title>
       Semantics with splitting properties
      </section-title>
      <paragraph>
       Now we take a look at instantiations of splitting properties for the cases of MKNF knowledge bases, ontology updates and rule updates. Unlike in [71], we consider sets of predicate symbols instead of sets of ground literals as our splitting sets. By doing this, the set of ground literals with the same predicate symbol is considered either completely included in a splitting set or completely excluded from it. While this makes our approach less general than if we considered each ground literal individually, it considerably simplifies the splitting of ontologies, which usually contain axioms with an implicit universal quantifier.
      </paragraph>
      <section label="4.2.1">
       <section-title>
        Splitting properties for MKNF knowledge bases
       </section-title>
       <paragraph>
        We instantiate the Abstract Splitting Properties for MKNF knowledge bases as follows:
       </paragraph>
       <list>
        <list-item label="•">
         The set of theories {a mathematical formula}T is the set of all MKNF knowledge bases over a language {a mathematical formula}L.
        </list-item>
        <list-item label="•">
         The set of semantic structures {a mathematical formula}S is the set of all MKNF interpretations.
        </list-item>
        <list-item label="•">
         ⊎ is the set intersection ∩ with the neutral element {a mathematical formula}0=IL.
        </list-item>
        <list-item label="•">
         The semantic function {a mathematical formula}〚⋅〛S returns all MKNF models of the argument MKNF knowledge base.
        </list-item>
       </list>
       <paragraph>
        In this section, we restrict SNA interpretations (Definition 3) to those that interpret ≈ as the identity relation. A splitting set for an MKNF knowledge base is defined analogously to a splitting set for a logic program, with the additional constraint that each ontology axiom must either use only predicate symbols from the splitting set, or only predicate symbols outside the splitting set.
       </paragraph>
       <paragraph>
        In the following, given any MKNF formula, MKNF theory, ontology axiom, ontology, (generalised) literal, (MKNF) rule, (MKNF) program or MKNF knowledge base Δ, we denote by {a mathematical formula}pr(Δ) the set of predicate symbols occurring in Δ.
       </paragraph>
       <paragraph label="Definition 51">
        Splitting set for an ontology, program and MKNF knowledge baseLet {a mathematical formula}K=(O,P) be an MKNF knowledge base and {a mathematical formula}U⊆P a set of predicate symbols. We say that U is a
       </paragraph>
       <list>
        <list-item label="•">
         splitting set for{a mathematical formula}O if for every axiom {a mathematical formula}ϕ∈O, if {a mathematical formula}pr(ϕ)∩U≠∅, then {a mathematical formula}pr(ϕ)⊆U;
        </list-item>
        <list-item label="•">
         splitting set for{a mathematical formula}P if for every rule {a mathematical formula}π∈P, if {a mathematical formula}pr(Hπ)∩U≠∅, then {a mathematical formula}pr(π)⊆U;
        </list-item>
        <list-item label="•">
         splitting set for{a mathematical formula}K if it is a splitting set for both {a mathematical formula}O and {a mathematical formula}P.
        </list-item>
       </list>
       <paragraph>
        The bottom of an MKNF knowledge base relative to a splitting set U contains ontology axioms and rules formed using only predicate symbols from U. The top, on the other hand, contains the remaining ontology axioms and rules. Formally:
       </paragraph>
       <paragraph label="Definition 52">
        Bottom and top of an ontology, program and MKNF knowledge baseLet {a mathematical formula}K=(O,P) be an MKNF knowledge base and {a mathematical formula}U⊆P a set of predicate symbols. We define the bottom of{a mathematical formula}Oand{a mathematical formula}Prelative to U as{a mathematical formula} The bottom of{a mathematical formula}Krelative to U is {a mathematical formula}bU(K)=(bU(O),bU(P)).The top of{a mathematical formula}O,{a mathematical formula}Pand{a mathematical formula}K is defined as {a mathematical formula}tU(O)=O∖bU(O), {a mathematical formula}tU(P)=P∖bU(P) and {a mathematical formula}tU(K)=(tU(O),tU(P)), respectively.
       </paragraph>
       <paragraph>
        Next, we need to define the reduct that makes it possible to use an MKNF model {a mathematical formula}X of the bottom of {a mathematical formula}K=(O,P) to simplify the top of {a mathematical formula}K. The top of the ontology {a mathematical formula}tU(O) cannot be reduced in this manner because it only contains predicate symbols that do not belong to U. In case of the top of the program {a mathematical formula}tU(P), we can discard rules that contain a body literal L with {a mathematical formula}pr(L)⊆U that is not satisfied in {a mathematical formula}X, and eliminate the remaining literals L with {a mathematical formula}pr(L)⊆U. This is formally captured as follows:
       </paragraph>
       <paragraph label="Definition 53">
        Reduct of a program and MKNF knowledge baseLet {a mathematical formula}K=(O,P) be an MKNF knowledge base, {a mathematical formula}U⊆P a set of predicate symbols and {a mathematical formula}X∈M. We define the reduct of{a mathematical formula}Prelative to U and{a mathematical formula}X as{a mathematical formula} The reduct of{a mathematical formula}Krelative to U and{a mathematical formula}X is {a mathematical formula}eU(K,X)=(tU(O),eU(P,X)).
       </paragraph>
       <paragraph>
        The definitions of splitting properties now follow from the generic ones defined in Section 4.1. As the following theorem shows, the semantics of MKNF knowledge bases satisfies both splitting properties:
       </paragraph>
       <paragraph label="Theorem 54">
        Splitting theorem for MKNF knowledge basesThe semantics of MKNF knowledge bases satisfies the Abstract Splitting Set Property and the Abstract Splitting Sequence Property.
       </paragraph>
       <paragraph label="Proof">
        See Appendix C, page 84. □
       </paragraph>
       <paragraph>
        An MKNF knowledge base can be split in a number of different ways. For example, ∅ and {a mathematical formula}P are splitting sets for any MKNF knowledge base and sequences such as {a mathematical formula}〈P〉, {a mathematical formula}〈∅,P〉 are splitting sequences for any MKNF knowledge base. The following example shows a more elaborate splitting sequence for the Cargo Imports knowledge base from Example 2.
       </paragraph>
       <paragraph label="Example 55">
        Splitting the cargo imports knowledge baseConsider the MKNF knowledge base {a mathematical formula}K=(O,P) presented in Fig. 1. One of the non-trivial splitting sequences for {a mathematical formula}K is {a mathematical formula}U=〈U0,U1,U2,U3〉, where{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula} This splitting sequence divides {a mathematical formula}K into the four layers shown in Fig. 2. The first layer contains all ontological knowledge regarding commodity types as well as information about shipments. The second layer contains rules for classifying importers using both internal records and information from the first layer. The third layer contains axioms with geographic classification, information about registered producers and, based on information about commodities and importers from the first two layers, it defines low risk commodities coming from the European Union. The final layer contains rules for deciding which shipments should be inspected based on information from previous layers.
       </paragraph>
      </section>
      <section label="4.2.2">
       <section-title>
        Ontology updates
       </section-title>
       <paragraph>
        As shown, MKNF Knowledge Bases have the splitting properties: in this section we show that in the case of an ontology Winslett's update operator also has the Abstract Splitting Properties. Instantiation of the generic splitting properties for a given first-order update operator ⋄ is done as follows:
       </paragraph>
       <list>
        <list-item label="•">
         The set of theories {a mathematical formula}T contains finite sequences of first-order theories.
        </list-item>
        <list-item label="•">
         The set of semantic structures {a mathematical formula}S=2IL contains all sets of first-order interpretations.
        </list-item>
        <list-item label="•">
         As before with MKNF knowledge bases, ⊎ is the set intersection ∩ with the neutral element {a mathematical formula}0=IL.
        </list-item>
        <list-item label="•">
         The semantic function {a mathematical formula}〚⋅〛S is defined by {a mathematical formula}〚T〛S={〚◇T〛}.
        </list-item>
       </list>
       <paragraph>
        The splitting set, top, bottom and reduct of a first-order theory are defined analogously to the same notions for ontologies defined in the previous section. These are then naturally generalised to deal with sequences of first-order theories. For instance, the bottom of a sequence of first-order theories is the sequence of bottoms of theories in the sequences.
       </paragraph>
       <paragraph label="Definition 56">
        Splitting set, bottom, top and reduct for first-order theoriesLet {a mathematical formula}T be a first-order theory, {a mathematical formula}T=〈Ti〉i&lt;n a finite sequence of first-order theories and {a mathematical formula}U⊆P a set of predicate symbols. We say that U is a
       </paragraph>
       <list>
        <list-item label="•">
         splitting set for{a mathematical formula}T if for every formula {a mathematical formula}ϕ∈T, if {a mathematical formula}pr(ϕ)∩U≠∅, then {a mathematical formula}pr(ϕ)⊆U;
        </list-item>
        <list-item label="•">
         splitting set for T if for every {a mathematical formula}i&lt;n, U is a splitting set for {a mathematical formula}Ti.
        </list-item>
       </list>
       <paragraph>
        Now that these definitions are established, we can directly use the Abstract Splitting Properties from Section 4.1. Furthermore, since every sequence of first-order theories has a single set of models, the resulting properties are simpler than their general form (which allows a set of sets of models). Particularly, given a sequence of first-order theories T and a splitting set U for T, the Abstract Splitting Set Property requires that{a mathematical formula} Similarly, given a splitting sequence {a mathematical formula}U=〈Uα〉α&lt;μ for T, the Abstract Splitting Sequence Property requires that{a mathematical formula} If we pick Winslett's first-order operator as ⋄, then both of these properties are satisfied.
       </paragraph>
       <paragraph label="Theorem 57">
        Splitting theorem for Winslett's first-order update operatorThe semantics for sequences of first-order theories induced by Winslett's first-order operator{a mathematical formula}⋄Wsatisfies the Abstract Splitting Set Property and Abstract Splitting Sequence Property.
       </paragraph>
       <paragraph label="Proof">
        See Appendix C, page 87. □
       </paragraph>
      </section>
      <section label="4.2.3">
       <section-title>
        Rule updates
       </section-title>
       <paragraph>
        To complete the discussion of splitting properties we turn to the special case of updating program rules and show that the {a mathematical formula}RD semantics (Section 2.6) observes the splitting properties. Given a rule update semantics {a mathematical formula}S, the splitting properties for DLPs can be derived from the generic ones as follows:
       </paragraph>
       <list>
        <list-item label="•">
         The set of theories {a mathematical formula}T contains all DLPs.
        </list-item>
        <list-item label="•">
         The set of semantic structures {a mathematical formula}S coincides with the set of all LP interpretations.
        </list-item>
        <list-item label="•">
         The operator ⊎ is the set union ∪ and its neutral element is {a mathematical formula}0=∅.
        </list-item>
        <list-item label="•">
         The semantic function {a mathematical formula}〚⋅〛S is as defined by the rule update semantics {a mathematical formula}S, i.e. it returns the set of {a mathematical formula}S-models (i.e., stable models) of the argument DLP.
        </list-item>
       </list>
       <paragraph>
        Since rule update semantics work with LP interpretations instead of MKNF interpretations, we define the program reduct w.r.t. an LP interpretation as the program reduct w.r.t. the corresponding MKNF interpretation. Note that despite the different definition, the resulting concept is in line with the same notion in [71].
       </paragraph>
       <paragraph label="Definition 58">
        Reduct of a program w.r.t. a splitting setLet {a mathematical formula}P be a program, {a mathematical formula}U⊆P a set of predicate symbols, J an LP interpretation and {a mathematical formula}M the MKNF interpretation corresponding to J. We define the reduct of{a mathematical formula}Pw.r.t. U and J as {a mathematical formula}eU(P,J)=eU(P,M).
       </paragraph>
       <paragraph>
        The splitting set, bottom, top and reduct of a DLP are now straightforward adaptations of the same notions for single programs.
       </paragraph>
       <paragraph label="Definition 59">
        Splitting set, bottom, top and reduct for a DLPLet {a mathematical formula}P=〈Pi〉i&lt;n be a DLP and U a set of predicate symbols. We say that U is a splitting set for P if for all {a mathematical formula}i&lt;n, U is a splitting set for {a mathematical formula}Pi.The bottom and top of P relative to U are defined as {a mathematical formula}bU(P)=〈bU(Pi)〉i&lt;n and {a mathematical formula}tU(P)=〈tU(Pi)〉i&lt;n, respectively. Given an LP interpretation J, the reduct of P relative to U and J is defined as {a mathematical formula}eU(P,J)=〈eU(Pi,J)〉i&lt;n.
       </paragraph>
       <paragraph>
        Given these definitions, the splitting properties for a rule update semantics {a mathematical formula}S are directly derived from the Abstract Splitting Properties of Section 4.1. Intuitively, given a DLP P and a splitting set U, the splitting set property requires that every {a mathematical formula}J∈〚P〛S be the union of some {a mathematical formula}J′∈〚bU(P)〛S and some {a mathematical formula}J″=〚eU(P,J′)〛S. The splitting sequence property generalises the same requirement to splitting sequences. The {a mathematical formula}RD-semantics for rule updates (Section 2.6), as well as many other rule update semantics that generalise the stable model semantics, e.g. [6], [37], [66], [78], naturally satisfy both splitting properties:
       </paragraph>
       <paragraph label="Theorem 60">
        Splitting theorem for rule updatesThe{a mathematical formula}RD-semantics for rule updates satisfies the Abstract Splitting Set Property and the Abstract Splitting Sequence Property.
       </paragraph>
       <paragraph label="Proof (sketch)">
        See Appendix C, page 87.  □
       </paragraph>
      </section>
     </section>
    </section>
    <section label="5">
     <section-title>
      Layered dynamic MKNF knowledge bases
     </section-title>
     <paragraph>
      We are now ready to utilise the Abstract Splitting Properties as a foundation for a hybrid update semantics. More particularly, our semantics modularly combines a given first-order update operator ⋄ together with a given rule update semantics {a mathematical formula}S and uses them to update DMKBs consisting of one or more ontology and rule layers, each feeding information into subsequent layers. Updates of each layer, depending on whether it is an ontology or a rule layer, are handled by ⋄ and {a mathematical formula}S, respectively, and the resulting models are then used to assemble an overall dynamic MKNF model.
     </paragraph>
     <paragraph>
      In the rest of this section we implicitly work under the following assumptions.
     </paragraph>
     <list>
      <list-item label="•">
       As in Section 3, we assume that all MKNF rules are ground: in our case, with respect to {a mathematical formula}C, the set of constants in {a mathematical formula}L.
      </list-item>
      <list-item label="•">
       Unlike Section 3, we now allow rules with default negation in their heads. However, we do not allow rules to contain generalised atoms, as, to our knowledge, rules with generalised atoms are not yet supported by any rule update semantics.
      </list-item>
      <list-item label="•">
       As in Section 4.2, we restrict SNA interpretations (Definition 3) to those that interpret ≈ as the identity relation.
      </list-item>
     </list>
     <paragraph>
      With these assumptions in mind, we first define the concepts underlying splitting properties to identify a class of layered DMKBs to which we assign an update semantics (Section 5.1). Nevertheless, this generic semantics depends on a particular splitting sequence and in order for it to be splitting-independent, three properties of ⋄ and {a mathematical formula}S need to be assumed: the Abstract Splitting Sequence Property and two basic properties of update operations. After defining them formally, we prove splitting-independence of the hybrid update semantics (Section 5.2). Then we turn to its other formal properties and illustrate how it can be applied to the scenario described in Example 2 (Section 5.3). The relevant proofs can be found in Appendix D.{sup:20}
     </paragraph>
     <section label="5.1">
      <section-title>
       Splitting-based updates of MKNF knowledge bases
      </section-title>
      <paragraph>
       In the following we identify a class of DMKBs for which splitting enables us to perform updates by using a given first-order update operator together with a given rule update semantics.
      </paragraph>
      <paragraph>
       Throughout the remainder of this section we assume that some first-order update operator ⋄ and some rule update semantics {a mathematical formula}S are given and fixed.
      </paragraph>
      <paragraph>
       We start by defining a basic DMKB which can be handled by ⋄ or {a mathematical formula}S alone. More specifically, we allow a basic DMKB to contain
      </paragraph>
      <list>
       <list-item label="a)">
        arbitrary ontological axioms but no rules except for positive facts (i.e. rules with an empty body and a single objective literal in the head), or
       </list-item>
       <list-item label="b)">
        arbitrary rules but no ontological axioms whatsoever.
       </list-item>
      </list>
      <paragraph>
       Formally:
      </paragraph>
      <paragraph label="Definition 61">
       Basic DMKBWe say that a hybrid knowledge base {a mathematical formula}K=(O,P) is ontology-based if {a mathematical formula}P is a consistent set of positive facts; rule-based if {a mathematical formula}O is empty; basic if it is either ontology- or rule-based.A DMKB {a mathematical formula}K=〈Ki〉i&lt;n is ontology-based if for all {a mathematical formula}i&lt;n, {a mathematical formula}Ki is ontology-based; rule-based if for all {a mathematical formula}i&lt;n, {a mathematical formula}Ki is rule-based; basic if it is either ontology- or rule-based.
      </paragraph>
      <paragraph>
       Ontology-based DMKBs can be handled by the first-order update operator ⋄ while rule-based DMKBs can be updated using the rule update semantics {a mathematical formula}S. This can be formalised as follows:
      </paragraph>
      <paragraph label="Definition 62">
       Update semantics for basic DMKBsLet {a mathematical formula}K=〈(Oi,Pi)〉i&lt;n be a basic DMKB. An MKNF interpretation {a mathematical formula}M is a {a mathematical formula}(⋄,S)-dynamic MKNF model of K if either
      </paragraph>
      <list>
       <list-item label="a)">
        K is ontology-based and {a mathematical formula}M=〚◇〈κ(Oi)∪{l|(l.)∈Pi}〉i&lt;n〛, or
       </list-item>
       <list-item label="b)">
        K is rule-based and {a mathematical formula}M corresponds to some {a mathematical formula}J∈〚〈Pi〉i&lt;n〛S.
       </list-item>
      </list>
      <paragraph>
       By allowing programs in an ontology-based DMKB to contain positive facts, we pave the way towards extending the class of basic DMKBs to a much larger class for which we define an update semantics through splitting. The central idea is that if a DMKB K can be split into multiple layers, each of which consists of a basic DMKB, then the above defined update semantics for basic DMKBs can be used to assign a semantics to K. We thus define the splitting set, bottom, top and reduct for DMKBs as follows:
      </paragraph>
      <paragraph label="Definition 63">
       Splitting set, bottom, top and reduct for a DMKBLet {a mathematical formula}K=〈Ki〉i&lt;n be a DMKB and U a set of predicate symbols. We say that U is a splitting set for K if for all {a mathematical formula}i&lt;n, U is a splitting set for {a mathematical formula}Ki.The bottom and top of K relative to U are defined as {a mathematical formula}bU(K)=〈bU(Ki)〉i&lt;n and {a mathematical formula}tU(K)=〈tU(Ki)〉i&lt;n, respectively.Given some {a mathematical formula}X∈M, the reduct of K relative to U and{a mathematical formula}X is defined as {a mathematical formula}eU(K,X)=〈eU(Ki,X)〉i&lt;n.
      </paragraph>
      <paragraph>
       With these definitions in place, we can instantiate the generic definitions from Section 4.1 and obtain the definition of a splitting sequence as well as of a solution w.r.t. a splitting set and splitting sequence. But we still need to make sure that after splitting, the obtained DMKBs are basic. In case of a single splitting set U this amounts to requiring that the bottom layer {a mathematical formula}bU(K) be a basic DMKB and the reduct {a mathematical formula}eU(K,X) also be a basic DMKB. Similarly, for a splitting sequence {a mathematical formula}U=〈Uα〉α&lt;μ we need to make sure that {a mathematical formula}bU0(K) is a basic DMKB and for every ordinal α such that {a mathematical formula}α+1&lt;μ, {a mathematical formula}eUα(bUα+1(K),X) is a basic DMKB. The following definition establishes the notion of a layering splitting sequence by requiring exactly these conditions given an arbitrary choice of {a mathematical formula}X.
      </paragraph>
      <paragraph label="Definition 64">
       Layering splitting sequenceLet K be a DMKB and {a mathematical formula}U=〈Uα〉α&lt;μ a splitting sequence for K. We say that U is a layering splitting sequence for K if {a mathematical formula}bU0(K) is a basic DMKB and for any ordinal α such that {a mathematical formula}α+1&lt;μ and every {a mathematical formula}X∈M, {a mathematical formula}eUα(bUα+1(K),X) is also a basic DMKB. We say that K is layered if some layering splitting sequence for K exists.
      </paragraph>
      <paragraph>
       The definition of a solution to a DMKB K w.r.t. a layering splitting sequence is an instantiation of the abstract definition in Section 4.1. However, for the sake of completeness, the definition of a {a mathematical formula}(⋄,S)-dynamic MKNF model of K w.r.t. a layering splitting sequence is provided in Appendix D, Definition 143.
      </paragraph>
     </section>
     <section label="5.2">
      <section-title>
       Independence of splitting sequence
      </section-title>
      <paragraph>
       The {a mathematical formula}(⋄,S)-dynamic MKNF models defined above depend on a particular splitting sequence and there is no guarantee that under a different splitting, the same models will be obtained. In the following we introduce conditions under which these models are splitting-independent. In particular, we need to assume the following properties of ⋄ and {a mathematical formula}S: 1. Splitting properties:Both ⋄ and {a mathematical formula}S must satisfy the splitting properties. If this were not the case, then solutions might depend on a splitting sequence even for basic DMKBs.2. Language conservation:Both ⋄ and {a mathematical formula}S must conserve the language, i.e. the models of syntactically independent knowledge base sequences must be independent. If this were not the case, then ⋄ and {a mathematical formula}S might interfere with one another when used to update syntactically unrelated layers of the DMKB. This property is formalised below.3. Fact update:Finally, since DMKBs consisting of a sequence of consistent sets of facts are classified by Definition 61 as both ontology- and rule-based, their semantics is given both by ⋄ and by {a mathematical formula}S. This ambivalence is unavoidable if we want to allow both an ontology and a rule layer to contain only facts, or simply to be empty. Nevertheless, if the semantics assigned to such sequences of fact bases by ⋄ differs from that assigned by {a mathematical formula}S, the resulting hybrid update semantics cannot generalise either ⋄ or {a mathematical formula}S. In order to avoid such anomalies, we assume that both ⋄ and {a mathematical formula}S respect fact update, as defined below.
      </paragraph>
      <paragraph>
       Both language conservation and fact update are basic properties of update operations. For a rule update semantics {a mathematical formula}S they can be formulated straightforwardly as follows:
      </paragraph>
      <paragraph label="Definition 65">
       Language conservation and fact update for rule updatesLet {a mathematical formula}S be a rule update semantics. We say that {a mathematical formula}S
      </paragraph>
      <list>
       <list-item label="•">
        conserves the language if for all sets of predicate symbols A, every DLP {a mathematical formula}P=〈Pi〉i&lt;n and every {a mathematical formula}S-model J of P, if {a mathematical formula}pr(Pi)⊆A for all {a mathematical formula}i&lt;n, then {a mathematical formula}pr(J)⊆A;
       </list-item>
       <list-item label="•">
        respects fact update if for every finite sequence of consistent sets of facts {a mathematical formula}P=〈Pi〉i&lt;n, the unique {a mathematical formula}S-model of P is the LP interpretation{a mathematical formula}
       </list-item>
      </list>
      <paragraph>
       Intuitively, language conservation for rule updates requires that all atoms true in an {a mathematical formula}S-stable model of a DLP P must appear in at least one of its rules, which is a necessary condition for the atom to be properly justified. On the other hand, fact update enforces a principle of inertia that forms the basis for belief update operators such as Winslett's. Both of these properties are satisfied by a wide range of rule update semantics, including the {a mathematical formula}RD-semantics.
      </paragraph>
      <paragraph label="Theorem 66">
       Language conservation and fact update for {a mathematical formula}RD-semanticsThe{a mathematical formula}RD-semantics for rule updates conserves the language and respects fact update.
      </paragraph>
      <paragraph label="Proof (sketch)">
       See Appendix D, page 89.  □
      </paragraph>
      <paragraph>
       The formalisation of language conservation for first-order updates relies on the notion of interpretation restriction and the related concept of saturated set of interpretations. Intuitively, given a set of predicate symbols A, a set of interpretations {a mathematical formula}M∈M is saturated relative to A if it only contains knowledge about predicate symbols from A.
      </paragraph>
      <paragraph label="Definition 67">
       Interpretation restriction and saturated interpretationLet A be a set of predicate symbols, {a mathematical formula}I∈IL and {a mathematical formula}M∈M. The restriction of I to A is an interpretation {a mathematical formula}I[A] such that for every ground atom p,{a mathematical formula} The restriction of{a mathematical formula}Mto A is defined as {a mathematical formula}M[A]={I[A]|I∈M}.Furthermore, we say that {a mathematical formula}M is saturated relative to A if for every interpretation {a mathematical formula}I∈IL,{a mathematical formula}
      </paragraph>
      <paragraph label="Example 68">
       Suppose a language {a mathematical formula}L contains only the predicate symbols {a mathematical formula}p/0, {a mathematical formula}q/0, and {a mathematical formula}r/0. Let {a mathematical formula}A={p/0,q/0} and let {a mathematical formula}M={{p,q},{p,q,r}}. Then {a mathematical formula}M[A]={{p,q}} and it is not difficult to verify that {a mathematical formula}M is saturated relative to A. However, {a mathematical formula}M is not saturated with respect to {a mathematical formula}B={p/0}. Since {a mathematical formula}M[B]={{p}}, we see that even though {a mathematical formula}I=I[B]={p}∈M[B], it is not the case that {a mathematical formula}I∈M.
      </paragraph>
      <paragraph>
       To formally illustrate this concept, we show that the set of models of a first-order theory {a mathematical formula}T is saturated relative to the set of predicate symbols that are relevant to {a mathematical formula}T.
      </paragraph>
      <paragraph label="Proposition 69">
       Let A be a set of predicate symbols and{a mathematical formula}Ta first-order theory such that{a mathematical formula}pr(T)⊆A. Then{a mathematical formula}〚T〛is saturated relative to A.
      </paragraph>
      <paragraph label="Proof">
       See Appendix D, page 89. □
      </paragraph>
      <paragraph>
       In other words, the set of models of a single first-order theory conserves its language. Language conservation for an update operator ⋄ extends the same property to sequences of first-order theories. Also, for first-order theories, fact update is formulated in essentially the same way as for rule updates.
      </paragraph>
      <paragraph label="Definition 70">
       Language conservation and fact update for ontology updatesLet ⋄ be a first-order update operator. We say that ⋄
      </paragraph>
      <list>
       <list-item label="•">
        conserves the language if for all sets of predicate symbols A and every sequence of first-order theories {a mathematical formula}T=〈Ti〉i&lt;n such that for all {a mathematical formula}i&lt;n, {a mathematical formula}pr(Ti)⊆A, {a mathematical formula}〚◇T〛 is saturated relative to A;
       </list-item>
       <list-item label="•">
        respects fact update if for every finite sequence of consistent sets of ground objective literals {a mathematical formula}T=〈Ti〉i&lt;n,{a mathematical formula}
       </list-item>
      </list>
      <paragraph>
       Since Winslett's operator treats all predicate symbols in a uniform manner, it naturally satisfies both these properties.
      </paragraph>
      <paragraph label="Theorem 71">
       Language conservation and fact update for Winslett's operatorWinslett's first-order update operator{a mathematical formula}⋄Wconserves the language and respects fact update.
      </paragraph>
      <paragraph label="Proof">
       See Appendix D, page 90.  □
      </paragraph>
      <paragraph>
       The previous results show that if we consider Winslett's operator for performing ontology updates and the {a mathematical formula}RD-semantics for performing rule updates, then they satisfy the splitting properties (cf. Theorem 57, Theorem 60), conserve the language and respect fact update. Furthermore, these three basic assumptions about the first-order update operator ⋄ and rule update semantics {a mathematical formula}S are sufficient to guarantee that {a mathematical formula}(⋄,S)-dynamic MKNF models are independent of the choice of the layering splitting sequence.
      </paragraph>
      <paragraph label="Proposition 72">
       Independence of splitting sequenceLet U, V be layering splitting sequences for a DMKB K. If both ⋄ and{a mathematical formula}Shave the splitting sequence property, conserve the language and respect fact update, then{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of K w.r.t. U if and only if{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of K w.r.t. V.
      </paragraph>
      <paragraph label="Proof">
       See Appendix D, page 93. □
      </paragraph>
      <paragraph>
       We can now safely introduce the dynamic MKNF model of a layered DMKB, independent of a particular layering splitting sequence:
      </paragraph>
      <paragraph label="Definition 73">
       Update semantics for layered DMKBsSuppose that both ⋄ and {a mathematical formula}S have the splitting sequence property, conserve the language and respect fact update; and let K be a layered DMKB. An MKNF interpretation {a mathematical formula}M is a {a mathematical formula}(⋄,S)-dynamic MKNF model of K if {a mathematical formula}M is a {a mathematical formula}(⋄,S)-dynamic MKNF model of K w.r.t. some layering splitting sequence.
      </paragraph>
      <paragraph>
       Note that since {a mathematical formula}〈P〉 (i.e., the sequence containing the single element, {a mathematical formula}P) is a layering splitting sequence for any basic DMKB, it follows from Proposition 72 that the above definition is compatible with the previously defined semantics for basic DMKBs (cf. Definition 62).
      </paragraph>
      <paragraph>
       Finally, we define a consequence relation by considering the credulous consequence of {a mathematical formula}(⋄,S)-dynamic MKNF models.
      </paragraph>
      <paragraph label="Definition 74">
       Consequence relationSuppose that both ⋄ and {a mathematical formula}S have the splitting sequence property, conserve the language and respect fact update, let K be a layered DMKB and {a mathematical formula}T an MKNF theory. We say that K{a mathematical formula}(⋄,S)-MKNF entails{a mathematical formula}T, denoted by {a mathematical formula}K⊨MKNF⋄,ST, if {a mathematical formula}M⊨T for some {a mathematical formula}(⋄,S)-dynamic MKNF model {a mathematical formula}M of K.
      </paragraph>
     </section>
     <section label="5.3">
      <section-title>
       Properties and use
      </section-title>
      <paragraph>
       The purpose of this subsection is twofold. First, we establish other formal properties of the hybrid update semantics that has just been defined, showing that it is faithful to the (static) semantics of MKNF knowledge bases as well as the first-order update operator and rule update semantics it is based upon. We also prove that it respects one of the most widely accepted principles underlying update semantics in general, the principle of primacy of new information, and is fully in line with the hybrid update semantics defined in Section 3.
      </paragraph>
      <paragraph>
       Our second goal is to illustrate its usefulness by considering updates of the MKNF knowledge base about Cargo Imports presented in Example 2.
      </paragraph>
      <paragraph>
       We assume throughout this section that both the first-order update operator ⋄ and the rule update semantics {a mathematical formula}S have the splitting sequence property, conserve the language and respect fact update.
      </paragraph>
      <section label="5.3.1">
       <section-title>
        Fidelity of the hybrid update semantics
       </section-title>
       <paragraph>
        First we define two basic properties of a rule update semantics that we need to assume in some of the theoretical results. The first property requires faithfulness of a rule update semantics to stable models while the second is concerned with respect for primacy of new information. Both properties are satisfied by most existing rule update semantics, including [6], [7], [13], [31], [37], [65], [66], [78], [80], [98].
       </paragraph>
       <paragraph label="Definition 75">
        Faithfulness to stable models and primacy of new informationLet {a mathematical formula}S be a rule update semantics. We say that {a mathematical formula}S
       </paragraph>
       <list>
        <list-item label="•">
         is faithful to the stable model semantics if for every program {a mathematical formula}P, an LP interpretation J is an {a mathematical formula}S-model of the DLP {a mathematical formula}〈P〉 if and only if J is a stable model of {a mathematical formula}P;
        </list-item>
        <list-item label="•">
         respects primacy of new information if for every DLP {a mathematical formula}P=〈Pi〉i&lt;n such that {a mathematical formula}n&gt;0 and every {a mathematical formula}S-model J of P it holds that {a mathematical formula}J⊨Pn−1.
        </list-item>
       </list>
       <paragraph>
        Our first formal result about the hybrid update semantics shows that it is faithful to the semantics of MKNF knowledge bases. For this to work, we need to assume that the rule update semantics is faithful to the stable model semantics.
       </paragraph>
       <paragraph label="Theorem 76">
        Faithfulness w.r.t. MKNF knowledge basesSuppose that{a mathematical formula}Sis faithful to the stable model semantics and let{a mathematical formula}〈K〉be a layered DMKB. An MKNF interpretation{a mathematical formula}Mis an MKNF model of{a mathematical formula}Kif and only if{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of{a mathematical formula}〈K〉.
       </paragraph>
       <paragraph label="Proof">
        See Appendix D, page 96.  □
       </paragraph>
       <paragraph>
        An immediate consequence of this result and of the basic properties of MKNF knowledge bases (Proposition 15) is that the defined update semantics is also faithful w.r.t. ontologies and stable models. Furthermore, the semantics is faithful to the first-order update operator ⋄ and the rule update semantics {a mathematical formula}S that it is based on.
       </paragraph>
       <paragraph label="Theorem 77">
        Faithfulness w.r.t. first-order update operatorLet{a mathematical formula}K=〈(Oi,∅)〉i&lt;nbe a DMKB. An MKNF interpretation{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of K if and only if{a mathematical formula}M=〚◇〈Oi〉i&lt;n〛.
       </paragraph>
       <paragraph label="Proof">
        See Appendix D, page 96. □
       </paragraph>
       <paragraph label="Theorem 78">
        Faithfulness w.r.t. rule update semanticsLet{a mathematical formula}K=〈(∅,Pi)〉i&lt;nbe a DMKB. If J is an{a mathematical formula}S-model of{a mathematical formula}〈Pi〉i&lt;n, then the MKNF interpretation corresponding to J is a{a mathematical formula}(⋄,S)-dynamic MKNF model of K. If{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of K, then the LP interpretation corresponding to{a mathematical formula}Mis an{a mathematical formula}S-model of{a mathematical formula}〈Pi〉i&lt;n.
       </paragraph>
       <paragraph label="Proof">
        See Appendix D, page 96.  □
       </paragraph>
       <paragraph>
        As with the update semantics in Section 3, assuming that ⋄ satisfies (FO1) and {a mathematical formula}S respects primacy of new information, the resulting hybrid semantics also respects it.
       </paragraph>
       <paragraph label="Theorem 79">
        Primacy of new informationSuppose that ⋄ satisfies (FO1) and{a mathematical formula}Srespects primacy of new information and let{a mathematical formula}K=〈Ki〉i&lt;nbe a layered DMKB such that{a mathematical formula}n&gt;0. If{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of K, then{a mathematical formula}M⊨κ(Kn−1).
       </paragraph>
       <paragraph label="Proof">
        See Appendix D, page 96.  □
       </paragraph>
       <paragraph>
        Finally, the update semantics is compatible with the semantics from Section 3 – both of them provide the same results when applied to layered DMKBs with static rules, i.e. to the class of DMKBs that they can both handle.
       </paragraph>
       <paragraph label="Theorem 80">
        Compatibility with update semantics from Section 3Suppose that ⋄ satisfies ({a mathematical formula}FO2.⊤) and (FO8.2) and that{a mathematical formula}Sis faithful to the stable model semantics. Let K be a layered DMKB with static rules. An MKNF interpretation{a mathematical formula}Mis a ⋄-dynamic MKNF model of K if and only if{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of K.
       </paragraph>
       <paragraph label="Proof">
        See Appendix D, page 101.  □
       </paragraph>
      </section>
      <section label="5.3.2">
       <section-title>
        An extended example
       </section-title>
       <paragraph>
        Finally, the following example illustrates how the semantics can be used in the Cargo Imports domain to incorporate new, conflicting information into an MKNF knowledge base.
       </paragraph>
       <paragraph label="Example 81">
        Updating the cargo imports knowledge baseThe MKNF knowledge base {a mathematical formula}K in Fig. 1 has a single MKNF model {a mathematical formula}M. Due to the splitting theorem for MKNF knowledge bases (cf. Theorem 54), {a mathematical formula}M coincides with {a mathematical formula}X0∩X1∩X2∩X3 where {a mathematical formula}Xi is the MKNF model of the i-th layer of {a mathematical formula}K, as presented in Fig. 2. We shortly summarise what is entailed by each of these MKNF models.The first layer of {a mathematical formula}K, {a mathematical formula}bU0(K), contains a number of ABox assertions about shipments {a mathematical formula}s1, {a mathematical formula}s2, {a mathematical formula}s3 which differ in the kind of tomatoes or in their packaging. All of these assertions are entailed by {a mathematical formula}X0 and, besides that, using the TBox assertions we can derive that the cargo within each shipment ({a mathematical formula}c1, {a mathematical formula}c2 and {a mathematical formula}c3, respectively) belongs to the concept {a mathematical formula}Tomato as well as {a mathematical formula}EdibleVegetable, and that each cargo is assigned a different tariff charge:{a mathematical formula}Using this information, the rules in the second layer of {a mathematical formula}K, {a mathematical formula}tU0(bU1(K)), derive information about admissible and approved importers, namely:{a mathematical formula}Turning to the third layer, the rules and TBox axioms of {a mathematical formula}tU1(bU2(K)), entail some simple geographic information along with the following:{a mathematical formula}The HTS codes of commodities inside all three shipments match the declared HTS codes, so all shipments are compliant according to the rules in the last layer, {a mathematical formula}tU2(bU3(K)). Besides, there is no expeditable importer for {a mathematical formula}c1, so it is not considered a low risk commodity and the rules in the last layer imply that a partial inspection of {a mathematical formula}s1 will take place:{a mathematical formula}Now we consider an update caused by several independent events in order to illustrate different aspects of the hybrid update semantics. We assume to be using Winslett's first-order operator {a mathematical formula}⋄W to deal with ontology updates and the {a mathematical formula}RD-semantics to deal with rule updates.Suppose that during the partial inspection of {a mathematical formula}s1, grape tomatoes are found instead of cherry tomatoes. Second, we suppose that {a mathematical formula}i2 is no longer an approved importer for any kind of tomatoes due to a history of mis-filing. Third, due to a rat infestation on the boat with shipment {a mathematical formula}s3, {a mathematical formula}c3 is no longer considered a low risk commodity. Finally, because of workload constraints, partial inspections for shipments with commodities from a producer registered in a country of the European Union will be waived. These events lead to the following update {a mathematical formula}K′=(O′,P′) where {a mathematical formula}O′ contains the assertions{a mathematical formula}{a mathematical formula} as well as all TBox axioms from {a mathematical formula}O, in order to keep them static; and {a mathematical formula}P′ contains the following rules{sup:22}:{a mathematical formula}{a mathematical formula} Note that the splitting sequence U defined in Example 55 is a layering splitting sequence for the DMKB {a mathematical formula}K=〈K,K′〉. The four layers of {a mathematical formula}K and {a mathematical formula}K′, listed in Fig. 2, Fig. 3, respectively, are used to form the corresponding layers of K. The first layer, {a mathematical formula}bU0(K)=〈bU0(K),bU0(K′)〉, still contains only ontology axioms and so is ontology-based. The second and fourth layers, {a mathematical formula}tU0(bU1(K))=〈tU0(bU1(K)),tU0(bU1(K′))〉 and {a mathematical formula}tU2(bU3(K))=〈tU2(bU3(K)),tU2(bU3(K′))〉, contain only rules and so are rule-based. Finally, the third layer, {a mathematical formula}tU1(bU2(K))=〈tU1(bU2(K)),tU1(bU2(K′))〉, contains a mixture of rules and ontology axioms but all the rules have positive heads and predicate symbols of all body literals belong to {a mathematical formula}U1, so the reduct of the third layer will necessarily be ontology-based. This implies that K is a layered DMKB.In order to arrive at a {a mathematical formula}(⋄W,RD)-dynamic MKNF model of K with respect to U, a {a mathematical formula}(⋄W,RD)-dynamic MKNF model of each layer is determined separately and models of previous layers serve to “feed” information into the current layer.In our case, we first find the model {a mathematical formula}X0′ of {a mathematical formula}bU0(K). Due to the TBox axioms, the cargo {a mathematical formula}c1 is no longer classified as cherry tomatoes, and its HTS code as well as the tariff charge change. Note that the conflict between old and new knowledge is properly resolved by Winslett's operator:{a mathematical formula}Subsequently, the {a mathematical formula}RD-semantics is used to find the model {a mathematical formula}X1′ of the reduct of the second layer w.r.t. {a mathematical formula}X0′, i.e. {a mathematical formula}eU0(bU1(K),X0′). This results in {a mathematical formula}i2 no longer being an approved importer for any of the cargo in the knowledge base. As before, the conflict that arose is resolved by the {a mathematical formula}RD-semantics:{a mathematical formula}Given {a mathematical formula}X0′ and {a mathematical formula}X1′, we form the reduct of the third layer: {a mathematical formula}eU1(bU2(K),X0′∩X1′). It follows that {a mathematical formula}i2 is no longer an expeditable importer of {a mathematical formula}c2 and, as a consequence, {a mathematical formula}c2 is no longer considered a low risk commodity. Furthermore, due to the explicit update, {a mathematical formula}c3 is also no longer filed as a low risk commodity. The conflicting situation is again resolved by Winslett's operator and results in the {a mathematical formula}(⋄W,RD)-dynamic MKNF model {a mathematical formula}X2′ such that:{a mathematical formula}Finally, due to all the changes in the three previous layers, the rules in the reduct of the fourth layer, {a mathematical formula}eU2(bU3(K),X0′∩X1′∩X2′), imply that shipment {a mathematical formula}s1 is no longer compliant and, as a consequence, should be fully inspected. Also, shipment {a mathematical formula}s2 needs to be partially expected because {a mathematical formula}c2 is now not a low risk commodity. Furthermore, even though {a mathematical formula}c3 is also not a low risk commodity, it is not going to be partially inspected because of the rule update in the fourth layer according to which the inspection of {a mathematical formula}s3 must be waived because {a mathematical formula}s3 comes from an EU registered producer. The resulting model {a mathematical formula}X3′ of the last layer is determined by the {a mathematical formula}RD-semantics:{a mathematical formula}Note that the sequence of MKNF interpretations {a mathematical formula}〈X0′,X1′,X2′,X3′〉 is a solution to K w.r.t. the splitting sequence U and the unique {a mathematical formula}(⋄W,RD)-dynamic MKNF model assigned to K is the MKNF interpretation {a mathematical formula}M′=X0′∩X1′∩X2′∩X3′.
       </paragraph>
      </section>
     </section>
    </section>
    <section label="6">
     <section-title>
      Complexity of update query answering
     </section-title>
     <paragraph>
      The preceding sections have presented two complementary approaches to updating MKNF knowledge bases: DMKBs with static rules in Section 3, and layered DMKBs in Section 5. In this section, after informally reviewing previous results on the complexity of entailment from MKNF knowledge bases, we present a basic complexity result for each approach. We assume the basic terminology of computational complexity as can be found in e.g., [79]. As notation, if {a mathematical formula}Ω1 and {a mathematical formula}Ω2 are complexity classes, then {a mathematical formula}Ω1Ω2 denotes the class of problems that can be solved by a Turing machine that is complete for class {a mathematical formula}Ω1 which makes use of an oracle that is complete for problems in class {a mathematical formula}Ω2.
     </paragraph>
     <section label="6.1">
      <section-title>
       Complexity of entailment from MKNF knowledge bases
      </section-title>
      <paragraph>
       The original paper on MKNF knowledge bases, [77] presented a variety of complexity results concerning entailment by a MKNF knowledge base {a mathematical formula}K=(O,P). More specifically, they considered the problem of determining whether {a mathematical formula}K⊨KA, where A is a ground generalised atom in an atom base associated with {a mathematical formula}K, and given that the underlying description logic of {a mathematical formula}O is DL.
      </paragraph>
      <paragraph>
       The first measure of complexity considered, termed combined complexity, is based on the size of (non-ground) {a mathematical formula}K plus the size of A. Since no assumptions are made about {a mathematical formula}P – which may be non-ground – when DL is of low complexity, the cost of combined complexity is dominated by the cost of grounding {a mathematical formula}P which is exponential in the size of {a mathematical formula}P. Even for more expressive cases of DL such as {a mathematical formula}SHOIN or {a mathematical formula}SROIQ which underlay specifications of OWL, the complexity of entailment may be increased due to the generality of MKNF knowledge bases together with the weakness of assumptions made by combined complexity.
      </paragraph>
      <paragraph>
       A second measure is data complexity, which makes stronger assumptions, including various boundedness conditions about size of A, {a mathematical formula}P and {a mathematical formula}O, and the size of rules in {a mathematical formula}P, and that the Abox of {a mathematical formula}O consists only of atomic formulas. Under such conditions, the data complexity of entailment for many description logics is either in Ptime or is co-NP complete. When such description logics are used in an MKNF knowledge base {a mathematical formula}K the complexity of entailment is co-NP complete, or {a mathematical formula}Π2P complete, respectively. In the case of stratified programs, which have a single stable model, the complexity is Ptime-complete or is {a mathematical formula}Δ2P-complete respectively.{sup:23}
      </paragraph>
     </section>
     <section label="6.2">
      <section-title>
       Complexity of entailment from dynamic MKNF knowledge bases
      </section-title>
      <paragraph>
       Since entailment by MKNF knowledge bases is not decidable in general, both the results mentioned above and those presented below apply only to admissible MKNF knowledge bases, a class that we now define. As discussed informally in Section 2.4, two conditions suffice for entailment by a (finite) MKNF knowledge base {a mathematical formula}K=(O,P) to be decidable. First, the description logic over which {a mathematical formula}O is formulated must be decidable; and second, {a mathematical formula}P must be DL-safe, which ensures that {a mathematical formula}ground(P) is finite. In [77], these conditions are stated formally by the definition of an admissible MKNF knowledge base. Here, we extend this definition to ground DMKBs (sequences of ground MKNF knowledge bases, Definition 19):
      </paragraph>
      <paragraph label="Definition 82">
       AdmissibilityLet {a mathematical formula}DL be a description logic, {a mathematical formula}B a generalised atom base expressible in {a mathematical formula}DL, and {a mathematical formula}H⊆B. {a mathematical formula}DL, {a mathematical formula}B, and {a mathematical formula}H are admissible if, for each {a mathematical formula}O∈DL, each finite set {a mathematical formula}S⊆H of ground generalised atoms, each finite set N of assertions of the form {a mathematical formula}a≉b, and each generalised atom {a mathematical formula}ξ∈B, checking whether {a mathematical formula}O∪S∪N⊨κ(ξ) is decidable.Let {a mathematical formula}DL, {a mathematical formula}B and {a mathematical formula}H be admissible. A program {a mathematical formula}P over {a mathematical formula}B is admissible if it is ground and finite and each rule in {a mathematical formula}P contains a generalised literal over {a mathematical formula}H in its head. A DLP {a mathematical formula}P=〈Pi〉i&lt;n is admissible if each {a mathematical formula}Pi is admissible. An MKNF knowledge base {a mathematical formula}K=(O,P) over {a mathematical formula}DL and {a mathematical formula}B is admissible if it is ground, DL-safe and finite, and {a mathematical formula}P is admissible. A DMKB {a mathematical formula}〈Ki〉i&lt;n, is admissible if each {a mathematical formula}Ki is admissible.{sup:24}
      </paragraph>
      <paragraph>
       In the remainder of this section, we assume that all ontologies and programs are over an admissible description logic {a mathematical formula}DL and generalised atom base {a mathematical formula}B.
      </paragraph>
      <paragraph>
       Next, we define the problem of query answering for updates to the ontology. The complexity of these problems will serve as parameters to the complexity of updating MKNF knowledge bases.
      </paragraph>
      <paragraph label="Definition 83">
       Query answering for ontology updatesLet ⋄ be a first-order update operator and let Ω be a complexity class. We say that query answering for ⋄ belongs to Ω if for every sequence of ontologies {a mathematical formula}〈Oi〉i&lt;n and every finite set of ground generalised literals S, Ω contains the problem of deciding whether{a mathematical formula}
      </paragraph>
      <section label="6.2.1">
       <section-title>
        DMKBs with static rules
       </section-title>
       <paragraph>
        The problem of answering queries to DMKBs with static rules is expressed as follows.
       </paragraph>
       <paragraph label="Definition 84">
        Hybrid query answering for updates of DMKBs with static rulesLet ⋄ be a first-order update operator that satisfies (FO8.2) and Ω a complexity class. We say that hybrid query answering for ⋄ belongs to Ω if for every admissible DMKB with static rules K and every finite set of ground generalised literals S, Ω contains the problem of deciding whether {a mathematical formula}K⊨MKNF⋄κ(S).
       </paragraph>
       <paragraph>
        The following theorem shows that query answering to a DMKB with static rules is a function of the complexity of query answering for the ontology update operator that was used. Specifically, the theorem provides an upper bound, determined by guessing a model J for the ground static rules, then determining whether J corresponds to a model of the DMKB.
       </paragraph>
       <paragraph label="Theorem 85">
        Let ⋄ be a first-order update operator that satisfies (FO8.2) and Ω a complexity class. If query answering for ⋄ belongs to Ω, then hybrid query answering for ⋄ belongs to{a mathematical formula}NPΩ.
       </paragraph>
       <paragraph label="Proof (sketch)">
        See Appendix B, page 76. □
       </paragraph>
      </section>
      <section label="6.2.2">
       <section-title>
        Layered DMKBs
       </section-title>
       <paragraph>
        Before addressing the problem of answering queries to layered DMKBs, we state the problem of query answering for rule updates. Similarly as in Sections 4 and 5, throughout this subsection we assume that the generalised atom base {a mathematical formula}B consists of objective literals only.
       </paragraph>
       <paragraph label="Definition 86">
        Query answering for rule updatesLet {a mathematical formula}S be a rule update semantics and Ω a complexity class. We say that query answering for{a mathematical formula}Sbelongs to Ω if for every admissible DLP {a mathematical formula}P=〈Pi〉i&lt;n, and every finite set of ground literals S, Ω contains the problem of deciding whether for some {a mathematical formula}J∈〚P〛S, {a mathematical formula}J⊨S.
       </paragraph>
       <paragraph>
        The problem of answering queries to layered DMKBs is then expressed as follows.
       </paragraph>
       <paragraph label="Definition 87">
        Hybrid query answering for updates of layered DMKBsLet ⋄ be a first update operator and {a mathematical formula}S a rule update semantics such that both ⋄ and {a mathematical formula}S have the splitting sequence property, conserve the language and respect fact update. Given a complexity class Ω, we say that hybrid query answering for ⋄ and{a mathematical formula}S belongs to Ω if for every admissible layered DMKB K and every finite set of ground literals S, Ω contains the problem of deciding whether {a mathematical formula}K⊨MKNF⋄,Sκ(S).
       </paragraph>
       <paragraph>
        In a manner similar to Theorem 85, the following theorem shows that query answering to a layered DMKB is a function of the complexity of query answering for the update operators that were used. Specifically, the theorem provides an upper bound, determined by guessing sub-models of each layer in the splitting sequence of the DMKB, then determining whether these sub-models together correspond to a model of the DMKB.
       </paragraph>
       <paragraph label="Theorem 88">
        Let ⋄ be a first update operator and{a mathematical formula}Sa rule update semantics such that both ⋄ and{a mathematical formula}Shave the splitting sequence property, conserve the language and respect fact update. If query answering for ⋄ belongs to{a mathematical formula}Ω1and query answering for{a mathematical formula}Sbelongs to{a mathematical formula}Ω2, then hybrid query answering for ⋄ and{a mathematical formula}Sbelongs to{a mathematical formula}NPΩ1∪Ω2.
       </paragraph>
       <paragraph label="Proof (sketch)">
        See Appendix D, page 101. □
       </paragraph>
       <paragraph>
        Theorem 85, Theorem 88, while abstract, provide upper bounds on computing entailment for admissible DMKBs. Exploring more precise results based on specific ontology and rule update operators, is an avenue for future work.
       </paragraph>
      </section>
     </section>
    </section>
    <section label="7">
     <section-title>
      Discussion
     </section-title>
     <paragraph>
      In this paper we have taken important first steps towards solving the problem of updates to MKNF knowledge bases, a mature framework for tightly integrated hybrid knowledge representing and reasoning.
     </paragraph>
     <paragraph>
      We have defined two complementary update semantics. The first semantics (Section 3) applies to DMKBs with static rules, and uses a first-order update operator ⋄ to perform ontology updates. This semantics encompasses applications of hybrid knowledge bases in which the ontology contains highly dynamic information while rules represent defaults, preferences or behaviour that does not undergo changes and that can be overridden by ontology updates when necessary. The second semantics applies to layered DMKBs (Section 5), and modularly combines a first-order update operator ⋄ with a rule update semantics {a mathematical formula}S. We demonstrated the use of this semantics in a realistic scenario involving cargo imports. The approach is capable of performing non-trivial updates, automatically resolving conflicts in the expected manner, and propagating new information across the knowledge base. To define the semantics of layered DMKBs we also introduced Abstract Splitting Properties (Section 4), which reformulate the notion of splitting so that it can be parameterised by different logical formalisms; the Abstract Splitting Properties form the basis of the hybrid update semantics defined in Section 5.
     </paragraph>
     <paragraph>
      The two hybrid update semantics are complementary in the sense that each can handle inputs that the other one cannot. Moreover, they are fully compatible with one another, meaning that they assign the same semantics to inputs accepted by both (cf. Theorem 80). By combining them one thus obtains an integrated hybrid update semantics that can safely handle inputs treated by either of the two semantics.
     </paragraph>
     <paragraph>
      We also examined the basic theoretical properties of both hybrid update semantics. We showed that they are faithful to ⋄ and {a mathematical formula}S: i.e., the hybrid semantics preserves the behaviour of the underlying update semantics when the hybrid knowledge base contains only ontology axioms or only rules. Similarly, both of the introduced semantics are faithful to the static semantics of MKNF knowledge bases, so that when no updates are performed, the assigned models are simply MKNF models of the initial MKNF knowledge base. Furthermore, they respect the principle of primacy of new information. Finally, in Section 6 we have presented basic complexity results on each update semantics.
     </paragraph>
     <paragraph>
      In defining each semantics, we have made as few assumptions as possible about the properties that guarantee the correctness of our definitions. With respect to update operators, we abstract away from particular instantiations of ⋄ and {a mathematical formula}S and allow for any approach to ontology and rule updates – be it an existing one or one that is yet to be discovered – as long as it satisfies the given assumptions. As an example the assumptions of language conservation and fact update are both needed in Section 5 to guarantee that the layered update semantics is independent of the choice of a splitting; both are basic properties of classical and of rule updates. We have formally shown that they are satisfied for Winslett's update operator and the {a mathematical formula}RD-semantics for rule updates. Similarly it can be shown that they hold for other approaches to classical updates, such as Hegner's semantics [47], Forbus' operator [39], Winslett's standard semantics and its syntax-independent version [50], [96], or the modified Winslett's operator [35], as well as by other rule update semantics, such as those introduced in [6], [20], [30], [31], [37], [66], [80], [97]. Beyond the assumptions about update operators, few assumptions have been made about the knowledge base, {a mathematical formula}K, that is to be updated. {a mathematical formula}K may have an ontology constructed from any formalism that is translatable into first-order logic. This includes not only most description logics, but other formalisms such as guarded first-order logics [9]. Of course, update operators for such fragments of first-order logic may not yet have been formulated, but the results in this paper indicate the sufficient conditions if they are to be extended to update MKNF knowledge bases.
     </paragraph>
     <paragraph>
      The practical usefulness of the introduced semantics is underlined by the fact that the full expressivity of MKNF knowledge bases does not seem to be necessary in a number of practical use cases. In particular, the separation of a hybrid knowledge base into distinct ontology and rule layers, as required by the layered update semantics of Section 5, seems to be a natural way of controlling how the different types of knowledge interact, and is in the spirit of recent work on modules for logic programs [12], [54].
     </paragraph>
     <section label="7.1">
      <section-title>
       Related work
      </section-title>
      <section>
       <section>
        <section-title>
         Updates of description logics
        </section-title>
        <paragraph>
         Recent research has explored various issues pertaining to updating ontologies that are based on description logics. One such issue may be termed the recovery problem: given an update operator ⋄, and ontologies {a mathematical formula}O1, {a mathematical formula}O2 both in a specific DL {a mathematical formula}D, can {a mathematical formula}O1⋄O2 be expressed in {a mathematical formula}D? Unfortunately, [10] showed that when {a mathematical formula}D is at least as expressive as {a mathematical formula}ALCQI and ⋄ is {a mathematical formula}⋄W, querying {a mathematical formula}O1⋄WO2 is undecidable (and consequently cannot be expressed in {a mathematical formula}ALCQI).
        </paragraph>
        <paragraph>
         Because of this result, one branch of work has focused on the restriction of updates to information in ABoxes. For DLs that are at least as expressive as {a mathematical formula}ALC, ABox updates may be restricted to those that only allow for updates with assertions about concept names (i.e., assertions about classes to which given individuals belong) [15], [36], [73]. In these cases, the update semantics used coincides with Winslett's first-order operator {a mathematical formula}⋄W, and several DLs have been identified in which expressibility of the updated ABox is guaranteed. In some of these DLs, the updated ABox may be exponential in size of the original ABox as well as of the update, while in others it may be exponential (only) in the size of the update. An alternate line of work addresses updates of less expressive DLs, such as the DL-Lite [27], [28], [29]. Unlike ABox updates for expressive DLs, these update operators ensure that ABox updates do not affect the TBox, treating the TBox the same way that integrity constraints were handled in early belief update semantics [56]. This line of work also provides polynomial algorithms for computing the updated ABoxes or their approximations, depending on which flavour of DL-Lite is considered. On the positive side, this means that the operator {a mathematical formula}⋄W ensures that the TBox is invariant under updates; on the negative side, such an approach may suffer from the same issues that arise when augmenting belief update semantics with integrity constraints [48], [49], [68].
        </paragraph>
        <paragraph>
         The ontology update operators just discussed may be termed syntax-independent (or model-based), i.e. they satisfy the postulate (B4). However, just as rule update operators are not syntax-independent, ontology update operators may be formula-based (cf. [96]). For formula-based operators, no semantic issues must be addressed when lifting operators based on propositional logic to first-order logic or ontologies, and expressibility is not an issue. Accordingly, [21] argued that syntax-independent operators provide inappropriate results when applied to TBoxes and introduced a formula-based operator for TBox updates in DL-Lite. Similarly, [67] have used a formula-based operator to tackle ABox updates to DL-Lite.
        </paragraph>
       </section>
       <section>
        <section-title>
         Updates of logic programs
        </section-title>
        <paragraph>
         When updates started to be investigated in the context of Logic Programming, it was only natural to adapt belief update principles and operators to this purpose [4], [76]. However, such approaches proved insufficiently expressive, principally because the model-based approach fails to capture the essential relationships between literals encoded in rules [66], and the formula-based approach is too crude as it does not allow rules to be reactivated when reasons for their suppression disappear [97]. Although state-of-the-art approaches to rule updates are guided by the same basic intuitions and aspirations as belief updates, they build upon fundamentally different principles and methods.
        </paragraph>
        <paragraph>
         Many of them are based on the causal rejection principle[5], [6], [7], [37], [66], [78]. Alternative approaches to rule updates employ syntactic transformations and other methods, such as abduction [80], prioritisation and preferences [31], [97], or dependencies on default assumptions [63], [82].
        </paragraph>
        <paragraph>
         Despite the variety of techniques used in these approaches, certain properties are common to all of them, and seem to be taken as fundamental. First, the stable models assigned to a program after one or more updates are always supported: for each true atom p there exists a rule in either the original program or its updates that has p in the head and whose body is satisfied. Second, all mentioned rule update semantics coincide when it comes to updating sets of facts by newer facts. Additionally, they need to refer to the syntactic structure of a logic program: the individual rules and, in most cases, also the literals in their heads and bodies. This is what makes their full reconciliation with ontology updates so difficult since ontology axioms simply have no heads and bodies.
        </paragraph>
        <paragraph>
         Despite this impedance mismatch, some are still looking for a unifying framework that could embrace both belief and rule updates. For such a framework, finding an appropriate notion of equivalence is key. In [32], [33], AGM based revision was reformulated in the context of Logic Programming in a manner analogous to belief revision in classical propositional logic, and specific revision operators for logic programs were investigated. Central to this novel approach are SE models[93] which provide a monotonic semantic characterisation of logic programs that is strictly more expressive than the answer-set semantics. Furthermore, two programs have the same set of SE models if and only if they are strongly equivalent [72], which means that programs {a mathematical formula}P,Q with the same set of SE models can be modularly replaced by each other with respect to the answer-set semantics, because strong equivalence guarantees that {a mathematical formula}P∪R has the same answer sets as {a mathematical formula}Q∪R for any program {a mathematical formula}R.
        </paragraph>
        <paragraph>
         In [85], [90], a similar path was followed for KM based updates. However, despite the promise that the additional expressiveness of SE models could bring, [85], [90] also show that strong equivalence is not a suitable basis for syntax-independent rule update operators because such operators cannot respect both support and fact update. This can be demonstrated on programs {a mathematical formula}P={p.,q.} and {a mathematical formula}Q={p.,q←p.} which are strongly equivalent. Due to syntax independence, an update asserting that p is now false ought to lead in both cases to the same stable models. Due to fact update, such an update on {a mathematical formula}P should naturally lead to a stable model where q is true. But in case of {a mathematical formula}Q such a stable model would be unsupported. Such examples led to the study of stronger notions of program equivalence in [86], [87], and the proposal to view a logic program as the set of sets of models of its rules in order to acknowledge rules as the atomic pieces of knowledge and, at the same time, abstract away from unimportant differences between their syntactic forms, focusing on their semantic content.
        </paragraph>
        <paragraph>
         Within this view of logic programs, updates can be seen to resemble formula-based ontology update operators. In [88] the authors define an abstract framework – dubbed exception driven updates – which is capable of capturing both logic program updates, namely the operator in [66], along with several update operators used for ontology updates, such as the model-based Winslett's operator, or the formula-based WIDTIO and Bold operators [21], [29], [67], [73]. This view is closely related to base revision operators[40], [46], and provides a promising avenue to further investigate updates of hybrid knowledge bases.
        </paragraph>
       </section>
       <section>
        <section-title>
         Formalisms for representing hybrid knowledge
        </section-title>
        <paragraph>
         Multi-context systems [17] provide an alternate formalism for representing hybrid knowledge in which each context represents a logic together with a set of beliefs, and where the contexts are integrated through so-called bridge rules. Multi-context systems are more abstract than MKNF knowledge bases overall and so are more general; however, the relationship of the two formalisms has recently been clarified [60]. From the perspective of the work described in this paper, there is an interesting relationship between the defined class of layered DMKBs and multi-context systems. Each layer of a DMKB w.r.t. a particular layering splitting sequence can be viewed as a context that includes its own bridge rules. At the same time, the constraints we impose guarantee that each such context either contains only rules, so the context logic can be the stable models semantics, or it contains only DL axioms so that first-order logic can be used as its underlying logic. Though different splitting sequences induce different multi-context systems, their overall semantics remains the same (cf. Proposition 72). Based on this close relationship, a further study of the update frameworks presented here and the update semantics of managed multi-context systems [18], and more recently of reactive multi-context systems [16], [19], and evolving multi-context systems [45] may bring about interesting new insights. Similarly, the relationship remains to be explored with [94], which studies how the first-order belief update postulates (Section 2.5) can be extended to multi-context systems and applied to update operators. Furthermore, the development of similar update semantics under other existing frameworks for hybrid knowledge bases [25], [26], [38], [52], [62], [64] constitutes another topic of future investigation.
        </paragraph>
       </section>
      </section>
     </section>
     <section label="7.2">
      <section-title>
       Future work and extensions
      </section-title>
      <paragraph>
       The results of this paper lay the groundwork for practical experimentation. In this context, two implementations exist that support MKNF knowledge bases with stratified programs: [44] which supports {a mathematical formula}ALCQ, and the NoHR plug-in for the Protégé ontology editor which supports {a mathematical formula}EL[53] and DL-Lite[23]. These implementations may serve as starting points to explore the practical behaviour of hybrid updates based on the combination of specific update operators such as those mentioned in Section 7.1, and used in practice to deal with the dynamic aspects of applications which require the expressive power of hybrid knowledge bases, such as normative systems [1], [2].
      </paragraph>
      <paragraph>
       The hybrid update semantics presented in this paper can be further generalised by lifting the various constraints under which they are developed. In case of the semantics for DMKBs with static rules it would be interesting to consider adding support for disjunctive rules and for updates of the rule component, even if only to a limited extent. As for the update semantics for layered DMKBs, one issue to study is type of splitting that it is based on. The main limitation is that the current definition splits on predicate symbols, while in some cases it would be desirable to allow for a more fine-grained splitting, on the level of ground, and possibly generalised, atoms. More broadly, other change operations, such as forgetting, erasure, revision and contraction, also need to be studied and related to updates in the context of hybrid knowledge bases, just as the relationship between dealing with inconsistencies in hybrid knowledge bases through updates and following a paraconsistency approach [55].
      </paragraph>
     </section>
    </section>
   </content>
   <appendices>
    <section label="Appendix A">
     <section-title>
      Proofs: background
     </section-title>
     <paragraph>
      In this appendix we introduce a number of formal concepts relating to MKNF knowledge bases and their semantics. These are useful throughout the proofs of propositions and theorems from Sections 3, 4 and 5, presented later in Appendix B, Appendix C and Appendix D, respectively. We also formulate some of the basic properties of these new concepts. For brevity, we leave the proofs of these properties to the reader.
     </paragraph>
     <section label="A.1">
      <section-title>
       Properties of first-order and subjective theories
      </section-title>
      <paragraph label="Observation 89">
       Satisfaction of first-order sentences in MKNF structuresLet ϕ be a first-order sentence,{a mathematical formula}M,{a mathematical formula}NMKNF interpretations such that{a mathematical formula}M⊆Nand{a mathematical formula}Sa set of MKNF interpretations. The following holds:{a mathematical formula}
      </paragraph>
      <paragraph label="Definition 90">
       Subjective MKNF formula and theory, subjective entailmentAn MKNF formula ϕ is subjective if all first-order atoms in ϕ occur within the scope of a modal operator. An MKNF theory is subjective if all its members are subjective. Furthermore, for any subjective MKNF sentence ϕ, subjective MKNF theory {a mathematical formula}T and {a mathematical formula}M,N∈M we write{a mathematical formula}
      </paragraph>
      <paragraph label="Observation 91">
       Properties of subjective entailmentLet ϕ,{a mathematical formula}ϕ1,{a mathematical formula}ϕ2be subjective MKNF sentences,{a mathematical formula}Ta set of subjective MKNF sentences, π a ground MKNF rule,{a mathematical formula}I∈ILand{a mathematical formula}M,N∈M. Then the following holds:
      </paragraph>
      <list>
       <list-item label="(1)">
        {a mathematical formula}
       </list-item>
       <list-item label="(2)">
        If{a mathematical formula}M≠∅, then{a mathematical formula}
       </list-item>
       <list-item label="(3)">
        {a mathematical formula}
       </list-item>
       <list-item label="(4)">
        Suppose that{a mathematical formula}M≠∅and{a mathematical formula}N≠∅. Then:{a mathematical formula}Also, if{a mathematical formula}Hπis a generalised atom, then{a mathematical formula}Also, if{a mathematical formula}Hπis a generalised default literal, then{a mathematical formula}
       </list-item>
       <list-item label="(5)">
        For any MKNF knowledge base{a mathematical formula}K, an MKNF interpretation{a mathematical formula}Mis an MKNF model of{a mathematical formula}Kif and only if{a mathematical formula}M⊨κ(K)and for all{a mathematical formula}M′⊋M,{a mathematical formula}(M′,M)⊭κ(K).
       </list-item>
      </list>
     </section>
     <section label="A.2">
      <section-title>
       Restricted MKNF interpretations
      </section-title>
      <paragraph>
       Here we formulate the essential properties of interpretation restrictions, defined in Definition 67 on page 61.
      </paragraph>
      <paragraph label="Definition 92">
       Interpretation coincidenceLet A be a set of predicate symbols. For any {a mathematical formula}I,J∈IL we say that I coincides with J on A if {a mathematical formula}I[A]=J[A]. Similarly, for any {a mathematical formula}M,N∈M, {a mathematical formula}Mcoincides with{a mathematical formula}Non A if {a mathematical formula}M[A]=N[A].
      </paragraph>
      <paragraph label="Observation 93">
       Let A be a set of predicate symbols,{a mathematical formula}M,M′,N,N′∈Mand{a mathematical formula}Tan MKNF theory such that{a mathematical formula}A⊇pr(T). The following holds:
      </paragraph>
      <list>
       <list-item label="(1)">
        If{a mathematical formula}M⊆Nand{a mathematical formula}M[A]⊊N[A], then{a mathematical formula}M⊊N.
       </list-item>
       <list-item label="(2)">
        If and{a mathematical formula}Mcoincides with{a mathematical formula}Non A, then{a mathematical formula}
       </list-item>
       <list-item label="(3)">
        If{a mathematical formula}Tis subjective,{a mathematical formula}Mcoincides with{a mathematical formula}M′on A and{a mathematical formula}Ncoincides with{a mathematical formula}N′on A, then{a mathematical formula}
       </list-item>
      </list>
     </section>
     <section label="A.3">
      <section-title>
       Saturated MKNF interpretations
      </section-title>
      <paragraph>
       Here we formulate the essential properties of saturated MKNF interpretations, defined in Definition 67 on page 61.
      </paragraph>
      <paragraph>
       The following concept and its properties, strongly related to saturated interpretations, will be essential for proving our results in Section 5.
      </paragraph>
      <paragraph label="Definition 94">
       Let A be a set of predicate symbols and {a mathematical formula}M∈M. We introduce the following notation:{a mathematical formula}
      </paragraph>
      <paragraph>
       Also, other properties of saturated MKNF interpretations play an important role.
      </paragraph>
      <paragraph label="Observation 95">
       Let A, B be sets of predicate symbols and{a mathematical formula}M,N∈M. Then the following holds:
      </paragraph>
      <list>
       <list-item label="(1)">
        If{a mathematical formula}Mis saturated relative to A, then{a mathematical formula}
       </list-item>
       <list-item label="(2)">
        If{a mathematical formula}Tis an MKNF theory such that{a mathematical formula}A⊇pr(T), and{a mathematical formula}Mis an MKNF model of{a mathematical formula}T, then{a mathematical formula}Mis saturated relative to A.
       </list-item>
       <list-item label="(3)">
        The following conditions are equivalent:
       </list-item>
       <list-item label="(4)">
        {a mathematical formula}
       </list-item>
       <list-item label="(5)">
        If{a mathematical formula}A⊆B, then{a mathematical formula}
       </list-item>
       <list-item label="(6)">
        If{a mathematical formula}A⊆Band{a mathematical formula}Mis saturated relative to A, then it is also saturated relative to B.
       </list-item>
       <list-item label="(7)">
        If A, B are disjoint, then{a mathematical formula}
       </list-item>
      </list>
      <paragraph>
       Note particularly that Observation 95(1) is a strengthened version of Observation 93(1), with the implication replaced by an equivalence, that holds only for saturated MKNF interpretations.
      </paragraph>
     </section>
     <section label="A.4">
      <section-title>
       Semi-saturated MKNF interpretations
      </section-title>
      <paragraph>
       Another important class of MKNF interpretations for which a slightly modified version of Observation 93(1) holds are semi-saturated interpretations. After defining them formally, we list some of their most essential properties.
      </paragraph>
      <paragraph label="Definition 96">
       Semi-saturated MKNF interpretationLet A be a set of predicate symbols and {a mathematical formula}M∈M. We say that {a mathematical formula}M is semi-saturated relative to A if for every interpretation {a mathematical formula}I∈IL,{a mathematical formula}
      </paragraph>
      <paragraph label="Observation 97">
       Let A be a set of predicate symbols and{a mathematical formula}M,N∈M. Then the following holds:
      </paragraph>
      <list>
       <list-item label="(1)">
        If{a mathematical formula}Mis semi-saturated relative to A, then{a mathematical formula}
       </list-item>
       <list-item label="(2)">
        There exists the greatest{a mathematical formula}M0∈Mthat coincides with{a mathematical formula}Mon A and with{a mathematical formula}Non{a mathematical formula}P∖A. Furthermore,{a mathematical formula}M0is semi-saturated relative to A and{a mathematical formula}M∩N⊆M0.Also, if{a mathematical formula}Mis saturated relative to A and{a mathematical formula}Nrelative to{a mathematical formula}P∖A, then{a mathematical formula}M0=M∩N.Finally, if{a mathematical formula}M≠∅and{a mathematical formula}N≠∅, then{a mathematical formula}M0≠∅.
       </list-item>
      </list>
     </section>
     <section label="A.5">
      <section-title>
       Sequence-saturated MKNF interpretations
      </section-title>
      <paragraph>
       The properties satisfied by semi-saturated interpretations can be naturally extended to sequences of mutually disjoint sets of predicate symbols. This serves as a means to prove the splitting sequence theorems in Section 4.2.
      </paragraph>
      <paragraph label="Definition 98">
       Saturation sequence, difference sequenceA saturation sequence is a sequence {a mathematical formula}〈Aα〉α&lt;μ of pairwise disjoint sets of predicate symbols such that {a mathematical formula}⋃α&lt;μAα=P.
      </paragraph>
      <paragraph label="Definition 99">
       Sequence-saturated MKNF interpretationLet {a mathematical formula}A=〈Aα〉α&lt;μ be a saturation sequence and {a mathematical formula}M∈M. We say that {a mathematical formula}M is sequence-saturated relative to A if for every interpretation {a mathematical formula}I∈IL,{a mathematical formula}
      </paragraph>
      <paragraph label="Observation 100">
       Let{a mathematical formula}A=〈Aα〉α&lt;μbe a saturation sequence and{a mathematical formula}M∈M. Then the following holds:
      </paragraph>
      <list>
       <list-item label="(1)">
        These conditions are equivalent:
       </list-item>
       <list-item label="(2)">
        Let{a mathematical formula}〈Mα〉α&lt;μbe a sequence of members of{a mathematical formula}Msuch that for all{a mathematical formula}α&lt;μ,{a mathematical formula}Mαis saturated relative to{a mathematical formula}Aα, and{a mathematical formula}M=⋂α&lt;μMα. Then:
       </list-item>
      </list>
     </section>
    </section>
    <section label="Appendix B">
     <section-title>
      Proofs: dynamic MKNF knowledge bases with static rules
     </section-title>
     <paragraph>
      In the following we present proofs of results from Section 3, implicitly working under the same assumptions as those imposed in that section. That is, we assume that all MKNF rules are ground and do not allow for rules with default negation in their heads. In the proofs we also implicitly use many of the results presented in Appendix A.
     </paragraph>
     <section label="B.1">
      <section-title>
       Static consequence operator
      </section-title>
      <section label="B.1.1">
       <section-title>
        Static consequence operator for positive MKNF programs
       </section-title>
       <paragraph label="Lemma 101">
        Monotonicity of {a mathematical formula}TPLet{a mathematical formula}Pbe a positive MKNF program and{a mathematical formula}M,N∈M. If{a mathematical formula}M⊆N, then{a mathematical formula}TP(M)⊇TP(N).
       </paragraph>
       <paragraph label="Proof">
        Suppose that the generalised atom ξ belongs to {a mathematical formula}TP(N). Then there is a rule {a mathematical formula}π∈P such that {a mathematical formula}N⊨κ(Bπ) and {a mathematical formula}Hπ=ξ. It follows from Observation 89 that {a mathematical formula}M⊨κ(Bπ) and, thus, {a mathematical formula}ξ∈TP(M).  □
       </paragraph>
       <paragraph label="Proposition 21">
        Monotonicity of {a mathematical formula}TKLet{a mathematical formula}Kbe a positive MKNF knowledge base. Then{a mathematical formula}TKis a monotonic function on the complete lattice{a mathematical formula}(M,⊆).
       </paragraph>
       <paragraph label="Proof">
        Let {a mathematical formula}K=(O,P) and take some {a mathematical formula}M,N∈M such that {a mathematical formula}M⊆N. Our goal is to show that {a mathematical formula}TK(M)⊆TK(N).It follows from Lemma 101 that {a mathematical formula}TP(M)⊇TP(N) and, consequently,{a mathematical formula}  □
       </paragraph>
       <paragraph label="Definition 102">
        We say that an MKNF interpretation {a mathematical formula}M is an S5 model of an MKNF theory {a mathematical formula}T if {a mathematical formula}M⊨T. Similarly, {a mathematical formula}M is an S5 model of an MKNF knowledge base {a mathematical formula}K if it is an S5 model of {a mathematical formula}κ(K).{sup:25}
       </paragraph>
       <paragraph label="Lemma 103">
        If{a mathematical formula}Mis an S5 model of a first-order theory{a mathematical formula}T, then{a mathematical formula}M⊆〚T〛.
       </paragraph>
       <paragraph label="Proof">
        If {a mathematical formula}M is an S5 model of {a mathematical formula}T, then {a mathematical formula}M⊨T and it follows that {a mathematical formula}M only contains first-order models of {a mathematical formula}T. Thus, by the definition of {a mathematical formula}〚.〛, {a mathematical formula}M is a subset of {a mathematical formula}〚T〛.  □
       </paragraph>
       <paragraph label="Lemma 104">
        For any first-order theory{a mathematical formula}T, either{a mathematical formula}Thas no S5 model, or{a mathematical formula}〚T〛is the greatest S5 model of{a mathematical formula}T.
       </paragraph>
       <paragraph label="Proof">
        Consider two cases:
       </paragraph>
       <list>
        <list-item label="•">
         a) If {a mathematical formula}〚T〛 is empty, then it follows from Lemma 103 that {a mathematical formula}T has no S5 model (every S5 model must be an MKNF interpretation, thus non-empty).
        </list-item>
        <list-item label="•">
         b) if {a mathematical formula}〚T〛 is not empty, then from Lemma 103 and from {a mathematical formula}〚T〛⊨T we immediately conclude that {a mathematical formula}〚T〛 is the greatest S5 model of {a mathematical formula}T. □
        </list-item>
       </list>
       <paragraph label="Lemma 105">
        Let{a mathematical formula}Kbe a positive MKNF knowledge base. An MKNF interpretation{a mathematical formula}Mis an S5 model of{a mathematical formula}Kif and only if{a mathematical formula}M⊆TK(M).
       </paragraph>
       <paragraph label="Proof">
        First suppose that {a mathematical formula}M is an S5 model of {a mathematical formula}K=(O,P). Then clearly {a mathematical formula}M⊨κ(O) and for every rule {a mathematical formula}π∈P such that {a mathematical formula}M⊨κ(Bπ) it holds that {a mathematical formula}M⊨Hπ. In other words, {a mathematical formula}M is an S5 model of {a mathematical formula}TP(M)∪κ(O). By Lemma 104, {a mathematical formula}TK(M)=〚TP(M))∪κ(O)〛 is its greatest S5 model. It follows that {a mathematical formula}M⊆TK(M).On the other hand, if {a mathematical formula}M⊆TK(M), then {a mathematical formula}M⊨TP(M)∪κ(O). It follows that {a mathematical formula}M⊨Kκ(ϕ) for every {a mathematical formula}ϕ∈O and whenever {a mathematical formula}M⊨κ(Bπ), it holds that {a mathematical formula}M⊨κ(Hπ). Consequently, {a mathematical formula}M is an S5 model of {a mathematical formula}K.  □
       </paragraph>
       <paragraph label="Lemma 106">
        Every positive MKNF knowledge base either has no S5 model, or it has a unique MKNF model which coincides with its greatest S5 model.
       </paragraph>
       <paragraph label="Proof">
        Suppose that the MKNF knowledge base {a mathematical formula}K=(O,P) has some S5 model and let {a mathematical formula}M be the union of all S5 models of {a mathematical formula}K. First we show that {a mathematical formula}M is an S5 model of {a mathematical formula}K, i.e. it is the greatest S5 model of {a mathematical formula}K.Take some MKNF sentence ϕ from {a mathematical formula}κ(K). If {a mathematical formula}ϕ=Kκ(ϕ) for some {a mathematical formula}ϕ∈O, then since {a mathematical formula}κ(ϕ) is a first-order sentence, it follows from Observation 89 that {a mathematical formula}M⊨Kκ(ϕ).The other possibility is that ϕ is a sentence of the form {a mathematical formula}κ(Bπ)⊃κ(Hπ) for some {a mathematical formula}π∈P (cf. Definition 12). Suppose that {a mathematical formula}M⊨κ(Bπ). As π is positive, it follows from Observation 89 that {a mathematical formula}N⊨κ(Bπ) for every S5 model {a mathematical formula}N of {a mathematical formula}K and, thus, {a mathematical formula}N⊨κ(Hπ). Hence, by Observation 89, {a mathematical formula}M⊨κ(Hπ).It remains to show that {a mathematical formula}M is the unique MKNF model of {a mathematical formula}K. Since {a mathematical formula}κ(K) is subjective {a mathematical formula}not-free, it follows by the definitions of MKNF satisfaction and of an MKNF model (Definition 8, Definition 9) that the MKNF models of {a mathematical formula}K are exactly its subset-maximal S5 models. Since {a mathematical formula}M is the greatest S5 model of {a mathematical formula}M, it follows that it is also its unique MKNF model.  □
       </paragraph>
       <paragraph label="Proposition 23">
        MKNF model of a positive MKNF knowledge baseLet{a mathematical formula}Kbe a positive MKNF knowledge base. An MKNF interpretation is an MKNF model of{a mathematical formula}Kif and only if it is the greatest fixed point of{a mathematical formula}TK.
       </paragraph>
       <paragraph label="Proof">
        Let {a mathematical formula}S={M|M⊆TK(M)} and {a mathematical formula}M⁎=⋃S. It follows that for every {a mathematical formula}M∈S, {a mathematical formula}M⊆M⁎ and, by Proposition 21, we obtain that {a mathematical formula}M⊆TK(M)⊆TK(M⁎). Hence,{a mathematical formula} and we conclude that {a mathematical formula}M⁎ belongs to {a mathematical formula}S. Then it follows by the monotonicity of {a mathematical formula}TK that {a mathematical formula}TK(M⁎) belongs to {a mathematical formula}S and thus {a mathematical formula}TK(M⁎)⊆M⁎. Consequently, {a mathematical formula}M⁎ is a fixed point of {a mathematical formula}TK. Furthermore, every fixed point of {a mathematical formula}TK belongs to {a mathematical formula}S, so {a mathematical formula}M⁎ is its greatest fixed point.Now it suffices to observe that, by Lemma 105, {a mathematical formula}S consists of all S5 models of {a mathematical formula}K and the empty set. If {a mathematical formula}M⁎=∅, then {a mathematical formula}K has no S5 model, and thus no MKNF model. On the other hand, if {a mathematical formula}M⁎≠∅, then {a mathematical formula}M⁎ is the greatest S5 model of {a mathematical formula}K and, by Lemma 106, it coincides with the unique MKNF model of {a mathematical formula}K.  □
       </paragraph>
      </section>
      <section label="B.1.2">
       <section-title>
        Static consequence operator for MKNF programs with default negation
       </section-title>
       <paragraph label="Lemma 107">
        Let{a mathematical formula}Kbe an MKNF knowledge base. An MKNF interpretation{a mathematical formula}Mis an S5 model of{a mathematical formula}Kif and only if{a mathematical formula}Mis an S5 model of{a mathematical formula}KM.
       </paragraph>
       <paragraph label="Proof">
        Suppose that {a mathematical formula}M is an S5 model of {a mathematical formula}K. Obviously, {a mathematical formula}M⊨Kκ(ϕ) for every {a mathematical formula}ϕ∈O. Take some {a mathematical formula}π′=(Hπ←Bπ+.) from {a mathematical formula}PM for some {a mathematical formula}π∈P with {a mathematical formula}M⊨κ(∼Bπ−). Then {a mathematical formula}κ(KM) contains the sentence {a mathematical formula}κ(π′) of the form {a mathematical formula}κ(Bπ+)⊃κ(Hπ). If {a mathematical formula}M⊨κ(Bπ+), then it follows that {a mathematical formula}M⊨κ(Bπ) and since {a mathematical formula}M⊨κ(π), it follows that {a mathematical formula}M⊨κ(Hπ). Therefore, {a mathematical formula}M⊨κ(π′).For the converse implication, assume that {a mathematical formula}M is an S5 model of {a mathematical formula}KM. Obviously, {a mathematical formula}M⊨Kκ(ϕ) for every {a mathematical formula}ϕ∈O, so consider some rule {a mathematical formula}π∈P. If {a mathematical formula}M⊨κ(Bπ), then {a mathematical formula}PM contains the rule {a mathematical formula}π′=(Hπ←Bπ+.) and since {a mathematical formula}M⊨κ(π′), it follows that {a mathematical formula}M⊨κ(Hπ). Hence, {a mathematical formula}M⊨κ(π).  □
       </paragraph>
       <paragraph label="Proposition 26">
        MKNF model of an MKNF knowledge baseLet{a mathematical formula}Kbe an MKNF knowledge base. An MKNF interpretation{a mathematical formula}Mis an MKNF model of{a mathematical formula}Kif and only if it is the MKNF model of{a mathematical formula}KM.
       </paragraph>
       <paragraph label="Proof">
        Suppose that {a mathematical formula}M is an MKNF model of {a mathematical formula}K. Then it is also an S5 model of {a mathematical formula}K, so it follows that it is an S5 model of {a mathematical formula}KM from Lemma 107.Since {a mathematical formula}M is an S5 model of {a mathematical formula}KM, it must hold that {a mathematical formula}M is a subset of the greatest S5 model {a mathematical formula}M′ of {a mathematical formula}KM. We show by contradiction that {a mathematical formula}M=M′, i.e. {a mathematical formula}M is the MKNF model of {a mathematical formula}KM (cf. Lemma 106).Assume that {a mathematical formula}M⊊M′. Since {a mathematical formula}M is an MKNF model of {a mathematical formula}K, there must be some sentence {a mathematical formula}ϕ∈κ(K) such that {a mathematical formula}(M′,M)⊭ϕ. But {a mathematical formula}M′⊨Kκ(ψ) for every {a mathematical formula}ψ∈O, so ϕ must be of the form {a mathematical formula}κ(Bπ)⊃κ(Hπ) for some rule {a mathematical formula}π∈P and the following must hold:{a mathematical formula} which is equivalent to{a mathematical formula} However, this is in conflict with {a mathematical formula}M′ being an S5 model of {a mathematical formula}KM since the sentence{a mathematical formula} belongs to {a mathematical formula}κ(KM).For the converse implication, assume that {a mathematical formula}M is the MKNF model of {a mathematical formula}KM. Then it follows from Lemma 107 that {a mathematical formula}M is an S5 model of {a mathematical formula}K.Take some {a mathematical formula}M′⊋M. Since {a mathematical formula}M is the greatest S5 model of {a mathematical formula}KM, there is some rule {a mathematical formula}π′=(Hπ←Bπ+.)∈PM such that {a mathematical formula}M′⊭κ(π′), i.e.{a mathematical formula} This is equivalent to{a mathematical formula} which in turn is equivalent to {a mathematical formula}(M′,M)⊭κ(π). This proves that {a mathematical formula}M is indeed an MKNF model of {a mathematical formula}K.  □
       </paragraph>
      </section>
     </section>
     <section label="B.2">
      <section-title>
       Updating consequence operator
      </section-title>
      <paragraph label="Proposition 30">
       Monotonicity of {a mathematical formula}TK⋄Let ⋄ be a first-order update operator and K a positive DMKB with static rules. If ⋄ satisfies (FO8.2), then{a mathematical formula}TK⋄is a monotonic function on the complete lattice{a mathematical formula}(M,⊆).
      </paragraph>
      <paragraph label="Proof">
       Let {a mathematical formula}K=〈(Oi,Pi)〉i&lt;n and take some {a mathematical formula}M,N∈M such that {a mathematical formula}M⊆N. Our goal is to show that {a mathematical formula}TK⋄(M)⊆TK⋄(N).By Lemma 101 we conclude that {a mathematical formula}TP0(M)⊇TP0(N).Consequently,{a mathematical formula} By repeatedly using (FO8.2) for all {a mathematical formula}Oi with {a mathematical formula}0&lt;i&lt;n we obtain that{a mathematical formula} Consequently, {a mathematical formula}TK⋄(M)⊆TK⋄(N).  □
      </paragraph>
     </section>
     <section label="B.3">
      <section-title>
       Properties and relations
      </section-title>
      <paragraph label="Theorem 37">
       Faithfulness w.r.t. MKNF knowledge basesLet{a mathematical formula}K=(O,P)be an MKNF knowledge base. An MKNF interpretation{a mathematical formula}Mis an MKNF model of{a mathematical formula}Kif and only if{a mathematical formula}Mis a ⋄-dynamic MKNF model of{a mathematical formula}〈K〉.
      </paragraph>
      <paragraph label="Proof">
       This follows from Proposition 23, Proposition 26, and the fact that for every first-order theory {a mathematical formula}T, {a mathematical formula}◇〈T〉=T, so the static consequence operator {a mathematical formula}TK coincides with the updating consequence operator {a mathematical formula}T〈K〉⋄.  □
      </paragraph>
      <paragraph label="Theorem 38">
       Faithfulness w.r.t. first-order update operatorLet{a mathematical formula}K=〈(Oi,∅)〉i&lt;nbe a DMKB. An MKNF interpretation{a mathematical formula}Mis a ⋄-dynamic MKNF model of K if and only if{a mathematical formula}M=〚◇〈Oi〉i&lt;n〛.
      </paragraph>
      <paragraph label="Proof">
       Since the K contains no rules, {a mathematical formula}KM=K for any {a mathematical formula}M∈M. Furthermore,{a mathematical formula} It follows that the only fixed point of {a mathematical formula}TK⋄ is the set of models {a mathematical formula}〚◇〈Oi〉i&lt;n〛.  □
      </paragraph>
      <paragraph label="Theorem 39">
       Primacy of new informationSuppose that ⋄ satisfies (FO1) and let{a mathematical formula}K=〈Ki〉i&lt;nbe a DMKB with static rules such that{a mathematical formula}n&gt;0. If{a mathematical formula}Mis a ⋄-dynamic MKNF model of K, then{a mathematical formula}M⊨κ(Kn−1).
      </paragraph>
      <paragraph label="Proof">
       Suppose that {a mathematical formula}M is a ⋄-dynamic MKNF model of K. Then {a mathematical formula}M is a fixed point of the operator {a mathematical formula}TKM⋄, i.e.{a mathematical formula} Let{a mathematical formula} It follows that{a mathematical formula} and by (FO1) we can conclude that {a mathematical formula}M⊨κ(On−1). Consequently, {a mathematical formula}M⊨κ(Kn−1).  □
      </paragraph>
      <paragraph label="Theorem 40">
       Immunity to tautological updatesSuppose that ⋄ satisfies ({a mathematical formula}FO2.⊤) and (FO4) and let{a mathematical formula}K=〈(Oi,Pi)〉i&lt;nbe a DMKB with static rules such that{a mathematical formula}Oj≡∅for some j with{a mathematical formula}0&lt;j&lt;nand{a mathematical formula}Then K and{a mathematical formula}K′have the same ⋄-dynamic MKNF models.
      </paragraph>
      <paragraph label="Proof">
       Let {a mathematical formula}M be an MKNF interpretation and {a mathematical formula}N∈M. We will prove that {a mathematical formula}TKM⋄(N)=T(K′)M⋄(N), which implies that the ⋄-dynamic MKNF models of K and {a mathematical formula}K′ coincide. Put{a mathematical formula} It follows that{a mathematical formula} Let {a mathematical formula}T′=T⋄Oj. By (FO4) and ({a mathematical formula}FO2.⊤) we obtain that {a mathematical formula}T′≡T and by repeated application of (FO4) we conclude that{a mathematical formula} Consequently, {a mathematical formula}TKM⋄(N)=T(K′)M⋄(N). □
      </paragraph>
      <paragraph label="Theorem 41">
       Syntax independenceSuppose that ⋄ satisfies (FO4). Let{a mathematical formula}K=〈(Oi,Pi)〉i&lt;nand{a mathematical formula}K′=〈(Oi′,Pi′)〉i&lt;nbe DMKBs with static rules such that{a mathematical formula}P0=P0′and{a mathematical formula}Oi≡Oi′for all{a mathematical formula}i&lt;n. Then K and{a mathematical formula}K′have the same ⋄-dynamic MKNF models.
      </paragraph>
      <paragraph label="Proof">
       Let {a mathematical formula}M be an MKNF interpretation and {a mathematical formula}N∈M. We will prove that {a mathematical formula}TKM⋄(N)=T(K′)M⋄(N), which implies that the ⋄-dynamic MKNF models of K and {a mathematical formula}K′ coincide. Observe that{a mathematical formula}{a mathematical formula} It follows from {a mathematical formula}O0≡O0′ that{a mathematical formula} and by applying (FO4) we obtain that{a mathematical formula} Consequently, {a mathematical formula}TKM⋄(N)=T(K′)M⋄(N). □
      </paragraph>
     </section>
     <section label="B.4">
      <section-title>
       Complexity of updating DMKBs with static rules
      </section-title>
      <paragraph>
       The proof of Theorem 85 requires a counterpart of the updating consequence operator of Definition 28 that, for a DMKB K and a set of head atoms in the static rules of K, produces a new set of entailed head atoms as follows.
      </paragraph>
      <paragraph label="Definition 108">
       Let ⋄ be a first-order update operator and {a mathematical formula}K=〈(Oi,Pi)〉i&lt;n a positive DMKB with static rules. Also, let {a mathematical formula}HA′ be the set of all (generalised) head atoms in the rules of {a mathematical formula}Pi. {a mathematical formula}T-synK⋄ is defined for all {a mathematical formula}M∈M and {a mathematical formula}HA⊤⊆HA′ as follows:{a mathematical formula}
      </paragraph>
      <paragraph label="Theorem 85">
       Let ⋄ be a first-order update operator that satisfies (FO8.2) and Ω a complexity class. If query answering for ⋄ belongs to Ω, then hybrid query answering for ⋄ belongs to{a mathematical formula}NPΩ.
      </paragraph>
      <paragraph label="Proof (sketch)">
       Take a DMKB with static rules {a mathematical formula}K=〈(O0,P),(O1,∅),…,(On−1,∅)〉 and a finite set of ground literals S. We need to prove that the problem of deciding whether{a mathematical formula} belongs in {a mathematical formula}NPΩ. In other words, we need to decide whether for some ⋄-dynamic MKNF model {a mathematical formula}M of K, {a mathematical formula}M⊨κ(S).Let {a mathematical formula}HA′ be the (finite) set of generalised atoms that appear in heads of {a mathematical formula}P. We guess {a mathematical formula}HA⊤⊆HA′, then check that{a mathematical formula} is an MKNF model of K. In other words, we guess the set {a mathematical formula}HA⊤ of generalised atoms in the heads of rules in {a mathematical formula}P that are true in {a mathematical formula}M.The rest can be verified in deterministic polynomial time using our Ω oracle as follows. First, we form the program reduct {a mathematical formula}PM by using the oracle to see which default body literals are entailed by {a mathematical formula}M and which ones are not. Then, we check that {a mathematical formula}HA⊤ is the least fixed point of {a mathematical formula}T-synK,HA⊤⋄. Since K is finite and ground, {a mathematical formula}HA′ is also finite and ground and is part of the input string of the decision problem. Accordingly, obtaining the fixed point can be achieved by using the oracle polynomially many times. Finally, we check that {a mathematical formula}M⊨κ(ϕ) by one additional call to the oracle.  □
      </paragraph>
     </section>
    </section>
    <section label="Appendix C">
     <section-title>
      Proofs: semantics with splitting properties
     </section-title>
     <section label="C.1">
      <section-title>
       MKNF knowledge bases
      </section-title>
      <paragraph label="Remark 109">
       Note that whenever U is a splitting set for an MKNF knowledge base {a mathematical formula}K=(O,P), the following holds:{a mathematical formula} Also note that the heads of rules in {a mathematical formula}tU(P) contain only predicate symbols from {a mathematical formula}P∖U while their bodies may also contain predicate symbols from U. However, for any {a mathematical formula}X∈M, the reducts {a mathematical formula}eU(P,X) and {a mathematical formula}eU(K,X) contain only predicate symbols from {a mathematical formula}P∖U:{a mathematical formula} These basic observations will be used in the following proofs without further notice or reference.
      </paragraph>
      <section label="C.1.1">
       <section-title>
        Splitting set theorem
       </section-title>
       <paragraph label="Definition 110">
        Generalised splitting set reductLet {a mathematical formula}K=(O,P) be an MKNF knowledge base, {a mathematical formula}U⊆P a set of predicate symbols and {a mathematical formula}X,X′∈M. We define the reduct of{a mathematical formula}Prelative to U and{a mathematical formula}(X′,X) as{a mathematical formula} The reduct of{a mathematical formula}Krelative to U and{a mathematical formula}(X′,X) is {a mathematical formula}eU(K,(X′,X))=(tU(O),eU(P,(X′,X))).
       </paragraph>
       <paragraph label="Lemma 111">
        Let U be a splitting set for an MKNF knowledge base{a mathematical formula}Kand{a mathematical formula}D,{a mathematical formula}D′,{a mathematical formula}E,{a mathematical formula}E′,{a mathematical formula}F,{a mathematical formula}F′,{a mathematical formula}G,{a mathematical formula}G′∈Mbe such that the following conditions are satisfied:
       </paragraph>
       <list>
        <list-item label="1.">
         {a mathematical formula}E[U]=D[U]and{a mathematical formula}E′[U]=D′[U];
        </list-item>
        <list-item label="2.">
         {a mathematical formula}F[P∖U]=D[P∖U]and{a mathematical formula}F′[P∖U]=D′[P∖U];
        </list-item>
        <list-item label="3.">
         {a mathematical formula}G[U]=D[U]and{a mathematical formula}G′[U]=D′[U].
        </list-item>
       </list>
       <paragraph label="Proof">
        Suppose that {a mathematical formula}(D′,D)⊨κ(K) and let {a mathematical formula}K=(O,P). Since {a mathematical formula}bU(O)⊆O, it follows that for every {a mathematical formula}ϕ∈bU(O), {a mathematical formula}(D′,D)⊨Kκ(ϕ). Also, every rule {a mathematical formula}π∈bU(P) belongs to {a mathematical formula}P and we can conclude that {a mathematical formula}(D′,D)⊨κ(π). Consequently, {a mathematical formula}(D′,D)⊨κ(bU(K)) and from Observation 93(3) we obtain {a mathematical formula}(E′,E)⊨κ(bU(K)).It remains to show that {a mathematical formula}(F′,F)⊨κ(eU(K,(G′,G))). We know that {a mathematical formula}eU(K,(G′,G))=(tU(O),eU(P,(G′,G))). Since {a mathematical formula}tU(O)⊆O, it follows that for every {a mathematical formula}ϕ∈tU(O), {a mathematical formula}(D′,D)⊨Kκ(ϕ) and we can use Observation 93(3) to conclude that {a mathematical formula}(F′,F)⊨Kκ(tU(ϕ)).Take some rule {a mathematical formula}σ∈eU(P,(G′,G)). By Observation 91(3), in order to prove that {a mathematical formula}(F′,F)⊨κ(σ), we can instead show that {a mathematical formula}(F′,F)⊨κ(Hσ) given the assumption that {a mathematical formula}(F′,F)⊨κ(Bσ). This assumption together with Observation 93(3) implies that {a mathematical formula}(D′,D)⊨κ(Bσ) and, by the definition of {a mathematical formula}eU(K,(G′,G)), there must be some rule {a mathematical formula}π∈P such that {a mathematical formula}Hπ=Hσ and {a mathematical formula}(G′,G)⊨κ(Bπ∖Bσ). From the last property and Observation 93(3) we obtain {a mathematical formula}(D′,D)⊨κ(Bπ∖Bσ). Thus, {a mathematical formula}(D′,D)⊨κ(Bπ) and since {a mathematical formula}(D′,D)⊨κ(K) and {a mathematical formula}κ(K) contains {a mathematical formula}κ(π), we conclude that {a mathematical formula}(D′,D)⊨κ(Hπ). Consequently, since {a mathematical formula}Hπ=Hσ, by Observation 93(3) we obtain {a mathematical formula}(F′,F)⊨κ(Hσ) and so {a mathematical formula}(F′,F)⊨κ(σ). The choice of σ was arbitrary, so we have proven that {a mathematical formula}(F′,F)⊨κ(eU(P,(G′,G))).  □
       </paragraph>
       <paragraph label="Lemma 112">
        Let U be a splitting set for an MKNF knowledge base{a mathematical formula}Kand{a mathematical formula}D,{a mathematical formula}D′,{a mathematical formula}E,{a mathematical formula}E′,{a mathematical formula}F,{a mathematical formula}F′,{a mathematical formula}G,{a mathematical formula}G′∈Mbe such that the following conditions are satisfied:
       </paragraph>
       <list>
        <list-item label="1.">
         {a mathematical formula}E[U]=D[U]and{a mathematical formula}E′[U]=D′[U];
        </list-item>
        <list-item label="2.">
         {a mathematical formula}F[P∖U]=D[P∖U]and{a mathematical formula}F′[P∖U]=D′[P∖U];
        </list-item>
        <list-item label="3.">
         {a mathematical formula}G[U]=D[U]and{a mathematical formula}G′[U]=D′[U].
        </list-item>
       </list>
       <paragraph label="Proof">
        Take some {a mathematical formula}ϕ∈κ(K) and let {a mathematical formula}K=(O,P). If {a mathematical formula}ϕ=Kκ(ψ) for some {a mathematical formula}ψ∈O, then using Observation 93(3) we can conclude that from {a mathematical formula}O=bU(O)∪tU(O) and our assumptions it follows that {a mathematical formula}(D′,D)⊨Kκ(ϕ).Now suppose that {a mathematical formula}ϕ=κ(π) for some {a mathematical formula}π∈P. If {a mathematical formula}π∈bU(P), then it follows that {a mathematical formula}(E′,E)⊨κ(π) and by Observation 93(3) we conclude that {a mathematical formula}(D′,D)⊨κ(π). If {a mathematical formula}π∈tU(P), then assuming that {a mathematical formula}(D′,D)⊨κ(Bπ) we need to prove that {a mathematical formula}(D′,D)⊨κ(Hπ). It follows by Observation 93(3) that{a mathematical formula} Consequently, {a mathematical formula}eU(P,(G′,G)) contains a rule σ such that {a mathematical formula}Hσ=Hπ and{a mathematical formula} Thus, by Observation 93(3), {a mathematical formula}(F′,F)⊨κ(Bσ) and from {a mathematical formula}(F′,F)⊨eU(K,(G′,G)) it follows that {a mathematical formula}(F′,F)⊨κ(Hσ). By another application of Observation 93(3) we obtain that {a mathematical formula}(D′,D)⊨κ(Hσ) and since {a mathematical formula}Hσ=Hπ, it follows that {a mathematical formula}(D′,D)⊨κ(π). Consequently, {a mathematical formula}(D′,D)⊨κ(K).  □
       </paragraph>
       <paragraph label="Proposition 113">
        Let U be a splitting set for an MKNF knowledge base{a mathematical formula}Kand{a mathematical formula}D,{a mathematical formula}D′,{a mathematical formula}E,{a mathematical formula}E′,{a mathematical formula}F,{a mathematical formula}F′,{a mathematical formula}G,{a mathematical formula}G′∈Mbe such that the following conditions are satisfied:
       </paragraph>
       <list>
        <list-item label="1.">
         {a mathematical formula}E[U]=D[U]and{a mathematical formula}E′[U]=D′[U];
        </list-item>
        <list-item label="2.">
         {a mathematical formula}F[P∖U]=D[P∖U]and{a mathematical formula}F′[P∖U]=D′[P∖U];
        </list-item>
        <list-item label="3.">
         {a mathematical formula}G[U]=D[U]and{a mathematical formula}G′[U]=D′[U].
        </list-item>
       </list>
       <paragraph label="Proof">
        Follows by Lemma 111, Lemma 112.  □
       </paragraph>
       <paragraph label="Corollary 114">
        Let U be a splitting set for an MKNF knowledge base{a mathematical formula}Kand{a mathematical formula}M,{a mathematical formula}Xbe MKNF interpretations such that{a mathematical formula}X[U]=M[U]. Then,{a mathematical formula}
       </paragraph>
       <paragraph label="Proof">
        Proposition 113 for {a mathematical formula}D=D′=E=E′=F=F′=M and {a mathematical formula}G=G′=X implies that{a mathematical formula} The claim now follows from Observation 91(2).  □
       </paragraph>
       <paragraph label="Corollary 115">
        Let U be a splitting set for an MKNF knowledge base{a mathematical formula}Kand{a mathematical formula}M,{a mathematical formula}X,{a mathematical formula}Ybe MKNF interpretations such that{a mathematical formula}X[U]=M[U]and{a mathematical formula}Y[P∖U]=M[P∖U]. Then,{a mathematical formula}
       </paragraph>
       <paragraph label="Proof">
        Proposition 113 for {a mathematical formula}D=D′=M, {a mathematical formula}E=E′=X, {a mathematical formula}F=F′=Y and {a mathematical formula}G=G′=X implies that{a mathematical formula} The claim now follows from Observation 91(2).  □
       </paragraph>
       <paragraph label="Corollary 116">
        Let U be a splitting set for an MKNF knowledge base{a mathematical formula}Kand{a mathematical formula}M,{a mathematical formula}M′,{a mathematical formula}X,{a mathematical formula}X′be MKNF interpretations such that{a mathematical formula}M⊨κ(K),{a mathematical formula}M′[P∖U]=M[P∖U],{a mathematical formula}X[U]=M[U]and{a mathematical formula}X′[U]=M′[U]. Then,{a mathematical formula}
       </paragraph>
       <paragraph label="Proof">
        Proposition 113 for {a mathematical formula}D=M, {a mathematical formula}D′=M′, {a mathematical formula}E=X, {a mathematical formula}E′=X′, {a mathematical formula}F=F′=M, {a mathematical formula}G=G′=X implies that{a mathematical formula} Furthermore, from Corollary 114 we know that {a mathematical formula}M⊨κ(eU(K,X)) is satisfied because {a mathematical formula}M⊨κ(K). Hence, by Observation 91(2) the second disjunct on the right hand side of the above equivalence can be safely omitted and we obtain the claim of this corollary.  □
       </paragraph>
       <paragraph label="Corollary 117">
        Let U be a splitting set for an MKNF knowledge base{a mathematical formula}Kand{a mathematical formula}M,{a mathematical formula}M′,{a mathematical formula}X,{a mathematical formula}Y,{a mathematical formula}Y′be MKNF interpretations such that{a mathematical formula}M⊨κ(K),{a mathematical formula}M′[U]=X[U]=M[U],{a mathematical formula}Y[P∖U]=M[P∖U]and{a mathematical formula}Y′[P∖U]=M′[P∖U]. Then,{a mathematical formula}
       </paragraph>
       <paragraph label="Proof">
        Proposition 113 for {a mathematical formula}D=M, {a mathematical formula}D′=M′, {a mathematical formula}E=E′=M, {a mathematical formula}F=Y, {a mathematical formula}F′=Y′, {a mathematical formula}G=G′=X implies that{a mathematical formula} Furthermore, from Corollary 114 we know that {a mathematical formula}M⊨κ(bU(K)) is satisfied because {a mathematical formula}M⊨κ(K). Hence, by Observation 91(2), the first disjunct on the right hand side of the above equivalence can be safely omitted and we obtain the claim of this corollary.  □
       </paragraph>
       <paragraph label="Corollary 118">
        Let U be a splitting set for an MKNF knowledge base{a mathematical formula}Kand{a mathematical formula}M,{a mathematical formula}M′,{a mathematical formula}X,{a mathematical formula}X′be MKNF interpretations such that{a mathematical formula}X[U]=M[U]and{a mathematical formula}X′[U]=M′[U]. Then,{a mathematical formula}
       </paragraph>
       <paragraph label="Proof">
        Proposition 113 for {a mathematical formula}D=M, {a mathematical formula}D′=M′, {a mathematical formula}E=X, {a mathematical formula}E′=X′, {a mathematical formula}F=G=M, {a mathematical formula}F′=G′=M′ implies that{a mathematical formula} The claim of this corollary follows directly from this equivalence. □
       </paragraph>
       <paragraph label="Corollary 119">
        Let U be a splitting set for an MKNF knowledge base{a mathematical formula}Kand{a mathematical formula}M,{a mathematical formula}M′,{a mathematical formula}X,{a mathematical formula}Y,{a mathematical formula}Y′be MKNF interpretations such that{a mathematical formula}M′[U]=X[U]=M[U],{a mathematical formula}Y[P∖U]=M[P∖U]and{a mathematical formula}Y′[P∖U]=M′[P∖U]. Then,{a mathematical formula}
       </paragraph>
       <paragraph label="Proof">
        Proposition 113 for {a mathematical formula}D=M, {a mathematical formula}D′=M′, {a mathematical formula}E=E′=M, {a mathematical formula}F=Y, {a mathematical formula}F′=Y′, {a mathematical formula}G=G′=X implies that{a mathematical formula} The claim of this corollary follows from this equivalence by Observation 91(2).  □
       </paragraph>
       <paragraph label="Proposition 120">
        Let U be a splitting set for an MKNF knowledge base{a mathematical formula}K,{a mathematical formula}Man MKNF model of{a mathematical formula}Kand{a mathematical formula}X=σ(M,U). Then{a mathematical formula}Xis an MKNF model of{a mathematical formula}bU(K).
       </paragraph>
       <paragraph label="Proof">
        By Observation 95(3) we know that {a mathematical formula}M⊆X and that {a mathematical formula}X is saturated relative to U. By Observation 91(5), {a mathematical formula}X is an MKNF model of {a mathematical formula}bU(K) if and only if {a mathematical formula}X⊨κ(bU(K)) and for every {a mathematical formula}X′⊋X it holds that {a mathematical formula}(X′,X)⊭κ(bU(K)). The former follows directly from Corollary 115. To verify the latter, pick some {a mathematical formula}X′⊋X. By Observation 97(2) there exists the greatest MKNF interpretation {a mathematical formula}M′ that coincides with {a mathematical formula}X′ on U (i.e. {a mathematical formula}M′[U]=X′[U]) and with {a mathematical formula}M on {a mathematical formula}P∖U (i.e. {a mathematical formula}M′[P∖U]=M[P∖U]) and which includes {a mathematical formula}X′∩M. Hence,{a mathematical formula} Furthermore, we know that {a mathematical formula}X is saturated relative to U, so we can use Observation 95(1) to conclude that{a mathematical formula} Consequently, by (C.1), (C.2) and Observation 93(1), we obtain {a mathematical formula}M⊊M′. This, together with the assumption that {a mathematical formula}M is an MKNF model of {a mathematical formula}K, implies that {a mathematical formula}(M′,M)⊭κ(K). We can now apply Corollary 116 to conclude that {a mathematical formula}(X′,X)⊭κ(bU(K)), which is the desired conclusion.  □
       </paragraph>
       <paragraph label="Proposition 121">
        Let U be a splitting set for an MKNF knowledge base{a mathematical formula}K,{a mathematical formula}Man MKNF model of{a mathematical formula}K,{a mathematical formula}X=σ(M,U)and{a mathematical formula}Y=σ(M,P∖U). Then{a mathematical formula}Yis an MKNF model of{a mathematical formula}eU(K,X).
       </paragraph>
       <paragraph label="Proof">
        By Observation 95(3) we know that {a mathematical formula}M⊆Y and that {a mathematical formula}Y is saturated relative to {a mathematical formula}P∖U. By Observation 91(5), {a mathematical formula}Y is an MKNF model of {a mathematical formula}eU(K,X) if and only if {a mathematical formula}Y⊨κ(eU(K,X)) and for every {a mathematical formula}Y′⊋Y it holds that {a mathematical formula}(Y′,Y)⊭κ(eU(K,X)). The former follows directly from Corollary 115. To verify the latter, pick some {a mathematical formula}Y′⊋Y. By Observation 97(2) there exists the greatest MKNF interpretation {a mathematical formula}M′ that coincides with {a mathematical formula}M on U (i.e. {a mathematical formula}M′[U]=M[U]) and with {a mathematical formula}Y′ on {a mathematical formula}P∖U (i.e. {a mathematical formula}M′[P∖U]=Y′[P∖U]) and which includes {a mathematical formula}M∩Y′. Hence,{a mathematical formula} Furthermore, we know that {a mathematical formula}Y is saturated relative to {a mathematical formula}P∖U, so we can use Observation 95(1) to conclude that{a mathematical formula} Consequently, by (C.3), (C.4) and Observation 93(1), we obtain {a mathematical formula}M⊊M′. This, together with the assumption that {a mathematical formula}M is an MKNF model of {a mathematical formula}K, implies that {a mathematical formula}(M′,M)⊭κ(K). We can now apply Corollary 117 to conclude that {a mathematical formula}(Y′,Y)⊭κ(eU(K,X)), which is the desired conclusion.  □
       </paragraph>
       <paragraph label="Proposition 122">
        Let U be a splitting set for an MKNF knowledge base{a mathematical formula}Kand{a mathematical formula}(X,Y)a solution to{a mathematical formula}Kw.r.t. U. Then{a mathematical formula}X∩Yis an MKNF model of{a mathematical formula}K.
       </paragraph>
       <paragraph label="Proof">
        Let {a mathematical formula}K=(O,P) and {a mathematical formula}M=X∩Y. In order to show that {a mathematical formula}M is an MKNF model of {a mathematical formula}K, we need to prove that {a mathematical formula}M⊨κ(K) and that for every {a mathematical formula}M′⊋M it holds that {a mathematical formula}(M′,M)⊭κ(K). We verify the two conditions separately.We know that {a mathematical formula}X is an MKNF model of {a mathematical formula}bU(K), so, by Observation 95(2), {a mathematical formula}X is saturated relative to U. Similarly, since {a mathematical formula}Y is an MKNF model of {a mathematical formula}eU(K,X), it must be saturated relative to {a mathematical formula}P∖U. Hence, by Observation 97(2), {a mathematical formula}M is semi-saturated relative to U, {a mathematical formula}M[U]=X[U] and {a mathematical formula}M[P∖U]=Y[P∖U].Since {a mathematical formula}(X,Y) is a solution to {a mathematical formula}K w.r.t. U, {a mathematical formula}X must an MKNF model of {a mathematical formula}bU(K) and {a mathematical formula}Y an MKNF model of {a mathematical formula}eU(K,X). So {a mathematical formula}X⊨κ(bU(K)) and {a mathematical formula}Y⊨κ(eU(K,X)). Consequently, by Corollary 115, {a mathematical formula}M⊨κ(K).Now take some MKNF interpretation {a mathematical formula}M′⊋M and let {a mathematical formula}X′=X∪M′ and {a mathematical formula}Y′=Y∪M′. We already inferred that {a mathematical formula}M is semi-saturated relative to U, which means that by Observation 97(1) one of the following cases must occur:
       </paragraph>
       <list>
        <list-item label="a)">
         If {a mathematical formula}M′[U]⊋M[U], then{a mathematical formula} so Observation 93(1) implies that {a mathematical formula}X′⊋X. Hence, since {a mathematical formula}X is an MKNF model of {a mathematical formula}bU(K), we infer that {a mathematical formula}(X′,X)⊭κ(bU(K)) and by Corollary 118 we obtain {a mathematical formula}(M′,M)⊭κ(K) as desired.
        </list-item>
        <list-item label="b)">
         If {a mathematical formula}M′[U]=M[U] and {a mathematical formula}M′[P∖U]⊋M[P∖U], then {a mathematical formula}X′[U]=M′[U]=M[U] and{a mathematical formula} so Observation 93(1) implies that {a mathematical formula}Y′⊋Y. Hence, since {a mathematical formula}Y is an MKNF model of {a mathematical formula}eU(K,X), we infer that {a mathematical formula}(Y′,Y)⊭κ(eU(K,X)) and by Corollary 119 we obtain {a mathematical formula}(M′,M)⊭κ(K) as desired. □
        </list-item>
       </list>
       <paragraph label="Theorem 123">
        Splitting set theorem for MKNF knowledge basesLet U be a splitting set for an MKNF knowledge base{a mathematical formula}K. An MKNF interpretation{a mathematical formula}Mis an MKNF model of{a mathematical formula}Kif and only if{a mathematical formula}M=X∩Yfor some solution{a mathematical formula}(X,Y)to{a mathematical formula}Kw.r.t. U.
       </paragraph>
       <paragraph label="Proof">
        First suppose that {a mathematical formula}M is an MKNF model of {a mathematical formula}K. By Proposition 120 we obtain that {a mathematical formula}X=σ(M,U) is an MKNF model of {a mathematical formula}bU(K) and by Proposition 121 that {a mathematical formula}Y=σ(M,P∖U) is an MKNF model of {a mathematical formula}eU(K,X). Furthermore, by Observation 95(3), {a mathematical formula}X[U]=M[U] and {a mathematical formula}X is saturated relative to U, {a mathematical formula}Y[P∖U]=M[P∖U] and {a mathematical formula}Y is saturated relative to {a mathematical formula}P∖U, and {a mathematical formula}M⊆X∩Y. To prove the converse inclusion, note that the following holds by Observation 97(2):{a mathematical formula}{a mathematical formula} Suppose that {a mathematical formula}M⊊X∩Y. Then, since {a mathematical formula}M is an MKNF model of {a mathematical formula}K, {a mathematical formula}(X∩Y,M)⊭κ(K) and by Proposition 113 for {a mathematical formula}D=M, {a mathematical formula}D′=X∩Y, {a mathematical formula}E=E′=F=F′=M, {a mathematical formula}G=G′=X, we obtain{a mathematical formula} However, Observation 91(2) and Corollary 114 now entail that {a mathematical formula}M⊭κ(K), a conflict with the assumption that {a mathematical formula}M is an MKNF model of {a mathematical formula}K. Consequently, {a mathematical formula}M=X∩Y.The converse implication follows directly from Proposition 122. □
       </paragraph>
       <paragraph label="Corollary 124">
        Let U be a splitting set for an MKNF knowledge base{a mathematical formula}Kand{a mathematical formula}M∈M. If{a mathematical formula}Mis an MKNF model of{a mathematical formula}K, then the pair{a mathematical formula}(σ(M,U),σ(M,P∖U))is a solution to{a mathematical formula}Kw.r.t. U,{a mathematical formula}M=σ(M,U)∩σ(M,P∖U)and{a mathematical formula}Mis semi-saturated relative to U.
       </paragraph>
       <paragraph label="Proof">
        This is a consequence of the proof of Theorem 123 and of Observation 97(2).  □
       </paragraph>
      </section>
      <section label="C.1.2">
       <section-title>
        Splitting sequence theorem
       </section-title>
       <paragraph label="Remark 125">
        Solutions to an MKNF knowledge base {a mathematical formula}K w.r.t. a splitting sequence {a mathematical formula}(U,P) are the same as the solutions to {a mathematical formula}K w.r.t. the splitting set U.Let {a mathematical formula}U=〈Uα〉α&lt;μ be a splitting sequence for an MKNF knowledge base {a mathematical formula}K, and let {a mathematical formula}〈Xα〉α&lt;μ be a sequence of MKNF interpretations. Then,{a mathematical formula}{a mathematical formula}Furthermore, if X is a solution to {a mathematical formula}K w.r.t. U, then {a mathematical formula}X0 is saturated relative to {a mathematical formula}U0 and for every α such that {a mathematical formula}α+1&lt;μ, {a mathematical formula}Xα+1 is saturated relative to {a mathematical formula}Uα+1∖Uα. Also note that for any limit ordinal α, {a mathematical formula}Xα=IL, so {a mathematical formula}Xα is saturated relative to any set of predicate symbols.The proofs in this section follow the same pattern as those in [92].
       </paragraph>
       <paragraph label="Lemma 126">
        Let{a mathematical formula}〈Uα〉α&lt;μbe a sequence of sets of predicate symbols and{a mathematical formula}〈Xα〉α&lt;μbe a sequence of members of{a mathematical formula}Msuch that for all{a mathematical formula}α&lt;μ,{a mathematical formula}Xαis saturated relative to{a mathematical formula}Uα. Then{a mathematical formula}⋂α&lt;μXαis saturated relative to{a mathematical formula}⋃α&lt;μUα.
       </paragraph>
       <paragraph label="Proof">
        Let {a mathematical formula}U=⋃α&lt;μUα and {a mathematical formula}X=⋂α&lt;μXα and suppose that {a mathematical formula}I[U] belongs to {a mathematical formula}X[U]. Then there is some {a mathematical formula}J∈X such that {a mathematical formula}I[U]=J[U]. This means that for every ground atom p with {a mathematical formula}pr(p)⊆U,{a mathematical formula} We need to show that I belongs to {a mathematical formula}X. Take some {a mathematical formula}β&lt;μ and some atom q such that {a mathematical formula}pr(q)⊆Uβ. Since {a mathematical formula}Uβ is a subset of U, we obtain{a mathematical formula} It follows that {a mathematical formula}I[Uβ]=J[Uβ] and since {a mathematical formula}J∈X⊆Xβ, we conclude that {a mathematical formula}I[Uβ]∈Xβ[Uβ]. Moreover, {a mathematical formula}Xβ is saturated relative to {a mathematical formula}Uβ, so {a mathematical formula}I∈Xβ. Since the choice of β was arbitrary, I belongs to {a mathematical formula}Xβ for all {a mathematical formula}β&lt;μ. Thus, {a mathematical formula}I∈X as desired.  □
       </paragraph>
       <paragraph label="Definition 127">
        Saturation sequence induced by a splitting sequenceLet {a mathematical formula}U=〈Uα〉α&lt;μ be a monotone, continuous sequence of sets of predicate symbols. The saturation sequence induced by U is the sequence {a mathematical formula}A=〈Aα〉α&lt;μ where
       </paragraph>
       <list>
        <list-item label="•">
         {a mathematical formula}A0=U0;
        </list-item>
        <list-item label="•">
         for any ordinal α such that {a mathematical formula}α+1&lt;μ, {a mathematical formula}Aα+1=Uα+1∖Uα;
        </list-item>
        <list-item label="•">
         for any limit ordinal α, {a mathematical formula}Aα=∅.
        </list-item>
       </list>
       <paragraph label="Lemma 128">
        Let{a mathematical formula}U=〈Uα〉α&lt;μbe a splitting sequence for an MKNF knowledge base{a mathematical formula}K,{a mathematical formula}A=〈Aα〉α&lt;μthe saturation sequence induced by U and{a mathematical formula}X=〈Xα〉α&lt;μa sequence of members of{a mathematical formula}Msuch that{a mathematical formula}Xαis saturated relative to{a mathematical formula}Aαfor every{a mathematical formula}α&lt;μ. Then the following holds for all ordinals α, β such that{a mathematical formula}β&lt;α&lt;μ:
       </paragraph>
       <list>
        <list-item label="•">
         {a mathematical formula}⋂γ≤βXγis saturated relative to{a mathematical formula}Uβ;
        </list-item>
        <list-item label="•">
         {a mathematical formula}⋂β&lt;γ≤αXγis saturated relative to{a mathematical formula}Uα∖Uβ;
        </list-item>
        <list-item label="•">
         {a mathematical formula}⋂α&lt;γ&lt;μXγis saturated relative to{a mathematical formula}P∖Uα.
        </list-item>
       </list>
       <paragraph label="Proof">
        By Lemma 126 we obtain that {a mathematical formula}⋂γ≤βXγ is saturated relative to{a mathematical formula} The same lemma implies that {a mathematical formula}⋂β&lt;γ≤αXγ must be saturated relative to{a mathematical formula} and that {a mathematical formula}⋂α&lt;γ&lt;μXγ must be saturated relative to{a mathematical formula}  □
       </paragraph>
       <paragraph label="Lemma 129">
        Let{a mathematical formula}U=〈Uα〉α&lt;μbe a splitting sequence for an MKNF knowledge base{a mathematical formula}K,{a mathematical formula}A=〈Aα〉α&lt;μthe saturation sequence induced by U,{a mathematical formula}Man MKNF model of{a mathematical formula}Kand{a mathematical formula}X=〈Xα〉α&lt;μa sequence of MKNF interpretations where{a mathematical formula}Xα=σ(M,Aα)for all{a mathematical formula}α&lt;μ. Then for every ordinal{a mathematical formula}α&lt;μit holds that{a mathematical formula}
       </paragraph>
       <paragraph label="Proof">
        We prove by induction on α:
       </paragraph>
       <list>
        <list-item>
         Suppose that {a mathematical formula}α=0. We need to show that {a mathematical formula}X0=σ(M,U0), which follows directly from the definition of {a mathematical formula}X0.
        </list-item>
        <list-item>
         Take some α such that {a mathematical formula}α+1&lt;μ. By the inductive assumption, {a mathematical formula}⋂β≤αXβ=σ(M,Uα). We immediately obtain:{a mathematical formula} It remains to show that {a mathematical formula}σ(M,Uα+1)=σ(M,Uα+1∖Uα)∩σ(M,Uα). We know that {a mathematical formula}Uα+1 is a splitting set for {a mathematical formula}K and that {a mathematical formula}M is an MKNF model of {a mathematical formula}K, so by Corollary 124 it follows that {a mathematical formula}N=σ(M,Uα+1) is an MKNF model of {a mathematical formula}bUα+1(K). Furthermore, {a mathematical formula}Uα is a splitting set for {a mathematical formula}bUα+1(K), so by another application of Corollary 124 we obtain that{a mathematical formula} Moreover, Observation 95(4) yields{a mathematical formula} and{a mathematical formula} The desired conclusion follows from (C.5), (C.6) and (C.7).
        </list-item>
        <list-item>
         Suppose {a mathematical formula}α&lt;μ is a limit ordinal and for all {a mathematical formula}β&lt;α it holds that {a mathematical formula}⋂γ≤βXγ=σ(M,Uβ). First note that{a mathematical formula} and also that{a mathematical formula} From these two identities it can be inferred that {a mathematical formula}σ(M,Uα) is a subset of {a mathematical formula}⋂β≤αXβ. Indeed, if I belongs to {a mathematical formula}σ(M,Uα), then for some {a mathematical formula}J∈M we have {a mathematical formula}J[⋃β&lt;αUβ]=I[⋃β&lt;αUβ], hence for any {a mathematical formula}β0&lt;α and any atom p such that {a mathematical formula}pr(p)⊆Uβ0⊆⋃β&lt;αUβ we obtain{a mathematical formula} which implies that {a mathematical formula}I[Uβ0]=J[Uβ0].To prove the converse inclusion, let {a mathematical formula}Y=⋂β≤αXβ and proceed by contradiction, assuming that {a mathematical formula}σ(M,Uα)⊊Y. By Corollary 124 we know that {a mathematical formula}σ(M,Uα) is an MKNF model of {a mathematical formula}bUα(K), so there is some formula {a mathematical formula}ϕ∈bUα(K) such that{a mathematical formula} Furthermore, since {a mathematical formula}Uα=⋃β&lt;αUβ and {a mathematical formula}pr(ϕ) is a finite set of predicate symbols, there is some {a mathematical formula}β&lt;α such that {a mathematical formula}pr(ϕ) is a subset of {a mathematical formula}Uβ. Consequently, by Observation 93(3), we obtain{a mathematical formula} Let {a mathematical formula}Y1=⋂γ≤βXγ and {a mathematical formula}Y2=⋂β&lt;γ≤αXγ. By Lemma 128, {a mathematical formula}Y1 is saturated relative to {a mathematical formula}Uβ and {a mathematical formula}Y2 is saturated relative to {a mathematical formula}Uα∖Uβ and thus by Observation 95(6) also relative to {a mathematical formula}P∖Uβ. Furthermore, {a mathematical formula}Y=Y1∩Y2, so, by Observation 97(2), {a mathematical formula}Y[Uβ]=Y1[Uβ]. Hence,{a mathematical formula} and the inductive assumption for β yields{a mathematical formula} Finally, since {a mathematical formula}Uβ is a subset of {a mathematical formula}Uα, Observation 95(5) implies that{a mathematical formula} Therefore,{a mathematical formula}Observation 93(3) now implies that {a mathematical formula}(σ(M,Uβ),σ(M,Uβ))⊭ϕ. But at the same time, {a mathematical formula}Uβ is a splitting set for {a mathematical formula}K, so, by Corollary 124, {a mathematical formula}σ(M,Uβ) is an MKNF model of {a mathematical formula}bUβ(K). Since ϕ belongs to {a mathematical formula}bUβ(K), we have reached a contradiction.  □
        </list-item>
       </list>
       <paragraph label="Proposition 130">
        Let{a mathematical formula}U=〈Uα〉α&lt;μbe a splitting sequence for an MKNF knowledge base{a mathematical formula}K,{a mathematical formula}A=〈Aα〉α&lt;μthe saturation sequence induced by U,{a mathematical formula}Man MKNF model of{a mathematical formula}Kand{a mathematical formula}X=〈Xα〉α&lt;μa sequence of MKNF interpretations where{a mathematical formula}Xα=σ(M,Aα)for all{a mathematical formula}α&lt;μ. Then X is a solution to{a mathematical formula}Kw.r.t. U.
       </paragraph>
       <paragraph label="Proof">
        There are four conditions to verify.First, {a mathematical formula}X0 must be an MKNF model of {a mathematical formula}bU0(K). Since {a mathematical formula}U0 is a splitting set for {a mathematical formula}K, Corollary 124 yields that {a mathematical formula}σ(M,U0) is an MKNF model of {a mathematical formula}bU0(K). By definition, {a mathematical formula}X0=σ(M,U0), thus this part of the proof is finished.Second, for any ordinal α such that {a mathematical formula}α+1&lt;μ it must hold that {a mathematical formula}Xα+1 is an MKNF model of{a mathematical formula} By Corollary 124, {a mathematical formula}N=σ(M,Uα+1) is an MKNF model of {a mathematical formula}bUα+1(K). Furthermore, it can be seen that {a mathematical formula}Uα is a splitting set for {a mathematical formula}bUα+1(K), so by another application of Corollary 124, we obtain that {a mathematical formula}σ(N,P∖Uα) is an MKNF model of {a mathematical formula}eUα(bUα+1(K),σ(N,Uα)). Moreover, by Observation 95(4),{a mathematical formula} and also{a mathematical formula}Lemma 129 implies that {a mathematical formula}σ(M,Uα)=⋂β≤αXβ and since {a mathematical formula}Xα+1=σ(M,Uα+1∖Uα), it follows that {a mathematical formula}Xα+1 is an MKNF model of{a mathematical formula}Third, for every limit ordinal {a mathematical formula}α&lt;μ, {a mathematical formula}Xα=IL holds by definition.Fourth, we need to verify that {a mathematical formula}⋂α&lt;μXα≠∅. It follows from the definition of X by Observation 95(3) that {a mathematical formula}M is a subset of {a mathematical formula}Xα for every {a mathematical formula}α&lt;μ. Hence,{a mathematical formula}  □
       </paragraph>
       <paragraph label="Proposition 131">
        Let{a mathematical formula}U=〈Uα〉α&lt;μbe a splitting sequence for an MKNF knowledge base{a mathematical formula}K. If{a mathematical formula}X=〈Xα〉α&lt;μis a solution to{a mathematical formula}Kw.r.t. U, then for all{a mathematical formula}α&lt;μ,{a mathematical formula}⋂β≤αXβis an MKNF model of{a mathematical formula}bUα(K).
       </paragraph>
       <paragraph label="Proof">
        Let {a mathematical formula}Yα=⋂β≤αXβ for every {a mathematical formula}α&lt;μ. We proceed by induction on α:
       </paragraph>
       <list>
        <list-item>
         For {a mathematical formula}α=0 we need to show that {a mathematical formula}Y0=X0 is an MKNF model of {a mathematical formula}bU0(K). This follows directly from the assumptions.
        </list-item>
        <list-item>
         For α such that {a mathematical formula}α+1&lt;μ we need to show that {a mathematical formula}Yα+1 is an MKNF model of {a mathematical formula}bUα+1(K). By the inductive assumption, {a mathematical formula}Yα is an MKNF model of {a mathematical formula}bUα(K). Furthermore,{a mathematical formula} and since X is a solution to {a mathematical formula}K w.r.t. U, {a mathematical formula}Xα+1 is an MKNF model of{a mathematical formula} Since {a mathematical formula}Uα is a splitting set for {a mathematical formula}K, it is also a splitting set for {a mathematical formula}bUα+1(K). Consequently, by Theorem 123, {a mathematical formula}Yα∩Xα+1=Yα+1 is an MKNF model of {a mathematical formula}bUα+1(K).
        </list-item>
        <list-item>
         For a limit ordinal {a mathematical formula}α&lt;μ we need to show that {a mathematical formula}Yα is an MKNF model of {a mathematical formula}bUα(K). First we show that {a mathematical formula}Yα⊨bUα(K) and then that for every {a mathematical formula}Y′⊋Yα it holds that {a mathematical formula}(Y′,Yα)⊭bUα(K).Take some {a mathematical formula}ϕ∈bUα(K) and suppose that {a mathematical formula}β&lt;α is some ordinal such that {a mathematical formula}pr(ϕ)⊆Uβ. We know that {a mathematical formula}Yβ is an MKNF model of {a mathematical formula}bUβ(K), so {a mathematical formula}Yβ⊨ϕ. Furthermore, for every γ such that {a mathematical formula}γ&lt;μ, {a mathematical formula}Xγ+1 is an MKNF model of {a mathematical formula}eUγ(bUγ+1(K),Yγ), so by Observation 95(2), {a mathematical formula}Xγ+1 is saturated relative to {a mathematical formula}Uγ+1∖Uγ. Consequently, by Lemma 128, {a mathematical formula}Yβ=⋂γ≤βXγ is saturated relative to {a mathematical formula}Uβ and {a mathematical formula}⋂β&lt;γ≤αXγ is saturated relative to {a mathematical formula}Uα∖Uβ and, by Observation 95(6), it is also saturated relative to {a mathematical formula}P∖Uβ. Hence, by Observation 97(2), for {a mathematical formula}Yα=Yβ∩⋂β&lt;γ≤αXγ it holds that {a mathematical formula}Yα[Uβ]=Yβ[Uβ], and so {a mathematical formula}Yα⊨ϕ follows from Observation 93(2).Now suppose that {a mathematical formula}Y′⊋Yα. Then there must be some {a mathematical formula}I∈Y′∖Yα. Take some {a mathematical formula}β&lt;α such that {a mathematical formula}I∉Yβ (there must be such β, otherwise {a mathematical formula}I∈Yα). Let {a mathematical formula}Y″=Y′∪Yβ. By the inductive assumption, {a mathematical formula}Yβ is an MKNF model of {a mathematical formula}bUβ(K), so there must be some {a mathematical formula}ϕ∈bUβ(K) such that {a mathematical formula}(Y″,Yβ)⊭ϕ. Furthermore, {a mathematical formula}Yβ[Uβ]=Yα[Uβ] and{a mathematical formula} Consequently, by Observation 93(3), {a mathematical formula}(Y′,Yα)⊭ϕ.  □
        </list-item>
       </list>
       <paragraph label="Lemma 132">
        Let{a mathematical formula}U=〈Uα〉α&lt;μbe a splitting sequence for an MKNF knowledge base{a mathematical formula}Kand let{a mathematical formula}V=〈Vα〉α&lt;μ+1be a sequence of sets of predicate symbols such that for every{a mathematical formula}α&lt;μ,{a mathematical formula}Vα=Uαand{a mathematical formula}Vμ=P. Then V is a splitting sequence for{a mathematical formula}K.Moreover, if{a mathematical formula}X=〈Xα〉α&lt;μis a solution to{a mathematical formula}Kw.r.t. U, then{a mathematical formula}Y=〈Yα〉α&lt;μ+1, where for all{a mathematical formula}α&lt;μ,{a mathematical formula}Yα=Xα, and{a mathematical formula}Yμ=IL, is a solution to{a mathematical formula}Kw.r.t. V.
       </paragraph>
       <paragraph label="Proof">
        It is not difficult to verify that V is monotone, continuous, that every {a mathematical formula}Vα is a splitting set for {a mathematical formula}K and that {a mathematical formula}⋃α&lt;μ+1Vα=P.Now suppose that X is a solution to {a mathematical formula}K w.r.t. U. All the properties of X propagate to Y, so one only needs to check that μ is handled correctly. In case μ is a limit ordinal, we need to show that {a mathematical formula}Yμ=IL, which holds by definition. On the other hand, if μ is a non-limit ordinal, then let β be such that {a mathematical formula}β+1=μ. From {a mathematical formula}⋃α&lt;μUα=P it follows that {a mathematical formula}Uβ=P, so we obtain{a mathematical formula} Consequently, {a mathematical formula}Yμ=IL is its MKNF model.  □
       </paragraph>
       <paragraph label="Theorem 133">
        Splitting sequence theorem for MKNF knowledge basesLet U be a splitting sequence for an MKNF knowledge base{a mathematical formula}K. Then{a mathematical formula}Mis an MKNF model of{a mathematical formula}Kif and only if{a mathematical formula}M=⋂α&lt;μXαfor some solution{a mathematical formula}〈Xα〉α&lt;μto{a mathematical formula}Kw.r.t. U.
       </paragraph>
       <paragraph label="Proof">
        Let {a mathematical formula}U=〈Uα〉α&lt;μ and suppose that A is the saturation sequence induced by U. If {a mathematical formula}M is an MKNF model of {a mathematical formula}K, then it follows by Proposition 130 that there is a solution {a mathematical formula}X=〈Xα〉α&lt;μ to {a mathematical formula}K w.r.t. U where {a mathematical formula}Xα=σ(M,Aα) for all {a mathematical formula}α&lt;μ.Let {a mathematical formula}V=〈Vα〉α&lt;μ+1 and {a mathematical formula}Y=〈Yα〉α&lt;μ+1 where {a mathematical formula}Vα=Uα and {a mathematical formula}Yα=Xα for all {a mathematical formula}α&lt;μ, {a mathematical formula}Vμ=P and {a mathematical formula}Yμ=IL. By Lemma 132, V is a splitting sequence for {a mathematical formula}K and Y is a solution to {a mathematical formula}K w.r.t. V. Thus, by Lemma 129,{a mathematical formula}To prove the converse implication, suppose that X is a solution to {a mathematical formula}K w.r.t. U. Then, by Lemma 132, there is also a solution Y to {a mathematical formula}K w.r.t. {a mathematical formula}V=〈Vα〉α&lt;μ+1 such that for all {a mathematical formula}α&lt;μ, {a mathematical formula}Vα=Uα and {a mathematical formula}Vμ=P. Furthermore,{a mathematical formula} and, by Proposition 131, {a mathematical formula}⋂α≤μYα is an MKNF model of {a mathematical formula}bVμ(K)=bP(K)=K.  □
       </paragraph>
       <paragraph label="Theorem 54">
        Splitting theorem for MKNF knowledge basesThe MKNF models semantics for MKNF knowledge bases satisfies the Abstract Splitting Set Property and the Abstract Splitting Sequence Property.
       </paragraph>
       <paragraph label="Proof">
        Follows from Theorem 123, Theorem 133. □
       </paragraph>
      </section>
     </section>
     <section label="C.2">
      <section-title>
       Ontology updates
      </section-title>
      <paragraph label="Proposition 134">
       Let{a mathematical formula}Tbe a first-order theory, U a splitting sequence for{a mathematical formula}Tand A the saturation sequence induced by U. Then,{a mathematical formula}
      </paragraph>
      <paragraph label="Proof">
       Since U is a splitting sequence for {a mathematical formula}T, for every formula {a mathematical formula}ϕ∈T there exists a unique {a mathematical formula}α&lt;μ such that ϕ belongs to {a mathematical formula}bAα(T). Hence,{a mathematical formula}  □
      </paragraph>
      <paragraph label="Lemma 135">
       Let{a mathematical formula}M,N∈M. Then the following holds:
      </paragraph>
      <list>
       <list-item label="(1)">
        If{a mathematical formula}M⊆N, then{a mathematical formula}M⧫WN=M.
       </list-item>
       <list-item label="(2)">
        If{a mathematical formula}M⊇N, then{a mathematical formula}M⧫WN=N.
       </list-item>
       <list-item label="(3)">
        {a mathematical formula}M⧫WM=M.
       </list-item>
       <list-item label="(4)">
        {a mathematical formula}M⧫WN=∅if and only if{a mathematical formula}M=∅or{a mathematical formula}N=∅.
       </list-item>
      </list>
      <paragraph label="Proof">
       <list>
        <list-item label="(1)">
         For every interpretation I, {a mathematical formula}I&lt;WIJ for every {a mathematical formula}J≠I. Thus, if {a mathematical formula}M⊆N, for all {a mathematical formula}I∈M it holds that {a mathematical formula}I⧫WN={I}. Therefore, {a mathematical formula}M⧫WN=M.
        </list-item>
        <list-item label="(2)">
         For every interpretation I, {a mathematical formula}I&lt;WIJ for every {a mathematical formula}J≠I. So if {a mathematical formula}M⊇N, then every interpretation {a mathematical formula}I∈N⊆M also belongs to {a mathematical formula}M⧫WN. Furthermore, {a mathematical formula}M⧫WN⊆N by construction, so we obtain {a mathematical formula}M⧫WN=N.
        </list-item>
        <list-item label="(3)">
         Follows from (1).
        </list-item>
        <list-item label="(4)">
         The direct implication follows by definition of {a mathematical formula}⧫W. The converse implication follows from (1) and (2). □
        </list-item>
       </list>
      </paragraph>
      <paragraph label="Proposition 136">
       Let{a mathematical formula}T=〈Ti〉i&lt;nbe a sequence of first-order theories with{a mathematical formula}n&gt;0and{a mathematical formula}M=〚◇WT〛. Then{a mathematical formula}M⊨Tn−1.
      </paragraph>
      <paragraph label="Proof">
       Follows by induction on n, due to the fact that {a mathematical formula}M⧫WN⊆N for any {a mathematical formula}M,N∈M.  □
      </paragraph>
      <paragraph label="Proposition 137">
       Let{a mathematical formula}A=〈Aα〉α&lt;μbe a saturation sequence,{a mathematical formula}I,J∈ILand{a mathematical formula}N∈Mbe sequence-saturated relative to A. Then,{a mathematical formula}
      </paragraph>
      <paragraph label="Proof">
       Suppose that {a mathematical formula}J∉(I⧫WN). If {a mathematical formula}J∉N, then since {a mathematical formula}N is sequence-saturated relative to A, there is some {a mathematical formula}α&lt;μ such that {a mathematical formula}J[Aα]∉N[Aα]. But then {a mathematical formula}J[Aα]∉(I[Aα]⧫WN[Aα]), so we reached the desired conclusion.In the principal case we have {a mathematical formula}J∈N, so there exists some {a mathematical formula}K∈N such that {a mathematical formula}K&lt;WIJ. This means that for every predicate symbol {a mathematical formula}P∈P,{a mathematical formula} and for some predicate symbol {a mathematical formula}P0∈P,{a mathematical formula} Since A is a saturation sequence, there is a unique ordinal {a mathematical formula}α&lt;μ such that {a mathematical formula}P0∈Aα. It follows from (C.9) that{a mathematical formula} Furthermore, for any predicate symbol {a mathematical formula}P∈Aα it follows from (C.8) that{a mathematical formula} Finally, for any predicate symbol P that does not belong to {a mathematical formula}Aα,{a mathematical formula} Thus,{a mathematical formula} Therefore, we can conclude that{a mathematical formula} so {a mathematical formula}J[Aα]∉(I[Aα]⧫WN[Aα]) as desired.For the converse implication, suppose that for some {a mathematical formula}α&lt;μ, {a mathematical formula}J[Aα]∉(I[Aα]⧫WN[Aα]). If {a mathematical formula}J[Aα]∉N[Aα], we immediately obtain that {a mathematical formula}J∉N. Consequently, {a mathematical formula}J∉(I⧫WN).It remains to consider the principal case when {a mathematical formula}J[Aα]∈N[Aα]. Then there must be some interpretation {a mathematical formula}K∈N[Aα] such that {a mathematical formula}K&lt;WI[Aα]J[Aα]. Thus, for all predicate symbols {a mathematical formula}P∈P we know that{a mathematical formula} We also know that there is some predicate symbol {a mathematical formula}P0∈P such that{a mathematical formula} Additionally, for every predicate symbol P from {a mathematical formula}P∖Aα it holds that{a mathematical formula} Thus,{a mathematical formula} Consequently, {a mathematical formula}P0∈Aα. Let {a mathematical formula}K′ be an interpretation such that for every ground atom p,{a mathematical formula} It follows that {a mathematical formula}K′[Aα]=K∈N[Aα] and for every ordinal {a mathematical formula}β&lt;μ such that {a mathematical formula}β≠α, {a mathematical formula}K′[Aβ]=J[Aβ]∈N[Aβ], so since {a mathematical formula}N is sequence-saturated relative to A, {a mathematical formula}K′∈N. Take some predicate symbol {a mathematical formula}P∈P and consider the following two cases:
      </paragraph>
      <list>
       <list-item label="a)">
        If {a mathematical formula}P∈Aα, then from (C.10) we obtain{a mathematical formula}
       </list-item>
       <list-item label="b)">
        If {a mathematical formula}P∈P∖Aα, then since {a mathematical formula}K′[P∖Aα]=J[P∖Aα],{a mathematical formula}
       </list-item>
      </list>
      <paragraph label="Proposition 138">
       Let{a mathematical formula}A=〈Aα〉α&lt;μbe a saturation sequence,{a mathematical formula}J∈ILand{a mathematical formula}M,N∈Mbe both sequence-saturated relative to A. Then,{a mathematical formula}
      </paragraph>
      <paragraph label="Proof">
       By definition, {a mathematical formula}J∈(M⧫WN) if and only if for some {a mathematical formula}I∈M, {a mathematical formula}J∈(I⧫WN). By Proposition 137, this holds if and only if{a mathematical formula} At the same time, the right hand side of our equivalence is true if and only if for some sequence of interpretations {a mathematical formula}〈Iα〉α&lt;μ the following holds:{a mathematical formula} It remains to show that (C.12) is equivalent to (C.13). Indeed, (C.12) implies (C.13) by putting {a mathematical formula}Iα=I for all {a mathematical formula}α&lt;μ. Now suppose that (C.13) holds and let I be an interpretation such that for every ground atom p,{a mathematical formula} Then it holds for every {a mathematical formula}α&lt;μ that {a mathematical formula}I[Aα]=Iα[Aα]∈M[Aα]. Since {a mathematical formula}M is sequence-saturated relative to A, this implies that {a mathematical formula}I∈M. Moreover, {a mathematical formula}J[Aα]∈(I[Aα]⧫WN[Aα]). As a consequence, (C.12) is satisfied and our proof is finished.  □
      </paragraph>
      <paragraph label="Proposition 139">
       Let{a mathematical formula}A=〈Aα〉α&lt;μbe a saturation sequence and{a mathematical formula}M,N∈Mbe both sequence-saturated relative to A. Then,{a mathematical formula}
      </paragraph>
      <paragraph label="Proof">
       First note that if {a mathematical formula}M=∅ or {a mathematical formula}N=∅, then the equivalence is trivially satisfied since both {a mathematical formula}(M[Aα]⧫WN[Aα])=∅ and {a mathematical formula}(σ(M,Aα)⧫Wσ(N,Aα))=∅. Thus, we can assume that {a mathematical formula}M and {a mathematical formula}N are MKNF interpretations.By applying Proposition 138 to {a mathematical formula}σ(M,Aα) and {a mathematical formula}σ(N,Aα) it follows that for every interpretation J,{a mathematical formula} By Observation 95(7) we obtain that whenever {a mathematical formula}β≠α, {a mathematical formula}σ(M,Aα)[Aβ]=IL[Aβ] and {a mathematical formula}σ(N,Aα)[Aβ]=IL[Aβ], so by Lemma 135(3) we can conclude that {a mathematical formula}σ(M,Aα)[Aβ]⧫Wσ(N,Aα)[Aβ]=IL[Aβ]. Thus, condition (C.14) gets simplified to{a mathematical formula} Furthermore, by Observation 95(5), {a mathematical formula}σ(M,Aα)[Aα]=M[Aα] and {a mathematical formula}σ(N,Aα)[Aα]=N[Aα], so{a mathematical formula} This completes our proof.  □
      </paragraph>
      <paragraph label="Corollary 140">
       Let{a mathematical formula}A=〈Aα〉α&lt;μbe a saturation sequence and{a mathematical formula}M,N∈Mbe both sequence-saturated relative to A. Then,{a mathematical formula}
      </paragraph>
      <paragraph label="Proof">
       Follows from Proposition 138, Proposition 139.  □
      </paragraph>
      <paragraph label="Lemma 141">
       Let A be a set of predicate symbols,{a mathematical formula}I,J∈ILand{a mathematical formula}N∈Mbe saturated relative to A. If{a mathematical formula}J∈I⧫WN, then I coincides with J on{a mathematical formula}P∖A.
      </paragraph>
      <paragraph label="Proof">
       If {a mathematical formula}J∈I⧫WN, then {a mathematical formula}J∈N. Let {a mathematical formula}J′ be an interpretation such that for every ground atom p,{a mathematical formula} Then {a mathematical formula}J′[A]=J[A]∈N, so since {a mathematical formula}N is saturated relative to A, {a mathematical formula}J′ belongs to {a mathematical formula}N. Furthermore, for any predicate symbol {a mathematical formula}P∈A, {a mathematical formula}PJ′÷PI=PJ÷PI and for any predicate symbol {a mathematical formula}P∈P∖A, {a mathematical formula}PJ′÷PI=∅⊆PJ÷PI. If this inclusion was proper for some predicate symbol P, then we would obtain that {a mathematical formula}J′&lt;WIJ holds, contrary to the assumption that J belongs to {a mathematical formula}I⧫WN. Thus, for all predicate symbols {a mathematical formula}P∈P∖A, {a mathematical formula}PJ÷PI must be equal to ∅. It follows that {a mathematical formula}J[P∖A]=J′[P∖A]=I[P∖A], which is the desired result.  □
      </paragraph>
      <paragraph label="Proposition 142">
       Let{a mathematical formula}T=〈Ti〉i&lt;nbe a finite sequence of first-order theories, U a splitting sequence for T and{a mathematical formula}A=〈Aα〉α&lt;μthe saturation sequence induced by U. Then,{a mathematical formula}
      </paragraph>
      <paragraph label="Proof">
       We prove by induction on n.
      </paragraph>
      <list>
       <list-item>
        If {a mathematical formula}n=1, then {a mathematical formula}〚◇WT〛=〚T0〛 and for every {a mathematical formula}α&lt;μ, {a mathematical formula}〚◇WbAα(T)〛=〚bAα(T0)〛. The claim thus follows from Proposition 134.
       </list-item>
       <list-item>
        We assume that the claim holds for n and prove it for {a mathematical formula}n+1. Let {a mathematical formula}T′=〈Ti〉i&lt;n+1. By definition of {a mathematical formula}◇W we obtain{a mathematical formula} Let {a mathematical formula}M=〚◇WT〛, {a mathematical formula}N=〚Tn〛 and for every {a mathematical formula}α&lt;μ, {a mathematical formula}Mα=〚◇WbAα(T)〛 and {a mathematical formula}Nα=〚bAα(Tn)〛. Our goal is to prove that{a mathematical formula} We obtain {a mathematical formula}M=⋂α&lt;μMα and {a mathematical formula}N=⋂α&lt;μNα by the inductive assumption and by Proposition 134, respectively. Also, due to Theorem 71 and Proposition 69, both {a mathematical formula}Mα and {a mathematical formula}Nα are saturated relative to {a mathematical formula}Aα.If {a mathematical formula}M=∅ or {a mathematical formula}N=∅, then, by Lemma 135(4), {a mathematical formula}M⧫WN=∅ and it follows from Observation 100(2) that for some {a mathematical formula}α&lt;μ, either {a mathematical formula}Mα=∅ or {a mathematical formula}Nα=∅. In either case {a mathematical formula}Mα⧫WNα=∅ and the desired equation is satisfied.In the principal case, both {a mathematical formula}M≠∅ and {a mathematical formula}N≠∅. Thus, we can use Observation 100(2) to conclude that {a mathematical formula}Mα=σ(M,Aα) and {a mathematical formula}Nα=σ(N,Aα) for all {a mathematical formula}α&lt;μ and, by Observation 100(1), {a mathematical formula}M and {a mathematical formula}N are sequence-saturated relative to A. Furthermore, we can apply Corollary 140 to obtain the desired equation:{a mathematical formula}
       </list-item>
      </list>
      <paragraph label="Theorem 57">
       Splitting theorem for Winslett's first-order operatorThe semantics for sequences of first-order theories induced by Winslett's first-order operator{a mathematical formula}⋄Wsatisfies the Abstract Splitting Set Property and the Abstract Splitting Sequence Property.
      </paragraph>
      <paragraph label="Proof">
       Let {a mathematical formula}U=〈Uα〉α&lt;μ be a splitting sequence for a sequence of first-order theories T and {a mathematical formula}A=〈Aα〉α&lt;μ be the saturation sequence induced by U. The following holds for any {a mathematical formula}X∈M and all ordinals α with {a mathematical formula}α+1&lt;μ:{a mathematical formula}{a mathematical formula} Therefore, the Abstract Splitting Sequence Property follows from Proposition 142. The Abstract Splitting Set Property for a splitting set U follows from the splitting sequence property applied to the splitting sequence {a mathematical formula}〈U,P〉.  □
      </paragraph>
     </section>
     <section label="C.3">
      <section-title>
       Rule updates
      </section-title>
      <paragraph label="Theorem 60">
       Splitting theorem for rule updatesThe{a mathematical formula}RD-semantics for rule updates satisfies the Abstract Splitting Set Property and the Abstract Splitting Sequence Property.
      </paragraph>
      <paragraph label="Proof (sketch)">
       Let P be a DLP. We need to prove that J is an {a mathematical formula}RD-model of P if and only if {a mathematical formula}J=⋃α&lt;μJα where for every {a mathematical formula}α&lt;μ, {a mathematical formula}Jα is an {a mathematical formula}RD-model of {a mathematical formula}Pα and
       <list>
        {a mathematical formula}P0=bU0(P).For any ordinal α such that {a mathematical formula}α+1&lt;μ, {a mathematical formula}Pα+1=eUα(bUα+1(P),⋃β≤αJβ).For any limit ordinal {a mathematical formula}α&lt;μ, {a mathematical formula}Pα=〈∅〉α&lt;μ.What remains is to additionally handle the set of default assumptions. More particularly, if
       </list>
       <paragraph>
        {a mathematical formula}A=〈Aα〉α&lt;μ is the saturation sequence induced by U, then the unconstrained set of default assumptions {a mathematical formula}def(Pα,Jα) usually introduces rules with predicate symbols outside {a mathematical formula}Aα. In order to overcome this problem, for every DLP Q, interpretation K and set of predicate symbols B we introduce the set{a mathematical formula} It is not difficult to se that as long as {a mathematical formula}B⊇pr(Q), {a mathematical formula}def(Q,K) can be replaced by {a mathematical formula}def(Q,K,B) in the definition of an {a mathematical formula}RD-model of Q, if accompanied by a suitable restriction in the definition of {a mathematical formula}K′, i.e. {a mathematical formula}K′=K∪{∼l|l∈LitsG∖K∧pr(l)⊆B}. Let{a mathematical formula}{a mathematical formula} Similarly as before, it follows that
       </paragraph>
       <list>
        <list-item label="•">
         {a mathematical formula}Q0′=bU0(Q′).
        </list-item>
        <list-item label="•">
         For every ordinal α such that {a mathematical formula}α+1&lt;μ, {a mathematical formula}Qα+1′=eUα(bUα+1(Q′),⋃β≤αJβ).
        </list-item>
        <list-item label="•">
         For every limit ordinal α, {a mathematical formula}Qα′=∅.
        </list-item>
       </list>
       <paragraph>
        Hence, by the results of [71], {a mathematical formula}J′=least(Q′) if and only if {a mathematical formula}J′=⋃α&lt;μJα′ where for every {a mathematical formula}α&lt;μ, {a mathematical formula}Jα′=least(Qα′). The desired result thus follows by the definition of {a mathematical formula}RD-models.  □
       </paragraph>
      </paragraph>
     </section>
    </section>
    <section label="Appendix D">
     <section-title>
      Proofs: layered dynamic MKNF knowledge bases
     </section-title>
     <paragraph>
      In the following we present proofs of results from Section 5, implicitly working under the same assumptions as those imposed in that section. That is, we constrain ourselves to a generalised atom base that consists of objective literals, meaning that MKNF programs coincide with logic programs, and we assume that every rule is ground. In the proofs we also implicitly use many of the results presented in Appendix A.
     </paragraph>
     <paragraph>
      The definition of a solution to a DMKB K w.r.t. a layering splitting sequence is an instantiation of the abstract definition in Section 4.1. For the sake of completeness, we formulate it here once again, and use solutions to establish the concept of a {a mathematical formula}(⋄,S)-dynamic MKNF model of K w.r.t. a layering splitting sequence. We note that the use of limit ordinals is only required to fit the abstract definition (Definition 49). Note however, that because layerings of DMKBs are based on predicate symbols, any finite DMKB will have a finite layering splitting sequence.
     </paragraph>
     <paragraph label="Definition 143">
      Solution to a layered DMKBLet {a mathematical formula}K=〈(Oi,Pi)〉i&lt;n be a DMKB and U a layering splitting sequence for K. A solution to K w.r.t. U is a sequence of MKNF interpretations {a mathematical formula}〈Xα〉α&lt;μ such that
     </paragraph>
     <list>
      <list-item label="1.">
       {a mathematical formula}X0 is a {a mathematical formula}(⋄,S)-dynamic MKNF model of {a mathematical formula}bU0(K).
      </list-item>
      <list-item label="2.">
       For any ordinal α such that {a mathematical formula}α+1&lt;μ, {a mathematical formula}Xα+1 is a {a mathematical formula}(⋄,S)-dynamic MKNF model of{a mathematical formula}
      </list-item>
      <list-item label="3.">
       For any limit ordinal α, {a mathematical formula}Xα=IL.
      </list-item>
      <list-item label="4.">
       {a mathematical formula}⋂α&lt;μXα≠∅.
      </list-item>
     </list>
     <section label="D.1">
      <section-title>
       Independence of splitting sequence
      </section-title>
      <paragraph label="Theorem 66">
       Language conservation and fact update for rule updatesThe{a mathematical formula}RD-semantics for rule updates conserves the language and respects fact update.
      </paragraph>
      <paragraph label="Proof (sketch)">
       Language conservation is an immediate consequence of the definition of the {a mathematical formula}RD-semantics and of basic properties of the least model of a definite program.As for fact update, let {a mathematical formula}P=〈Pi〉i&lt;n be a sequence of consistent sets of facts. When sets of facts are considered, the set of rejected rules is independent of the model candidate J. Furthermore, the following set of unrejected rules remains:{a mathematical formula} Since {a mathematical formula}Pj is consistent for all {a mathematical formula}j&lt;n, this set must also be consistent (all inconsistencies across different components of P have been resolved). Thus, P has the desired {a mathematical formula}RD-model{a mathematical formula}  □
      </paragraph>
      <paragraph label="Proposition 69">
       Let A be a set of predicate symbols and{a mathematical formula}Ta first-order theory such that{a mathematical formula}pr(T)⊆A. Then{a mathematical formula}〚T〛is saturated relative to A.
      </paragraph>
      <paragraph label="Proof">
       If {a mathematical formula}〚T〛=∅, then this follows from the fact that ∅ is trivially saturated relative to any set of predicate symbols. Otherwise, {a mathematical formula}〚T〛 is the MKNF model of {a mathematical formula}T and it suffices to use Observation 95(2).  □
      </paragraph>
      <paragraph label="Definition 144">
       Winslett's operator on modelsLet I be an interpretation and {a mathematical formula}M,N∈M. We define the operator {a mathematical formula}⧫W as follows:{a mathematical formula}{a mathematical formula}
      </paragraph>
      <paragraph label="Remark 145">
       Note that the above definition is compatible with the definition of Winslett's operator {a mathematical formula}⋄W defined in Section 2.5, which operates on first-order theories, in the following sense: for all first-order theories {a mathematical formula}T, {a mathematical formula}U it holds that {a mathematical formula}〚T⋄WU〛=〚T〛⧫W〚U〛.
      </paragraph>
      <paragraph label="Lemma 146">
       Let A be a set of predicate symbols and{a mathematical formula}M,N∈Mbe both saturated relative to A. Then{a mathematical formula}M⧫WNis also saturated relative to A.
      </paragraph>
      <paragraph label="Proof">
       Suppose that J is such that {a mathematical formula}J[A]∈(M⧫WN)[A] but {a mathematical formula}J∉(M⧫WN). Then there exists some interpretation {a mathematical formula}J′∈(M⧫WN) such that {a mathematical formula}J′[A]=J[A]. This also implies that {a mathematical formula}J′∈N and since {a mathematical formula}N is saturated relative to A, we obtain that {a mathematical formula}J∈N. Furthermore, there exists some interpretation {a mathematical formula}I∈M such that {a mathematical formula}J′∈(I⧫WN). Let {a mathematical formula}I′ be an interpretation such that for every ground atom p,{a mathematical formula} Then {a mathematical formula}I′[A]=I[A] and {a mathematical formula}I′[P∖A]=J[P∖A] and since {a mathematical formula}M is saturated relative to A, {a mathematical formula}I′∈M. Since {a mathematical formula}J∉(M⧫WN), there must exist some interpretation {a mathematical formula}J″∈N such that {a mathematical formula}J″&lt;WI′J. This means that for every predicate symbol {a mathematical formula}P∈A,{a mathematical formula} and for every predicate symbol {a mathematical formula}P∈P∖A,{a mathematical formula} because {a mathematical formula}I′ coincides with J on {a mathematical formula}P∖A. Also, for some predicate symbol {a mathematical formula}P0,{a mathematical formula} Since this is impossible if {a mathematical formula}P0 belongs to {a mathematical formula}P∖A, {a mathematical formula}P0 must belong to A. Let {a mathematical formula}J‴ be an interpretation such that for every ground atom p,{a mathematical formula} By (D.2), for predicate symbols {a mathematical formula}P∈A it holds that{a mathematical formula} and for predicate symbols {a mathematical formula}P∈P∖A we obtain{a mathematical formula} Also, for {a mathematical formula}P0 it holds that {a mathematical formula}P0J‴÷P0I=P0J″÷P0I′⊊P0J÷P0I′=P0J′÷P0I. As a consequence, {a mathematical formula}J‴&lt;WIJ′. Furthermore, since {a mathematical formula}J‴[A]=J″[A]∈N[A], it follows that {a mathematical formula}J‴∈N, so we arrived at a conflict with the assumption that {a mathematical formula}J′∈(I⧫WN).  □
      </paragraph>
      <paragraph label="Theorem 71">
       Language conservation and fact update for ontology updatesWinslett's first-order update operator{a mathematical formula}⋄Wconserves the language and respects fact update.
      </paragraph>
      <paragraph label="Proof">
       Language conservation follows by induction on i from Proposition 69 and Lemma 146.As for fact update, let {a mathematical formula}T=〈Ti〉i&lt;n be a finite sequence of consistent sets of ground objective literals. We prove by induction on n:
      </paragraph>
      <list>
       <list-item>
        If {a mathematical formula}n=1, then {a mathematical formula}〚◇WT〛=〚T0〛=〚{l∈LitsG|l∈T0}〛, which establishes the claim.
       </list-item>
       <list-item>
        Let {a mathematical formula}T=〈Ti〉i&lt;n, {a mathematical formula}M=〚◇WT〛 and {a mathematical formula}T′=〈Ti〉i&lt;n+1. It follows that {a mathematical formula}(◇WT′)=(◇WT)⋄WTn and by the definition of {a mathematical formula}⋄W,{a mathematical formula} By the inductive assumption for T we obtain that {a mathematical formula}I∈M if and only if{a mathematical formula} Our goal is to prove that {a mathematical formula}I′∈M′ if and only if{a mathematical formula} Take some {a mathematical formula}I′∈M′. Then it follows from (D.3) that there is some {a mathematical formula}I∈M such that {a mathematical formula}I′∈min⁡(〚Tn〛,≤WI). Hence, {a mathematical formula}I′⊨{l∈LitsG|l∈Tn} and by the definition of {a mathematical formula}≤WI we can conclude that {a mathematical formula}I′ and I can differ only in the interpretation of ground atoms p such that either {a mathematical formula}p∈Tn or {a mathematical formula}¬p∈Tn. Consequently, since I satisfies (D.4), we conclude that {a mathematical formula}I′ satisfies (D.5).For the converse inclusion, suppose that {a mathematical formula}I′ satisfies (D.5) and let I be an interpretation that satisfies (D.4) and interprets a minimal set of ground atoms differently from {a mathematical formula}I′. By (D.5) we obtain that {a mathematical formula}I′⊨Tn and I can differ from {a mathematical formula}I′ only in the interpretation of ground atoms p such that either {a mathematical formula}p∈Tn or {a mathematical formula}¬p∈Tn. Thus, we can conclude that {a mathematical formula}I′∈min⁡(〚Tn〛,≤WI). Furthermore, since I satisfies (D.4), it follows that {a mathematical formula}I∈M. This implies that {a mathematical formula}I′∈M′.  □
       </list-item>
      </list>
     </section>
     <section label="D.2">
      <section-title>
       Splitting-based updates of MKNF knowledge bases
      </section-title>
      <paragraph label="Proposition 147">
       Let K be a basic DMKB and U a splitting sequence for K and suppose that both ⋄ and{a mathematical formula}Shave Abstract Splitting Sequence Property and respect fact update. Then{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of K if and only if{a mathematical formula}M=⋂α&lt;μXαfor some solution{a mathematical formula}〈Xα〉α&lt;μto K w.r.t. U.
      </paragraph>
      <paragraph label="Proof">
       Since ⋄ and {a mathematical formula}S respect fact update, the case when K is both ontology- and rule-based is treated equivalently by both semantics. Hence, it suffices to consider the case when K is ontology-based and when it is rule-based separately. The same argument applies to the layers of K: we do not need to consider cases when, say, K is ontology-based and one of its layers is rule-based, since then the layer is both ontology- and rule-based and the two update semantics coincide when applied to that layer.Thus, if K is ontology-based, then the claim follows directly from the Abstract Splitting Sequence Property of ⋄.On the other hand, if {a mathematical formula}K=〈(∅,Pi)〉i&lt;n is rule-based, then by the Abstract Splitting Sequence Property of {a mathematical formula}S it follows that J is an {a mathematical formula}S-model of {a mathematical formula}P=〈Pi〉i&lt;n if and only if {a mathematical formula}J=⋃α&lt;μJα for some solution {a mathematical formula}〈Jα〉α&lt;μ to P w.r.t. U. Let {a mathematical formula}M be the MKNF interpretation corresponding to J and for every {a mathematical formula}α&lt;μ, {a mathematical formula}Xα the MKNF interpretation corresponding to {a mathematical formula}Jα. It follows that{a mathematical formula} Consequently,{a mathematical formula}  □
      </paragraph>
      <paragraph label="Proposition 148">
       Let{a mathematical formula}K=〈Ki〉i&lt;nbe a basic DMKB and A a set of predicate symbols such that for all{a mathematical formula}i&lt;n,{a mathematical formula}pr(Ki)⊆A. If both ⋄ and{a mathematical formula}Sconserve the language, then every{a mathematical formula}(⋄,S)-dynamic MKNF model of K is saturated relative to A.
      </paragraph>
      <paragraph label="Proof">
       Let {a mathematical formula}Ki=(Oi,Pi) for all {a mathematical formula}i&lt;n. If {a mathematical formula}M is a {a mathematical formula}(⋄,S)-dynamic MKNF model of K, then one of the following cases must apply:
      </paragraph>
      <list>
       <list-item label="a)">
        K is ontology-based and {a mathematical formula}M=〚◇〈κ(Oi)∪{l|(l.)∈Pi}〉i&lt;n〛. The claim then follows from the assumption that ⋄ conserves the language.
       </list-item>
       <list-item label="b)">
        {a mathematical formula}K=〈(∅,Pi)〉i&lt;n is rule-based and{a mathematical formula} for some {a mathematical formula}S-stable model J of {a mathematical formula}〈Pi〉i&lt;n. We need to prove that {a mathematical formula}M is saturated relative to A. Take some interpretation I such that {a mathematical formula}I[A]∈M[A]. Then there is some {a mathematical formula}I′∈M such that {a mathematical formula}I′[A]=I[A]. Furthermore, {a mathematical formula}I′∈M implies that {a mathematical formula}I′⊨J. Since {a mathematical formula}S conserves the language, we obtain that {a mathematical formula}pr(J)⊆A. Consequently, {a mathematical formula}I⊨J and, by the definition of {a mathematical formula}M, {a mathematical formula}I∈M.  □
       </list-item>
      </list>
      <paragraph label="Corollary 149">
       Let K be a basic DMKB, U a splitting sequence for K and A the saturation sequence induced by U. If both ⋄ and{a mathematical formula}Shave the Abstract Splitting Sequence Property, conserve the language and respect fact update, then every{a mathematical formula}(⋄,S)-dynamic MKNF model of K is sequence-saturated relative to A.
      </paragraph>
      <paragraph label="Proof">
       Follows by Proposition 147, Proposition 148, and Observation 100(1).  □
      </paragraph>
      <paragraph label="Lemma 150">
       Let K be a DMKB and{a mathematical formula}U,Vsome sets of predicate symbols. Then,{a mathematical formula}
      </paragraph>
      <paragraph label="Proof">
       Let {a mathematical formula}K=〈(Oi,Pi)〉i&lt;n. We obtain the following:{a mathematical formula}{a mathematical formula} Take some {a mathematical formula}i&lt;n. We need to prove that {a mathematical formula}bU(bV(Oi))=bU∩V(Oi) and that {a mathematical formula}bU(bV(Pi))=bU∩V(Pi). By the definition of the bottom of an ontology,{a mathematical formula} Similarly, by the definition of the bottom of a program,{a mathematical formula}  □
      </paragraph>
      <paragraph label="Lemma 151">
       Let K be a DMKB,{a mathematical formula}X∈M, U a set of predicate symbols and V a splitting set for K. Then,{a mathematical formula}
      </paragraph>
      <paragraph label="Proof">
       Let {a mathematical formula}K=〈(Oi,Pi)i&lt;n〉. We obtain:{a mathematical formula}{a mathematical formula} Take some {a mathematical formula}i&lt;n. We need to prove that {a mathematical formula}tU(bV(Oi))=bV(tU(Oi)) and that {a mathematical formula}eU(bV(Pi),X)=bV(eU(Pi,X)). By the definition of the top and bottom of an ontology,{a mathematical formula} To show that {a mathematical formula}eU(bV(Pi),X)⊆bV(eU(Pi,X)) Take some rule {a mathematical formula}σ∈eU(bV(Pi),X). It follows that there is some rule {a mathematical formula}π∈Pi such that {a mathematical formula}pr(π)⊆V and{a mathematical formula} Consequently, {a mathematical formula}σ∈eU(Pi,X) and since {a mathematical formula}pr(π)⊆V, it follows that {a mathematical formula}σ∈bV(eU(Pi,X)).To show the converse inclusion, take some rule {a mathematical formula}σ∈bV(eU(Pi,X)). Then {a mathematical formula}pr(σ)⊆V and there exists some rule {a mathematical formula}π∈Pi such that{a mathematical formula} Since {a mathematical formula}pr(Hπ)⊆V and V is a splitting set for {a mathematical formula}Pi, it follows that {a mathematical formula}pr(π)⊆V. Consequently, {a mathematical formula}π∈bV(Pi) and it follows from the above that {a mathematical formula}σ∈eU(bV(Pi),X).  □
      </paragraph>
      <paragraph label="Lemma 152">
       Let{a mathematical formula}U,Vbe sets of predicate symbols and{a mathematical formula}X,Ysome MKNF interpretations such that{a mathematical formula}Xis saturated relative to U,{a mathematical formula}Yis saturated relative to V and{a mathematical formula}Xcoincides with{a mathematical formula}Yon{a mathematical formula}U∩V. Then,{a mathematical formula}
      </paragraph>
      <paragraph label="Proof">
       It suffices to prove one of the equations, the other one follows by the symmetry of the claim. Since {a mathematical formula}X∩Y⊆X, it immediately follows that {a mathematical formula}(X∩Y)[U]⊆X[U]. Take some {a mathematical formula}I∈X[U]. Since {a mathematical formula}X coincides with {a mathematical formula}Y on {a mathematical formula}U∩V, there must be some {a mathematical formula}J∈Y[V] such that {a mathematical formula}J[U∩V]=I[U∩V]. Let {a mathematical formula}I′ be an interpretation such that for every ground atom p,{a mathematical formula} It follows that {a mathematical formula}I′[U]=I and {a mathematical formula}I′[V]=J. From the assumption that {a mathematical formula}X is saturated relative to U and {a mathematical formula}Y is saturated relative to V it follows that {a mathematical formula}I′∈X∩Y. Hence, we can conclude that {a mathematical formula}I∈(X∩Y)[U].  □
      </paragraph>
      <paragraph label="Lemma 153">
       Let{a mathematical formula}U,Vbe splitting sets for a DMKB K and{a mathematical formula}X,Ysome MKNF interpretations such that{a mathematical formula}Xis saturated relative to U,{a mathematical formula}Yis saturated relative to V and{a mathematical formula}Xcoincides with{a mathematical formula}Yon{a mathematical formula}U∩V. Then,{a mathematical formula}
      </paragraph>
      <paragraph label="Proof">
       Let {a mathematical formula}K=〈(Oi,Pi)〉i&lt;n. We obtain:{a mathematical formula}{a mathematical formula} Take some {a mathematical formula}i&lt;n. We need to prove that {a mathematical formula}tU(tV(Oi))=tU∪V(Oi) and {a mathematical formula}eU(eV(Pi,Y),X)=eU∪V(Pi,X∩Y). Note that whenever U is a splitting set for an ontology {a mathematical formula}O, {a mathematical formula}tU(O)=bP∖U(O). Consequently, by Lemma 150,{a mathematical formula} As for the second equation, it holds that {a mathematical formula}σ∈eU(eV(Pi,Y),X) if and only if for some rule {a mathematical formula}σ′∈eV(Pi,Y),{a mathematical formula} Furthermore, {a mathematical formula}σ′∈eV(Pi,Y) if and only if for some rule {a mathematical formula}π∈Pi,{a mathematical formula} Since U and V are splitting sets for {a mathematical formula}Pi, they are also splitting sets for {a mathematical formula}eV(Pi,Y) and it follows that {a mathematical formula}pr(σ′)⊈U and {a mathematical formula}pr(π)⊈V are equivalent to {a mathematical formula}pr(Hσ′)⊈U and {a mathematical formula}pr(Hπ)⊈V, respectively. Also, since {a mathematical formula}pr(Hπ) is a singleton set, together they are equivalent to {a mathematical formula}pr(Hπ)⊈U∪V.Moreover, by Lemma 152, {a mathematical formula}X∩Y coincides with {a mathematical formula}X on U and with {a mathematical formula}Y on V. These observations imply that (D.6) and (D.7) are together equivalent to an existence of a rule {a mathematical formula}π∈Pi such that{a mathematical formula} This is equivalent to {a mathematical formula}σ∈eU∪V(Pi,X∩Y).  □
      </paragraph>
      <paragraph label="Lemma 154">
       Let{a mathematical formula}U,Vbe sets of predicate symbols,{a mathematical formula}X∈Mand K a DMKB such that{a mathematical formula}pr(K)⊆V. Then,{a mathematical formula}
      </paragraph>
      <paragraph label="Proof">
       Note that the second argument of {a mathematical formula}eU(K,⋅) is used to interpret literals in bodies of rules in K. It follows from Observation 95(5) that {a mathematical formula}σ(X,V)[V]=X[V]. Furthermore, by the assumption it holds for any set of literals S in a body of a rule in K that {a mathematical formula}pr(L)⊆V. Thus, by Observation 93(2),{a mathematical formula}  □
      </paragraph>
      <paragraph label="Lemma 155">
       Let A be a saturation sequence,{a mathematical formula}M∈Mbe sequence-saturated relative to A and U a set of predicate symbols. Then{a mathematical formula}σ(M,U)is also sequence-saturated relative to A.
      </paragraph>
      <paragraph label="Proof">
       Let {a mathematical formula}A=〈Aα〉α&lt;μ and suppose that I is an interpretation such that for every {a mathematical formula}α&lt;μ, {a mathematical formula}I[Aα]∈σ(M,U)[Aα]. We need to prove that {a mathematical formula}I∈σ(M,U). It follows from the assumptions that for every {a mathematical formula}α&lt;μ there exists some {a mathematical formula}Jα∈σ(M,U) such that {a mathematical formula}I[Aα]=Jα[Aα] and some {a mathematical formula}Kα∈M such that {a mathematical formula}Jα[U]=Kα[U]. Let K be an interpretation such that for every ground atom p,{a mathematical formula} It follows that for every {a mathematical formula}α&lt;μ, {a mathematical formula}K[Aα]=Kα[Aα]∈M[Aα], so since {a mathematical formula}M is sequence-saturated relative to U, {a mathematical formula}K∈M. Furthermore, for every {a mathematical formula}α&lt;μ we obtain that{a mathematical formula} Since every predicate symbol from U belongs to {a mathematical formula}Aα for some {a mathematical formula}α&lt;μ, we can conclude that {a mathematical formula}K[U]=I[U]. Consequently, {a mathematical formula}I∈σ(M,U). □
      </paragraph>
      <paragraph label="Lemma 156">
       Let{a mathematical formula}U=〈Uα〉α&lt;μbe a splitting sequence, A the saturation sequence induced by U and{a mathematical formula}M∈Mbe sequence-saturated relative to A. Then for any ordinal{a mathematical formula}α&lt;μ,{a mathematical formula}
      </paragraph>
      <paragraph label="Proof">
       First we show by induction on α that {a mathematical formula}Uα=⋃β≤αAβ:
       <list>
        For {a mathematical formula}α=0 we obtain {a mathematical formula}U0=A0 by the definition of A.We inductively assume that {a mathematical formula}Uα=⋃β≤αAβ. Then,{a mathematical formula}Let α be a limit ordinal. We inductively assume that for all {a mathematical formula}β&lt;α it holds that {a mathematical formula}Uβ=⋃γ≤βAγ. Consequently,{a mathematical formula}As for the second equation, if
       </list>
       <paragraph>
        {a mathematical formula}M is empty, then the claim trivially follows. So suppose that there is some {a mathematical formula}J0∈M. If {a mathematical formula}I∈σ(M,Uα), then there is some {a mathematical formula}J∈M such that {a mathematical formula}J[Uα]=I[Uα]. Hence, for every {a mathematical formula}β≤α, {a mathematical formula}J[Aβ]=I[Aβ]. Thus, {a mathematical formula}I∈⋂β≤ασ(M,Aβ). For the other inclusion, let {a mathematical formula}I∈⋂β≤ασ(M,Aβ). Then for every ordinal {a mathematical formula}β≤α there exists some interpretation {a mathematical formula}Iβ∈M such that {a mathematical formula}Iβ[Aβ]=I[Aβ]. Let J be an interpretation such that for every ground atom p,{a mathematical formula} Since {a mathematical formula}M is sequence-saturated relative to A, it follows that {a mathematical formula}J∈M. Furthermore, {a mathematical formula}J[Uα]=I[Uα], so {a mathematical formula}I∈σ(M,Uα). □
       </paragraph>
      </paragraph>
      <paragraph label="Proposition 72">
       Independence of splitting sequenceLet U, V be layering splitting sequences for a DMKB K. If both ⋄ and{a mathematical formula}Shave the Abstract Splitting Sequence Property, conserve the language and respect fact update, then{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of K w.r.t. U if and only if{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of K w.r.t. V.
      </paragraph>
      <paragraph label="Proof">
       Suppose {a mathematical formula}M is a {a mathematical formula}(⋄,S)-dynamic MKNF model of K w.r.t. {a mathematical formula}U=〈Uα〉α&lt;μ. Then {a mathematical formula}M=⋂α&lt;μXα for some solution {a mathematical formula}〈Xα〉α&lt;μ to K w.r.t. U. This means that:
       <list>
        {a mathematical formula}X0 is a {a mathematical formula}(⋄,S)-dynamic MKNF model of {a mathematical formula}K0=bU0(K).For any ordinal α such that {a mathematical formula}α+1&lt;μ, {a mathematical formula}Xα+1 is a {a mathematical formula}(⋄,S)-dynamic MKNF model of{a mathematical formula}For any limit ordinal {a mathematical formula}α&lt;μ, {a mathematical formula}Xα=IL, and thus it is a {a mathematical formula}(⋄,S)-dynamic MKNF model of {a mathematical formula}Kα=〈∅〉.Pick some arbitrary but fixed
       </list>
       <paragraph>
        {a mathematical formula}α&lt;μ and suppose that {a mathematical formula}V=〈Vβ〉β&lt;ν. Since V is a splitting sequence for K, it is also a splitting sequence for {a mathematical formula}Kα. Thus, by Proposition 147 we know that {a mathematical formula}Xα=⋂β&lt;νYα,β for some solution {a mathematical formula}〈Yα,β〉β&lt;ν to {a mathematical formula}Kα w.r.t. V. Thus,
       </paragraph>
       <list>
        <list-item label="•">
         {a mathematical formula}Yα,0 is a {a mathematical formula}(⋄,S)-dynamic MKNF model of {a mathematical formula}Kα,0=bV0(Kα).
        </list-item>
        <list-item label="•">
         For any ordinal β such that {a mathematical formula}β+1&lt;ν, {a mathematical formula}Yα,β+1 is a {a mathematical formula}(⋄,S)-dynamic MKNF model of{a mathematical formula}
        </list-item>
        <list-item label="•">
         For any limit ordinal {a mathematical formula}β&lt;ν, {a mathematical formula}Yα,β=IL and thus it is a {a mathematical formula}(⋄,S)-dynamic MKNF model of {a mathematical formula}Kα,β=〈∅〉.
        </list-item>
       </list>
       <paragraph>
        All in all, it follows that for all ordinals α, β such that {a mathematical formula}α&lt;μ and {a mathematical formula}β&lt;ν, {a mathematical formula}Yα,β is a {a mathematical formula}(⋄,S)-dynamic MKNF model of {a mathematical formula}Kα,β, as it is defined above.Since {a mathematical formula}Kα is a basic DMKB, {a mathematical formula}Kα,β must also be a basic DMKB. Let {a mathematical formula}B=〈Bβ〉β&lt;ν be the saturation sequence induced by V. We know that for every {a mathematical formula}β&lt;ν, {a mathematical formula}Kα,β contains only predicate symbols from {a mathematical formula}Bβ, so by Proposition 148, {a mathematical formula}Yα,β is saturated relative to {a mathematical formula}Bβ. Thus, by Observations 100(2) and 95(4),{a mathematical formula}Let the sequence of DMKBs {a mathematical formula}K′=〈Kβ′〉β&lt;ν be defined as follows:
       </paragraph>
       <list>
        <list-item label="•">
         {a mathematical formula}K0′=bV0(K).
        </list-item>
        <list-item label="•">
         For any ordinal β such that {a mathematical formula}β+1&lt;ν,{a mathematical formula}
        </list-item>
        <list-item label="•">
         For any limit ordinal {a mathematical formula}β&lt;ν, {a mathematical formula}Kβ′=〈∅〉.
        </list-item>
       </list>
       <paragraph>
        In the following we prove that for any ordinal {a mathematical formula}β&lt;ν and any ordinal α such that {a mathematical formula}α+1&lt;μ,{a mathematical formula}{a mathematical formula} This is obviously the case whenever β is a limit ordinal, so in the following we consider the cases when it is a non-limit one. Suppose first that {a mathematical formula}β=0. Then we can use Lemma 150 to obtain{a mathematical formula} and for any ordinal α such that {a mathematical formula}α+1&lt;μ we can apply Lemma 150, Lemma 151, achieving the following result:{a mathematical formula} Now suppose that β is an ordinal such that {a mathematical formula}β+1&lt;ν. Using Lemma 150, Lemma 151 we obtain:{a mathematical formula} Finally, for any ordinal α such that {a mathematical formula}α+1&lt;μ, Lemma 150, Lemma 151, Lemma 153 imply the following:{a mathematical formula} Now since {a mathematical formula}Kβ′ is saturated relative to {a mathematical formula}Bβ, we can use Lemma 154 to replace {a mathematical formula}σ(M,Uα) in (D.9) by {a mathematical formula}σ(M,Uα∩Bβ). Furthermore, by consecutively using Observation 95(4), Lemma 155, Lemma 156 and Observation 95(4) again, we can see that{a mathematical formula} Hence, (D.9) can be rewritten as:{a mathematical formula} Consequently, (D.8) and (D.9) together imply that {a mathematical formula}〈Yα,β〉α&lt;μ is a solution to {a mathematical formula}Kβ′ for all {a mathematical formula}β&lt;ν. Now we can use Proposition 147 to conclude that{a mathematical formula} is a {a mathematical formula}(⋄,S)-dynamic MKNF model of {a mathematical formula}Kβ′. One of the last steps in the proof is to show that {a mathematical formula}M is sequence-saturated relative to B. We know from Corollary 149 that {a mathematical formula}Xα is sequence-saturated relative to B, so we obtain the following:{a mathematical formula} which implies that {a mathematical formula}M is sequence-saturated relative to B. Thus, for any {a mathematical formula}β&lt;ν, Lemma 156 implies that{a mathematical formula} To sum up, define the sequence of interpretations {a mathematical formula}Z=〈Zβ〉β&lt;ν by {a mathematical formula}Zβ=σ(M,Bβ). We know the following:
       </paragraph>
       <list>
        <list-item label="•">
         {a mathematical formula}Z0=σ(M,B0) is a {a mathematical formula}(⋄,S)-dynamic MKNF model of {a mathematical formula}K0′=bV0(K).
        </list-item>
        <list-item label="•">
         For any ordinal β such that {a mathematical formula}β+1&lt;ν, {a mathematical formula}Zβ+1=σ(M,Bβ+1) is a {a mathematical formula}(⋄,S)-dynamic MKNF model of{a mathematical formula}
        </list-item>
        <list-item label="•">
         For any limit ordinal {a mathematical formula}β&lt;ν, put {a mathematical formula}Zβ=σ(M,Bβ)=σ(M,∅)=IL.
        </list-item>
       </list>
       <paragraph>
        Proof of the converse implication follows by the symmetry of the claim.  □
       </paragraph>
      </paragraph>
     </section>
     <section label="D.3">
      <section-title>
       Properties
      </section-title>
      <paragraph label="Theorem 76">
       Faithfulness w.r.t. MKNF knowledge basesSuppose that{a mathematical formula}Sis faithful to the stable model semantics and let{a mathematical formula}〈K〉be a layered DMKB. An MKNF interpretation{a mathematical formula}Mis an MKNF model of{a mathematical formula}Kif and only if{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of{a mathematical formula}〈K〉.
      </paragraph>
      <paragraph label="Proof">
       Follows by Theorem 54 and Proposition 15.  □
      </paragraph>
      <paragraph label="Theorem 77">
       Faithfulness w.r.t. first-order update operatorLet{a mathematical formula}K=〈(Oi,∅)〉i&lt;nbe a DMKB. An MKNF interpretation{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of K if and only if{a mathematical formula}M=〚◇〈Oi〉i&lt;n〛.
      </paragraph>
      <paragraph label="Proof">
       Follows by the fact that K is basic, so {a mathematical formula}U=〈P〉 is a layering splitting sequence for K. Thus, by Proposition 72, {a mathematical formula}M is a {a mathematical formula}(⋄,S)-dynamic MKNF model of K if and only if {a mathematical formula}M=〚◇〈Oi〉i&lt;n〛.  □
      </paragraph>
      <paragraph label="Theorem 78">
       Faithfulness w.r.t. rule update semanticsLet{a mathematical formula}K=〈(∅,Pi)〉i&lt;nbe a DMKB. If J is an{a mathematical formula}S-model of{a mathematical formula}〈Pi〉i&lt;n, then the MKNF interpretation corresponding to J is a{a mathematical formula}(⋄,S)-dynamic MKNF model of K. If{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of K, then the LP interpretation corresponding to{a mathematical formula}Mis an{a mathematical formula}S-model of{a mathematical formula}〈Pi〉i&lt;n.
      </paragraph>
      <paragraph label="Proof">
       Follows by the fact that K is basic, so {a mathematical formula}U=〈P〉 is a layering splitting sequence for K. Thus, by Proposition 72, {a mathematical formula}M is a {a mathematical formula}(⋄,S)-dynamic MKNF model of K if and only if {a mathematical formula}M corresponds some {a mathematical formula}S-stable model of {a mathematical formula}〈Pi〉i&lt;n.  □
      </paragraph>
      <paragraph label="Theorem 79">
       Primacy of new informationSuppose that ⋄ satisfies (FO1) and{a mathematical formula}Srespects primacy of new information and let{a mathematical formula}K=〈Ki〉i&lt;nbe a layered DMKB such that{a mathematical formula}n&gt;0. If{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of K, then{a mathematical formula}M⊨κ(Kn−1).
      </paragraph>
      <paragraph label="Proof">
       If {a mathematical formula}M is a {a mathematical formula}(⋄,S)-dynamic MKNF model of K, then for some layering splitting sequence {a mathematical formula}U=〈Uα〉α&lt;μ for K, {a mathematical formula}M=⋂α&lt;μXα for some solution {a mathematical formula}X=〈Xα〉α&lt;μ to K w.r.t. U. This means that
       <list>
        {a mathematical formula}X0 is a {a mathematical formula}(⋄,S)-dynamic MKNF model of {a mathematical formula}bU0(K).For any ordinal α such that {a mathematical formula}α+1&lt;μ, {a mathematical formula}Xα+1 is a {a mathematical formula}(⋄,S)-dynamic MKNF model of{a mathematical formula}For any limit ordinal α, {a mathematical formula}Xα=IL.Thus, by
       </list>
       <paragraph>
        Observation 100(1), {a mathematical formula}M is sequence-saturated relative to A, by Observation 100(2), {a mathematical formula}Xα=σ(M,Aα), and by Lemma 156, {a mathematical formula}⋂β≤αXβ=σ(M,Uα).Now let ϕ be some formula from {a mathematical formula}κ(Kn−1). If ϕ is of the form {a mathematical formula}Kψ where ψ is a first-order formula, then there must exist a unique ordinal α such that {a mathematical formula}pr(ϕ)⊆Aα. Due to the above considerations we can then conclude that {a mathematical formula}Xα⊨ϕ. Furthermore,{a mathematical formula} On the other hand, if {a mathematical formula}ϕ=κ(π) for some rule π, then the there exists a unique non-limit ordinal α such that {a mathematical formula}pr(Hπ)⊆Aα. Suppose that {a mathematical formula}M⊨κ(Bπ). If {a mathematical formula}α=0, then it follows that {a mathematical formula}π∈bU0(Kn−1) and it follows that {a mathematical formula}X0⊨κ(Bπ). Consequently, {a mathematical formula}X0⊨κ(Hπ) and we can conclude that {a mathematical formula}M⊨κ(Hπ). If {a mathematical formula}α=β+1, then there is a rule {a mathematical formula}σ∈eUβ(bUβ+1(Kn−1),⋂γ≤βXγ) and {a mathematical formula}Xβ+1⊨κ(Bσ), Consequently, {a mathematical formula}Xβ+1⊨κ(Hσ) and we obtain {a mathematical formula}M⊨κ(Hσ). In either case, {a mathematical formula}M⊨ϕ.  □
       </paragraph>
      </paragraph>
      <paragraph label="Definition 157">
       Generalised update semantics for basic DMKBs with static rulesLet {a mathematical formula}K=〈(Oi,Pi)〉i&lt;n be a basic DMKB with static rules. An MKNF interpretation {a mathematical formula}M is a generalised{a mathematical formula}(⋄,S)-dynamic MKNF model of K if either
      </paragraph>
      <list>
       <list-item label="a)">
        K is ontology-based and {a mathematical formula}M=〚◇〈κ(Oi)∪{l|(l.)∈Pi}〉i&lt;n〛, or
       </list-item>
       <list-item label="b)">
        K is rule-based and {a mathematical formula}M corresponds to some LP interpretation J such that {a mathematical formula}pr(J)⊆pr(P0) and {a mathematical formula}J⊨P0.
       </list-item>
      </list>
      <paragraph label="Definition 158">
       Generalised solution to a DMKB with static rulesLet {a mathematical formula}K=〈(Oi,Pi)〉i&lt;n be a DMKB with static rules and U a layering splitting sequence for K. A generalised solution to K w.r.t. U is a sequence of MKNF interpretations {a mathematical formula}〈Xα〉α&lt;μ such that
      </paragraph>
      <list>
       <list-item label="1.">
        {a mathematical formula}X0 is a generalised {a mathematical formula}(⋄,S)-dynamic MKNF model of {a mathematical formula}bU0(K).
       </list-item>
       <list-item label="2.">
        For any ordinal α such that {a mathematical formula}α+1&lt;μ, {a mathematical formula}Xα+1 is a generalised {a mathematical formula}(⋄,S)-dynamic MKNF model of{a mathematical formula}
       </list-item>
       <list-item label="3.">
        For any limit ordinal α, {a mathematical formula}Xα=IL.
       </list-item>
       <list-item label="4.">
        {a mathematical formula}⋂α&lt;μXα≠∅.
       </list-item>
      </list>
      <paragraph label="Remark 159">
       For the remainder of this section we assume that ⋄ has the Abstract Splitting Sequence Property, conserves the language, respects fact update and satisfies ({a mathematical formula}FO2.⊤) as well as (FO8.2), and {a mathematical formula}S is faithful to the stable model semantics.
      </paragraph>
      <paragraph label="Proposition 160">
       Let K be a positive DMKB with static rules and U a layering splitting sequence for K. If X is a solution to K w.r.t. U, then it is a generalised solution to K w.r.t. U.
      </paragraph>
      <paragraph label="Proof">
       This follows from the assumption that {a mathematical formula}S is faithful to the stable model semantics and for every stable model J or a program {a mathematical formula}P, {a mathematical formula}J⊨P.  □
      </paragraph>
      <paragraph label="Proposition 161">
       Let K be a positive DMKB with static rules and{a mathematical formula}U=〈Uα〉α&lt;μa layering splitting sequence for K. If there is a generalised solution{a mathematical formula}X=〈Xα〉α&lt;μto K w.r.t. U, then there is a solution{a mathematical formula}Y=〈Yα〉α&lt;μto K w.r.t. U such that for all{a mathematical formula}α&lt;μ,{a mathematical formula}Xα⊆Yα.
      </paragraph>
      <paragraph label="Proof">
       Let {a mathematical formula}Y=〈Yα〉α&lt;μ be as follows:
      </paragraph>
      <list>
       <list-item label="•">
        If {a mathematical formula}bU0(K) is ontology-based, then{a mathematical formula} Otherwise, {a mathematical formula}Y0 corresponds to the least set of objective literals J such that{a mathematical formula}
       </list-item>
       <list-item label="•">
        For any ordinal α such that {a mathematical formula}α+1&lt;μ, if{a mathematical formula} is ontology-based, then{a mathematical formula} Otherwise, {a mathematical formula}Yα+1 corresponds to the least set of objective literals J such that{a mathematical formula}
       </list-item>
       <list-item label="•">
        For any limit ordinal α, {a mathematical formula}Yα=IL.
       </list-item>
      </list>
      <paragraph label="Corollary 162">
       Let K be a positive DMKB with static rules and{a mathematical formula}U=〈Uα〉α&lt;μa layering splitting sequence for K. Then either there is no generalised solution to K w.r.t. U, or there is a unique solution{a mathematical formula}X=〈Xα〉α&lt;μto K w.r.t. U and for every generalised solution{a mathematical formula}Y=〈Yα〉α&lt;μto K w.r.t. U,{a mathematical formula}Yα⊆Xαfor every{a mathematical formula}α&lt;μ.
      </paragraph>
      <paragraph label="Proof">
       Follows from Proposition 160, Proposition 161.  □
      </paragraph>
      <paragraph label="Proposition 163">
       Let K be a positive DMKB with static rules,{a mathematical formula}U=〈Uα〉α&lt;μa layering splitting sequence for K,{a mathematical formula}X=〈Xα〉α&lt;μa generalised solution to K w.r.t. U and{a mathematical formula}M=⋂α&lt;μXα. Then,{a mathematical formula}
      </paragraph>
      <paragraph label="Proof">
       Let {a mathematical formula}T=〈TP0(M)∪κ(O0),κ(O1),…,κ(On−1)〉 where{a mathematical formula} By the definition of {a mathematical formula}TK⋄,{a mathematical formula} Let {a mathematical formula}A=〈Aα〉α&lt;μ be the saturation sequence induced by U. By the Abstract Splitting Sequence Property of ⋄ it follows that{a mathematical formula} Furthermore, it follows from the definition of generalised solution that {a mathematical formula}Xα is saturated relative to {a mathematical formula}Aα, so by Observation 100(2) and Lemma 156,{a mathematical formula} We prove that for all {a mathematical formula}α&lt;μ, {a mathematical formula}Xα⊆〚◇bAα(T)〛:
      </paragraph>
      <list>
       <list-item label="1.">
        For {a mathematical formula}α=0 we obtain {a mathematical formula}U0=A0. Suppose first that {a mathematical formula}bU0(K) is ontology-based and {a mathematical formula}X0=〚◇T′〛 where{a mathematical formula} By the assumption that {a mathematical formula}U0 is a splitting set for {a mathematical formula}P0 it follows that {a mathematical formula}bA0(TP0(M))={l|(l.)∈bU0(P0)} and since {a mathematical formula}Pi=∅ for all {a mathematical formula}i&gt;0, this implies that {a mathematical formula}bA0(T)=T′ and we can conclude that {a mathematical formula}X0=〚◇bA0(T)〛.On the other hand, if {a mathematical formula}bU0(K) is rule-based and {a mathematical formula}X0 corresponds to some LP interpretation J such that {a mathematical formula}J⊨bU0(P0), then by ({a mathematical formula}FO2.⊤),{a mathematical formula} We need to prove that {a mathematical formula}X0⊨bU0(TP0(M)). Take some literal {a mathematical formula}l∈bU0(TP0(M)). Then there is some rule {a mathematical formula}π∈P0 such that {a mathematical formula}Hπ=l, {a mathematical formula}M⊨κ(Bπ) and {a mathematical formula}pr(l)⊆U0. Since {a mathematical formula}U0 is a splitting set for {a mathematical formula}P0, {a mathematical formula}pr(Bπ)⊆U0. Consequently, {a mathematical formula}X0=σ(M,U0)⊨κ(Bπ) and we obtain that {a mathematical formula}J⊨Bπ. This implies that {a mathematical formula}J⊨l and we can conclude that {a mathematical formula}X0⊨l. Thus, {a mathematical formula}X0⊨bU0(TP0(M)).
       </list-item>
       <list-item label="2.">
        For a non-limit ordinal {a mathematical formula}α+1 we have {a mathematical formula}Aα+1=Uα+1∖Uα. Suppose first that{a mathematical formula} is ontology-based and {a mathematical formula}Xα+1=〚◇T′〛 where{a mathematical formula} First note that since {a mathematical formula}Uα and {a mathematical formula}Uα+1 are splitting sets for {a mathematical formula}Oi, we obtain{a mathematical formula} Furthermore, since {a mathematical formula}eUα(bUα+1(P0),⋂β≤αXβ) contains only facts, every rule {a mathematical formula}π∈P0 such that {a mathematical formula}pr(Hπ)⊆Uα+1 satisfies {a mathematical formula}pr(Bπ)⊆Uα and due to the fact that {a mathematical formula}⋂β≤αXβ=σ(M,Uα) we can conclude that{a mathematical formula} Since {a mathematical formula}Pi=∅ for all {a mathematical formula}i&gt;0, the above considerations imply that {a mathematical formula}bAα+1(T)=T′ and we can conclude that {a mathematical formula}Xα+1=〚◇bAα+1(T)〛.On the other hand, if{a mathematical formula} is rule-based and {a mathematical formula}Xα+1 corresponds to some LP interpretation J such that {a mathematical formula}J⊨eUα(bUα+1(P0),⋂β≤αXβ), then by ({a mathematical formula}FO2.⊤),{a mathematical formula} We need to prove that {a mathematical formula}Xα+1⊨bAα+1(TP0(M)). Take some literal {a mathematical formula}l∈bAα+1(TP0(M)). Then there is some rule {a mathematical formula}π∈P0 such that {a mathematical formula}Hπ=l, {a mathematical formula}M⊨κ(Bπ) and {a mathematical formula}pr(l)⊆Aα+1. It follows that there is some rule {a mathematical formula}σ∈eUα(bUα+1(P0),⋂β≤αXβ) with {a mathematical formula}Hσ=l, {a mathematical formula}M⊨κ(Bσ) and {a mathematical formula}pr(σ)⊆Aα+1. Consequently, {a mathematical formula}Xα+1=σ(M,Aα+1)⊨κ(Bσ) and so {a mathematical formula}J⊨Bσ. This implies that {a mathematical formula}J⊨l and we can conclude that {a mathematical formula}Xα+1⊨l. Thus, {a mathematical formula}Xα+1⊨bAα+1(TP0(M)).
       </list-item>
       <list-item label="3.">
        If α is a limit ordinal, then it follows from ({a mathematical formula}FO2.⊤) that{a mathematical formula}
       </list-item>
      </list>
      <paragraph label="Proposition 164">
       Let K be a positive DMKB with static rules,{a mathematical formula}U=〈Uα〉α&lt;μa layering splitting sequence for K,{a mathematical formula}A=〈Aα〉α&lt;μthe saturation sequence induced by U and{a mathematical formula}Man MKNF interpretation. If{a mathematical formula}M=TK⋄(M), then{a mathematical formula}M=⋂α&lt;μσ(M,Aα)and{a mathematical formula}〈σ(M,Aα)〉α&lt;μis a generalised solution to K w.r.t. U.
      </paragraph>
      <paragraph label="Proof">
       Let {a mathematical formula}T=〈TP0(M)∪κ(O0),κ(O1),…,κ(On−1)〉 where{a mathematical formula} By the definition of {a mathematical formula}TK⋄, {a mathematical formula}TK⋄(M)=〚◇T〛. By the Abstract Splitting Sequence Property of ⋄ it follows that{a mathematical formula} Let {a mathematical formula}Xα=σ(M,Aα) for all {a mathematical formula}α&lt;μ. Since ⋄ conserves the language, it follows from Observation 100(2) that for all {a mathematical formula}α&lt;μ,{a mathematical formula} We need to prove that
      </paragraph>
      <list>
       <list-item label="1.">
        {a mathematical formula}X0 is a generalised {a mathematical formula}(⋄,S)-dynamic MKNF model of {a mathematical formula}bU0(K).
       </list-item>
       <list-item label="2.">
        For any ordinal α such that {a mathematical formula}α+1&lt;μ, {a mathematical formula}Xα+1 is a generalised {a mathematical formula}(⋄,S)-dynamic MKNF model of{a mathematical formula}
       </list-item>
       <list-item label="3.">
        For any limit ordinal α, {a mathematical formula}Xα=IL.
       </list-item>
       <list-item label="4.">
        {a mathematical formula}⋂α&lt;μXα≠∅.
       </list-item>
      </list>
      <paragraph label="Proposition 165">
       Let K be a positive layered DMKB with static rules. An MKNF interpretation{a mathematical formula}Mis a ⋄-dynamic MKNF model of K if and only if{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of K.
      </paragraph>
      <paragraph label="Proof">
       Suppose that {a mathematical formula}M is the ⋄-dynamic MKNF model of K. Then {a mathematical formula}M is the greatest fixed point of {a mathematical formula}TK⋄ and it follows from Proposition 164 that {a mathematical formula}〈σ(M,Aα)〉α&lt;μ is a generalised solution to K w.r.t. some splitting sequence U. Thus, by Corollary 162, there exists a solution {a mathematical formula}X=〈Xα〉α&lt;μ to K w.r.t. U such that for all {a mathematical formula}α&lt;μ, {a mathematical formula}σ(M,Aα)⊆Xα. Let {a mathematical formula}N=⋂α&lt;μXα. It holds that {a mathematical formula}N is the {a mathematical formula}(⋄,S)-dynamic MKNF model of K and we obtain{a mathematical formula} Also, it follows from Proposition 160, Proposition 163 that{a mathematical formula} and since {a mathematical formula}M is the greatest fixed point of {a mathematical formula}TK⋄, we can conclude that {a mathematical formula}N⊆M.Similarly, if {a mathematical formula}N is the {a mathematical formula}(⋄,S)-dynamic MKNF model of K, then there is a solution {a mathematical formula}X=〈Xα〉α&lt;μ to K w.r.t. some layering splitting sequence {a mathematical formula}U=〈Uα〉α&lt;μ such that{a mathematical formula} By Proposition 160, Proposition 163, {a mathematical formula}N⊆TK⋄(N) and we can conclude that {a mathematical formula}N⊆M where {a mathematical formula}M is the greatest fixed point of {a mathematical formula}TK⋄, i.e. the {a mathematical formula}(⋄,S)-dynamic MKNF model of K. It follows from Proposition 164 that {a mathematical formula}〈σ(M,Aα)〉α&lt;μ is a generalised solution to K w.r.t. U. Thus, by Corollary 162, there exists a solution {a mathematical formula}X=〈Xα〉α&lt;μ to K w.r.t. U such that for all {a mathematical formula}α&lt;μ, {a mathematical formula}σ(M,Aα)⊆Xα. It follows from the uniqueness of a ⋄-dynamic MKNF model that {a mathematical formula}N=⋂α&lt;μXα and we obtain{a mathematical formula}  □
      </paragraph>
      <paragraph label="Proposition 166">
       Let K be a layered DMKB with static rules. An MKNF interpretation{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of K if and only if{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of{a mathematical formula}KM.
      </paragraph>
      <paragraph label="Proof">
       Follows from the assumption that {a mathematical formula}S is faithful to the stable model semantics and by the definition of a stable model.  □
      </paragraph>
      <paragraph label="Theorem 80">
       Compatibility with update semantics from Section 3Suppose that ⋄ satisfies ({a mathematical formula}FO2.⊤) and (FO8.2) and that{a mathematical formula}Sis faithful to the stable model semantics. Let K be a layered DMKB with static rules. An MKNF interpretation{a mathematical formula}Mis a ⋄-dynamic MKNF model of K if and only if{a mathematical formula}Mis a{a mathematical formula}(⋄,S)-dynamic MKNF model of K.
      </paragraph>
      <paragraph label="Proof">
       Follows by the definition of a ⋄-dynamic MKNF model and by Proposition 165, Proposition 166. □
      </paragraph>
     </section>
     <section label="D.4">
      <section-title>
       Complexity of updating layered DMKBs
      </section-title>
      <paragraph label="Theorem 88">
       Let ⋄ be a first update operator and{a mathematical formula}Sa rule update semantics such that both ⋄ and{a mathematical formula}Shave the splitting sequence property, conserve the language and respect fact update. If query answering for ⋄ belongs to{a mathematical formula}Ω1and query answering for{a mathematical formula}Sbelongs to{a mathematical formula}Ω2, then hybrid query answering for ⋄ and{a mathematical formula}Sbelongs to{a mathematical formula}NPΩ1∪Ω2.
      </paragraph>
      <paragraph label="Proof (sketch)">
       Take a layered DMKB K. We need to prove that the complexity class {a mathematical formula}NPΩ1∪Ω2 contains the problem of deciding whether for some {a mathematical formula}(⋄,S)-dynamic MKNF model {a mathematical formula}M, {a mathematical formula}M⊨κ(S).Since K is layered, some layering splitting sequence {a mathematical formula}U=〈Ui〉i&lt;n for K exists.{sup:26} We define the sets of literals {a mathematical formula}Si for all {a mathematical formula}i&lt;n as follows:
       <list>
        {a mathematical formula}S0=∅,for any {a mathematical formula}i∈N such that {a mathematical formula}i+1&lt;n,{a mathematical formula}The rest can be verified in deterministic polynomial time using our
       </list>
       <paragraph>
        {a mathematical formula}(Ω1∪Ω2) oracle as follows. For each {a mathematical formula}i&lt;n, we determine the DMKB {a mathematical formula}Ki and the set of literals {a mathematical formula}Si′ as follows:
       </paragraph>
       <list>
        <list-item label="•">
         {a mathematical formula}K0=bU0(K) and {a mathematical formula}Si′={L∈S|pr(L)⊆U0}.
        </list-item>
        <list-item label="•">
         For any {a mathematical formula}i∈N such that {a mathematical formula}i+1&lt;n, {a mathematical formula}Ki+1 is obtained from {a mathematical formula}tUi(bUi+1(K)) by replacing each literal from {a mathematical formula}Si by ⊤ if it belongs to {a mathematical formula}Si⊤ and by ⊥ otherwise. Furthermore,{a mathematical formula}
        </list-item>
       </list>
       <paragraph>
        Since {a mathematical formula}Ki is a basic DMKB, it can be updated using either ⋄ of {a mathematical formula}S alone. Thus, using the oracle we can verify that for each {a mathematical formula}i&lt;n,{a mathematical formula} Together with Definition 73, this leads to the conclusion that for some {a mathematical formula}(⋄,S)-dynamic MKNF model {a mathematical formula}M of K, {a mathematical formula}M⊨κ(S).  □
       </paragraph>
      </paragraph>
     </section>
    </section>
   </appendices>
  </root>
 </body>
</html>