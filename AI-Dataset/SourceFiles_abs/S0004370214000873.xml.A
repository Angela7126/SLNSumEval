<?xml version="1.0" encoding="utf-8"?>
<html>
 <body>
  <root>
   <title>
    Disjunctive closures for knowledge compilation.
   </title>
   <content>
    <section label="1">
     <section-title>
      Introduction
     </section-title>
     <paragraph>
      Knowledge compilation (KC) consists of a family of approaches which aim at improving the efficiency of some computational tasks – typically, saving on-line computation time – via pre-processing. The pre-processing step consists in turning some pieces of available information into a compiled form, during an off-line compilation phase.
     </paragraph>
     <paragraph>
      KC gathers a number of research lines focusing on different problems, [5], [6], [7], [8], [9], [10], [11], [12], ranging from theoretical ones, where the key question is the compilability issue, i.e., determining whether pre-processing can lower the computational complexity of some tasks, to more practical ones, especially the design of compilation algorithms for some specific tasks like clausal entailment. An important research line [13], [1] is concerned with the issue of choosing a target class of representations for KC. In [1], the authors argue that the choice of a target class for a compilation purpose must be based both on its time efficiency, defined as the set of queries and transformations which can be achieved in polynomial time when the pieces of data to be exploited are represented in the class, as well as the space efficiency of the class, i.e., its ability to represent data using little space. Thus, the KC map [1] is an evaluation of a dozen of significant propositional classes {a mathematical formula}L, also called propositional fragments, w.r.t. several dimensions: the space efficiency (aka succinctness) of the fragment and its time efficiency (aka tractability), i.e., the class of queries and transformations it supports (or not) in polynomial time, often under standard assumptions from complexity theory. The KC map is intended to serve as a guide for selecting the “right” target class given the requirements imposed by the application under consideration.
     </paragraph>
     <paragraph>
      The KC map reported in [1] has already been extended to other propositional classes, queries and transformations in a number of subsequent papers, including [14], [15], [16], [17], [18], [2], [4], [19], [20], [21], [3], [22]. In all those papers, queries and transformations are also viewed as properties of classes of propositional representations {a mathematical formula}L. One says that {a mathematical formula}L offers or satisfies a given query or a transformation when there exists a polynomial-time algorithm to achieve it, provided that the input representations are from {a mathematical formula}L. When such an algorithm does not exist for sure or unless {a mathematical formula}P=NP, one says that {a mathematical formula}L does not offer the query or the transformation.
     </paragraph>
     <paragraph>
      When no class of propositional representations offers all the transformations one would expect, an approach consists in leaving some of them implicit. This is the key idea underlying closure principles as introduced in this paper: instead of performing some computationally expensive transformations on representations, one just remembers in the representations that the transformations have to be done. This leads to extend the previous classes to new ones, which are at least as succinct, and for which implicit transformations are for free. Another nice effect of some implicit transformations on incomplete propositional languages is to recover completeness, i.e., the ability to represent any Boolean function.
     </paragraph>
     <paragraph>
      In this paper, we investigate the disjunctive closure principles, i.e., disjunction [∨], existential quantification [∃], and their combinations. The disjunction principle [∨] when applied to a class {a mathematical formula}L of representations leads to a class {a mathematical formula}L[∨], the disjunction closure of {a mathematical formula}L, which qualifies disjunctions of representations from {a mathematical formula}L, while the existential quantification principle [∃] applied to a class {a mathematical formula}L leads to a class {a mathematical formula}L[∃], the existential closure of {a mathematical formula}L, which qualifies existentially quantified representations from {a mathematical formula}L. {a mathematical formula}L[∨,∃], the full disjunctive closure of {a mathematical formula}L, is obtained by applying both disjunctive closure principles to {a mathematical formula}L. We provide a number of characterization results concerning the corresponding closures. Especially, we show that applying at most once each disjunctive closure principle on {a mathematical formula}L is enough, in the sense that applying one of them twice or more leads to classes polynomially equivalent to {a mathematical formula}L. We also identify the queries and transformations which are preserved by applying disjunctive closure principles.
     </paragraph>
     <paragraph>
      In addition, we extend the KC map with new classes of propositional representations obtained as disjunctive closures of several incomplete propositional languages, namely the well-known Krom CNF fragment KROM (also known as the bijunctive fragment) [23] the Horn CNF fragment HORN[24], and the affine fragment AFF (also known as the biconditional fragment) [25], as well as {a mathematical formula}K/H (Krom or Horn CNF formulae) and renH, the language of renamable Horn CNF formulae [26]. Each of these languages is a well-known polynomial class for the satisfiability problem sat (i.e., it offers CO), but none of them is fully expressive w.r.t. propositional logic (there exist propositional formulae which cannot be represented in any of them), which drastically restricts their attractiveness for the KC purpose. Importantly, switching from any of those languages to its disjunction closure or to its full disjunctive closure leads to recover a fully expressive propositional language. This is crucial for many applications.
     </paragraph>
     <paragraph>
      The rest of the paper is organized as follows. In Section 2, some formal preliminaries about graph-based, quantified, propositional representations are provided. In Section 3, we make precise the queries and transformations of interest, and extend the notions of expressiveness, succinctness and polynomial translations to any subsets of the class of graph-based, quantified, propositional representations. In Section 4, the concepts of disjunctive closures of a class of propositional representations are defined and we derive a number of characterization results about them. In Section 5, the disjunctive closures of KROM, HORN, {a mathematical formula}K/H, renH, and AFF are considered and we analyze them along the lines of the KC map. Finally, Section 6 concludes the paper by discussing the results, pointing out the disjunctive closures which appear as the best target classes for the KC purpose; it also gives some perspectives for further research.
     </paragraph>
    </section>
    <section label="2">
     <section-title>
      Quantified propositional representations
     </section-title>
     <section label="2.1">
      <section-title>
       Syntax
      </section-title>
      <paragraph>
       In this paper, we consider subsets of the class {a mathematical formula}C-QDAG of quantified propositional representations over a countably infinite set PS of propositional variables, given a finite set C of propositional connectives. Each connective {a mathematical formula}c∈C is supposed to have a fixed, finite arity. Leaf nodes of such DAGs are labeled by literals, where a literal (over {a mathematical formula}V⊆PS) is an element {a mathematical formula}x∈V (a positive literal) or a negated one ¬x (a negative literal), or a Boolean constant (⊤ and ⊥). {a mathematical formula}LV is the set of all literals over V. Literal {a mathematical formula}l¯ is the complementary literal of literal l, so that {a mathematical formula}⊤¯=⊥, {a mathematical formula}⊥¯=⊤, {a mathematical formula}x¯=¬x and {a mathematical formula}¬x¯=x. For a literal l different from a Boolean constant, {a mathematical formula}var(l) denotes the corresponding variable: for {a mathematical formula}x∈PS, we have {a mathematical formula}var(x)=x and {a mathematical formula}var(¬x)=x.
      </paragraph>
      <paragraph>
       Formally, {a mathematical formula}C-QDAG is given by:
      </paragraph>
      <paragraph label="Definition 1">
       {a mathematical formula}C-QDAG{a mathematical formula}C-QDAG is the set of all finite, single-rooted DAGs (also referred to as “representations”) α where:
      </paragraph>
      <list>
       <list-item label="•">
        each leaf node of α is labeled by a literal l over PS,
       </list-item>
       <list-item label="•">
        each internal node of α is labeled by a connective {a mathematical formula}c∈C and has as many children as required by c (it is then called a c-node), or is labeled by a quantification ∃x or ∀x (where {a mathematical formula}x∈PS) and has a single child.{sup:1}
       </list-item>
      </list>
      <paragraph>
       The size {a mathematical formula}|α| of a {a mathematical formula}C-QDAG representation α is the number of nodes plus the number of arcs in the DAG. {a mathematical formula}Var(α) denotes the set of free variables of α, i.e., those variables x for which there exists a leaf node {a mathematical formula}Nx of α labelled by a literal l such that {a mathematical formula}var(l)=x and there is a path from the root of α to {a mathematical formula}Nx such that no node from it is labelled by ∃x or ∀x. Clearly enough, determining whether a given {a mathematical formula}x∈PS belongs to {a mathematical formula}Var(α) can be done in time polynomial in the size of α{sup:2}; similarly, computing {a mathematical formula}Var(α) can also be achieved in time polynomial in the size of α.
      </paragraph>
      <paragraph>
       Fig. 1 presents a {a mathematical formula}C-QDAG representation α with {a mathematical formula}C={∧,∨,¬,⊕}. Its set of free variables is {a mathematical formula}Var(α)={q,r}.
      </paragraph>
      <paragraph>
       As Fig. 1 exemplifies it, a {a mathematical formula}C-QDAG mainly corresponds to a Quantified Boolean Circuit [27]. Abusing words, such DAG-based representations are also referred to as “formulae” in the KC literature, and classes of such representations are called “languages”. In the following, we will only use the term “formula” for designating a tree-shaped representation of a Boolean function, and the term “language” for sets of formulae. Fig. 2 gives a {a mathematical formula}C-QDAG formula with {a mathematical formula}C={∧,∨,¬,⊕}.
      </paragraph>
      <paragraph>
       Many classes of propositional representations considered so far as target classes for KC are subsets of {a mathematical formula}C-QDAG with {a mathematical formula}C={∧,∨,¬,⊕}, and typically subsets of {a mathematical formula}C-DAG, the subset of {a mathematical formula}C-QDAG with {a mathematical formula}C={∧,∨,¬,⊕} where no node labeled by a quantification is allowed. Especially, the propositional DAGs considered in [14] are {a mathematical formula}C-DAG representations with {a mathematical formula}C={∧,∨,¬}, and the classes considered in [1] are subsets of {a mathematical formula}DAG-NNF (the non-quantified DAGs with {a mathematical formula}C={∧,∨}). Clearly enough, for each non-quantified representation α from {a mathematical formula}C-DAG, {a mathematical formula}Var(α) coincides with the set of variables occurring in α.
      </paragraph>
      <paragraph>
       In Fig. 1, the DAG rooted at the {a mathematical formula}∧̲ node is a {a mathematical formula}C-DAG representation with {a mathematical formula}C={∧,∨,¬} and the DAG rooted at the {a mathematical formula}∨̲ node is a {a mathematical formula}DAG-NNF representation. DNNF is the subset of {a mathematical formula}DAG-NNF consisting of DAGs where each ∧-node {a mathematical formula}∧(α1,…,αk) is decomposable, which means that {a mathematical formula}∀i,j∈{1,…,k}, if {a mathematical formula}i≠j then {a mathematical formula}Var(αi)∩Var(αj)=∅. {a mathematical formula}d-DNNF is the subset of DNNF where every ∨-node {a mathematical formula}∨(α1,…,αk) is deterministic, which means that {a mathematical formula}∀i,j∈{1,…,k}, if {a mathematical formula}i≠j then {a mathematical formula}αi∧αj is inconsistent. BDD is the subset of {a mathematical formula}C-DAG with {a mathematical formula}C={ite} which consists of DAGs α such that every leaf node is labelled by a Boolean constant, ⊤ or ⊥. ite is a ternary connective (“ite” stands for “if ... then ... else ...”). Usually, instead of labeling a decision node {a mathematical formula}N=〈x,N+,N−〉 of a BDD formula by the name of the connective used (i.e., “ite”) and considering three children for it (one for x, one for {a mathematical formula}N+ and one for {a mathematical formula}N−), N is labelled by x and has only two children (one for {a mathematical formula}N+ and one for {a mathematical formula}N−). Given a total, strict ordering &lt; over PS, the class {a mathematical formula}OBDD&lt; is the subset of BDD which consists of DAGs α such that every path from the root of α to a leaf node is compatible with &lt;.
      </paragraph>
      <paragraph>
       As usual, a clause (resp. a term) is a finite disjunction (resp. conjunction) of literals. CLAUSE is the subset of {a mathematical formula}DAG-NNF consisting of all clauses, and TERM is the subset of {a mathematical formula}DAG-NNF consisting of all terms. NNF is the subset of {a mathematical formula}DAG-NNF consisting of formulae (i.e., tree-shaped representations). CNF is the subset of NNF consisting of all conjunctions of clauses, while DNF is the subset of NNF consisting of all disjunctions of terms. PI is the subset of CNF consisting of prime implicates formulae (also known as Blake formulae); a PI formula is a CNF formula, the conjunction of all clauses from the set {a mathematical formula}PI(α) for some {a mathematical formula}C-QDAG representation α; {a mathematical formula}PI(α) contains the prime implicates of α, i.e., the logically strongest clauses which are implied by α (one representative per equivalence class is considered, only). An essential prime implicate of α is a prime implicate δ of α such that if the clause equivalent to δ is removed from {a mathematical formula}PI(α), the conjunction of the clauses from the resulting set is no longer equivalent to α. For instance, if {a mathematical formula}α=(p⇒q)∧(q⇒r)∧(p⇒(r∨s)), then {a mathematical formula}PI(α)={¬p∨q,¬q∨r,¬p∨r}. {a mathematical formula}¬p∨q and {a mathematical formula}¬q∨r are essential prime implicates of α, while {a mathematical formula}¬p∨r is not. An important point is that any CNF formula equivalent to a propositional representation α contains (up to logical equivalence) every essential prime implicate of α.
      </paragraph>
      <paragraph>
       For space reasons, we do not provide hereafter the definitions of the propositional classes of representations {a mathematical formula}DNNFT and IP (see [1], [18] for formal definitions).
      </paragraph>
     </section>
     <section label="2.2">
      <section-title>
       Semantics
      </section-title>
      <paragraph>
       Let us recall that an interpretation (or world) over {a mathematical formula}V⊆PS is a mapping ω from V to {a mathematical formula}BOOL={0,1}. Interpretations are sometimes viewed as subsets of PS, consisting of all the variables that are set to 1 by the interpretations. When a total, strict ordering &lt; over PS is considered, the restriction of an interpretation ω over a finite subset {a mathematical formula}{x1,…,xn} of PS can also be represented as a bit vector; for instance, the restriction of ω over {a mathematical formula}{a,b,c} such that {a mathematical formula}ω(a)=1, {a mathematical formula}ω(b)=0, and {a mathematical formula}ω(c)=0 can be represented as 100 when a, b, c are such that {a mathematical formula}a&lt;b&lt;c. For any {a mathematical formula}x∈V, {a mathematical formula}ω−x is the interpretation over V which coincides with ω on every variable of V, except on x; formally, {a mathematical formula}ω−x(y)=ω(y) if {a mathematical formula}y≠x,=1−ω(x) if {a mathematical formula}y=x.
      </paragraph>
      <paragraph>
       We are now ready to define the semantics of {a mathematical formula}C-QDAG representations in an interpretation ω over PS:
      </paragraph>
      <paragraph label="Definition 2">
       Semantics of {a mathematical formula}C-QDAG representationsThe semantics of a {a mathematical formula}C-QDAG representation α in an interpretation ω over PS is the truth value {a mathematical formula}〚α〛(ω) from BOOL defined inductively as follows:
      </paragraph>
      <list>
       <list-item label="•">
        If {a mathematical formula}α=⊤, then {a mathematical formula}〚α〛(ω)=1.
       </list-item>
       <list-item label="•">
        If {a mathematical formula}α=⊥, then {a mathematical formula}〚α〛(ω)=0.
       </list-item>
       <list-item label="•">
        If α is a positive literal x, then {a mathematical formula}〚α〛(ω)=ω(x).
       </list-item>
       <list-item label="•">
        If α is a negative literal ¬x, then {a mathematical formula}〚α〛(ω)=1−ω(x).
       </list-item>
       <list-item label="•">
        If {a mathematical formula}α=c(β1,…,βn), where {a mathematical formula}c∈C has arity n, then {a mathematical formula}〚α〛(ω)=〚c〛(〚β1〛(ω),…,〚βn〛(ω)), where {a mathematical formula}〚c〛 is the Boolean function from {a mathematical formula}BOOLn to BOOL, which is the semantics of c.
       </list-item>
       <list-item label="•">
        If {a mathematical formula}α=∃x.β, then {a mathematical formula}〚α〛(ω)=1 iff {a mathematical formula}〚β〛(ω)=1 or {a mathematical formula}〚β〛(ω−x)=1.
       </list-item>
       <list-item label="•">
        If {a mathematical formula}α=∀x.β, then {a mathematical formula}〚α〛(ω)=1 iff {a mathematical formula}〚β〛(ω)=1 and {a mathematical formula}〚β〛(ω−x)=1.
       </list-item>
      </list>
      <paragraph>
       An interpretation ω over PS is said to be a model of {a mathematical formula}α∈C-QDAG, noted {a mathematical formula}ω⊨α, if and only if {a mathematical formula}〚α〛(ω)=1. If α has a model, then it is consistent; if every interpretation over PS is a model of α, then α is valid. If every model of α is a model of {a mathematical formula}β∈C-QDAG, then β is a logical consequence of α, noted {a mathematical formula}α⊨β. {a mathematical formula}Mod(α) denotes the set of models of α over {a mathematical formula}Var(α). Furthermore, when both {a mathematical formula}α⊨β and {a mathematical formula}β⊨α hold, α and β are logically equivalent, noted {a mathematical formula}α≡β.
      </paragraph>
      <paragraph>
       For instance, with {a mathematical formula}C={∧,∨,¬,⊕}, the {a mathematical formula}C-QDAG representation given in Fig. 1 is equivalent to the {a mathematical formula}C-QDAG formula given in Fig. 2.
      </paragraph>
      <paragraph>
       By structural induction one can easily show that the semantics of any {a mathematical formula}C-QDAG representation α depends only on its free variables, in the sense that, for any interpretation {a mathematical formula}ω′ over PS which coincides with a given interpretation ω on all the free variables of α, ω is a model of α if and only if {a mathematical formula}ω′ is a model of α. Accordingly, the semantics of a {a mathematical formula}C-QDAG representation α in an interpretation ω over PS is fully determined by α and the restriction of ω over {a mathematical formula}Var(α).
      </paragraph>
      <paragraph>
       Clearly enough, renaming at the same time a quantified occurrence of a variable x in a quantification ∃x or ∀x occurring in a {a mathematical formula}C-QDAG formula α, and every occurrence of x in α which depends on the quantification leads to a {a mathematical formula}C-QDAG formula equivalent to α. Furthermore, such a renaming process can be achieved in time linear in the size of α.
      </paragraph>
      <paragraph>
       However, things are much more tricky when general {a mathematical formula}C-QDAG representations (not reduced to formulae) are considered. Consider for instance the quantification ∃q occurring in the {a mathematical formula}C-QDAG representation α reported at Fig. 1, where {a mathematical formula}C={∧,∨,¬,⊕}. The occurrence of variable q in the leaf of α labelled with literal q depends on this quantification. Replacing q by the fresh variable s in ∃q and at this occurrence would not lead to a representation equivalent to α since s would be a free variable of the resulting representation. Indeed, there exist four paths from the root of α to that leaf, and three of them do not contain any quantified occurrence of q. This is salient on the {a mathematical formula}C-QDAG formula equivalent to α reported at Fig. 2, and obtained by “unfolding” α. Thus, when some variable occurrence can be both free and bound, renaming quantified variables while preserving equivalence can be a computationally demanding task (the unfolding process may easily lead to an exponential blow-up of the input representation). Actually, when {a mathematical formula}C⊇{∧,∨}, the possibility of having some variable occurrences both free and bound (or to depend on different existential quantifications) in {a mathematical formula}C-QDAG representations not containing universal quantifications is enough to simulate universal quantifications in them (see [27]). As a consequence, the corresponding class of DAGs is strictly more succinct than the corresponding language of formulae. On the other hand, some problems are computationally easier when formulae (and not DAGs) are considered; for instance, when universal quantifications are disabled, the model checking problem for {a mathematical formula}C-QDAG formulae with {a mathematical formula}C⊇{∧,∨} is “only” NP-complete, while it is PSPACE-complete when the full class of {a mathematical formula}C-QDAG representations without universal quantifications is considered.
      </paragraph>
      <paragraph>
       Conventionally, the representation {a mathematical formula}αN rooted at a decision node {a mathematical formula}N=〈x,N+,N−〉 over {a mathematical formula}x∈PS in the standard representation of an ordered binary decision diagram (i.e., an {a mathematical formula}OBDD&lt; representation) is such that {a mathematical formula}αN≡ite(x,αN+,αN−)≡(x∧αN+)∨(¬x∧αN−). {a mathematical formula}αN+ (resp. {a mathematical formula}αN−), the representation associated with node {a mathematical formula}N+ (resp. {a mathematical formula}N−), is the conditioning of α by x (resp. ¬x), i.e., the representation obtained by replacing every occurrence of x in {a mathematical formula}αN by ⊤ (resp. ⊥).
      </paragraph>
      <paragraph>
       Finally, we consider the following notations. If {a mathematical formula}α∈C-QDAG and {a mathematical formula}X={x1,…,xn}⊆PS, then {a mathematical formula}∃X.α is a short for{a mathematical formula} and {a mathematical formula}∀X.α is a short for{a mathematical formula} (these notations are well-founded since whatever the chosen ordering on X, the resulting representations are logically equivalent).
      </paragraph>
     </section>
     <section label="2.3">
      KROM, HORN, AFF, {a mathematical formula}K/H, and renH
      <paragraph>
       In the following, we will focus on several well-known propositional languages, namely the Krom CNF language KROM (also known as the bijunctive fragment) [23], the Horn CNF language HORN[24], and the affine language AFF (also known as the biconditional fragment) [25], as well as {a mathematical formula}K/H (Krom or Horn CNF formulae) and renH, the language of renamable Horn CNF formulae [26].
      </paragraph>
      <paragraph>
       The languages KROM, HORN, AFF, {a mathematical formula}K/H, and renH are formally defined as follows:
      </paragraph>
      <paragraph label="Definition 3">
       {a mathematical formula}KROM,HORN,AFF,K/H, and renH
      </paragraph>
      <list>
       <list-item label="•">
        The language KROM is the subset of all CNF formulae in which each clause is binary, i.e., it contains at most two literals.
       </list-item>
       <list-item label="•">
        The language HORN is the subset of all CNF formulae in which each clause is Horn, i.e., it contains at most one positive literal.
       </list-item>
       <list-item label="•">
        The language {a mathematical formula}K/H is the union of KROM and HORN.
       </list-item>
       <list-item label="•">
        The language renH is the subset of all CNF formulae α for which there exists a subset V of {a mathematical formula}Var(α) (called a Horn renaming for α) such that the formula noted {a mathematical formula}V(α) obtained by substituting in α every literal l of {a mathematical formula}LV by its complementary literal {a mathematical formula}l¯ is a HORN formula.
       </list-item>
       <list-item label="•">
        The language AFF is the subset of {a mathematical formula}C-DAG with {a mathematical formula}C={∧,¬,⊕}, consisting of conjunctions of XOR-clauses where a XOR-clause is a finite XOR-disjunction of literals (the XOR connective is denoted by ⊕).
       </list-item>
      </list>
      <paragraph>
       Here are some examples of formulae from KROM, HORN, renH, and AFF:
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}(x∨y)∧(¬y∨z) is a KROM formula.
       </list-item>
       <list-item label="•">
        {a mathematical formula}(¬x∨¬y∨z)∧(¬y∨z) is a HORN formula.
       </list-item>
       <list-item label="•">
        {a mathematical formula}(x∨y∨z)∧(¬x∨¬y∨z) is a renH formula.{a mathematical formula}V={x,z} is a Horn renaming for it.
       </list-item>
       <list-item label="•">
        {a mathematical formula}(x⊕¬y⊕⊤)∧(¬x⊕y⊕z) is an AFF formula.
       </list-item>
      </list>
      <paragraph>
       Clearly enough, determining whether a given {a mathematical formula}C-QDAG representation α (for any fixed C) is a KROM (resp. HORN, {a mathematical formula}K/H, AFF) formula can be easily achieved in time polynomial in the size of α. Note also that there exists linear time algorithms for recognizing renH formulae (see e.g. [28], [29]); furthermore, such recognition algorithms typically give a Horn renaming when it exists.
      </paragraph>
      <paragraph>
       KROM, HORN, AFF, {a mathematical formula}K/H, and renH are known as polynomial classes for the sat problem (i.e., the restriction of sat to any of them is in polynomial time – stated otherwise, each of them satisfies CO). However, none of them is fully expressive w.r.t. propositional logic (there exist propositional formulae, like {a mathematical formula}(x∨y∨z)∧(¬x∨¬y∨¬z), which cannot be represented in any of them); this severely restricts their attractiveness for the KC purpose.
      </paragraph>
      <paragraph>
       Interestingly, KROM, HORN, and AFF have semantical characterizations in terms of closures of sets of models:
      </paragraph>
      <list>
       <list-item label="•">
        A set S of interpretations over a finite {a mathematical formula}V⊆PS is the set of models of a KROM formula α such that {a mathematical formula}Var(α)=V if and only if it is closed for majority [30], [25], i.e., {a mathematical formula}∀ω1,ω2,ω3∈S, the interpretation {a mathematical formula}maj(ω1,ω2,ω3) over V belongs to S as well. Here {a mathematical formula}maj(ω1,ω2,ω3) is defined by {a mathematical formula}∀x∈V, {a mathematical formula}maj(ω1,ω2,ω3)(x)=1 if at least two interpretations among {a mathematical formula}ω1,ω2,ω3 give the truth value 1 to x.
       </list-item>
       <list-item label="•">
        A set S of interpretations over a finite {a mathematical formula}V⊆PS is the set of models of a HORN formula α such that {a mathematical formula}Var(α)=V if and only if it is closed for the bitwise AND connective [31], [32], i.e., {a mathematical formula}∀ω1,ω2∈S, the interpretation {a mathematical formula}and(ω1,ω2) over V belongs to S. Here {a mathematical formula}and(ω1,ω2) is defined by {a mathematical formula}∀x∈V, {a mathematical formula}and(ω1,ω2)(x)=1 if {a mathematical formula}ω1(x)=ω2(x)=1.
       </list-item>
       <list-item label="•">
        A set S of interpretations over a finite {a mathematical formula}V⊆PS is the set of models of an AFF formula α such that {a mathematical formula}Var(α)=V if and only if S is closed for the ternary ⊕ connective [30], [25], i.e., {a mathematical formula}∀ω1,ω2,ω3∈S, the interpretation {a mathematical formula}⊕(ω1,ω2,ω3) over V belongs to S. Here {a mathematical formula}⊕(ω1,ω2,ω3) is defined by {a mathematical formula}∀x∈V, {a mathematical formula}⊕(ω1,ω2,ω3)(x)=ω1(x)⊕ω2(x)⊕ω3(x).
       </list-item>
      </list>
      <paragraph>
       These characterization results can be exploited to show that some propositional formulae cannot be expressed as KROM (resp. HORN, AFF) formulae.
      </paragraph>
     </section>
    </section>
    <section label="3">
     <section-title>
      Queries, transformations, expressiveness and succinctness
     </section-title>
     <paragraph>
      Let us now briefly recall the sets of queries and transformations used for comparing propositional languages in [1], as well as the notions of expressiveness and succinctness; their importance is discussed in depth in [1], so we refrain from recalling it here.
     </paragraph>
     <section label="3.1">
      <section-title>
       Queries
      </section-title>
      <paragraph>
       The basic queries considered in [1] and subsequent papers concern {a mathematical formula}DAG-NNF representations; they include tests for consistency (CO), validity (VA), clausal entailment (CE), implicants (IM), equivalence (EQ), sentential entailment (SE), counting (CT) and enumerating theory models (ME). We extend them to {a mathematical formula}C-QDAG representations and add to them MC, the model checking query, which is trivially offered by unquantified representations, but not by quantified representations in the general case.
      </paragraph>
      <paragraph label="Definition 4">
       QueriesLet {a mathematical formula}L denote any subset of {a mathematical formula}C-QDAG.
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}L satisfies CO, the consistency query (resp. VA, the validity query) if there exists a polynomial-time algorithm that maps every representation α from {a mathematical formula}L to 1 if α is consistent (resp. valid), and to 0 otherwise.
       </list-item>
       <list-item label="•">
        {a mathematical formula}L satisfies CE, the clausal entailment query, if there exists a polynomial-time algorithm that maps every pair {a mathematical formula}〈α,δ〉, where α is a representation from {a mathematical formula}L and δ is a clause, to 1 if {a mathematical formula}α⊨δ holds, and to 0 otherwise.
       </list-item>
       <list-item label="•">
        {a mathematical formula}L satisfies EQ, the equivalence query (resp. SE, the sentential entailment query) if there exists a polynomial-time algorithm that maps every pair {a mathematical formula}〈α,β〉 of representations from {a mathematical formula}L to 1 if {a mathematical formula}α≡β (resp. {a mathematical formula}α⊨β) holds, and to 0 otherwise.
       </list-item>
       <list-item label="•">
        {a mathematical formula}L satisfies IM, the implicant query, if there exists a polynomial-time algorithm that maps every pair {a mathematical formula}〈α,γ〉, where α is a representation from {a mathematical formula}L and γ is a term, to 1 if {a mathematical formula}γ⊨α holds, and to 0 otherwise.
       </list-item>
       <list-item label="•">
        {a mathematical formula}L satisfies CT, the model counting query, if there exists a polynomial-time algorithm that maps every representation α from {a mathematical formula}L to a nonnegative integer that represents the number of models of α over {a mathematical formula}Var(α) (in binary notation).
       </list-item>
       <list-item label="•">
        {a mathematical formula}L satisfies ME, the model enumeration query, if there exists a polynomial {a mathematical formula}p(.,). and an algorithm that outputs all models of an arbitrary representation α from {a mathematical formula}L in time {a mathematical formula}p(n,m), where n is the size of α and m is the number of its models over {a mathematical formula}Var(α).
       </list-item>
       <list-item label="•">
        {a mathematical formula}L satisfies MC, the model checking query, if there exists a polynomial-time algorithm that maps every pair {a mathematical formula}〈α,ω〉, where α is a representation from {a mathematical formula}L and ω is an interpretation over {a mathematical formula}Var(α), to 1 if I is a model of α, and to 0 otherwise.
       </list-item>
      </list>
     </section>
     <section label="3.2">
      <section-title>
       Transformations
      </section-title>
      <paragraph>
       The basic transformations considered in [1] are conditioning (CD), (possibly bounded) closures under the connectives{sup:3} ∧, ∨, and ¬ ({a mathematical formula}∧C, ∧BC, {a mathematical formula}∨C, ∨BC, {a mathematical formula}¬C) and (possibly bounded) forgetting which can be viewed as a closure operation under existential quantification (FO, SFO). Forgetting is an important transformation as it allows us to focus/project a representation on a set of variables, which proves helpful in many applications, including model-based diagnosis [33], reasoning about actions [34], and reasoning under inconsistency [35], [36]. All those transformations concern {a mathematical formula}DAG-NNF representations. We extend them to {a mathematical formula}C-QDAG representations and enrich the list with two additional transformations, which are dual to (FO, SFO), namely “ensuring” (EN) and the bounded restriction of it (SEN). Ensuring amounts to eliminating universal quantifications and allows us to project a representation on a set of variables in a robust way, i.e., independently of the values of the removed variables. This transformation is central in decision making under uncertainty and non-deterministic planning, see e.g. [37].
      </paragraph>
      <paragraph label="Definition 5">
       TransformationsLet {a mathematical formula}L denote any subset of {a mathematical formula}C-QDAG.
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}L satisfies CD, the conditioning transformation, if there exists a polynomial-time algorithm that maps every pair {a mathematical formula}〈α,γ〉, where α is a representation from {a mathematical formula}L and γ is a consistent term, to a representation from {a mathematical formula}L that is logically equivalent to {a mathematical formula}∃Var(γ).(α∧γ).
       </list-item>
       <list-item label="•">
        {a mathematical formula}L satisfies FO, the forgetting transformation, if there exists a polynomial-time algorithm that maps every pair {a mathematical formula}〈α,X〉, where α is a representation from {a mathematical formula}L and X is a set of variables from PS, to a representation from {a mathematical formula}L equivalent to {a mathematical formula}∃X.α. If the property holds for each singleton X, we say that {a mathematical formula}L satisfies SFO (singleton forgetting).
       </list-item>
       <list-item label="•">
        {a mathematical formula}L satisfies EN, the ensuring transformation, if there exists a polynomial-time algorithm that maps every pair {a mathematical formula}〈α,X〉, where α is a representation from {a mathematical formula}L and X is a set of variables from PS, to a representation from {a mathematical formula}L equivalent to {a mathematical formula}∀X.α. If the property holds for each singleton X, we say that {a mathematical formula}L satisfies SEN (singleton ensuring).
       </list-item>
       <list-item label="•">
        {a mathematical formula}L satisfies {a mathematical formula}∧C, the closure under conjunction transformation (resp. {a mathematical formula}∨C, the closure under disjunction transformation) if there exists a polynomial-time algorithm that maps every finite set of representations {a mathematical formula}α1,…,αn from {a mathematical formula}L to a representation of {a mathematical formula}L that is equivalent to {a mathematical formula}α1∧…∧αn (resp. {a mathematical formula}α1∨…∨αn).
       </list-item>
       <list-item label="•">
        {a mathematical formula}L satisfies ∧BC, the bounded closure under conjunction transformation (resp. ∨BC, the bounded closure under disjunction transformation), if there exists a polynomial-time algorithm that maps every pair of representations α and β from {a mathematical formula}L to a representation of {a mathematical formula}L that is equivalent to {a mathematical formula}α∧β (resp. {a mathematical formula}α∨β).
       </list-item>
       <list-item label="•">
        {a mathematical formula}L satisfies {a mathematical formula}¬C, the closure under negation transformation, if there exists a polynomial-time algorithm that maps every representation α from {a mathematical formula}L to a representation of {a mathematical formula}L which is equivalent to ¬α.
       </list-item>
      </list>
      <paragraph>
       When α is a {a mathematical formula}C-DAG representation (i.e., a non-quantified representation), the conditioning of α by γ can be defined in an equivalent, yet simpler way, as the representation {a mathematical formula}α|γ obtained by replacing in α every occurrence of variable x by ⊤ (resp. ⊥) when x (resp. ¬x) is a literal of γ. Such a characterization cannot be extended to {a mathematical formula}C-QDAG representations in the general case. Especially, considering only those variables x occurring free in α as candidates for the replacement is not enough. Indeed, since DAG-based representations are considered, it can be the case that in α one can find a leaf node N labeled by x such that one path from the root of α to this leaf node does not contain any node labeled by a quantification on x, while other paths from the root to N contain such quantifications (see [27]).
      </paragraph>
     </section>
     <section label="3.3">
      <section-title>
       Expressiveness, succinctness, and polynomial translations
      </section-title>
      <paragraph>
       We consider three notions of translations on classes of propositional representations (here, subsets of {a mathematical formula}C-QDAG), starting from the less demanding one, namely expressiveness:
      </paragraph>
      <paragraph label="Definition 6">
       ExpressivenessLet {a mathematical formula}L1 and {a mathematical formula}L2 be two subsets of {a mathematical formula}C-QDAG. {a mathematical formula}L1 is at least as expressive as{a mathematical formula}L2, denoted {a mathematical formula}L1≤eL2, if for every representation {a mathematical formula}α∈L2, there exists an equivalent representation {a mathematical formula}β∈L1.
      </paragraph>
      <paragraph>
       A first refinement of such a notion of translatability consists in considering only polynomial-space translations, i.e., the size of the translated representation must remain polynomial in the size of the input representation:
      </paragraph>
      <paragraph label="Definition 7">
       SuccinctnessLet {a mathematical formula}L1 and {a mathematical formula}L2 be two subsets of {a mathematical formula}C-QDAG. {a mathematical formula}L1 is at least as succinct as{a mathematical formula}L2, denoted {a mathematical formula}L1≤sL2, if there exists a polynomial p such that for every representation {a mathematical formula}α∈L2, there exists an equivalent representation {a mathematical formula}β∈L1 where {a mathematical formula}|β|≤p(|α|).
      </paragraph>
      <paragraph>
       Finally, we consider still more demanding translations, namely polynomial-time translations:
      </paragraph>
      <paragraph label="Definition 8">
       Polynomial translationLet {a mathematical formula}L1 and {a mathematical formula}L2 be two subsets of {a mathematical formula}C-QDAG. {a mathematical formula}L2 is said to be polynomially translatable into {a mathematical formula}L1, noted {a mathematical formula}L1≤pL2, if there exists a (deterministic) polynomial-time algorithm f such that for every {a mathematical formula}α∈L2, we have {a mathematical formula}f(α)∈L1 and {a mathematical formula}f(α)≡α. We also say that α is polynomially translatable into {a mathematical formula}f(α).
      </paragraph>
      <paragraph>
       Clearly enough, {a mathematical formula}≤e, {a mathematical formula}≤s, and {a mathematical formula}≤p are pre-orders (i.e., reflexive and transitive relations) over the subsets of {a mathematical formula}C-QDAG. Furthermore, we have the inclusions:{a mathematical formula}
      </paragraph>
      <paragraph>
       For each relation {a mathematical formula}≤⁎ among {a mathematical formula}≤e, {a mathematical formula}≤s, and {a mathematical formula}≤p, the relation {a mathematical formula}∼⁎ denotes the symmetric part of {a mathematical formula}≤⁎, defined by {a mathematical formula}L1∼⁎L2 if {a mathematical formula}L1≤⁎L2 and {a mathematical formula}L2≤⁎L1. By construction, each {a mathematical formula}∼⁎ is an equivalence relation (i.e., a reflexive, symmetric and transitive relation). On the other hand,the relation {a mathematical formula}&lt;⁎ denotes the asymmetric part of {a mathematical formula}≤⁎, defined by {a mathematical formula}L1&lt;⁎L2 if {a mathematical formula}L1≤⁎L2 and {a mathematical formula}L2≰⁎L1. By construction, each {a mathematical formula}&lt;⁎ is a strict order (i.e., an irreflexive and transitive relation).
      </paragraph>
      <paragraph>
       In the following, {a mathematical formula}L1≰s⁎L2 means that {a mathematical formula}L1≰sL2 unless the polynomial hierarchy PH collapses (which is considered very unlikely in complexity theory).
      </paragraph>
      <paragraph>
       When {a mathematical formula}L1≤eL2 holds, every representation from {a mathematical formula}L2 can be translated into an equivalent representation from {a mathematical formula}L1. The minimal elements w.r.t. {a mathematical formula}≤e (i.e., the most expressive elements) of the set of all subsets of {a mathematical formula}C-QDAG when C is any functionally complete set of connectives (especially, as soon as C contains ∨ and ∧ since leaf nodes of {a mathematical formula}C-QDAG representations are labeled by literals) are called complete propositional classes: they can provide a representation (up to logical equivalence) of any Boolean function.
      </paragraph>
      <paragraph>
       When {a mathematical formula}L1∼eL2 (resp. {a mathematical formula}L1∼sL2, {a mathematical formula}L1∼pL2), {a mathematical formula}L1 and {a mathematical formula}L2 are said to be equally expressive (resp. equally succinct, polynomially equivalent).
      </paragraph>
      <paragraph>
       Whenever {a mathematical formula}L1 is polynomially translatable into {a mathematical formula}L2, every query which can be answered in polynomial time in {a mathematical formula}L2 can also be answered in polynomial time in {a mathematical formula}L1; and conversely, every query which cannot be answered in polynomial time in {a mathematical formula}L1 unless {a mathematical formula}P=NP cannot be answered in polynomial time in {a mathematical formula}L2, unless {a mathematical formula}P=NP. Furthermore, polynomially equivalent classes are equally efficient in the sense that they possess the same set of tractable queries and transformations.
      </paragraph>
     </section>
    </section>
    <section label="4">
     <section-title>
      On closures of propositional representations
     </section-title>
     <paragraph>
      Intuitively, a closure principle applied to a class {a mathematical formula}L of propositional representations defines a new class, called a closure of {a mathematical formula}L, through the (implicit) application of “operators” (i.e., connectives from C or quantifications) to the representations from {a mathematical formula}L. Formally:
     </paragraph>
     <paragraph label="Definition 9">
      ClosureLet {a mathematical formula}L⊆C-QDAG and {a mathematical formula}△⊆C∪{∀,∃}. The closure{a mathematical formula}L[△] of {a mathematical formula}L by △ is the subset of {a mathematical formula}C-QDAG inductively defined as follows{sup:4}:
     </paragraph>
     <list>
      <list-item label="1.">
       if {a mathematical formula}α∈L, then {a mathematical formula}α∈L[△],
      </list-item>
      <list-item label="2.">
       if {a mathematical formula}c∈△ is an n-ary connective and {a mathematical formula}α1,…,αn are elements of {a mathematical formula}L[△] such that {a mathematical formula}∀i,j∈{1,…,n}, if {a mathematical formula}i≠j then {a mathematical formula}αi and {a mathematical formula}αj do not share any common (nonempty) subgraphs, then {a mathematical formula}c(α1,…,αn)∈L[△],
      </list-item>
      <list-item label="3.">
       if {a mathematical formula}c∈△ is a quantifier, {a mathematical formula}x∈PS, and {a mathematical formula}α∈L[△], then {a mathematical formula}cx.α∈L[△].
      </list-item>
     </list>
     <paragraph>
      Each element of {a mathematical formula}L[△] can be viewed as a “tree” which “internal nodes” are labeled by connectives from C or quantifications and its “leaf nodes” correspond to “independent” representations from {a mathematical formula}L. Accordingly, the representations {a mathematical formula}αi considered in item 2. of Definition 9 do not share any common subgraphs.
     </paragraph>
     <paragraph>
      Clearly, if there exists a polynomial-time algorithm for determining whether a given representation {a mathematical formula}α∈C-QDAG belongs or not to {a mathematical formula}L, then there also exists a polynomial-time algorithm for determining whether a given representation {a mathematical formula}α∈C-QDAG belongs or not to the closure {a mathematical formula}L[△] of {a mathematical formula}L by △.
     </paragraph>
     <paragraph>
      We have derived the following (easy) proposition, which rules the inclusions between closures depending on the way their sets of connectives are related by set inclusion:
     </paragraph>
     <paragraph label="Proposition 1">
      For every subset{a mathematical formula}L,{a mathematical formula}L′of{a mathematical formula}C-QDAGand every subset{a mathematical formula}△1,{a mathematical formula}△2of{a mathematical formula}C∪{∃,∀}, we have:
     </paragraph>
     <list>
      <list-item label="0.">
       {a mathematical formula}L⊆L[△1], and if{a mathematical formula}L⊆L′, then{a mathematical formula}L[△1]⊆L′[△1].
      </list-item>
      <list-item label="1.">
       {a mathematical formula}(L[△1])[△2]⊆L[△1∪△2].
      </list-item>
      <list-item label="2.">
       {a mathematical formula}(L[△1])[△1]=L[△1].
      </list-item>
      <list-item label="3.">
       If{a mathematical formula}△1⊆△2then{a mathematical formula}L[△1]⊆L[△2].
      </list-item>
      <list-item label="4.">
       If{a mathematical formula}△1⊆△2then{a mathematical formula}(L[△1])[△2]=L[△2]and{a mathematical formula}(L[△2])[△1]=L[△2].
      </list-item>
     </list>
     <paragraph>
      Some additional properties stating how some closures of a class {a mathematical formula}L can be composed, can be derived when bound variables can be “freely” renamed in the {a mathematical formula}L representations. The property of stability by uniform renaming, given at Definition 10, characterizes the subsets of {a mathematical formula}C-QDAG for which, intuitively, the choice of variable names in the {a mathematical formula}L representations does not really matter:
     </paragraph>
     <paragraph label="Definition 10">
      Stability by uniform renamingLet {a mathematical formula}L be any subset of {a mathematical formula}C-QDAG. {a mathematical formula}L is stable by uniform renaming if for every {a mathematical formula}α∈L, for every non-empty subset V of variables occurring in α, there exist arbitrarily many distinct bijections {a mathematical formula}ri ({a mathematical formula}i∈N) from V to subsets {a mathematical formula}Vi of fresh variables from PS (i.e., for each {a mathematical formula}i,j∈N with {a mathematical formula}i≠j, we have {a mathematical formula}Vi∩Vj=Vi∩V=∅) such that the representation {a mathematical formula}ri(α) obtained by replacing in α (in a uniform way) every occurrence of {a mathematical formula}x∈V (either quantified or non-quantified) by {a mathematical formula}ri(x) belongs to {a mathematical formula}L as well.
     </paragraph>
     <paragraph>
      This condition is not very demanding: all the “standard” classes of propositional representations (quantified or not) are stable by uniform renaming (when based on a countably infinite set PS as this is the case here). Special attention must nevertheless be paid to the {a mathematical formula}OBDD&lt; language, and more generally to every class based on an ordered set of propositional variables. For the {a mathematical formula}OBDD&lt; case where &lt; is a strict and complete ordering over PS  we may assume the ordered set (PS, &lt;) to be of order type η (η is the order type of the set of rational numbers equipped with its usual ordering [38]). This restriction is harmless since the set of variables occurring in any {a mathematical formula}OBDD&lt; representation is finite. In a nutshell, whatever the way the variables occurring in a given {a mathematical formula}OBDD&lt; representation α are ordered w.r.t. &lt;, one must be able to “insert” in this ordering arbitrarily many fresh variables between two variables of α while preserving the way other variables are ordered. Order type η clearly allows it (between two distinct rational numbers one can find countably many rationals). To make things clearer, let us give a counter-example: let {a mathematical formula}PS={xi|i∈N} ordered in such a way that for every {a mathematical formula}i∈N, {a mathematical formula}xi&lt;xi+1. Consider an {a mathematical formula}OBDD&lt; representation of {a mathematical formula}x0∨x1 as given in Fig. 3. &lt; is not of type η. Take {a mathematical formula}V={x0}: {a mathematical formula}x0 cannot be renamed into a different variable from PS without questioning the ordering requirement over {a mathematical formula}OBDD&lt;, which shows that {a mathematical formula}OBDD&lt; is not stable by uniform renaming in this case.
     </paragraph>
     <paragraph>
      Straightforwardly, the closure by any set of connectives/quantifiers of any class of propositional representations, which is stable by uniform renaming, also is stable by uniform renaming.
     </paragraph>
     <paragraph>
      We are now ready to present more specific results. The following polynomial (dual) equivalences, showing that existential quantifications (resp. universal quantifications) when viewed as “operators” “distribute” over disjunctions (resp. conjunctions), are well-known:{a mathematical formula}{a mathematical formula}
     </paragraph>
     <paragraph>
      It can then be shown that:
     </paragraph>
     <paragraph label="Proposition 2">
      Let{a mathematical formula}Lbe any subset of{a mathematical formula}C-QDAGs.t.{a mathematical formula}Lis stable by uniform renaming. We have:
     </paragraph>
     <list>
      <list-item label="•">
       {a mathematical formula}(L[∃])[∨]∼p(L[∨])[∃]∼pL[∨,∃].
      </list-item>
      <list-item label="•">
       {a mathematical formula}(L[∀])[∧]∼p(L[∧])[∀]∼pL[∧,∀].
      </list-item>
     </list>
     <paragraph>
      Fig. 4 illustrates the polynomial equivalences between disjunctive closures given at Proposition 2.
     </paragraph>
     <paragraph>
      Proposition 1 and Proposition 2 show together that when {a mathematical formula}△={∨,∃} (resp. {a mathematical formula}{∧,∀}) closing {a mathematical formula}L[△] by subsets of △ in an iterative fashion does not lead to a “new” class, i.e., a class which is not polynomially equivalent to {a mathematical formula}L. Especially, we have{a mathematical formula} This shows, so to say, that the “sequential” closure of a propositional class, stable by uniform renaming, by a set of operators among {a mathematical formula}{∨,∃} (resp. among {a mathematical formula}{∧,∀}) is polynomially equivalent to its “parallel” closure. No similar result can be systematically guaranteed for arbitrary choices of classes and operators. For instance, if {a mathematical formula}L is the set of literals over PS, then the “sequential” closure {a mathematical formula}(L[∨])[∧] is the set of all CNF formulae, the “sequential” closure {a mathematical formula}(L[∧])[∨] is the set of all DNF formulae, and the “parallel” closure {a mathematical formula}L[∨,∧] is the set of all NNF representations. It is well-known that those three languages are not pairwise polynomially equivalent (indeed, we have {a mathematical formula}CNF≰sDNF, {a mathematical formula}DNF≰sCNF, {a mathematical formula}NNF&lt;sCNF, and {a mathematical formula}NNF&lt;sDNF, see e.g. [39]). Similarly, if {a mathematical formula}L=CLAUSE, then {a mathematical formula}(L[∧])[∃] and {a mathematical formula}L[∧,∃] are polynomially equivalent to {a mathematical formula}CNF[∃], but {a mathematical formula}(L[∃])[∧] is polynomially equivalent to CNF, which is not polynomially equivalent to {a mathematical formula}CNF[∃]. Indeed, whatever C, {a mathematical formula}C-DAG is polynomially translatable into {a mathematical formula}CNF[∃] using Tseitin's extension principle [40], while CNF is not at least as succinct as {a mathematical formula}C-DAG as soon as {a mathematical formula}C⊇{∧,∨,¬} (indeed, CNF is not at least as succinct as the subset DNF of NNF, which is itself a subset of {a mathematical formula}C-DAG in this case).
     </paragraph>
     <paragraph>
      We have derived the following proposition, which relates the queries and the transformations offered by {a mathematical formula}L, with the queries and transformations offered by its disjunctive closures {a mathematical formula}L[∨] (the disjunction closure of {a mathematical formula}L), {a mathematical formula}L[∃] (the existential closure of {a mathematical formula}L), and {a mathematical formula}L[∨,∃] (the full disjunctive closure of {a mathematical formula}L).
     </paragraph>
     <paragraph label="Proposition 3">
      Let{a mathematical formula}Lbe any subset of{a mathematical formula}C-QDAGs.t.{a mathematical formula}Lis stable by uniform renaming.
     </paragraph>
     <list>
      <list-item label="•">
       If{a mathematical formula}LsatisfiesCO(resp.CD), then{a mathematical formula}L[∨],{a mathematical formula}L[∃]and{a mathematical formula}L[∨,∃]satisfyCO(resp.CD).
      </list-item>
      <list-item label="•">
       If{a mathematical formula}LsatisfiesCOandCD, then{a mathematical formula}LsatisfiesCEandME.
      </list-item>
      <list-item label="•">
       If{a mathematical formula}LsatisfiesCOandCD, then{a mathematical formula}L,{a mathematical formula}L[∨],{a mathematical formula}L[∃]and{a mathematical formula}L[∨,∃]satisfyMC.
      </list-item>
      <list-item label="•">
       {a mathematical formula}L[∨]and{a mathematical formula}L[∨,∃]satisfy{a mathematical formula}∨C(hence ∨BC) and{a mathematical formula}L[∃]and{a mathematical formula}L[∨,∃]satisfyFO(henceSFO).
      </list-item>
      <list-item label="•">
       If{a mathematical formula}LsatisfiesFO(resp.SFO), then{a mathematical formula}L[∨]satisfiesFO(resp.SFO).
      </list-item>
      <list-item label="•">
       If{a mathematical formula}Lsatisfies{a mathematical formula}∧C(resp. ∧BC,{a mathematical formula}∨C, ∨BC), then{a mathematical formula}L[∃]satisfies{a mathematical formula}∧C(resp. ∧BC,{a mathematical formula}∨C, ∨BC).
      </list-item>
     </list>
     <paragraph>
      Note that applying disjunctive closures do not preserve other queries or transformations in the general case. Thus:
     </paragraph>
     <list>
      <list-item label="•">
       If {a mathematical formula}L satisfies VA (resp. IM, CT, EQ, and SE), then it can be the case that {a mathematical formula}L[∨] does not satisfy it. For instance, TERM satisfies each of VA, IM, CT, EQ, and SE, but {a mathematical formula}TERM[∨]=DNF does not satisfy any of them unless {a mathematical formula}P=NP[1].
      </list-item>
      <list-item label="•">
       If {a mathematical formula}L satisfies VA (resp. IM, CT, EQ, and SE), then it can be the case that {a mathematical formula}L[∃] does not satisfy it. Thus, {a mathematical formula}L=CNF satisfies VA and IM but {a mathematical formula}CNF[∃] does not satisfy any of them unless {a mathematical formula}P=NP; indeed, DNF (which does not offer any of them) is polynomially translatable into {a mathematical formula}CNF[∃] using Tseitin's transformation [40]. Similarly, {a mathematical formula}L=HORN satisfies both EQ and SE, but {a mathematical formula}HORN[∃] does not offer any of them (see Proposition 5). Finally, the subset {a mathematical formula}L=d-DNF of DNF consisting of deterministic DNF formulae (i.e., the DNF formulae {a mathematical formula}α=⋁i=1nγi such that for each {a mathematical formula}i,j∈1,…,n, if {a mathematical formula}i≠j, then the terms {a mathematical formula}γi and {a mathematical formula}γj are such that {a mathematical formula}γi∧γj is inconsistent) satisfies CT, but {a mathematical formula}d-DNF[∃] does not. Indeed, DNF is polynomially translatable into {a mathematical formula}d-DNF[∃]: with each DNF formula {a mathematical formula}α=⋁i=1nγi we can associate in polynomial time the equivalent {a mathematical formula}d-DNF[∃] formula {a mathematical formula}∃{y1,…,yn}.⋁i=1n(yi∧⋀j=1i−1¬yj∧γi), where {a mathematical formula}{y1,…,yn} is a set of fresh variables (disjoint from {a mathematical formula}Var(α)).
      </list-item>
      <list-item label="•">
       If {a mathematical formula}L satisfies {a mathematical formula}∧C, then it can be the case that {a mathematical formula}L[∨] does not satisfy it. Thus, {a mathematical formula}L=TERM satisfies {a mathematical formula}∧C, but {a mathematical formula}TERM[∨]=DNF does not, unless {a mathematical formula}P=NP[1].
      </list-item>
      <list-item label="•">
       If {a mathematical formula}L satisfies {a mathematical formula}¬C, then it can be the case that none of {a mathematical formula}L[∨] and {a mathematical formula}L[∃] satisfies it. Thus, {a mathematical formula}L=OBDD&lt; satisfies {a mathematical formula}¬C, but none of {a mathematical formula}OBDD&lt;[∨] and {a mathematical formula}OBDD&lt;[∃] satisfies {a mathematical formula}¬C unless {a mathematical formula}P=NP. As to {a mathematical formula}OBDD&lt;[∨], this comes from the fact that {a mathematical formula}TERM≥pOBDD&lt;, which implies that {a mathematical formula}DNF≥pOBDD&lt;[∨]. Since every CNF formula α is polynomially translatable into the negation of a DNF formula β, if {a mathematical formula}OBDD&lt;[∨] would satisfy {a mathematical formula}¬C, then the consistency of α could be tested in polynomial time by computing first an {a mathematical formula}OBDD&lt;[∨] representation equivalent to β, then “negating” it to reach an {a mathematical formula}OBDD&lt;[∨] representation equivalent to α. Indeed, since {a mathematical formula}OBDD&lt; satisfies CO, {a mathematical formula}OBDD&lt;[∨] also satisfies CO (see Proposition 3). As to {a mathematical formula}OBDD&lt;[∃], we can make a rather similar proof given that {a mathematical formula}OBDD&lt;[∃] also satisfies CO (see again Proposition 3). To get the proof, it is enough to show that {a mathematical formula}OBDD&lt;[∨]≥pOBDD&lt;[∃]: let {a mathematical formula}α=⋁i=1nαi be an {a mathematical formula}OBDD&lt;[∨] representation; let {a mathematical formula}y1,…,yn be variables from {a mathematical formula}PS∖Var(α) such that each {a mathematical formula}yi ({a mathematical formula}i∈1,…,n) precedes every variable from {a mathematical formula}Var(α). From α, we can generate in polynomial time the {a mathematical formula}OBDD&lt; representation{a mathematical formula} To conclude the proof it is enough to observe that α is equivalent to the {a mathematical formula}OBDD&lt;[∃] representation {a mathematical formula}∃{y1,…,yn}.β.
      </list-item>
      <list-item label="•">
       If {a mathematical formula}L satisfies EN, then it can be the case that {a mathematical formula}L[∨] does not satisfy it. Thus, {a mathematical formula}L=TERM satisfies EN, but {a mathematical formula}TERM[∨]=DNF does not, unless {a mathematical formula}P=NP, since a DNF formula α is valid iff its universal closure {a mathematical formula}∀Var(α).α is valid iff {a mathematical formula}∀Var(α).α is consistent (since {a mathematical formula}∀Var(α).α has no free variable, it is equivalent to ⊤ or to ⊥, hence it is consistent precisely when it is valid), and DNF satisfies CO.
      </list-item>
      <list-item label="•">
       If {a mathematical formula}L satisfies EN, then it can be the case that {a mathematical formula}L[∃] does not satisfy it. Thus, {a mathematical formula}L=CNF satisfies EN, but {a mathematical formula}CNF[∃] does not, unless PH collapses. This comes easily from the fact that the validity problem for {a mathematical formula}CNF[∃] formulae of the form {a mathematical formula}∃X.α is {a mathematical formula}Π2p-complete. Indeed, {a mathematical formula}∃X.α is valid iff the (closed) quantified Boolean formula {a mathematical formula}∀Var(α)∖X.(∃X.α) is valid.
      </list-item>
     </list>
    </section>
    <section label="5">
     On the disjunctive closures of KROM, HORN, AFF, {a mathematical formula}K/H, and renH
     <paragraph>
      Let us now focus on the disjunctive closures of KROM, HORN, AFF, {a mathematical formula}K/H, and renH.
     </paragraph>
     <paragraph>
      First of all, it is obvious that the four languages KROM, HORN, {a mathematical formula}K/H, and AFF are stable by uniform renaming. This is also the case for renH: if V is a Horn renaming for a renH formula α, and if {a mathematical formula}αX′ is the CNF formula obtained by substituting in a uniform way in α every occurrence of a variable v from {a mathematical formula}X⊆PS by the fresh variable {a mathematical formula}v′, then {a mathematical formula}αX′ also is a renH formula and {a mathematical formula}V′={v∈Var(α′)|v∈V∖X}∪{v′∈Var(α′)|v∈V∩X} is a Horn renaming for it.
     </paragraph>
     <paragraph>
      Now, thanks to Proposition 1, Proposition 2, it is enough to consider the three disjunctive closures {a mathematical formula}L[∃], {a mathematical formula}L[∨], and {a mathematical formula}L[∨,∃] with {a mathematical formula}L being any on the five above languages. Clearly enough, the disjunction (resp. existential, full disjunctive) closure of any language among KROM, HORN, {a mathematical formula}K/H, renH, and AFF is also stable by uniform renaming.
     </paragraph>
     <paragraph>
      Applying the disjunctive closure principles {a mathematical formula}[∨], {a mathematical formula}[∃], and {a mathematical formula}[∨,∃] to the five languages KROM, HORN, {a mathematical formula}K/H, renH, and AFF leads to consider fifteen additional languages. The following easy result shows that some of the resulting languages do not need to be considered separately, because they are polynomially equivalent.
     </paragraph>
     <paragraph label="Proposition 4">
      <list>
       <list-item label="•">
        {a mathematical formula}KROM∼pKROM[∃].
       </list-item>
       <list-item label="•">
        {a mathematical formula}KROM[∨]∼pKROM[∨,∃].
       </list-item>
       <list-item label="•">
        {a mathematical formula}AFF∼pAFF[∃].
       </list-item>
       <list-item label="•">
        {a mathematical formula}AFF[∨]∼pAFF[∨,∃].
       </list-item>
      </list>
     </paragraph>
     <paragraph>
      As a direct consequence, we have that KROM and {a mathematical formula}KROM[∃] (resp. AFF and {a mathematical formula}AFF[∃], {a mathematical formula}KROM[∨] and {a mathematical formula}KROM[∨,∃], {a mathematical formula}AFF[∨] and {a mathematical formula}AFF[∨,∃]) are both (pairwise) equally succinct and equally expressive.
     </paragraph>
     <paragraph>
      Accordingly, we focus in the following on the sixteen languages: KROM, HORN, {a mathematical formula}K/H, renH, AFF, {a mathematical formula}HORN[∃], {a mathematical formula}K/H[∃], {a mathematical formula}renH[∃], {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨], {a mathematical formula}K/H[∨], {a mathematical formula}renH[∨], {a mathematical formula}AFF[∨], {a mathematical formula}HORN[∨,∃], {a mathematical formula}K/H[∨,∃], and {a mathematical formula}renH[∨,∃].
     </paragraph>
     <paragraph>
      From Proposition 1, we get that:{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}
     </paragraph>
     <paragraph>
      Obviously enough, from the definitions of the languages KROM, HORN, {a mathematical formula}K/H, and renH, we also have the following inclusions:{a mathematical formula}{a mathematical formula}{a mathematical formula}
     </paragraph>
     <paragraph>
      From such results, we immediately derive that:{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}
     </paragraph>
     <paragraph>
      In addition, since every consistent KROM formula is a renH formula{sup:5} and since KROM satisfies CO, with every {a mathematical formula}K/H formula we can associate in polynomial time an equivalent renH formula, i.e., {a mathematical formula}K/H≥prenH. As a consequence, we also get that{a mathematical formula}{a mathematical formula}{a mathematical formula}
     </paragraph>
     <paragraph>
      Finally, since for every subset {a mathematical formula}L of {a mathematical formula}C-QDAG, {a mathematical formula}L⊆L[∨]⊆L[∨,∃], ⊆ is included into {a mathematical formula}≥p, and both ⊆ and {a mathematical formula}≥p are transitive relations, a number of additional inclusions/polynomial translatability results can be directly obtained from the results above; they will be exploited in some forthcoming proofs.
     </paragraph>
     <section label="5.1">
      <section-title>
       Queries and transformations
      </section-title>
      <paragraph>
       As to queries, we have obtained the following results:
      </paragraph>
      <paragraph label="Proposition 5">
       The results inTable 1hold.
      </paragraph>
      <paragraph>
       As to transformations, we have obtained the following results:
      </paragraph>
      <paragraph label="Proposition 6">
       The results inTable 2hold.
      </paragraph>
     </section>
     <section label="5.2">
      <section-title>
       Expressiveness
      </section-title>
      <paragraph>
       It is well-known that none of the languages KROM, HORN, {a mathematical formula}K/H, renH, or AFF is complete for propositional logic. For instance, there is no formula from any of these languages which is equivalent to the CNF formula {a mathematical formula}(x∨y∨z)∧(¬x∨¬y∨¬z). This is problematic for many applications; indeed, what can be done when the available information cannot be represented in the targeted language? Approximating it is not always an option, especially because the best approximation of the available information can be rough and the missing pieces of information in the approximation can be crucial ones for reasoning and/or decision making. In the following, we are going to prove that while considering the existential closure of any of those languages does not increase its expressiveness, switching to its disjunction closure (or to its full disjunctive closure) is enough to recover a complete propositional language, thus escaping from the above mentioned expressiveness problem.
      </paragraph>
      <paragraph>
       Let us start with the existential closures of KROM, HORN, {a mathematical formula}K/H, renH, and AFF. First, since KROM (resp. AFF) is polynomially equivalent to {a mathematical formula}KROM[∃] (resp. {a mathematical formula}AFF[∃]), it turns out that those languages are (pairwise) equally expressive: {a mathematical formula}KROM[∃]∼eKROM, and {a mathematical formula}AFF[∃]∼eAFF. Similarly, we have derived the following expressiveness results, showing that the existential closure of any language {a mathematical formula}L among HORN, {a mathematical formula}K/H, and renH is not more expressive than {a mathematical formula}L itself.
      </paragraph>
      <paragraph label="Proposition 7">
       <list>
        <list-item label="•">
         {a mathematical formula}HORN[∃]∼eHORN.
        </list-item>
        <list-item label="•">
         {a mathematical formula}K/H[∃]∼eK/H.
        </list-item>
        <list-item label="•">
         {a mathematical formula}renH[∃]∼erenH.
        </list-item>
       </list>
      </paragraph>
      <paragraph>
       Now, from the definitions of KROM, HORN, {a mathematical formula}K/H, renH, the fact that {a mathematical formula}K/H≥prenH, and the fact that {a mathematical formula}x∨y is a KROM formula, which is not equivalent to a HORN one, {a mathematical formula}¬x∨¬y∨¬z is a HORN formula which is not equivalent to a KROM one, {a mathematical formula}x∨y∨z is a renH formula which is not equivalent to a {a mathematical formula}K/H one, we easily get that:{a mathematical formula}{a mathematical formula}{a mathematical formula}
      </paragraph>
      <paragraph>
       In addition, AFF and any of KROM, HORN, {a mathematical formula}K/H, renH are incomparable w.r.t. {a mathematical formula}≤e. Indeed, there is no renH formula equivalent to the AFF formula {a mathematical formula}x⊕y⊕z. This comes from the fact that every CNF formula equivalent to {a mathematical formula}x⊕y⊕z must contain the four clauses {a mathematical formula}x∨y∨z, {a mathematical formula}¬x∨¬y∨z, {a mathematical formula}x∨¬y∨¬z, {a mathematical formula}¬x∨y∨¬z since those clauses are essential prime implicates of {a mathematical formula}x⊕y⊕z, plus the fact that by construction, every CNF formula containing the clauses {a mathematical formula}x∨y∨z, {a mathematical formula}¬x∨¬y∨z, {a mathematical formula}x∨¬y∨¬z, {a mathematical formula}¬x∨y∨¬z is not renamable Horn (renaming at least two variables in the first clause to make it a Horn clause also changes one of the remaining three clauses into a non-Horn one). Conversely, there is no AFF formula equivalent to {a mathematical formula}¬x∨¬y, which is both in KROM and in HORN. This is a direct consequence of the semantical characterization result concerning AFF recalled in Section 2.3: with {a mathematical formula}x&lt;y, {a mathematical formula}ω1=00, {a mathematical formula}ω2=01, and {a mathematical formula}ω3=10 are models of {a mathematical formula}¬x∨¬y, but {a mathematical formula}⊕(ω1,ω2,ω3)=11 is not a model of {a mathematical formula}¬x∨¬y.
      </paragraph>
      <paragraph>
       Let us finally switch to the disjunction closures and the full disjunctive closures of KROM, HORN, {a mathematical formula}K/H, renH, or AFF; interestingly, the eight languages defined as such are equally, and fully, expressive:
      </paragraph>
      <paragraph label="Proposition 8">
       {a mathematical formula}KROM[∨],{a mathematical formula}HORN[∨],{a mathematical formula}K/H[∨],{a mathematical formula}renH[∨],{a mathematical formula}AFF[∨],{a mathematical formula}HORN[∨,∃],{a mathematical formula}K/H[∨,∃],{a mathematical formula}renH[∨,∃]are complete propositional languages.
      </paragraph>
      <paragraph>
       Fig. 5 depicts the expressiveness relationships identified in the above propositions.
      </paragraph>
     </section>
     <section label="5.3">
      <section-title>
       Succinctness
      </section-title>
      <paragraph>
       As to incomplete languages, since KROM (resp. AFF) is polynomially equivalent to {a mathematical formula}KROM[∃] (resp. {a mathematical formula}AFF[∃]), those languages are (pairwise) equally succinct: {a mathematical formula}KROM[∃]∼sKROM, and {a mathematical formula}AFF[∃]∼sAFF. More interestingly, we have obtained the following succinctness results, showing that the existential closure of any language {a mathematical formula}L among HORN, {a mathematical formula}K/H, and renH is strictly more succinct than {a mathematical formula}L itself.
      </paragraph>
      <paragraph label="Proposition 9">
       <list>
        <list-item label="•">
         {a mathematical formula}HORN[∃]&lt;sHORN.
        </list-item>
        <list-item label="•">
         {a mathematical formula}K/H[∃]&lt;sK/H.
        </list-item>
        <list-item label="•">
         {a mathematical formula}renH[∃]&lt;srenH.
        </list-item>
        <list-item label="•">
         renH and{a mathematical formula}K/H[∃]are incomparable w.r.t.{a mathematical formula}≤s.
        </list-item>
        <list-item label="•">
         {a mathematical formula}K/Hand{a mathematical formula}HORN[∃]are incomparable w.r.t.{a mathematical formula}≤s.
        </list-item>
       </list>
      </paragraph>
      <paragraph>
       Fig. 6 summarizes the succinctness relationships among incomplete languages identified in Proposition 9. We observe that it does not coincide with the corresponding expressiveness picture, restricted to incomplete languages (see Fig. 5).
      </paragraph>
      <paragraph>
       As to complete languages, our succinctness results mainly focus on the five languages {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨,∃], {a mathematical formula}K/H[∨,∃], {a mathematical formula}renH[∨,∃], {a mathematical formula}AFF[∨], the full disjunctive closures of the incomplete languages KROM, HORN, {a mathematical formula}K/H, renH, AFF considered at start.{sup:6}
      </paragraph>
      <paragraph>
       There are several reasons for this focus:
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨,∃], {a mathematical formula}K/H[∨,∃], {a mathematical formula}renH[∨,∃], {a mathematical formula}AFF[∨] are complete languages, while KROM, HORN, {a mathematical formula}K/H, renH, AFF and their existential closures are not (see Proposition 7 and Proposition 8 above).
       </list-item>
       <list-item label="•">
        {a mathematical formula}HORN[∨,∃], {a mathematical formula}K/H[∨,∃], {a mathematical formula}renH[∨,∃] satisfy the same queries as the corresponding disjunction closures, namely {a mathematical formula}HORN[∨], {a mathematical formula}K/H[∨], {a mathematical formula}renH[∨] (see Proposition 5), and more transformations than them (see Proposition 6), since they offer FO “for free”.
       </list-item>
       <list-item label="•">
        due to the obvious inclusion {a mathematical formula}HORN[∨]⊆HORN[∨,∃], we have that {a mathematical formula}HORN[∨,∃] is at least as succinct as {a mathematical formula}HORN[∨]; and similarly for {a mathematical formula}K/H[∨,∃] and {a mathematical formula}renH[∨,∃].
       </list-item>
      </list>
      <paragraph>
       Actually, we can strengthen this point by proving that the full disjunctive closure of HORN (resp. {a mathematical formula}K/H, renH) is strictly more succinct than the corresponding disjunction closure:
      </paragraph>
      <paragraph label="Proposition 10">
       <list>
        <list-item label="•">
         {a mathematical formula}HORN[∨,∃]&lt;sHORN[∨].
        </list-item>
        <list-item label="•">
         {a mathematical formula}K/H[∨,∃]&lt;sK/H[∨].
        </list-item>
        <list-item label="•">
         {a mathematical formula}renH[∨,∃]&lt;srenH[∨].
        </list-item>
       </list>
      </paragraph>
      <paragraph>
       Thus, the full disjunctive closures of the incomplete languages KROM, HORN, {a mathematical formula}K/H, renH, AFF are either equally succinct as the corresponding disjunction closures (this is the case for the closures of KROM and of AFF), or strictly more succinct than them (for the three remaining languages).
      </paragraph>
      <paragraph>
       Let us now provide the remaining succinctness results we got. We split our results into two propositions (and two tables). In the first table, we compare {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨,∃], {a mathematical formula}K/H[∨,∃], {a mathematical formula}renH[∨,∃], {a mathematical formula}AFF[∨] w.r.t. spatial efficiency {a mathematical formula}≤s.
      </paragraph>
      <paragraph label="Proposition 11">
       The results inTable 3hold.
      </paragraph>
      <paragraph>
       As a direct consequence of Proposition 11, we have that{a mathematical formula}{a mathematical formula}
      </paragraph>
      <paragraph>
       One can observe that the resulting succinctness picture is similar to the expressiveness picture for the corresponding incomplete fragments AFF, renH, {a mathematical formula}K/H, HORN, KROM.
      </paragraph>
      <paragraph>
       In Proposition 12, we compare w.r.t. {a mathematical formula}≤s the languages {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨,∃], {a mathematical formula}K/H[∨,∃], {a mathematical formula}renH[∨,∃] and {a mathematical formula}AFF[∨] with several classes of propositional representations for KC which have been introduced so far, and with CNF. We specifically focus on those target classes for which compilers have been developed, i.e., PI, IP, DNF, {a mathematical formula}OBDD&lt;, {a mathematical formula}d-DNNF, and {a mathematical formula}DNNFT.
      </paragraph>
      <paragraph label="Proposition 12">
       The results inTable 4hold.
      </paragraph>
      <paragraph>
       Fig. 7 depicts the succinctness relationships reported mainly in Proposition 11 and Proposition 12. The closure languages considered in this paper are underlined.
      </paragraph>
     </section>
     <section label="5.4">
      <section-title>
       Discussion
      </section-title>
      <paragraph>
       Let us now compare in more details the five languages KROM, HORN, {a mathematical formula}K/H, renH, and AFF, with their closures and with other classes of propositional representations considered so far for knowledge compilation.
      </paragraph>
      <paragraph>
       We start with the existential closures. Since applying the existential closure principle to any of KROM, HORN, {a mathematical formula}K/H, renH, and AFF does not change its expressiveness, the existential closures of KROM, HORN, {a mathematical formula}K/H, renH, and AFF are incomplete languages as well. {a mathematical formula}KROM[∃] (resp. {a mathematical formula}AFF[∃]) is polynomially equivalent to KROM (resp. AFF) since KROM and AFF satisfy FO. As a consequence, {a mathematical formula}KROM[∃] and {a mathematical formula}AFF[∃] satisfy the same queries and transformations as their underlying language, and {a mathematical formula}KROM[∃] and {a mathematical formula}AFF[∃] are equally succinct as KROM and AFF, respectively. For the remaining existential closures (namely, {a mathematical formula}HORN[∃], {a mathematical formula}K/H[∃], {a mathematical formula}renH[∃]), all the transformations already offered by HORN, {a mathematical formula}K/H, renH, are preserved and FO is obtained “for free”. However, some queries offered by HORN, {a mathematical formula}K/H, and renH (EQ, SE) are not preserved. This seems to be the price to be paid for the gain in succinctness the existential closures offer. Indeed, we have {a mathematical formula}HORN[∃]&lt;sHORN, {a mathematical formula}K/H[∃]&lt;sK/H, and {a mathematical formula}renH[∃]&lt;srenH. Thus, for applications where their expressiveness proves enough and EQ and SE are not expected but FO is, {a mathematical formula}renH[∃] (resp. {a mathematical formula}HORN[∃]) appears as a better choice than renH (resp. HORN) as a target language for KC.
      </paragraph>
      <paragraph>
       Unlike existential closures, the disjunction closures and the full disjunctive closures of KROM, HORN, {a mathematical formula}K/H, renH, and AFF are complete propositional languages, i.e., fully expressive ones. Furthermore, switching from any of KROM, HORN, {a mathematical formula}K/H, renH, or AFF to its disjunction closure or its full disjunctive closure leads to get {a mathematical formula}∨C (hence ∨BC) “for free” and FO, when it was not already offered. Conversely, some queries and transformations primarily offered are then lost; as to queries, this is the case for VA, IM, EQ, SE for the five languages, plus CT satisfied by AFF but not by any of its disjunction closure or its full disjunctive closure; as to transformations, this is the case for EN and {a mathematical formula}∧C (and even SEN, which is satisfied by renH but not satisfied by {a mathematical formula}renH[∨] or {a mathematical formula}renH[∨,∃], unless {a mathematical formula}P=NP). Just like considering the existential closures of HORN, {a mathematical formula}K/H, renH leads to strictly more succinct languages, considering the existential closures of {a mathematical formula}HORN[∨], {a mathematical formula}K/H[∨], {a mathematical formula}renH[∨] leads as well to strictly more succinct languages since {a mathematical formula}HORN[∨,∃]&lt;sHORN[∨], {a mathematical formula}K/H[∨,∃]&lt;sK/H[∨], and {a mathematical formula}renH[∨,∃]&lt;srenH[∨]. Thus, it turns out that the full disjunctive closures of KROM, HORN,{a mathematical formula}K/H, renH, and AFF are always at least as interesting as the corresponding disjunction closures from a KC perspective: as to KROM and AFF, those closures are polynomially equivalent, hence equally interesting; as to HORN, {a mathematical formula}K/H, renH, both closures satisfy the same queries, while each full disjunctive closure offers FO (not satisfied by the corresponding disjunction closure) and is strictly more succinct than the underlying language.
      </paragraph>
      <paragraph>
       Comparing now one another the full disjunctive closures of KROM, HORN, {a mathematical formula}K/H, renH, AFF  it turns out that none of them is strictly dominated by another one from the KC point of view. All of them are equally expressive, and they satisfy precisely the same queries CO, CE, ME, MC. As to transformations, {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨,∃], and {a mathematical formula}AFF[∨] satisfy CD, FO, SFO, SEN, ∧BC, {a mathematical formula}∨C and ∨BC. They are pairwise incomparable w.r.t. succinctness. While {a mathematical formula}K/H[∨,∃] is strictly more succinct than each of {a mathematical formula}KROM[∨], or {a mathematical formula}HORN[∨,∃], it does not offer SEN, and while {a mathematical formula}renH[∨,∃] is strictly more succinct than {a mathematical formula}K/H[∨,∃], it does not offer ∧BC.
      </paragraph>
      <paragraph>
       Finally, it is interesting to compare the full disjunctive closures of KROM, HORN, {a mathematical formula}K/H, renH, AFF, with previous complete classes of representations for propositional logic, which have been considered as target classes for KC. One focuses on IP, DNF, PI, {a mathematical formula}OBDD&lt;, {a mathematical formula}DNNFT, and {a mathematical formula}d-DNNF:
      </paragraph>
      <list>
       <list-item label="•">
        IP satisfies all the queries but CT, and no transformation but CD, EN, SEN and ∧BC. Hence each of the full disjunctive closures of KROM, HORN, AFF satisfies less queries than IP but they are incomparable w.r.t. transformations. Furthermore, IP is strictly less succinct than any of the full disjunctive closures of KROM, HORN, {a mathematical formula}K/H, renH, AFF.
       </list-item>
       <list-item label="•">
        DNF satisfies the same queries as any of the full disjunctive closures of KROM, HORN, {a mathematical formula}K/H, renH, AFF, and the same transformations as {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨,∃], and {a mathematical formula}AFF[∨]. Since it is strictly less succinct than any of the full disjunctive closures of KROM, HORN, {a mathematical formula}K/H, renH, AFF, it appears as dominated by {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨,∃], and {a mathematical formula}AFF[∨].
       </list-item>
       <list-item label="•">
        PI satisfies all the queries but CT, and the transformations CD, FO, SFO, ∨BC. Hence, any of the full disjunctive closures of KROM, HORN, {a mathematical formula}K/H, renH, AFF satisfies more transformations than PI. In addition, PI is incomparable w.r.t. succinctness with any of them.
       </list-item>
       <list-item label="•">
        {a mathematical formula}OBDD&lt; satisfies all the queries and the transformations CD, SFO, SEN, ∧BC, ∨BC, and {a mathematical formula}¬C. Hence it offers more queries than the full disjunctive closures of KROM, HORN, {a mathematical formula}K/H, renH, AFF, but it is incomparable with any of them when transformations are considered. {a mathematical formula}OBDD&lt; is also incomparable w.r.t. succinctness with any of the full disjunctive closures of KROM, HORN, {a mathematical formula}K/H, renH, AFF.
       </list-item>
       <list-item label="•">
        {a mathematical formula}DNNFT satisfies the same queries as any of the full disjunctive closures of KROM, HORN, {a mathematical formula}K/H, renH, AFF, and the same transformations as {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨,∃], and {a mathematical formula}AFF[∨]. It is incomparable w.r.t. succinctness with any of them.
       </list-item>
       <list-item label="•">
        {a mathematical formula}d-DNNF satisfies all the queries but SE, and it is unknown whether it offers EQ. As to transformations, it offers only CD (it is unknown whether it satisfies EN, SEN, or {a mathematical formula}¬C, but it is known that it does not satisfy the other transformations). Thus, the full disjunctive closures of KROM, HORN, {a mathematical formula}K/H, renH, AFF satisfy less queries than {a mathematical formula}d-DNNF but offer additional transformations. Furthermore, {a mathematical formula}d-DNNF is incomparable w.r.t. succinctness with any of the full disjunctive closures of KROM, HORN, {a mathematical formula}K/H, renH, AFF (unless the polynomial hierarchy collapses).
       </list-item>
      </list>
      <paragraph>
       Thus, none of the full disjunctive closures of KROM, HORN,{a mathematical formula}K/H, renH, and AFF is strictly dominated by any of IP, DNF, PI, {a mathematical formula}OBDD&lt;, {a mathematical formula}DNNFT, and {a mathematical formula}d-DNNF, viewing the set of queries, the set of transformations and the succinctness relation as comparison criteria.
      </paragraph>
     </section>
    </section>
    <section label="6">
     <section-title>
      Conclusion and perspectives
     </section-title>
     <section label="6.1">
      <section-title>
       Conclusion
      </section-title>
      <paragraph>
       In the light of the results reported in the previous sections, the following conclusions can be drawn.
      </paragraph>
      <paragraph>
       Generally speaking, the disjunctive closures of classes {a mathematical formula}L of propositional representations appear as interesting target classes for KC when the application under consideration expects tractability for the queries and transformations CO, CD and their consequences (e.g., CE, ME), as well as FO and/or {a mathematical formula}∨C (depending on the type of closure which is considered). Especially, as soon as {a mathematical formula}L is stable by uniform renaming, the transformations FO, {a mathematical formula}∨C are offered “for free” by the full disjunctive closure {a mathematical formula}L[∨,∃] (even if the underlying class {a mathematical formula}L does not offer any of them), while CO, CD are preserved by the closure. The other queries and transformations considered in the KC map are not guaranteed to be offered or to survive a disjunctive closure operation in the general case.
      </paragraph>
      <paragraph>
       Considering specific disjunctive closures may allow for preserving additional queries or transformations, and for increasing the expressiveness of the underlying language. Thus, the disjunction closure and the full disjunctive closure of any language {a mathematical formula}L containing TERM are complete propositional languages, even if {a mathematical formula}L is not (KROM, HORN, {a mathematical formula}K/H, renH, and AFF are such languages). Clearly enough, fully expressive propositional languages are highly expected by many applications.
      </paragraph>
      <paragraph>
       Of course, it cannot be guaranteed in the general case that the size of a compiled form remains “small enough” when a disjunctive closure is targeted. Nevertheless, every disjunctive closure of a class {a mathematical formula}L includes {a mathematical formula}L as a subset, hence applying a disjunctive closure principle to a class {a mathematical formula}L decreases neither the expressiveness nor the succinctness of {a mathematical formula}L. Actually, applying any/both of those two principles may lead to new classes, which can prove strictly more expressive and strictly more succinct than the underlying class {a mathematical formula}L. Thus, each of the disjunction closure and the full disjunctive closure of any of KROM, HORN, {a mathematical formula}K/H, renH, and AFF is strictly more expressive than the underlying language. Furthermore, the full disjunctive closure {a mathematical formula}HORN[∨,∃] (resp. {a mathematical formula}K/H[∨,∃], {a mathematical formula}renH[∨,∃]) is strictly more succinct than the corresponding disjunction closure {a mathematical formula}HORN[∨] (resp. {a mathematical formula}K/H[∨], {a mathematical formula}renH[∨]).
      </paragraph>
      <paragraph>
       Now, from the application point of view, there are many important problems in AI and in other fields of Computer Science, where one is interested in encoding some pieces of information using representations for which CO, CD, FO and ME are computationally easy.
      </paragraph>
      <paragraph>
       For instance, in model-based diagnosis, it makes sense to compile the description of the system to be diagnosed (during an off-line phase) in order to be able to generate efficiently consistency-based diagnoses, for a number of observations available on-line only [33], [41], [42]. Such diagnoses are the models of the system description, once conditioned by the given observation and then projected onto the variables expressing the components statuses (in the simplest case, faulty or not). Accordingly, if the system description has been compiled first into a representation which satisfies CO, CD, FO and ME, then the diagnoses can be computed in input-output polynomial time. Our results thus show full disjunctive closures of languages {a mathematical formula}L satisfying the stability by uniform renaming condition as valuable target languages for the compilation, as soon as {a mathematical formula}L satisfies CO and CD (which is the case for KROM, HORN, {a mathematical formula}K/H, renH, and AFF).
      </paragraph>
      <paragraph>
       In product configuration and interactive recommendation, it is also important to offer some response-time guarantees to the front-end user, especially when the interaction is Web-based. In order to achieve this goal, an approach consists in compiling the product catalog into a propositional representation (the models of it representing the feasible products). Among the operations required by the configuration process are propagating the user's choices (the CD transformation), testing whether at least one feasible product is compatible with the user's choices (the CO query), and listing a fixed number of feasible products compatible with the user's choices (see e.g. [43], [44]). Often, the feasible products are described using two types of variables (or “codes” [45]): the customer variables – the variables the user controls – and the manufacturer control variables – which express some information related to the factory or to the distribution of the product, and are not available to the user. Thus, the manufacturer control variables must be forgotten from the representation before listing the solutions. Our results show that those operations can be achieved efficiently when the catalog has been compiled into a full disjunctive closure of a class {a mathematical formula}L of propositional representations, stable by uniform renaming, and satisfying CO and CD. In particular, the task of enumerating a preset number of solutions is feasible in polynomial time in this case (Algorithm 1 given in Appendix A is a polynomial delay enumeration procedure).
      </paragraph>
      <paragraph>
       Beyond AI applications, enumerating models once projected on a given set of variables appears as a fundamental issue for a number of problems considered in software engineering and formal methods. Thus, in the setting of automatic case generation based on propositional logic, such models correspond to test cases [46]. The problem all-sat (or “all-solutions” sat) which consists in enumerating the assignments to “important” variables of a propositional representation, which can be extended to models, turns out to be very significant in symbolic model checking [47], which explains that dedicated algorithms have been developed for solving it [48]. Indeed, this problem is considered for predicate abstraction [49], and re-parameterization in symbolic simulation [50]. In reachability analysis, one is interested in computing the set of states reachable from (resp. leading to) a given set of states under a transition relation; this is called the image (resp. pre-image) computation problem. The transition relation T can be modeled as a Boolean function T over {a mathematical formula}X∪Y∪X′, complete terms {a mathematical formula}γX over X (resp. {a mathematical formula}X′) are used to denote states before (resp. after) a transition and complete terms {a mathematical formula}γY over Y represent inputs making precise the transition. By construction, the models of {a mathematical formula}∃Y.T|γX (resp. {a mathematical formula}∃Y.T|γX′) represent the image of {a mathematical formula}γX (resp. the pre-image of {a mathematical formula}γX′) by T. The “important” variables are those of {a mathematical formula}X′ (resp. X). Accordingly, many sat solvers have been customized into all-sat solvers precisely for computing images or pre-images (see e.g. [51], [52]) from CNF representations of transition relations. In practice, such sat-based approaches to symbolic model checking can prove much more efficient than {a mathematical formula}OBDD&lt;-based approaches on some instances, which coheres with the fact that the succinctness of {a mathematical formula}OBDD&lt; and the succinctness of CNF are incomparable [53]. Interestingly, when T is represented as a full disjunctive closure of a class {a mathematical formula}L of propositional representations, stable by uniform renaming, and satisfying CO and CD, both the computation of {a mathematical formula}∃Y.T|γX (resp. {a mathematical formula}∃Y.T|γX′) and the enumeration of its models can be achieved in polynomial time (in the size of the input plus the size of the output). Contrastingly, no response-time guarantee can be ensured in the general case for computing a single model when T is represented as a CNF formula.
      </paragraph>
      <paragraph>
       Thus, for each of the applications above, considering full disjunctive closures for the representation purpose can prove to be a reasonable choice.
      </paragraph>
     </section>
     <section label="6.2">
      <section-title>
       Perspectives
      </section-title>
      <paragraph>
       This work calls for several perspectives.
      </paragraph>
      <paragraph>
       One of them concerns the problem of closed-world reasoning. Indeed, the disjunction covers of HORN and renH are known as interesting target languages when propositional formulae are to be interpreted under some form of the closed-world assumption, like the extended closed-world assumption (ECWA) [54], the extended generalized closed-world assumption (EGCWA) [55], the generalized closed-world assumption (GCWA) [56] or the careful closed-world assumption (CCWA) [57]. To be more precise, though inference from a propositional formula interpreted under ECWA, EGCWA, GCWA or CCWA is {a mathematical formula}Π2p-hard, its complexity is at most at the first level of the polynomial hierarchy when the formula belongs to {a mathematical formula}HORN[∨] or to {a mathematical formula}renH[∨][58]. Furthermore, the complexity of inference under EGCWA falls down to P when {a mathematical formula}HORN[∨] formulae are considered, or when GCWA is considered and queries are limited to CNF formulae. Finally, it turns out that the complexity of closed-world reasoning is the same one for {a mathematical formula}HORN[∨] formulae and for DNF formulae, despite the fact that DNF is strictly less succinct than {a mathematical formula}HORN[∨]. It would be interesting to identify the complexity of closed-world reasoning for full disjunctive closures, especially those of HORN and renH.
      </paragraph>
      <paragraph>
       Another important issue for further research is the design and the evaluation of compilers targeting the disjunctive closures introduced in the paper. Actually, compilers targeting some of those closures considered here do exist. Thus, Boufkhad et al. [6] present some compilation algorithms targeting {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨], {a mathematical formula}K/H[∨], and {a mathematical formula}renH[∨], and evaluate them on a number of benchmarks. While the obtained results show the feasibility of computing disjunction closure compilations, we can hardly use them to compare the practical significance of the corresponding closures with {a mathematical formula}OBDD&lt; and {a mathematical formula}DNNFT for which some experimental results are also available. Indeed, the compilation algorithms given in [6] are based on an old-style DPLL sat solver, and the performances of such solvers are dramatically overtaken by those of modern sat solvers, based on a CDCL architecture.
      </paragraph>
      <paragraph>
       Interestingly, Nishimura et al. [59] have shown that the problem of determining whether a given CNF formula α has a strong KROM-backdoor set (resp. a strong HORN-backdoor set) containing at most k variables is fixed-parameter tractable with parameter k. Similarly, Samer and Szeider [60] have shown that the problem of determining whether a given CNF formula α has a KROM-backdoor tree (resp. a HORN-backdoor tree) containing at most k leaves is fixed-parameter tractable with parameter k. The algorithm given in [60] can be used to determine “efficiently” (i.e., for sufficiently “small” k) whether a {a mathematical formula}KROM[∨] compilation or a {a mathematical formula}HORN[∨] compilation of “reasonable” size (i.e., linear in k and the size of α) exists. As mentioned in [60]: “There is some empirical evidence that real-world instances actually have small backdoor sets”. Such instances also have “small” {a mathematical formula}HORN[∨] representations (hence, “small” {a mathematical formula}K/H[∨] and “small” {a mathematical formula}renH[∨] representations).{sup:7} This explains why it makes sense to develop new compilation algorithms targeting disjunction closures.
      </paragraph>
      <paragraph>
       Incorporating existentially quantified variables in the representations during the compilation phase in order to generate full disjunctive closures also appears as an interesting perspective. Indeed, new variables can be introduced as “names” given to arbitrarily complex subformulae of the input formula (using equivalences); the point is that equivalence w.r.t. the input formula is preserved when such variables are existentially quantified. Taking advantage of it can dramatically reduce the size of the compiled forms (our succinctness results show that exponential gaps in the representation size can be achieved thanks to existential closure); the difficulty is to determine when introducing new variables (this is reminiscent to the general problem of lemmatization in automated reasoning).
      </paragraph>
      <paragraph>
       Finally, the fact that each of {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨,∃], and {a mathematical formula}AFF[∨] satisfies ∧BC paves the way for bottom-up compilation algorithms for those classes. As noted in [18], this is important for applications from formal verification based on unbounded model checking which require bottom-up, incremental compilation of formulae, where pieces of information are compiled independently and then conjoined together. This explains why {a mathematical formula}HORN[∨,∃], and {a mathematical formula}AFF[∨] which offers CD, FO, ∧BC, and ME appear as valuable candidates for the image/pre-image computation problem considered in reachability analysis, as discussed above. Indeed, {a mathematical formula}OBDD&lt;, which offers CD, FO, ∧BC, and ME as well, has been extensively used for the purpose of symbolic model checking [62]; furthermore, we have shown that the succinctness of {a mathematical formula}HORN[∨,∃], and of {a mathematical formula}AFF[∨] are incomparable with the succinctness of {a mathematical formula}OBDD&lt;. Since each of {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨,∃], and {a mathematical formula}AFF[∨] satisfies CO and includes CLAUSE, getting ∧BC is optimal in the sense that no class of propositional representations containing CLAUSE can satisfy both {a mathematical formula}∧C and CO, unless {a mathematical formula}P=NP.
      </paragraph>
     </section>
    </section>
   </content>
   <appendices>
    <section label="Appendix A">
     <section-title>
      Proofs
     </section-title>
     <paragraph label="Proposition 1">
      For every subset{a mathematical formula}L,{a mathematical formula}L′of{a mathematical formula}C-QDAGand every subset{a mathematical formula}△1,{a mathematical formula}△2of{a mathematical formula}C∪{∃,∀}, we have:
     </paragraph>
     <list>
      <list-item label="0.">
       {a mathematical formula}L⊆L[△1], and if{a mathematical formula}L⊆L′, then{a mathematical formula}L[△1]⊆L′[△1].
      </list-item>
      <list-item label="1.">
       {a mathematical formula}(L[△1])[△2]⊆L[△1∪△2].
      </list-item>
      <list-item label="2.">
       {a mathematical formula}(L[△1])[△1]=L[△1].
      </list-item>
      <list-item label="3.">
       If{a mathematical formula}△1⊆△2then{a mathematical formula}L[△1]⊆L[△2].
      </list-item>
      <list-item label="4.">
       If{a mathematical formula}△1⊆△2then{a mathematical formula}(L[△1])[△2]=L[△2]and{a mathematical formula}(L[△2])[△1]=L[△2].
      </list-item>
     </list>
     <paragraph label="Proof">
      <list>
       <list-item label="0.">
        Obvious.
       </list-item>
       <list-item label="1.">
        {a mathematical formula}(L[△1])[△2]⊆L[△1∪△2] is immediate from Definition 9; indeed, the construction of any representation from {a mathematical formula}(L[△1])[△2] requires only representations from {a mathematical formula}L[△1] and operators in {a mathematical formula}△2; and the construction of any representation from {a mathematical formula}L[△1] requires only representations from {a mathematical formula}L and operators in {a mathematical formula}△1. Thus, if representations from {a mathematical formula}L and operators in {a mathematical formula}△1∪△2 are available, then any representation from {a mathematical formula}(L[△1])[△2] can be generated.
       </list-item>
       <list-item label="2.">
        {a mathematical formula}(L[△1])[△1]=L[△1]: considering the inclusion reported at item 1. in this proof with {a mathematical formula}△2=△1, we get {a mathematical formula}(L[△1])[△1]⊆L[△1]; the converse inclusion {a mathematical formula}L[△1]⊆(L[△1])[△1] follows from the inclusion at item 0. in this proof.
       </list-item>
       <list-item label="3.">
        If {a mathematical formula}△1⊆△2 then {a mathematical formula}L[△1]⊆L[△2]: the inclusion at item 0. in this proof shows that {a mathematical formula}L[△1]⊆(L[△1])[△2], and item 1. in this proof shows that {a mathematical formula}(L[△1])[△2]⊆L[△1∪△2]. The fact that {a mathematical formula}L[△1∪△2] is equal to {a mathematical formula}L[△2] when {a mathematical formula}△1⊆△2 completes the proof.
       </list-item>
       <list-item label="4.">
        Suppose that {a mathematical formula}△1⊆△2. Then, from the equality reported at item 2. in this proof, since {a mathematical formula}△1∪△2=△2, we have {a mathematical formula}(L[△1])[△2]⊆L[△2] and {a mathematical formula}(L[△2])[△1]⊆L[△2]. Conversely, the inclusion at item 0. in this proof shows that {a mathematical formula}L[△2]⊆(L[△2])[△1]; finally, {a mathematical formula}L[△2]⊆(L[△1])[△2] derives from the fact that {a mathematical formula}L⊆L[△1] (which is again ensured the inclusion at item 0. in this proof), and the implication reported at item 0. as well.
       </list-item>
      </list>
      <paragraph>
       □
      </paragraph>
     </paragraph>
     <paragraph label="Proposition 2">
      Let{a mathematical formula}Lbe any subset of{a mathematical formula}C-QDAGs.t.{a mathematical formula}Lis stable by uniform renaming. We have:
     </paragraph>
     <list>
      <list-item label="•">
       {a mathematical formula}(L[∃])[∨]∼p(L[∨])[∃]∼pL[∨,∃].
      </list-item>
      <list-item label="•">
       {a mathematical formula}(L[∀])[∧]∼p(L[∧])[∀]∼pL[∧,∀].
      </list-item>
     </list>
     <paragraph label="Proof">
      We just prove the first point of the proposition; the second one is similar (by duality). The facts that {a mathematical formula}L[∨,∃]≤p(L[∨])[∃] and {a mathematical formula}L[∨,∃]≤p(L[∃])[∨] come immediately from the inclusions {a mathematical formula}L[∨,∃]⊇(L[∨])[∃] and {a mathematical formula}L[∨,∃]⊇(L[∃])[∨] (see item 1. in Proposition 1). It remains to show that {a mathematical formula}L[∨,∃]≥p(L[∨])[∃] and {a mathematical formula}L[∨,∃]≥p(L[∃])[∨].
     </paragraph>
     <list>
      <list-item label="•">
       {a mathematical formula}L[∨,∃]≥p(L[∨])[∃]. This comes from the possibility to turn in polynomial time any {a mathematical formula}L[∨,∃] representation into an equivalent, prenex, one while preserving the set of free variables. The proof is by structural induction. Let α be any representation from {a mathematical formula}L[∨,∃]:
      </list-item>
      <list-item label="•">
       {a mathematical formula}L[∨,∃]≥p(L[∃])[∨]. Again, the proof is by structural induction. Let α be any representation from {a mathematical formula}L[∨,∃]:
      </list-item>
     </list>
     <paragraph label="Proposition 3">
      Let{a mathematical formula}Lbe any subset of{a mathematical formula}C-QDAGs.t.{a mathematical formula}Lis stable by uniform renaming.
     </paragraph>
     <list>
      <list-item label="•">
       If{a mathematical formula}LsatisfiesCO(resp.CD), then{a mathematical formula}L[∨],{a mathematical formula}L[∃]and{a mathematical formula}L[∨,∃]satisfyCO(resp.CD).
      </list-item>
      <list-item label="•">
       If{a mathematical formula}LsatisfiesCOandCD, then{a mathematical formula}LsatisfiesCEandME.
      </list-item>
      <list-item label="•">
       If{a mathematical formula}LsatisfiesCOandCD, then{a mathematical formula}L,{a mathematical formula}L[∨],{a mathematical formula}L[∃]and{a mathematical formula}L[∨,∃]satisfyMC.
      </list-item>
      <list-item label="•">
       {a mathematical formula}L[∨]and{a mathematical formula}L[∨,∃]satisfy{a mathematical formula}∨C(hence ∨BC) and{a mathematical formula}L[∃]and{a mathematical formula}L[∨,∃]satisfyFO(henceSFO).
      </list-item>
      <list-item label="•">
       If{a mathematical formula}LsatisfiesFO(resp.SFO), then{a mathematical formula}L[∨]satisfiesFO(resp.SFO).
      </list-item>
      <list-item label="•">
       If{a mathematical formula}Lsatisfies{a mathematical formula}∧C(resp. ∧BC,{a mathematical formula}∨C, ∨BC), then{a mathematical formula}L[∃]satisfies{a mathematical formula}∧C(resp. ∧BC,{a mathematical formula}∨C, ∨BC).
      </list-item>
     </list>
     <paragraph label="Proof">
      <list>
       <list-item label="•">
        As to CO, since {a mathematical formula}L[∨]⊆L[∨,∃] and {a mathematical formula}L[∃]⊆L[∨,∃], it is enough to show that {a mathematical formula}L[∨,∃] satisfies CO. Let α be any representation from {a mathematical formula}L[∨,∃]; since {a mathematical formula}L[∨,∃]∼p(L[∨])[∃] (cf. Proposition 2), we can compute in time polynomial in the size of α an equivalent representation {a mathematical formula}β=∃X.∨(β1,…,βn) where X is a finite subset of PS and each {a mathematical formula}βi ({a mathematical formula}i∈1,…,n) is an {a mathematical formula}L representation. We have that α is consistent iff β is consistent iff {a mathematical formula}∨(β1,…,βn) is consistent iff at least one {a mathematical formula}βi ({a mathematical formula}i∈1,…,n) is consistent. Since the latter can be decided in polynomial time, the conclusion follows.As to CD, let γ be any consistent term. Let α be an {a mathematical formula}L[∨] representation; we have {a mathematical formula}α=∨(β1,…,βn) where each {a mathematical formula}βi ({a mathematical formula}i∈1,…,n) is an {a mathematical formula}L representation. Since ∧ distributes over ∨ and existential quantifications “distribute” over ∨ as well, we have {a mathematical formula}∃Var(γ).(α∧γ)≡∃Var(γ).(∨(β1,…,βn)∧γ)≡∃Var(γ).∨(β1∧γ,…,βn∧γ)≡∨(∃Var(γ).(β1∧γ),…,∃Var(γ).(βn∧γ)). If {a mathematical formula}L satisfies CD, then each {a mathematical formula}∃Var(γ).(βi∧γ) ({a mathematical formula}i∈1,…,n) can be associated in polynomial time with an equivalent {a mathematical formula}L representation {a mathematical formula}βi′. Hence {a mathematical formula}∃Var(γ).(α∧γ) is equivalent to the {a mathematical formula}L[∨] representation {a mathematical formula}∨(β1′,…,βn′) which can be computed in time polynomial in the size of the input. Now let α be an {a mathematical formula}L[∃] representation; we have {a mathematical formula}α=∃X.β where X is a finite subset of PS and β is an {a mathematical formula}L representation.We have {a mathematical formula}∃Var(γ).(α∧γ)≡∃Var(γ[X←X′]).((∃X.β)∧γ[X←X′]) where {a mathematical formula}γ[X←X′] is the representation obtained by replacing in γ every variable {a mathematical formula}x∈Var(γ)∩X by a fresh variable {a mathematical formula}x′, not occurring in β or γ. Since {a mathematical formula}Var(γ[X←X′])∩X=∅, we have that {a mathematical formula}∃Var(γ[X←X′]).((∃X.β)∧γ[X←X′])≡∃Var(γ[X←X′])∪X.(β∧γ[X←X′])≡∃X.(∃Var(γ[X←X′]).(β∧γ[X←X′])). If {a mathematical formula}L satisfies CD, then {a mathematical formula}∃Var(γ[X←X′]).(β∧γ[X←X′]) can be associated in polynomial time with an equivalent {a mathematical formula}L representation {a mathematical formula}β′. Hence {a mathematical formula}∃Var(γ).(α∧γ) is equivalent to the {a mathematical formula}L[∃] representation {a mathematical formula}∃X.β′ which can be computed in time polynomial in the size of the input. Finally, let α be an {a mathematical formula}L[∨,∃] representation; since {a mathematical formula}L[∨,∃]∼p(L[∨])[∃] (cf. Proposition 2), we can compute in time polynomial in the size of α an equivalent representation {a mathematical formula}β=∃X.∨(β1,…,βn) where X is a finite subset of PS and each {a mathematical formula}βi ({a mathematical formula}i∈1,…,n) is an {a mathematical formula}L representation. Then it is enough to combine the two previous proofs to get the desired result.
       </list-item>
       <list-item label="•">
        We generalize some easy lemmata from [1] to the {a mathematical formula}C-QDAG case. As to CE, it is enough to observe that for any {a mathematical formula}C-QDAG representation α and any non-valid clause δ, we have {a mathematical formula}α⊨δ iff {a mathematical formula}α∧¬δ is inconsistent iff {a mathematical formula}∃Var(¬δ).(α∧¬δ) is inconsistent.As to ME, let α be any {a mathematical formula}L representation. Procedure 1 enumerates the models of α over {a mathematical formula}Var(α). It amounts to searching a decision tree T in a depth-first manner. Each branch of T corresponds either to a model of α over {a mathematical formula}Var(α), or to an implicant of ¬α. Each model is represented as a set of literals over {a mathematical formula}Var(α). The procedure is called with {a mathematical formula}γ=∅. Given a total, strict ordering over the variables of {a mathematical formula}Var(α), the function {a mathematical formula}first(α) at Line 4 returns the first variable of α w.r.t. this ordering.Procedure 1 first consists in testing whether α is consistent (Line 1). If α is inconsistent, then the procedure stops; otherwise, one checks whether {a mathematical formula}Var(α) is empty or not (Line 2). If this set is empty, then one returns the model of α stored in the accumulator γ (Line 3). In the remaining case, one computes the first variable x of α (Line 5). Afterwards, the procedure enumerates recursively all the models of {a mathematical formula}α|x by adding x to the accumulator γ (Line 6), then all the models of {a mathematical formula}α|¬x by adding ¬x to the accumulator γ (Line 7). In both cases, a variable is removed (since {a mathematical formula}x∉Var(α|x)∪Var(α|¬x)), hence the number of recursive calls for each branch of T cannot exceed the number of variables of α. Furthermore, since {a mathematical formula}L satisfies CO and CD, the time spent between two successive calls is polynomial in the input size.Procedure 1 is thus a polynomial delay model enumeration algorithm: a first model of α (when it exists) is generated in time polynomial in the size of the input, and after each model generation, the time needed to generate a further model (or to determine that no more models exist) also is polynomial in the size of the input. As a consequence, it runs in time polynomial in the size of the input plus the size of the output.
       </list-item>
       <list-item label="•">
        Due to the inclusions {a mathematical formula}L⊆L[∨], {a mathematical formula}L⊆L[∃]⊆L[∨,∃] (see Proposition 1), it is enough to show that {a mathematical formula}L[∨,∃] satisfies MC. Let α be any {a mathematical formula}L[∨,∃] representation. Since {a mathematical formula}L[∨,∃]∼p(L[∨])[∃] (cf. Proposition 2), we can compute in time polynomial in the size of α an equivalent representation {a mathematical formula}β=∃X.∨(β1,…,βn) where X is a finite subset of PS and each {a mathematical formula}βi ({a mathematical formula}i∈1,…,n) is an {a mathematical formula}L representation. Furthermore, we have {a mathematical formula}Var(β)=Var(α). Let ω be any interpretation over {a mathematical formula}Var(α) and let γ be the consistent term (unique up to logical equivalence) such that {a mathematical formula}Var(γ)=Var(α) and ω is a model of γ. We have {a mathematical formula}ω⊨α iff {a mathematical formula}γ∧β is consistent iff {a mathematical formula}γ∧∨(β1,…,βn) is consistent iff there exists {a mathematical formula}i∈1,…,n such that {a mathematical formula}γ∧βi is consistent iff there exists {a mathematical formula}i∈1,…,n such that {a mathematical formula}∃Var(γ).(βi∧γ) is consistent. Since {a mathematical formula}L satisfies CO and CD, the conclusion follows.
       </list-item>
       <list-item label="•">
        The fact that {a mathematical formula}L[∨] and {a mathematical formula}L[∨,∃] satisfy {a mathematical formula}∨C and {a mathematical formula}L[∃] and {a mathematical formula}L[∨,∃] satisfy FO is obvious (by construction).
       </list-item>
       <list-item label="•">
        We prove the FO case (for SFO just take X as a singleton). Let α be a representation from {a mathematical formula}L[∨] and {a mathematical formula}X⊆PS. By construction, {a mathematical formula}α=∨(β1,…,βn) where each {a mathematical formula}βi ({a mathematical formula}i∈1,…,n) is an {a mathematical formula}L representation. Since existential quantifications “distribute” over ∨, we have {a mathematical formula}∃X.α≡∨(∃X.β1,…,∃X.βn). Now, since {a mathematical formula}L satisfies FO, with each {a mathematical formula}∃X.βi ({a mathematical formula}i∈1,…,n) we can associate in polynomial time an equivalent {a mathematical formula}L representation {a mathematical formula}βi′. Applying the replacement metatheorem,{sup:9} we get that {a mathematical formula}∃X.α≡∨(β1′,…,βn′). Since the {a mathematical formula}L[∨] representation {a mathematical formula}∨(β1′,…,βn′) can be computed in polynomial time in the size of α plus the size of X, the conclusion follows.
       </list-item>
       <list-item label="•">
        We prove the {a mathematical formula}∧C case. Let us consider n representations {a mathematical formula}α1,...,αn from {a mathematical formula}L[∃] where {a mathematical formula}L satisfies {a mathematical formula}∧C. By construction, for each {a mathematical formula}i∈1,…,n, {a mathematical formula}αi is of the form {a mathematical formula}∃Xi.βi where {a mathematical formula}Xi is a finite subset of PS and {a mathematical formula}βi∈L. With each {a mathematical formula}∃Xi.βi we can associate in polynomial time the equivalent representation {a mathematical formula}∃Xii.βi[Xi←Xii] obtained by renaming in a uniform way every occurrence of variable {a mathematical formula}x∈Xi by the fresh variable {a mathematical formula}xi. Whenever {a mathematical formula}βi belongs to {a mathematical formula}L, {a mathematical formula}βi[Xi←Xii] belongs to {a mathematical formula}L as well (due to the stability condition). From the replacement metatheorem, we get that {a mathematical formula}⋀i=1nαi≡⋀i=1n(∃Xi.βi)≡⋀i=1n(∃Xii.βi[Xi←Xii]). By construction, we have {a mathematical formula}Xii∩Xjj=∅ when {a mathematical formula}i≠j. As a consequence, we have {a mathematical formula}⋀i=1n(∃Xii.βi[Xi←Xii])≡∃⋃i=1nXii.(⋀i=1nβi[Xi←Xii]) Since {a mathematical formula}L satisfies {a mathematical formula}∧C, we can turn in polynomial time the representation {a mathematical formula}⋀i=1nβi[Xi←Xii] into an equivalent representation β from {a mathematical formula}L. Since {a mathematical formula}⋀i=1nαi≡∃⋃i=1nXii.β and {a mathematical formula}⋃i=1nXii.β is an {a mathematical formula}L[∃] representation, the conclusion follows. The proof is similar for the remaining cases (∧BC, {a mathematical formula}∨C, ∨BC).
       </list-item>
      </list>
      <paragraph>
       □
      </paragraph>
     </paragraph>
     <paragraph label="Proposition 4">
      <list>
       <list-item label="•">
        {a mathematical formula}KROM∼pKROM[∃].
       </list-item>
       <list-item label="•">
        {a mathematical formula}KROM[∨]∼pKROM[∨,∃].
       </list-item>
       <list-item label="•">
        {a mathematical formula}AFF∼pAFF[∃].
       </list-item>
       <list-item label="•">
        {a mathematical formula}AFF[∨]∼pAFF[∨,∃].
       </list-item>
      </list>
     </paragraph>
     <paragraph label="Proof">
      These polynomial equivalences come easily from the fact that each of KROM and AFF satisfies FO (cf. Proposition 6), plus the fact that existential quantifications “distribute” over disjunctions.  □
     </paragraph>
     <paragraph label="Proposition 5">
      The results inTable 1hold.{a mathematical formula}
     </paragraph>
     <paragraph label="Proof">
      <list>
       <list-item>
        It is well-known that each of KROM, HORN, renH, AFF satisfies CO (cf. [64], [65], [66], [67], [25]). Since deciding whether a {a mathematical formula}C-QDAG representation is in KROM (resp. HORN) can be done in polynomial time, we get that {a mathematical formula}K/H satisfies CO. Then point 1. of Proposition 3 allows to conclude that each of the {a mathematical formula}[∨], {a mathematical formula}[∃], and {a mathematical formula}[∨,∃] closures of those languages satisfies CO as well.
       </list-item>
       <list-item>
        KROM, HORN, {a mathematical formula}K/H and renH satisfy VA since they are subsets of CNF and CNF satisfies VA. AFF satisfies VA since it satisfies CT (indeed, an AFF formula α is valid if and only if it has {a mathematical formula}2n models where n is the cardinality of {a mathematical formula}Var(α)).As to {a mathematical formula}renH[∃], {a mathematical formula}K/H[∃] and {a mathematical formula}HORN[∃], the results hold since each of these languages satisfies IM. Obviously, every subset {a mathematical formula}L of {a mathematical formula}C-QDAG which satisfies IM satisfies VA as well (indeed, {a mathematical formula}α∈L is valid iff it is implied by the term ⊤). Since the proof that each of {a mathematical formula}renH[∃], {a mathematical formula}K/H[∃] and {a mathematical formula}HORN[∃] satisfies IM relies on the fact that {a mathematical formula}HORN[∃] satisfies VA, it just remains to show it. This is easy since a formula α from {a mathematical formula}HORN[∃] is valid if and only if its universal closure is valid. The fact that the validity problem for closed, prenex quantified Boolean formulae with a HORN matrix is in P[68] concludes the proof.Finally, none of {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨], {a mathematical formula}K/H[∨], {a mathematical formula}renH[∨], {a mathematical formula}AFF[∨], {a mathematical formula}HORN[∨,∃], {a mathematical formula}K/H[∨,∃], {a mathematical formula}renH[∨,∃] satisfies VA unless {a mathematical formula}P=NP since each of those languages includes DNF as a subset and DNF does not satisfy VA unless {a mathematical formula}P=NP.
       </list-item>
       <list-item>
        The results come directly from the second item of Proposition 3, given that each of the sixteen languages considered here satisfies both CO and CD.
       </list-item>
       <list-item>
        As to KROM, HORN, {a mathematical formula}K/H, renH, and AFF, the results come from the fact that if a subset of {a mathematical formula}C-QDAG satisfies VA and CD, then it satisfies IM (this slightly extends Lemma A.7 from [1] to {a mathematical formula}C-QDAG representations).Consider now the case of {a mathematical formula}renH[∃], {a mathematical formula}K/H[∃] and {a mathematical formula}HORN[∃]. Since each of {a mathematical formula}K/H[∃] and {a mathematical formula}HORN[∃] is polynomially translatable into {a mathematical formula}renH[∃], it is enough to prove the result for {a mathematical formula}renH[∃]. We first show that the implicant problem for {a mathematical formula}renH[∃] formulae can be reduced in polynomial time into the implicant problem for {a mathematical formula}HORN[∃] formulae. Let {a mathematical formula}∃X.α be a {a mathematical formula}renH[∃] formula such that α is a renH formula, and let γ be a term. Let V be any Horn renaming for α. We have {a mathematical formula}γ⊨∃X.α iff {a mathematical formula}γ⇒(∃X.α) is valid.Now, viewing V as a substitution, one can take advantage of the substitution metatheorem for propositional logic. This theorem (see e.g., [63]) states that for any propositional formula Σ and any substitution σ (a mapping which replaces each variable by a formula), if Σ is valid, then {a mathematical formula}σ(Σ) is valid. With {a mathematical formula}Σ=γ⇒(∃X.α) and {a mathematical formula}σ=V, we get that if {a mathematical formula}γ⇒(∃X.α) is valid, then {a mathematical formula}V(γ⇒(∃X.α)) is valid. Since for every formula β, {a mathematical formula}V(V(β))≡β, we also get that if {a mathematical formula}V(γ⇒(∃X.α)) is valid, then {a mathematical formula}γ⇒(∃X.α) is valid. Altogether, we get that {a mathematical formula}γ⇒(∃X.α) is valid iff {a mathematical formula}V(γ⇒(∃X.α)) is valid. Now, {a mathematical formula}V(γ⇒(∃X.α)) is valid iff {a mathematical formula}V(γ)⇒V(∃X.α) is valid iff {a mathematical formula}V(γ)⊨V(∃X.α).Let ω be any interpretation over {a mathematical formula}Var(α)∪X. Since for every variable x, {a mathematical formula}V(x) is equal to x or is equal to ¬x, {a mathematical formula}V(ω) can be viewed as well as an interpretation over {a mathematical formula}Var(α)∪X. We have {a mathematical formula}ω⊨V(∃X.α) iff {a mathematical formula}V(ω)⊨∃X.α (using the substitution theorem and the fact that for every formula β, {a mathematical formula}V(V(β))≡β) iff there exists an interpretation {a mathematical formula}ω′ over {a mathematical formula}Var(α)∪X such that {a mathematical formula}ω′⊨α and {a mathematical formula}∀y∈(Var(α)∪X)∖X, {a mathematical formula}V(ω)(y)=ω′(y) (by definition of {a mathematical formula}∃X.α) iff there exists an interpretation {a mathematical formula}V(ω′) over {a mathematical formula}Var(α)∪X such that {a mathematical formula}V(ω′)⊨V(α) and {a mathematical formula}∀y∈(Var(α)∪X)∖X, {a mathematical formula}V(V(ω))(y)=V(ω′)(y). Since {a mathematical formula}V(V(ω))=ω, this is equivalent to state that ω is a model of {a mathematical formula}∃X.V(α). As a consequence, we have {a mathematical formula}V(∃X.α)≡∃X.V(α).Accordingly, γ is an implicant of the {a mathematical formula}renH[∃] formula {a mathematical formula}∃X.α iff the term {a mathematical formula}V(γ) is an implicant of the {a mathematical formula}HORN[∃] formula {a mathematical formula}∃X.V(α). As explained above (see the VA point in the proof), the fact that {a mathematical formula}HORN[∃] satisfies CD and VA shows that it satisfies IM as well. Given that a Horn renaming V for α can be computed in polynomial time given α, and that {a mathematical formula}V(γ) (resp. {a mathematical formula}V(α)) can be computed in polynomial time from γ (resp. α) once V has been computed, the fact that {a mathematical formula}HORN[∃] satisfies IM shows that {a mathematical formula}renH[∃] satisfies IM as well.Finally, none of {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨], {a mathematical formula}K/H[∨], {a mathematical formula}renH[∨], {a mathematical formula}AFF[∨], {a mathematical formula}HORN[∨,∃], {a mathematical formula}K/H[∨,∃], {a mathematical formula}renH[∨,∃] satisfies IM unless {a mathematical formula}P=NP, since none of them satisfies VA unless {a mathematical formula}P=NP.
       </list-item>
       <list-item>
        Determining whether a KROM (resp. HORN, {a mathematical formula}K/H, renH) formula β is a logical consequence of a KROM (resp. HORN, {a mathematical formula}K/H, renH) formula α amounts to determining whether every clause of β is a logical consequence of α. The fact that each of KROM, HORN, {a mathematical formula}K/H and renH satisfy CE completes the proof for those four languages. As to AFF, determining whether an AFF formula β is a logical consequence of an AFF formula α amounts to determining whether every XOR-clause of β is a logical consequence of α. Now, a XOR-clause {a mathematical formula}l1⊕…⊕ln is a logical consequence of an AFF formula α if and only if the AFF formula {a mathematical formula}α∧(l1⊕…⊕ln⊕⊤) is inconsistent. The fact that AFF satisfies CO concludes the proof for AFF.As to {a mathematical formula}renH[∃], {a mathematical formula}K/H[∃] and {a mathematical formula}HORN[∃], it is enough to prove the result for {a mathematical formula}HORN[∃] since this language is included in the two remaining ones. Let α be a CNF formula over n variables {a mathematical formula}x1,…,xn. Let {a mathematical formula}α′ be the HORN formula obtained by replacing every positive literal {a mathematical formula}xi in α by the negative literal {a mathematical formula}¬xi′ (where each {a mathematical formula}xi′ is a fresh variable), conjoined with n additional clauses {a mathematical formula}¬xi∨¬xi′ ({a mathematical formula}i∈1,…,n). Let {a mathematical formula}β′ be the KROM formula {a mathematical formula}⋀i=1n(xi∨xi′). By construction, α is inconsistent iff {a mathematical formula}α′∧β′ is inconsistent iff {a mathematical formula}α′⊨¬β′. {a mathematical formula}¬β′ is equivalent to {a mathematical formula}⋁i=1n(¬xi∧¬xi′), which in turn is equivalent to the formula {a mathematical formula}γ′=∃{y1,…,yn}((¬y1∨…∨¬yn)∧⋀i=1n((yi∨¬xi)∧(yi∨¬xi′))) (where each {a mathematical formula}yi is a fresh variable). The fact that {a mathematical formula}α′ and {a mathematical formula}γ′ are {a mathematical formula}HORN[∃] formulae which can be computed in time polynomial in the size of α shows the coNP-hardness of the sentential entailment problem for {a mathematical formula}HORN[∃] formulae and concludes the proof.Finally, none of {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨], {a mathematical formula}K/H[∨], {a mathematical formula}renH[∨], {a mathematical formula}AFF[∨], {a mathematical formula}HORN[∨,∃], {a mathematical formula}K/H[∨,∃], {a mathematical formula}renH[∨,∃] satisfies SE unless {a mathematical formula}P=NP since none of them satisfies VA unless {a mathematical formula}P=NP; the fact that ⊤ is a formula from each of these languages and that {a mathematical formula}α∈C-QDAG is valid iff {a mathematical formula}⊤⊨α concludes the proof.
       </list-item>
       <list-item>
        Each of KROM, HORN, {a mathematical formula}K/H, renH, and AFF satisfies EQ since it satisfies SE.As to {a mathematical formula}renH[∃], {a mathematical formula}K/H[∃] and {a mathematical formula}HORN[∃]: for every formulae {a mathematical formula}α′ and {a mathematical formula}γ′ from {a mathematical formula}C-QDAG we have that {a mathematical formula}α′⊨γ′ iff {a mathematical formula}α′∧γ′≡α′. Consider now the formulae {a mathematical formula}α′ and {a mathematical formula}γ′ used for proving that none of {a mathematical formula}renH[∃], {a mathematical formula}K/H[∃] and {a mathematical formula}HORN[∃] satisfies SE unless {a mathematical formula}P=NP (see the item SE in this proof). Since none of the {a mathematical formula}yi variables occurs in {a mathematical formula}α′, the formula {a mathematical formula}α′∧γ′ can be turned in linear time into the equivalent formula {a mathematical formula}∃{y1,…,yn}.(α′∧((¬y1∨…∨¬yn)∧⋀i=1n((yi∨¬xi)∧(yi∨¬xi′)))), which is a {a mathematical formula}HORN[∃] formula. This concludes the proof.Finally, none of {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨], {a mathematical formula}K/H[∨], {a mathematical formula}renH[∨], {a mathematical formula}AFF[∨], {a mathematical formula}HORN[∨,∃], {a mathematical formula}K/H[∨,∃], {a mathematical formula}renH[∨,∃] satisfies EQ unless {a mathematical formula}P=NP since none of them satisfies VA unless {a mathematical formula}P=NP; the fact that ⊤ is a formula from each of these languages and that {a mathematical formula}α∈C-QDAG is valid iff {a mathematical formula}⊤≡α concludes the proof.
       </list-item>
       <list-item>
        The result for AFF is proven in [69]. The results for all the remaining languages come from the fact that the language of negative Krom formulae (i.e., the set of all conjunctions of negative, binary clauses) is included into each language among KROM, HORN, {a mathematical formula}K/H, renH, {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨], {a mathematical formula}K/H[∨], {a mathematical formula}renH[∨], {a mathematical formula}HORN[∨,∃], {a mathematical formula}K/H[∨,∃], {a mathematical formula}renH[∨,∃]; furthermore, DNF is included in {a mathematical formula}AFF[∨] since each term is an AFF formula. The fact that none of the language of negative Krom formulae and DNF satisfies CT[70] concludes the proof.
       </list-item>
       <list-item>
        The results come directly from the third item of Proposition 3, given that each of KROM, HORN, {a mathematical formula}K/H, renH, and AFF satisfies both CO and CD.
       </list-item>
      </list>
      <paragraph>
       □
      </paragraph>
     </paragraph>
     <paragraph label="Proposition 6">
      The results inTable 2hold.{a mathematical formula}
     </paragraph>
     <paragraph label="Proof">
      <list>
       <list-item>
        When α is a CNF formula and γ is a term, a CNF formula β equivalent to {a mathematical formula}α|γ can be computed in time polynomial in the size of α plus the size of γ by removing from α every clause containing a literal l from γ while removing the complementary literal {a mathematical formula}l¯ from every clause of α containing it. Obviously enough, removing clauses and shortening clauses are two internal laws in the languages KROM and HORN. This shows that KROM, HORN and {a mathematical formula}K/H satisfy CD. Similarly, when α is an AFF formula and γ is a term (viewed as a set of literals), an AFF formula β equivalent to {a mathematical formula}α|γ can be computed in time polynomial in the size of α plus the size of γ by replacing in α every occurrence of a literal l by ⊤ when l belongs to γ and by ⊥ when {a mathematical formula}l¯ belongs to γ. As to renH, it is not hard to see that if V is a Horn renaming for a renH formula α then for any term γ, V also is Horn renaming for the formula β as defined above. Hence renH also satisfies CD.Then point 1. of Proposition 3 allows to conclude that each of the {a mathematical formula}[∨], {a mathematical formula}[∃], and {a mathematical formula}[∨,∃] closures of those languages satisfies CD as well.
       </list-item>
       <list-item>
        Each of {a mathematical formula}HORN[∃], {a mathematical formula}K/H[∃], {a mathematical formula}renH[∃], {a mathematical formula}HORN[∨,∃], {a mathematical formula}K/H[∨,∃], {a mathematical formula}renH[∨,∃] obviously satisfies FO since such a transformation can be done in an implicit way in each of those languages.As to KROM, it is well-known that the set of prime implicates of a KROM formula α can be computed in time polynomial in the size of α and that each such prime implicate is a binary clause (see [71]). Furthermore, the prime implicates of {a mathematical formula}∃X.α with {a mathematical formula}X⊆PS are the prime implicates of α which do not contain any atom from X (Proposition 55 in [71]), showing in particular that PI satisfies FO. Together, this shows that KROM satisfies FO.The fact that AFF satisfies FO is given by Lemma 1 from [72].Now, taking advantage of the fact that for any {a mathematical formula}C-QDAG representation of the form {a mathematical formula}∨(α1,…,αn) and any finite subset X of PS  {a mathematical formula}∃X.∨(α1,…,αn) is logically equivalent to {a mathematical formula}∨(∃X.α1,…,∃X.αn), we get that each of {a mathematical formula}KROM[∨] and {a mathematical formula}AFF[∨] satisfies FO.It remains to consider the cases of HORN, {a mathematical formula}K/H, renH and of their disjunction closures. Consider the HORN formula {a mathematical formula}αn=(⋁i=1n¬xi)∧⋀i=1n(xi∨¬yi)∧(xi∨¬zi) and the set {a mathematical formula}Xn={x1,…,xn} of atoms. Every clause of the form {a mathematical formula}⋁i=1n¬li where l is y or z is an essential prime implicate of {a mathematical formula}∃Xn.αn and there are {a mathematical formula}2n such clauses. This shows that {a mathematical formula}∃Xn.αn has only exponential size CNF representations. Thus HORN does not satisfy FO. Since {a mathematical formula}αn also is a {a mathematical formula}K/H formula and a renH formula, we also get that none of {a mathematical formula}K/H and renH satisfies FO.Finally, the fact that {a mathematical formula}HORN[∨] (resp. {a mathematical formula}K/H[∨], {a mathematical formula}renH[∨]) does not satisfy FO comes from the fact that {a mathematical formula}HORN[∨,∃]&lt;sHORN[∨] (resp. {a mathematical formula}K/H[∨,∃]&lt;sK/H[∨], {a mathematical formula}renH[∨,∃]&lt;srenH[∨]). Let us consider the HORN case (the other cases are similar): forgetting a set of variables X in a {a mathematical formula}HORN[∨] formula α amounts to computing a {a mathematical formula}HORN[∨] formula equivalent to the {a mathematical formula}HORN[∨][∃] formula {a mathematical formula}∃X.α. If {a mathematical formula}HORN[∨] would satisfy FO, then every {a mathematical formula}HORN[∨][∃] formula {a mathematical formula}∃X.α could be turned in polynomial time into an equivalent {a mathematical formula}HORN[∨] formula. Since {a mathematical formula}HORN[∨][∃]∼pHORN[∨,∃], we would have {a mathematical formula}HORN[∨,∃]≥pHORN[∨]. But this conflicts with the fact that {a mathematical formula}HORN[∨]≰sHORN[∨,∃] (in a nutshell, if no polynomial-space translation exists, then no polynomial-time translation exists).
       </list-item>
       <list-item>
        Obviously, every language satisfying FO satisfies SFO as well. Hence it is enough to consider the cases of HORN, {a mathematical formula}K/H, renH and of their disjunction closures.Let us consider first the HORN and renH cases. For any CNF formula α (viewed as a set of clauses) and a propositional variable {a mathematical formula}x∈PS, one can compute from α in polynomial time the following three sets of clauses {a mathematical formula}α⁎, {a mathematical formula}α+, and {a mathematical formula}α−: first remove from α every valid clause to get a set of clauses {a mathematical formula}α′; now, compute {a mathematical formula}α⁎ as the set of clauses of {a mathematical formula}α′ not containing x as a variable, {a mathematical formula}α+ as the set of clauses of {a mathematical formula}α′ containing x as a (positive) literal, from which x is removed, and compute {a mathematical formula}α− as the set of clauses of {a mathematical formula}α′ containing ¬x as a (negative) literal from which ¬x is removed. By construction, the conjunction β of clauses from {a mathematical formula}α⁎∪{δ+∨δ−|δ+∈α+,δ−∈α−} is a CNF formula equivalent to {a mathematical formula}(α|¬x)∨(α|x), hence equivalent to {a mathematical formula}∃x.α. Since none of {a mathematical formula}α+ and {a mathematical formula}α− can contain more clauses or more literals than α, it comes that β can be computed in time polynomial in the size of α. It remains to show that if α is HORN (resp. renH) then the corresponding β is HORN (resp. renH). Assume that α is HORN. Then every clause from {a mathematical formula}α⁎ is a Horn clause; furthermore, by construction every clause {a mathematical formula}δ+∈α+ is a negative clause and every clause {a mathematical formula}δ−∈α− is a Horn clause; hence, every clause of the form {a mathematical formula}δ+∨δ− is a Horn clause. Similarly, if α is renH and V is any Horn renaming for it, then V also is a Horn renaming for the corresponding β. Hence HORN and renH satisfy SFO.Since both KROM and HORN satisfy SFO, {a mathematical formula}K/H satisfies SFO as well.Finally, given that for any {a mathematical formula}C-QDAG representation α and any atom {a mathematical formula}x∈PS, we have {a mathematical formula}∃x.α≡(∃x.(α∧¬x)∨∃x.(α∧x)), the results for {a mathematical formula}HORN[∨], {a mathematical formula}K/H[∨], and {a mathematical formula}renH[∨] come that each of these languages satisfies CD and ∨BC.
       </list-item>
       <list-item>
        For any {a mathematical formula}C-QDAG representations α and β and any finite subset X of PS  we have the equivalence {a mathematical formula}∀X.(α∧β)≡(∀X.α)∧(∀X.β). Furthermore, when δ is a clause, {a mathematical formula}∀X.δ is equivalent to the clause obtained by removing from δ every literal l such that {a mathematical formula}var(l)∈X. Since removing literals from a KROM (resp. HORN) clause leads to a KROM (resp. HORN) clause, altogether we get that each of KROM and HORN satisfies EN, and this shows that {a mathematical formula}K/H satisfies EN as well. Now, if α is a renH formula and V is a Horn renaming for it, then the formula obtained by removing in every clause of α every literal built up from a variable of X still is a renH formula (indeed, V is still a Horn renaming for it). Hence, renH also satisfies EN. Let us consider now the case of an AFF formula α. We assume w.l.o.g. that α is simplified, i.e., for every XOR-clause {a mathematical formula}δ=l1⊕…⊕lk of α, either δ reduces to ⊥, or every literal in δ is positive or equal to ⊤ and δ does not contain more than one occurrence of any variable and of ⊤ (if this is not the case it is sufficient to exploit the equivalences {a mathematical formula}¬x≡x⊕⊤, {a mathematical formula}β⊕β≡⊥, {a mathematical formula}β⊕⊥≡β to render α simplified while preserving logical equivalence); it is easy to check that if α is a simplified AFF formula containing a variable from X, then {a mathematical formula}∀X.α is equivalent to ⊥, otherwise {a mathematical formula}∀X.δ is equivalent to α. Hence, AFF satisfies EN.The fact that {a mathematical formula}HORN[∃] satisfies EN is a consequence of Corollary 11 from [73]. Since {a mathematical formula}KROM[∃]∼pKROM and KROM satisfies EN, as a consequence, we also have that {a mathematical formula}K/H[∃] satisfies EN.As to the case of {a mathematical formula}renH[∃], let us consider a {a mathematical formula}renH[∃] formula {a mathematical formula}α=∃X.β. Let V be a Horn renaming for β. Since {a mathematical formula}HORN[∃] satisfies EN, for every finite subset Y of PS, the formula {a mathematical formula}∀Y.(∃X.V(β)) can be turned in polynomial time into an equivalent formula {a mathematical formula}∃Z.γ from {a mathematical formula}HORN[∃]. From the substitution metatheorem, we have {a mathematical formula}V(∀Y.(∃X.V(β)))≡V(∃Z.γ). Hence, we have {a mathematical formula}∀Y.(∃X.V(V(β)))≡∃Z.V(γ). Since {a mathematical formula}V(V(β))=β, we get that {a mathematical formula}∀Y.(∃X.β)≡∃Z.V(γ). Clearly, {a mathematical formula}∃Z.V(γ) is a {a mathematical formula}renH[∃] formula; indeed, {a mathematical formula}V(γ) is a renH formula since {a mathematical formula}V(V(γ))=γ is a HORN formula. Since {a mathematical formula}∃Z.V(γ) can be computed in polynomial time from {a mathematical formula}∀Y.(∃X.β), we get that {a mathematical formula}renH[∃] satisfies EN.Finally, for any {a mathematical formula}C-QDAG representation α and any finite subset X of PS  we have that α is valid iff {a mathematical formula}∀Var(α).α is valid iff {a mathematical formula}∀Var(α).α is consistent (since {a mathematical formula}∀Var(α).α has no free variable, it is equivalent to ⊤ or to ⊥, hence it is consistent precisely when it is valid). Hence every language satisfying CO but not satisfying VA unless {a mathematical formula}P=NP cannot satisfy EN unless {a mathematical formula}P=NP. This is the case for each language among {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨], {a mathematical formula}K/H[∨], {a mathematical formula}renH[∨], {a mathematical formula}AFF[∨], {a mathematical formula}HORN[∨,∃], {a mathematical formula}K/H[∨,∃], {a mathematical formula}renH[∨,∃].
       </list-item>
       <list-item>
        Every language satisfying EN also satisfies SEN. Hence, each of KROM, HORN, {a mathematical formula}K/H, renH, {a mathematical formula}HORN[∃], {a mathematical formula}K/H[∃], {a mathematical formula}renH[∃], AFF satisfies SEN. Furthermore, since for any {a mathematical formula}C-QDAG representation α and a variable {a mathematical formula}x∈PS, we have {a mathematical formula}∀x.α≡α|x∧α|¬x, every language satisfying both CD and ∧BC also satisfies SEN. Hence each of {a mathematical formula}HORN[∨], {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨,∃] satisfies SEN. Since each of {a mathematical formula}HORN[∨], {a mathematical formula}KROM[∨] satisfies SEN, we also have that {a mathematical formula}K/H[∨] satisfies SEN. Similarly, since each of {a mathematical formula}HORN[∨,∃], {a mathematical formula}KROM[∨,∃] ({a mathematical formula}∼pKROM[∨]) satisfies SEN, we have that {a mathematical formula}K/H[∨,∃] satisfies SEN.Finally, as to {a mathematical formula}renH[∨] and {a mathematical formula}renH[∨,∃], let α be a CNF formula over n variables {a mathematical formula}x1,…,xn. Let {a mathematical formula}α′ be the HORN formula obtained by replacing every positive literal {a mathematical formula}xi in α by the negative literal {a mathematical formula}¬xi′ (where each {a mathematical formula}xi′ is a fresh variable), conjoined with n additional clauses {a mathematical formula}¬xi∨¬xi′ ({a mathematical formula}i∈1,…,n). Let {a mathematical formula}β′ be the KROM formula {a mathematical formula}⋀i=1n(xi∨xi′). By construction, α is inconsistent iff {a mathematical formula}α′∧β′ is inconsistent. Now, we associate α in polynomial time with the {a mathematical formula}renH[∨] formula {a mathematical formula}γ=(α′∧¬y)∨(β′∧y) where y is a fresh variable. γ also is a {a mathematical formula}renH[∨,∃] formula. We can easily check that {a mathematical formula}∀y.γ is equivalent to {a mathematical formula}α′∧β′. If {a mathematical formula}renH[∨] (resp. {a mathematical formula}renH[∨,∃]) would satisfy SEN, then we could compute in time polynomial in the size of α a {a mathematical formula}renH[∨] (resp. {a mathematical formula}renH[∨,∃]) formula equivalent to {a mathematical formula}∀y.γ. Since each of {a mathematical formula}renH[∨] and {a mathematical formula}renH[∨,∃] satisfies CO, we would have a polynomial time algorithm for deciding the satisfiability of α, hence we would have {a mathematical formula}P=NP.
       </list-item>
       <list-item>
        It is obvious that each of KROM, HORN, and AFF satisfies {a mathematical formula}∧C.For {a mathematical formula}K/H, renH, {a mathematical formula}K/H[∃], {a mathematical formula}renH[∃], the non-representability results (!) holds already in the bounded case (∧BC).For {a mathematical formula}K/H[∨], {a mathematical formula}renH[∨], {a mathematical formula}K/H[∨,∃], {a mathematical formula}renH[∨,∃], the results comes from the fact that none of these languages satisfies ∧BC, unless {a mathematical formula}P=NP.Consider now the cases of {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨], {a mathematical formula}AFF[∨] and {a mathematical formula}HORN[∨,∃]. Observe that every clause is a formula from any of those languages since every literal is a KROM formula, a HORN formula, and an AFF formula. Determining whether a conjunction of clauses is consistent cannot be achieved in (deterministic) polynomial time unless {a mathematical formula}P=NP (this is the famous sat problem). Since each of {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨], {a mathematical formula}AFF[∨] and {a mathematical formula}HORN[∨,∃] satisfies CO, none of them can also satisfy {a mathematical formula}∧C unless {a mathematical formula}P=NP.Finally, let us consider the case of {a mathematical formula}HORN[∃]: let {a mathematical formula}∃X1.α1,...,∃Xn.αn be {a mathematical formula}nHORN[∃] formulae where each {a mathematical formula}αi ({a mathematical formula}i∈1,…,n) is a HORN formula. For each {a mathematical formula}i∈1,…,n, let {a mathematical formula}αii be the HORN formula obtained by replacing in {a mathematical formula}αi every occurrence of {a mathematical formula}x∈Xi by a fresh variable {a mathematical formula}xi, and let {a mathematical formula}Xii be the set of all the variables {a mathematical formula}xi generated in the construction of {a mathematical formula}αii. By construction, every variable from {a mathematical formula}Xii does not occur in any {a mathematical formula}αjj when {a mathematical formula}j≠i. Hence, {a mathematical formula}⋀i=1n∃Xi.αi is equivalent to {a mathematical formula}∃⋃i=1nXii.⋀i=1nαii. Clearly enough, {a mathematical formula}∃⋃i=1nXii.⋀i=1nαii is a {a mathematical formula}HORN[∃] formula, and it can be generated in polynomial time from {a mathematical formula}∃X1.α1,...,∃Xn.αn.
       </list-item>
       <list-item>
        Each of KROM, HORN, AFF and {a mathematical formula}HORN[∃] satisfies ∧BC since it satisfies {a mathematical formula}∧C.As to {a mathematical formula}K/H and {a mathematical formula}K/H[∃], consider the {a mathematical formula}K/H formulae {a mathematical formula}x∨y and {a mathematical formula}¬x∨¬y∨¬z. They are also {a mathematical formula}K/H[∃] formulae. The conjunction of them neither is equivalent to a KROM formula, nor is equivalent to a HORN formula, hence it is not equivalent to a {a mathematical formula}K/H formula. From Proposition 7, we know that {a mathematical formula}K/H∼eK/H[∃], hence this conjunction is not equivalent to a {a mathematical formula}K/H[∃] formula.As to renH and {a mathematical formula}renH[∃], consider the two renH formulae {a mathematical formula}α=x∨y∨z and {a mathematical formula}β=¬x∨¬y∨¬z. They are also {a mathematical formula}renH[∃] formulae. There is no renH formula logically equivalent to the conjunction {a mathematical formula}α∧β. From Proposition 7, we know that {a mathematical formula}renH∼erenH[∃], hence this conjunction is not equivalent to a {a mathematical formula}renH[∃] formula.Let us now consider the cases of {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨], and {a mathematical formula}AFF[∨]. Let {a mathematical formula}α=∨(α1,…,αn) and {a mathematical formula}β=∨(β1,…,βm) be two {a mathematical formula}KROM[∨] (resp. {a mathematical formula}HORN[∨], {a mathematical formula}AFF[∨]) formulae. Then the formula {a mathematical formula}⋁i=1n⋁j=1m(αi∧βj) can be computed in time polynomial in the size of α plus the size of β, and is a {a mathematical formula}KROM[∨] (resp. {a mathematical formula}HORN[∨], {a mathematical formula}AFF[∨]) formula logically equivalent to the conjunction {a mathematical formula}α∧β.Let us focus on the case of {a mathematical formula}HORN[∨,∃]. Let α and β be two {a mathematical formula}HORN[∨,∃] formulae. From Proposition 2, since HORN is stable by uniform renaming, one can compute in polynomial time a {a mathematical formula}HORN[∨][∃] formula {a mathematical formula}∃X.α′ (resp. {a mathematical formula}∃Y.β′) equivalent to α (resp. β) where {a mathematical formula}α′ (resp. {a mathematical formula}β′) is a {a mathematical formula}HORN[∨] formula. Let {a mathematical formula}α″ (resp. {a mathematical formula}β″) be the {a mathematical formula}HORN[∨] formula obtained by replacing in {a mathematical formula}α′ (resp. {a mathematical formula}β′) every occurrence of {a mathematical formula}x∈X (resp. {a mathematical formula}x∈Y) by a fresh variable {a mathematical formula}x′ and let {a mathematical formula}X′ (resp. {a mathematical formula}Y′) be the set of all variables {a mathematical formula}x′ generated in the construction of {a mathematical formula}α″ (resp. {a mathematical formula}β″). By construction {a mathematical formula}α∧β is equivalent to {a mathematical formula}(∃X.α′)∧(∃Y.β′), which is in turn equivalent to {a mathematical formula}∃X′∪Y′.(α″∧β″). Now, {a mathematical formula}HORN[∨] satisfies ∧BC. Hence, a {a mathematical formula}HORN[∨] formula γ equivalent to {a mathematical formula}α″∧β″ can be generated in time polynomial in the size of {a mathematical formula}α″ plus the size of {a mathematical formula}β″. Accordingly, {a mathematical formula}∃X′∪Y′.γ is a {a mathematical formula}HORN[∨,∃] formula equivalent to {a mathematical formula}α∧β, and it can be computed in time polynomial in the size of α plus the size of β.Finally, let us consider the cases of {a mathematical formula}K/H[∨], {a mathematical formula}renH[∨], {a mathematical formula}K/H[∨,∃], {a mathematical formula}renH[∨,∃]. Let α be a CNF formula over n variables {a mathematical formula}x1,…,xn. Let {a mathematical formula}α′ be the HORN formula obtained by replacing every positive literal {a mathematical formula}xi in α by the negative literal {a mathematical formula}¬xi′ (where each {a mathematical formula}xi′ is a fresh variable), conjoined with n additional clauses {a mathematical formula}¬xi∨¬xi′ ({a mathematical formula}i∈1,…,n). Let {a mathematical formula}β′ be the KROM formula {a mathematical formula}⋀i=1n(xi∨xi′). Observe that {a mathematical formula}β′ is consistent, hence each of {a mathematical formula}α′ and {a mathematical formula}β′ is a {a mathematical formula}K/H formula and renH formula. As a consequence, each of them also belongs to {a mathematical formula}K/H[∨], {a mathematical formula}renH[∨], {a mathematical formula}K/H[∨,∃], and {a mathematical formula}renH[∨,∃]. Furthermore, both {a mathematical formula}α′ and {a mathematical formula}β′ can be computed in time polynomial in the size of α. By construction, α is consistent iff {a mathematical formula}α′∧β′ is consistent. If any of {a mathematical formula}K/H[∨], {a mathematical formula}renH[∨], {a mathematical formula}K/H[∨,∃], or {a mathematical formula}renH[∨,∃] would satisfy ∧BC, since each of these languages satisfy CO, we would have {a mathematical formula}P=NP.
       </list-item>
       <list-item>
        The non-representability results for KROM, HORN, {a mathematical formula}K/H, renH, AFF, {a mathematical formula}HORN[∃], {a mathematical formula}K/H[∃], {a mathematical formula}renH[∃] come directly from the corresponding non-representability results for ∨BC. The fact that each of {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨], {a mathematical formula}K/H[∨], {a mathematical formula}renH[∨], {a mathematical formula}AFF[∨], {a mathematical formula}HORN[∨,∃], {a mathematical formula}K/H[∨,∃], {a mathematical formula}renH[∨,∃] satisfies {a mathematical formula}∨C is immediate from their definitions.
       </list-item>
       <list-item>
        Consider the two KROM formulae {a mathematical formula}α=(x∨y)∧(¬y∨¬z) and {a mathematical formula}β=¬x∧z. Each of α and β belongs as well to {a mathematical formula}K/H, renH, {a mathematical formula}K/H[∃], {a mathematical formula}renH[∃]. Now, {a mathematical formula}α∨β is logically equivalent to the formula {a mathematical formula}(x∨y∨z)∧(¬x∨¬y∨¬z) for which no equivalent KROM formula (resp. {a mathematical formula}K/H formula, renH formula) exists. From Proposition 7, we know that {a mathematical formula}KROM∼eKROM[∃] (resp. {a mathematical formula}K/H∼eK/H[∃], {a mathematical formula}renH∼erenH[∃]), hence there are no {a mathematical formula}KROM[∃] formula (resp. {a mathematical formula}K/H[∃] formula, {a mathematical formula}renH[∃] formula) equivalent to {a mathematical formula}α∨β.As to the HORN case and the AFF case, it is enough to consider {a mathematical formula}α=x and {a mathematical formula}β=y: no HORN formula and no AFF formula is equivalent to {a mathematical formula}α∨β. From Proposition 7, we know that {a mathematical formula}HORN∼eHORN[∃], hence there is no {a mathematical formula}HORN[∃] formula equivalent to {a mathematical formula}α∨β.Finally, the fact that each of {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨], {a mathematical formula}K/H[∨], {a mathematical formula}renH[∨], {a mathematical formula}AFF[∨], {a mathematical formula}HORN[∨,∃], {a mathematical formula}K/H[∨,∃], {a mathematical formula}renH[∨,∃] satisfies ∨BC comes from the fact that each of them satisfies {a mathematical formula}∨C.
       </list-item>
       <list-item>
        Consider the KROM formula {a mathematical formula}α=(¬x∨y)∧(¬x∨z)∧(x∨¬y)∧(¬y∨z)∧(x∨¬z)∧(y∨¬z). α also is a HORN formula, a {a mathematical formula}K/H formula, a renH formula, a {a mathematical formula}HORN[∃] formula, a {a mathematical formula}K/H[∃] formula, and a {a mathematical formula}renH[∃] formula. But ¬α is equivalent to the formula {a mathematical formula}(x∨y∨z)∧(¬x∨¬y∨¬z) for which no equivalent KROM formula (resp. HORN formula, {a mathematical formula}K/H formula, renH formula) exists. From Proposition 7, we know that {a mathematical formula}HORN∼eHORN[∃], {a mathematical formula}K/H∼eK/H[∃], and {a mathematical formula}renH∼erenH[∃]. Accordingly, the {a mathematical formula}¬C transformation is not always feasible in any of KROM, HORN, {a mathematical formula}K/H, renH, {a mathematical formula}HORN[∃], {a mathematical formula}K/H[∃], {a mathematical formula}renH[∃].Similarly, consider the AFF formula {a mathematical formula}α=¬x∧¬y. No AFF formula is equivalent to ¬α, hence the {a mathematical formula}¬C transformation is not always feasible in AFF.As to {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨], {a mathematical formula}K/H[∨], let us consider the DNF formula {a mathematical formula}αn=⋁i=1n(¬xi∧¬yi∧¬zi); {a mathematical formula}αn is a {a mathematical formula}KROM[∨] formula, a {a mathematical formula}HORN[∨] formula and a {a mathematical formula}K/H[∨] formula. Now, in the proof of Proposition 11 (see Table 9), we show that the renH formula {a mathematical formula}⋀i=1n(xi∨yi∨zi) equivalent to {a mathematical formula}¬αn has no polynomial-size representation in {a mathematical formula}K/H[∨], hence the conclusion follows.Finally, let us consider the cases of {a mathematical formula}AFF[∨], {a mathematical formula}renH[∨], {a mathematical formula}renH[∨,∃], {a mathematical formula}K/H[∨,∃] and {a mathematical formula}HORN[∨,∃]. DNF is a subset of each of these languages. Now, a DNF formula α is valid iff ¬α is inconsistent. The fact that each of {a mathematical formula}AFF[∨], {a mathematical formula}renH[∨], {a mathematical formula}renH[∨,∃], {a mathematical formula}K/H[∨,∃] and {a mathematical formula}HORN[∨,∃] satisfies CO completes the proof.
       </list-item>
      </list>
      <paragraph>
       □
      </paragraph>
     </paragraph>
     <paragraph label="Proposition 7">
      <list>
       <list-item label="•">
        {a mathematical formula}HORN[∃]∼eHORN.
       </list-item>
       <list-item label="•">
        {a mathematical formula}K/H[∃]∼eK/H.
       </list-item>
       <list-item label="•">
        {a mathematical formula}renH[∃]∼erenH.
       </list-item>
      </list>
     </paragraph>
     <paragraph label="Proof">
      <list>
       <list-item label="•">
        HORN, {a mathematical formula}K/H: Every prime implicate of a HORN formula (resp. a KROM formula) α is a Horn clause (resp. a binary clause). Since the prime implicates of {a mathematical formula}∃X.α for a finite subset X of PS and a {a mathematical formula}C-DAG representation α are the prime implicates δ of α such that {a mathematical formula}Var(δ)∩X=∅, we get that {a mathematical formula}∃X.α is equivalent to a HORN formula (resp. a KROM formula) when α is a HORN formula (resp. a KROM formula).
       </list-item>
       <list-item label="•">
        renH: Let α be a renH formula. A PI formula equivalent to {a mathematical formula}∃X.α is given by the conjunction β of all prime implicates of α not containing any variable from X. If V is a Horn renaming for α, then {a mathematical formula}V(α) is a HORN formula. Since {a mathematical formula}V(β) is equivalent to {a mathematical formula}∃X.V(α) and since {a mathematical formula}HORN[∃]∼eHORN, {a mathematical formula}V(β) is equivalent to a HORN formula. This shows that β is a renH formula (V is a Horn renaming for it) and this concludes the proof.
       </list-item>
      </list>
      <paragraph>
       □
      </paragraph>
     </paragraph>
     <paragraph label="Proposition 8">
      {a mathematical formula}KROM[∨],{a mathematical formula}HORN[∨],{a mathematical formula}K/H[∨],{a mathematical formula}renH[∨],{a mathematical formula}AFF[∨],{a mathematical formula}HORN[∨,∃],{a mathematical formula}K/H[∨,∃],{a mathematical formula}renH[∨,∃]are complete propositional languages.
     </paragraph>
     <paragraph label="Proof">
      This comes easily from the fact that TERM is included in each of KROM, HORN and AFF; as a consequence, its disjunction closure {a mathematical formula}TERM[∨] is included into each of eight closures above; the fact that {a mathematical formula}DNF=TERM[∨] is complete ends up the proof.  □
     </paragraph>
     <paragraph label="Proposition 9">
      <list>
       <list-item label="•">
        {a mathematical formula}HORN[∃]&lt;sHORN.
       </list-item>
       <list-item label="•">
        {a mathematical formula}K/H[∃]&lt;sK/H.
       </list-item>
       <list-item label="•">
        {a mathematical formula}renH[∃]&lt;srenH.
       </list-item>
       <list-item label="•">
        renH and{a mathematical formula}K/H[∃]are incomparable w.r.t.{a mathematical formula}≤s.
       </list-item>
       <list-item label="•">
        {a mathematical formula}K/Hand{a mathematical formula}HORN[∃]are incomparable w.r.t.{a mathematical formula}≤s.
       </list-item>
      </list>
     </paragraph>
     <paragraph label="Proof">
      Let us consider first the three first items. For {a mathematical formula}L∈{HORN,K/H,renH}, we have to prove that {a mathematical formula}L[∃]&lt;sL, i.e., {a mathematical formula}L[∃]≤sL and {a mathematical formula}L≰sL[∃]. That {a mathematical formula}L[∃]≤sL comes immediately from the inclusion {a mathematical formula}L[∃]⊇L (cf. item 0. of Proposition 1). The other way around, consider the {a mathematical formula}HORN[∃] formula {a mathematical formula}αn=∃{y1,…,yn}.((⋁i=1n¬yi)∧⋀i=1n((¬xi∨yi)∧(¬zi∨yi))). Since {a mathematical formula}HORN⊆K/H and {a mathematical formula}HORN⊆renH, this is also a {a mathematical formula}K/H[∃] formula and a {a mathematical formula}renH[∃] formula (cf. item 0. of Proposition 1). Since {a mathematical formula}αn has {a mathematical formula}2n essential prime implicates, it does not have a CNF representation of size polynomial in n. Since HORN, {a mathematical formula}K/H, and renH are subsets of CNF, the language CNF is at least as succinct as any of them, so {a mathematical formula}αn does not have a representation of size of polynomial in n as a HORN formula, a {a mathematical formula}K/H formula or a renH formula.For the last two items, we have to prove that {a mathematical formula}renH≰sK/H[∃], {a mathematical formula}K/H[∃]≰srenH, {a mathematical formula}K/H≰sHORN[∃], {a mathematical formula}HORN[∃]≰sK/H. From Proposition 7, we know that {a mathematical formula}K/H[∃]∼eK/H, and that {a mathematical formula}HORN[∃]∼eHORN. Furthermore, we know that {a mathematical formula}renH&lt;eK/H&lt;eHORN (cf. Section 5). Altogether, this shows that {a mathematical formula}renH&lt;eK/H[∃] and both {a mathematical formula}&lt;eHORN[∃]. Especially, we have {a mathematical formula}K/H[∃]≰erenH and {a mathematical formula}HORN[∃]≰eK/H. Due to the fact that the relation {a mathematical formula}≤s is included into the relation {a mathematical formula}≤e, we have that for any subsets {a mathematical formula}L1 and {a mathematical formula}L1 of {a mathematical formula}C-QDAG, if {a mathematical formula}L1≰eL2, then {a mathematical formula}L1≰sL2. This shows that {a mathematical formula}K/H[∃]≰srenH and {a mathematical formula}HORN[∃]≰sK/H. Finally, in order to prove that {a mathematical formula}renH≰sK/H[∃] and {a mathematical formula}K/H≰sHORN[∃], it is enough to consider again the horn[∃] formula {a mathematical formula}αn=∃{y1,…,yn}.((⋁i=1n¬yi)∧⋀i=1n((¬xi∨yi)∧(¬zi∨yi))). We have shown above that this formula also is a {a mathematical formula}K/H[∃] formula but that it does not have a representation of size of polynomial in n as a renH formula or as a {a mathematical formula}K/H formula. This concludes the proof.  □
     </paragraph>
     <paragraph label="Proposition 10">
      <list>
       <list-item label="•">
        {a mathematical formula}HORN[∨,∃]&lt;sHORN[∨].
       </list-item>
       <list-item label="•">
        {a mathematical formula}K/H[∨,∃]&lt;sK/H[∨].
       </list-item>
       <list-item label="•">
        {a mathematical formula}renH[∨,∃]&lt;srenH[∨].
       </list-item>
      </list>
     </paragraph>
     <paragraph label="Proof">
      We focus on AC3, the class of propositional representations containing all disjunctions of CNF formulae and all conjunctions of DNF formulae. Since every formula from {a mathematical formula}HORN[∨], {a mathematical formula}K/H[∨] or {a mathematical formula}renH[∨] is a disjunction of CNF formulae, each of the languages {a mathematical formula}HORN[∨], {a mathematical formula}K/H[∨], and {a mathematical formula}renH[∨] is a subset of AC3, hence we have {a mathematical formula}AC3≤sHORN[∨], {a mathematical formula}AC3≤sK/H[∨], and {a mathematical formula}AC3≤srenH[∨]. In order to prove the proposition, it is thus enough to show that {a mathematical formula}AC3≰sHORN[∨,∃], {a mathematical formula}AC3≰sK/H[∨,∃], and {a mathematical formula}AC3≰srenH[∨,∃]. Since {a mathematical formula}HORN⊆K/H and {a mathematical formula}HORN⊆renH, we have the inclusions {a mathematical formula}HORN[∨,∃]⊆K/H[∨,∃] and {a mathematical formula}HORN[∨,∃]⊆renH[∨,∃] (cf. item 0. of Proposition 1), which imply that {a mathematical formula}K/H[∨,∃]≤sHORN[∨,∃], and {a mathematical formula}renH[∨,∃]≤sHORN[∨,∃]. Therefore, in order to show that {a mathematical formula}AC3≰sHORN[∨,∃], {a mathematical formula}AC3≰sK/H[∨,∃], and {a mathematical formula}AC3≰srenH[∨,∃], it is enough to show that {a mathematical formula}AC3≰sHORN[∨,∃]. We do it by exhibiting a {a mathematical formula}HORN[∨,∃] formula which has no polynomial-sized AC3 representation.The proof is based on a theorem due to Sipser [74]. This theorem can be expressed as follows: consider any Boolean function {a mathematical formula}αkn over {a mathematical formula}n2k−2 variables, represented by a NNF formula of depth {a mathematical formula}k&gt;1 and such that all the leaves are labeled by variables occurring once in the formula, the ith level ({a mathematical formula}i∈1,…,k−1) from the bottom consists of nodes labeled by ∧ (resp. ∨) when i is even (resp. odd), the outdegree of the root node and the deepest internal nodes (those at depth {a mathematical formula}k−1) is equal to {a mathematical formula}n&gt;1 and the outdegree of every other internal node is equal to {a mathematical formula}n2. Sipser showed that such an {a mathematical formula}αkn cannot be represented by a polynomial-sized circuit over {a mathematical formula}{¬,∨,∧} of depth at most {a mathematical formula}k−1.Consider the Boolean function {a mathematical formula}α4n over {a mathematical formula}n6 variables. By construction, it can be represented by a disjunction of n conjunctions {a mathematical formula}β1,…,βn of DNF formulae, where each {a mathematical formula}βi ({a mathematical formula}i∈1,…,n) is the conjunction of {a mathematical formula}n2DNFγi,j ({a mathematical formula}j∈1,…n2), each {a mathematical formula}DNFγi,j ({a mathematical formula}j∈1,…n2) consists of the disjunction of {a mathematical formula}n2 terms {a mathematical formula}δi,j,k ({a mathematical formula}k∈1,…n2), and finally each term {a mathematical formula}δi,j,k ({a mathematical formula}k∈1,…n2) consists of the conjunction of n negated variables {a mathematical formula}¬xi,j,k,l ({a mathematical formula}l∈1,…,n) occurring only once in {a mathematical formula}α4n. For each {a mathematical formula}i∈1,…,n and {a mathematical formula}j∈1,…n2, consider now the HORN formula {a mathematical formula}hi,j such that{a mathematical formula}{a mathematical formula}hi,j contains {a mathematical formula}n3+1 clauses of size at most {a mathematical formula}n2, hence the HORN formula {a mathematical formula}⋀j=1n2hi,j contains {a mathematical formula}n5+n2 clauses of size at most {a mathematical formula}n2. Let {a mathematical formula}Y=⋃i=1n(⋃j=1n2(⋃k=1n2{yi,j,k})). By construction, the {a mathematical formula}HORN[∨,∃] formula {a mathematical formula}∃Y.(⋁i=1n(⋀j=1n2hi,j)) can be generated in time polynomial in n. From Sipser theorem, {a mathematical formula}α4n has no polynomial-sized AC3 representation. It remains to show that {a mathematical formula}α4n is equivalent to {a mathematical formula}∃Y.(⋁i=1n(⋀j=1n2hi,j)). First of all, since existential quantifications “distribute” over disjunctions and since each {a mathematical formula}yi,j,k ({a mathematical formula}i∈1,…,n, {a mathematical formula}j∈1,…,n2k∈1,…,n2) does not occur in {a mathematical formula}hi′,j′ ({a mathematical formula}i′∈1,…,n, {a mathematical formula}j∈1,…,n2) unless {a mathematical formula}i′=i and {a mathematical formula}j′=j, we have that {a mathematical formula}∃Y.(⋁i=1n(⋀j=1n2hi,j)) is equivalent to {a mathematical formula}⋁i=1n(⋀j=1n2∃⋃k=1n2{yi,j,k}.hi,j). Finally, by construction, for each {a mathematical formula}i∈1,…,n and {a mathematical formula}j∈1,…,n2, {a mathematical formula}γi,j=⋁k=1n2δi,j,k is the IP representation of {a mathematical formula}∃⋃k=1n2{yi,j,k}.hi,j, hence it is equivalent to it. The replacement metatheorem for propositional logic concludes the proof.  □
     </paragraph>
     <paragraph label="Proposition 11">
      The results inTable 3hold.{a mathematical formula}
     </paragraph>
     <paragraph label="Proof">
      The proof is broken into six steps, where we prove some succinctness relationships between languages, and then apply transitivity of {a mathematical formula}≤s to possibly infer new relationships. Associated with each step of the proof is a table in which we mark all relationships proved at the step.Table 5: From the obvious equalities and inclusions {a mathematical formula}HORN[∨,∃]⊆K/H[∨,∃], {a mathematical formula}HORN[∨,∃]⊆renH[∨,∃], {a mathematical formula}KROM[∨]⊆K/H[∨,∃], we get the results given in Table 5.Table 6: Since {a mathematical formula}K/H[∨,∃]∼pK/H[∃][∨] (cf. Proposition 1), every {a mathematical formula}K/H[∨,∃] formula can be associated in polynomial time with an equivalent disjunction {a mathematical formula}⋁i=1n∃Xi.βi of {a mathematical formula}K/H[∃] formulae. Since KROM satisfies CO, we can easily determine in polynomial time which {a mathematical formula}βi are consistent. All the {a mathematical formula}βi ({a mathematical formula}i∈1,…,n) which are inconsistent can be removed from the disjunction without questioning equivalence (if they are all inconsistent, the input formula is associated with ⊥, which is a {a mathematical formula}renH[∨,∃] formula). In the remaining case, since every consistent KROM formula is a renH formula, the resulting disjunction is a {a mathematical formula}renH[∨,∃] formula equivalent to the input formula. Hence we get the results given in Table 6.Table 7: Let us now show that {a mathematical formula}HORN[∨,∃]≰sKROM[∨,∃], {a mathematical formula}HORN[∨,∃]≰sK/H[∨,∃], and {a mathematical formula}HORN[∨,∃]≰srenH[∨,∃]. To do so, it is enough to prove that {a mathematical formula}HORN[∨,∃]≰sKROM. Consider the KROM formula {a mathematical formula}αn=⋀i=1n(xi∨yi) for any n. Towards a contradiction, suppose that there exists in {a mathematical formula}HORN[∨,∃] a formula equivalent to {a mathematical formula}αn and whose size is polynomial in n; since {a mathematical formula}HORN[∨,∃]∼pHORN[∃][∨] (cf. Proposition 1), there exists as well a {a mathematical formula}HORN[∃][∨] formula {a mathematical formula}β=⋁i=1m∃Xi.βi equivalent to {a mathematical formula}αn and whose size is polynomial in n. Especially, m must remain polynomial in n. We also know that {a mathematical formula}HORN[∃]∼eHORN (cf. Proposition 7). Hence, if β exists, then there also exists a {a mathematical formula}HORN[∨] formula {a mathematical formula}γ=⋁i=1mγi equivalent to {a mathematical formula}αn and with m polynomial in n. Note that the size of {a mathematical formula}γi ({a mathematical formula}i∈1,…,m) can be exponential in the size of {a mathematical formula}βi (this does not matter for the remaining part of the proof).By construction, {a mathematical formula}αn has {a mathematical formula}2n minimal models ω over {a mathematical formula}Var(αn), where for each {a mathematical formula}i∈1,…,n, exactly one of the two variables {a mathematical formula}xi and {a mathematical formula}yi are set to 1 by ω. Consider now any pair ω, {a mathematical formula}ω′ of distinct minimal models of {a mathematical formula}αn; by construction, {a mathematical formula}and(ω,ω′) maps each variable to 0, hence it is not a model of {a mathematical formula}αn. Thus, as a consequence of the characterization of HORN by closure of models, ω and {a mathematical formula}ω′ cannot be models of the same formula {a mathematical formula}γi. Therefore, every {a mathematical formula}HORN[∨] formula {a mathematical formula}γ=⋁i=1mγi equivalent to {a mathematical formula}αn must be such that {a mathematical formula}m≥2n. This shows that there is no {a mathematical formula}HORN[∨,∃] formula equivalent to {a mathematical formula}αn and whose size is polynomial in n. Thus, we get the results given in Table 7.Table 8: Let us now show that {a mathematical formula}KROM[∨]≰sHORN[∨,∃], {a mathematical formula}KROM[∨]≰sK/H[∨,∃], and {a mathematical formula}KROM[∨]≰srenH[∨,∃]. To do so, it is enough to prove that {a mathematical formula}KROM[∨]≰sHORN. Consider the HORN formula {a mathematical formula}αn=⋀i=1n(¬xi∨¬yi∨¬zi) for any n. Towards a contradiction, suppose that there exists in {a mathematical formula}KROM[∨] a formula {a mathematical formula}γ=⋁i=1mγi equivalent to {a mathematical formula}αn and whose size is polynomial in n; then m must remain polynomial in n.By construction, {a mathematical formula}αn has {a mathematical formula}7n models over {a mathematical formula}Var(αn). How many models of {a mathematical formula}αn can be models of the same {a mathematical formula}γi ({a mathematical formula}i∈1,…,m)? Let us consider any {a mathematical formula}ω1,ω2,ω3∈Mod(γi), it cannot be the case that for any {a mathematical formula}i∈1,…,n, we have {a mathematical formula}ω1(xi)=0, {a mathematical formula}ω1(yi)=1, {a mathematical formula}ω1(zi)=1, {a mathematical formula}ω2(xi)=1, {a mathematical formula}ω2(yi)=0, {a mathematical formula}ω2(zi)=1, {a mathematical formula}ω3(xi)=1, {a mathematical formula}ω3(yi)=1, {a mathematical formula}ω3(zi)=0. Indeed, if this were the case, we would have {a mathematical formula}maj(ω1,ω2,ω3)(xi)=maj(ω1,ω2,ω3)(yi)=maj(ω1,ω2,ω3)(zi)=1. If {a mathematical formula}γi is a KROM formula, then {a mathematical formula}maj(ω1,ω2,ω3) should also be a model of {a mathematical formula}γi. But {a mathematical formula}maj(ω1,ω2,ω3) is not a model of {a mathematical formula}αn. Thus, each {a mathematical formula}γi cannot have more than {a mathematical formula}6n models of {a mathematical formula}αn over {a mathematical formula}Var(αn). Subsequently, the pigeon/hole principle shows that at least {a mathematical formula}⌈(76)n⌉KROM formulae {a mathematical formula}γi are required to cover the models of {a mathematical formula}αn. The fact that {a mathematical formula}⌈(76)n⌉ is exponential in the size of {a mathematical formula}αn concludes the proof. By transitivity of {a mathematical formula}≤s, we get the results given in Table 8.Table 9: We also have to show that {a mathematical formula}K/H[∨,∃]≰srenH[∨,∃]. To do so, it is enough to prove that {a mathematical formula}K/H[∨,∃]≰srenH. Consider the renH formula {a mathematical formula}αn=⋀i=1n(xi∨yi∨zi) for any n ({a mathematical formula}Var(αn) is a possible Horn renaming for it, since if one replaces in {a mathematical formula}αn every literal from {a mathematical formula}LVar(αn) by its complementary literal, one gets a HORN formula).Towards a contradiction, suppose that there exists in {a mathematical formula}K/H[∨,∃] a formula equivalent to {a mathematical formula}αn and whose size is polynomial in n; since {a mathematical formula}K/H[∨,∃]∼pK/H[∃][∨] (cf. Proposition 1), there exists as well a {a mathematical formula}K/H[∃][∨] formula {a mathematical formula}β=⋁i=1m∃Xi.βi equivalent to {a mathematical formula}αn and whose size is polynomial in n. Especially, m must remain polynomial in n. We also know that {a mathematical formula}K/H[∃]∼eK/H (cf. Proposition 7). Hence, if β exists, then there also exists a {a mathematical formula}K/H[∨] formula {a mathematical formula}γ=⋁i=1mγi equivalent to {a mathematical formula}αn and with m polynomial in n.Let us now prove that if such a γ exists, then there also exists a {a mathematical formula}KROM[∨] formula {a mathematical formula}δ=⋁i=1mδi equivalent to {a mathematical formula}αn and with m polynomial in n. Consider any {a mathematical formula}K/H formula {a mathematical formula}γi ({a mathematical formula}i∈1,…,m) and suppose that it is a HORN formula. Then {a mathematical formula}γi is equivalent to an implicant of {a mathematical formula}αn. This is obvious if {a mathematical formula}γi is inconsistent. In the remaining case, every clause {a mathematical formula}xi∨yi∨zi ({a mathematical formula}i∈1,…,n) of {a mathematical formula}αn must be implied by a prime implicate of {a mathematical formula}γi, which must be a Horn clause; hence this prime implicate must be equivalent to {a mathematical formula}xi, {a mathematical formula}yi or {a mathematical formula}zi. Accordingly, {a mathematical formula}γi must be equivalent to a term, hence to a KROM formula.It remains to show that {a mathematical formula}αn has no polyspace representation in {a mathematical formula}KROM[∨]. The proof is similar to the one used for showing that {a mathematical formula}KROM[∨,∃]≰sHORN (this is not surprising since {a mathematical formula}αn is a reverse Horn CNF formula). We get the results given in Table 9.Table 10: Finally, we show that {a mathematical formula}AFF[∨] is incomparable w.r.t. {a mathematical formula}≤s w.r.t. any of {a mathematical formula}renH[∨,∃], {a mathematical formula}K/H[∨,∃], {a mathematical formula}HORN[∨,∃] and {a mathematical formula}KROM[∨]. We first show that {a mathematical formula}renH[∨,∃]≰sAFF, which proves enough to conclude that {a mathematical formula}renH[∨,∃]≰sAFF[∨], {a mathematical formula}K/H[∨,∃]≰sAFF[∨], {a mathematical formula}HORN[∨,∃]≰sAFF[∨], and {a mathematical formula}KROM[∨]≰sAFF[∨].Let {a mathematical formula}αn=⋀i=1n(xi⊕yi⊕zi⊕⊤). By construction {a mathematical formula}αn is an AFF formula. Furthermore, the restriction of any model of {a mathematical formula}αn over any {a mathematical formula}{xi,yi,zi} ({a mathematical formula}i∈1,…,n) is of the form 000, 011, 101 or 110. Thus, {a mathematical formula}αn has {a mathematical formula}4n models over {a mathematical formula}Var(αn). Let β be a {a mathematical formula}renH[∨,∃] formula equivalent to {a mathematical formula}αn. Since {a mathematical formula}renH[∨,∃]∼prenH[∃][∨] (cf. Proposition 1), β is polynomially translatable into a formula {a mathematical formula}⋁i=1mβi from {a mathematical formula}renH[∃][∨]. Therefore, if β is a polynomial-sized representation of {a mathematical formula}αn, then {a mathematical formula}⋁i=1mβi also is a polynomial-sized representation of {a mathematical formula}αn, which implies that m must not be exponential in n.Since {a mathematical formula}renH[∃]∼erenH (cf. Proposition 7), each {a mathematical formula}βi ({a mathematical formula}i∈1,…,m) can be translated into an equivalent renH formula {a mathematical formula}γi (which size can be exponential in the size of {a mathematical formula}βi, but this does not matter). The point is that if β has a {a mathematical formula}renH[∃][∨] representation as a disjunction of {a mathematical formula}mrenH[∃] formulae, then it also has a {a mathematical formula}renH[∨] representation as a disjunction of mrenH formulae.Since each {a mathematical formula}γi ({a mathematical formula}i∈1,…,m) is a renH formula which entails {a mathematical formula}αn, from [75], there exists a model {a mathematical formula}Vi of {a mathematical formula}αn such that {a mathematical formula}Vi is a Horn renaming for {a mathematical formula}γi, and {a mathematical formula}Vi(γi)⊨Vi(αn). As explained above, the restriction of {a mathematical formula}Vi over any {a mathematical formula}{xi,yi,zi} ({a mathematical formula}i∈1,…,n) is of the form 000, 011, 101 or 110. Since applying {a mathematical formula}Vi leads to renaming an even number of variables in each set {a mathematical formula}{xi,yi,zi} ({a mathematical formula}i∈1,…,n), we necessarily have {a mathematical formula}Vi(xi⊕yi⊕zi⊕⊤)≡xi⊕yi⊕zi⊕⊤, and subsequently {a mathematical formula}Vi(αn)≡αn.Thus, we get that {a mathematical formula}⋁i=1mVi(γi) is a {a mathematical formula}HORN[∨] formula equivalent to {a mathematical formula}αn. At this stage, we have shown that if {a mathematical formula}αn has a polynomial-sized representation as a {a mathematical formula}renH[∨,∃] formula, then it must also have a {a mathematical formula}HORN[∨] representation with a number of disjoints that is polynomial in n.We are now going to prove that this is not the case, i.e., the number of disjoints in any {a mathematical formula}HORN[∨] formula {a mathematical formula}⋁i=1mδi equivalent to {a mathematical formula}αn actually is exponential in n. Consider the subset S of models ω of {a mathematical formula}αn over {a mathematical formula}Var(αn) such that for each {a mathematical formula}i∈1,…,n the restriction of ω over {a mathematical formula}{xi,yi,zi} is of the form 011, 101 or 110. Every pair of distinct models ω and {a mathematical formula}ω′ from S is such that {a mathematical formula}and(ω,ω′) is not a model of {a mathematical formula}αn; indeed, there must exist {a mathematical formula}i∈1,…,n such that the restrictions of ω and {a mathematical formula}ω′ over {a mathematical formula}{xi,yi,zi} differ, and {a mathematical formula}and(ω,ω′) is not a model of {a mathematical formula}xi⊕yi⊕zi⊕⊤ (its restriction over {a mathematical formula}{xi,yi,zi} is of the form 001, 010 or 100). Thus, because of the closure property of HORN formulae, every pair of distinct models in S cannot be models of the same HORN formula {a mathematical formula}δi. Since S contains {a mathematical formula}3n models, the number m of disjoints in {a mathematical formula}⋁i=1mδi is lower bounded by {a mathematical formula}3n. This shows that {a mathematical formula}αn has no polynomial-sized representation as a {a mathematical formula}renH[∨,∃] formula.Conversely, let us show that {a mathematical formula}AFF[∨] is not at least as succinct as any of {a mathematical formula}renH[∨,∃], {a mathematical formula}K/H[∨,∃], {a mathematical formula}HORN[∨,∃] and {a mathematical formula}KROM[∨]. Consider the formula {a mathematical formula}αn=⋀i=1n(¬xi∨¬yi) for any n. It is a KROM formula and a HORN formula. Hence, it is also a {a mathematical formula}K/H formula and a renH formula. Since {a mathematical formula}Var(αn) contains 2n atoms, {a mathematical formula}4n interpretations over {a mathematical formula}Var(αn) have to be considered. Among them, one can find {a mathematical formula}3n models of {a mathematical formula}αn, only, since for each {a mathematical formula}i∈1,…,n, there are only 3 truth assignments of {a mathematical formula}xi and {a mathematical formula}yi (over the four possible assignments of those two variables) which satisfy {a mathematical formula}¬xi∨¬yi. Now, there is no AFF formula β implying {a mathematical formula}αn and with strictly more than {a mathematical formula}2n models (taken in the set of models of {a mathematical formula}αn since {a mathematical formula}β⊨αn must hold). By reductio ad absurdum: if this were the case, then one could find {a mathematical formula}i∈1,…,n and {a mathematical formula}ω1,ω2,ω3∈Mod(αn) such that {a mathematical formula}ω1(xi)=0, {a mathematical formula}ω1(yi)=0, {a mathematical formula}ω2(xi)=0, {a mathematical formula}ω2(yi)=1, {a mathematical formula}ω3(xi)=1, {a mathematical formula}ω3(yi)=0. If {a mathematical formula}ω1,ω2,ω3∈Mod(β) and β is an AFF formula, then the affine closure property requires {a mathematical formula}⊕(ω1,ω2,ω3) to be a model of β, hence a model of {a mathematical formula}αn. But {a mathematical formula}⊕(ω1,ω2,ω3) falsifies {a mathematical formula}¬xi∨¬yi. Subsequently, from the pigeon/hole principle, every {a mathematical formula}AFF[∨] formula equivalent to {a mathematical formula}αn must contain at least {a mathematical formula}⌈(32)n⌉AFF formulae as disjuncts. The fact that {a mathematical formula}⌈(32)n⌉ is exponential in the size of {a mathematical formula}αn concludes the proof.  □
     </paragraph>
     <paragraph label="Proposition 12">
      The results inTable 4hold.{a mathematical formula}
     </paragraph>
     <paragraph label="Proof">
      Again, the proof is broken in a number of steps, where we prove some succinctness relationships between languages, and then apply transitivity of {a mathematical formula}≤s to possibly infer new relationships. Associated with each step of the proof is a table in which we mark all relationships proved at the step.Table 11: Let {a mathematical formula}L be any language among {a mathematical formula}AFF[∨], {a mathematical formula}renH[∨], {a mathematical formula}K/H[∨], {a mathematical formula}HORN[∨], {a mathematical formula}KROM[∨], and the corresponding existential closures {a mathematical formula}renH[∨,∃], {a mathematical formula}K/H[∨,∃], {a mathematical formula}HORN[∨,∃]. Since {a mathematical formula}TERM⊆AFF, {a mathematical formula}TERM⊆HORN, {a mathematical formula}TERM⊆KROM, {a mathematical formula}HORN⊆renH and {a mathematical formula}KROM≥prenH, we obviously have {a mathematical formula}DNF≥pL, hence we have DNF{a mathematical formula}≥s{a mathematical formula}L. In [1], it is proven that PI{a mathematical formula}≥sCNF, DNF{a mathematical formula}≱sCNF, DNF{a mathematical formula}≱s{a mathematical formula}OBDD&lt;, and IP{a mathematical formula}≥sDNF. By transitivity of {a mathematical formula}≤s, we get the results given in Table 11.Table 12: Consider the following consistent KROM formula {a mathematical formula}αn=⋀i=1n(¬xi∨¬yi); it is also a HORN formula, hence it belongs to the disjunction closure and to the full disjunctive closure of each language among KROM, HORN, {a mathematical formula}K/H, and renH. {a mathematical formula}αn has {a mathematical formula}2n essential prime implicants,{sup:10} hence there is no polynomial-sized IP formula and no polynomial-sized DNF formula equivalent to it. Similarly, the AFF formula {a mathematical formula}βn=⨁i=1nxi (which is also an {a mathematical formula}AFF[∨] formula) has {a mathematical formula}2n−1 essential prime implicants, hence there is no polynomial-sized IP formula and no polynomial-sized DNF formula equivalent to it. We get the results given in Table 12.Table 13: In the proof of Proposition 11, we have shown that the AFF formula {a mathematical formula}αn=⋀i=1n(xi⊕yi⊕zi⊕⊤) has no polynomially-sized {a mathematical formula}renH[∨,∃] representation. The point is that {a mathematical formula}αn has a polynomially-sized PI representation (consisting in 4n clauses: {a mathematical formula}¬xi∨¬yi∨¬zi, {a mathematical formula}¬xi∨yi∨zi, {a mathematical formula}xi∨¬yi∨zi, {a mathematical formula}xi∨yi∨¬zi for each {a mathematical formula}i∈1,…,n), and a polynomially-sized {a mathematical formula}OBDD&lt; representation for every ordering &lt; which is such that {a mathematical formula}xi, {a mathematical formula}yi, {a mathematical formula}zi ({a mathematical formula}i∈1,…,n) are successive elements. Indeed, for each {a mathematical formula}i∈1,…,n, one can generate in constant time an {a mathematical formula}OBDD&lt; representation equivalent to each {a mathematical formula}xi⊕yi⊕zi⊕⊤ and then, starting with the {a mathematical formula}OBDD&lt; representation of {a mathematical formula}x1⊕y1⊕z1⊕⊤, in an iterative way, replace the ⊤ sink of the current {a mathematical formula}OBDD&lt; representation by the root of the next {a mathematical formula}OBDD&lt; representation.Furthermore, in the proof of Proposition 11, we proved that the formula {a mathematical formula}αn=⋀i=1n(¬xi∨¬yi) (for any n) does not have a polynomial-size {a mathematical formula}AFF[∨] representation. The point is that {a mathematical formula}αn is a PI formula, and it also has a polynomially-sized {a mathematical formula}OBDD&lt; representation for every ordering &lt; which is such that {a mathematical formula}xi, {a mathematical formula}yi ({a mathematical formula}i∈1,…,n) are successive elements. Indeed, for each {a mathematical formula}i∈1,…,n, one can generate in constant time an {a mathematical formula}OBDD&lt; representation equivalent to each {a mathematical formula}¬xi∨¬yi and then, starting with the {a mathematical formula}OBDD&lt; representation of {a mathematical formula}¬x1∨¬y1, in an iterative way, replace the ⊤ sink of the current {a mathematical formula}OBDD&lt; representation by the root of the next {a mathematical formula}OBDD&lt; representation.Given that {a mathematical formula}PI≥pCNF, {a mathematical formula}OBDD&lt;≥pd-DNNF, {a mathematical formula}OBDD&lt;≥pDNNFT, and the succinctness relationships given in Proposition 11, by transitivity of {a mathematical formula}≤s, we get the results given in Table 13.Table 14: As to {a mathematical formula}DNNFT, it is enough to show that the family of circular bit shift functions {a mathematical formula}cbsm have polynomially-sized representations in {a mathematical formula}KROM[∨], {a mathematical formula}HORN[∨], {a mathematical formula}K/H[∨], and {a mathematical formula}AFF[∨]. Indeed, it has been proven that such functions do not have polynomially-sized SDNNF representations, where SDNNF is the union of {a mathematical formula}DNNFT for all vtrees T[20].For any positive integer m, consider the following Boolean function over {a mathematical formula}2m+1+m variables {a mathematical formula}cbsm(x0,…,x2m−1,y0,…,y2m−1,i0,…,im−1) which is the semantics of the formula{a mathematical formula} whose size is linear in the number of variables of {a mathematical formula}cbsm. In this formula, {a mathematical formula}ijbj denotes the literal {a mathematical formula}ij when {a mathematical formula}bj=0 and the literal {a mathematical formula}¬ij when {a mathematical formula}bj=1; num is the mapping from {a mathematical formula}{0,1}m to the set of natural numbers which gives the integer represented by the binary string {a mathematical formula}b0…bm−1. Thus, the variables {a mathematical formula}i0,…,im−1 make precise how the bits of the binary string {a mathematical formula}y0…y2m−1 must be (circularly) shifted, and {a mathematical formula}cbsm(x0,…,x2m−1,y0,…,y2m−1,i0,…,im−1)=1 exactly when the variables {a mathematical formula}x0,…,x2m−1 and the shifted variables {a mathematical formula}y0,…,y2m−1 are pairwise equal.For each {a mathematical formula}b0,…,bm−1∈{0,1}, the formula{a mathematical formula} is equivalent to the KROM formula{a mathematical formula} Clearly enough, {a mathematical formula}γb0,…,bm−1 also is a HORN formula, hence it is a {a mathematical formula}K/H formula and a renH formula. Similarly, {a mathematical formula}βb0,…,bm−1 is also equivalent to the AFF formula{a mathematical formula} where {a mathematical formula}lit(ij,bj)=ij when {a mathematical formula}bj=0 and {a mathematical formula}lit(ij,bj)=ij⊕⊤ when {a mathematical formula}bj=1. Both {a mathematical formula}γb0,…,bm−1 and {a mathematical formula}δb0,…,bm−1 can be computed in time linear in the size of {a mathematical formula}βb0,…,bm−1, hence linear in the number of variables of {a mathematical formula}cbsm.As a consequence, {a mathematical formula}⋁b0,…,bm−1∈{0,1}γb0,…,bm−1 is a {a mathematical formula}KROM[∨] (and a {a mathematical formula}HORN[∨], a {a mathematical formula}K/H[∨], a {a mathematical formula}renH[∨]) formula equivalent to {a mathematical formula}αm, and {a mathematical formula}⋁b0,…,bm−1∈{0,1}δb0,…,bm−1 is an {a mathematical formula}AFF[∨] formula equivalent to {a mathematical formula}αm. The fact that the size of any of{a mathematical formula} and{a mathematical formula} is linear in the number of variables of {a mathematical formula}cbsm completes the proof.As to {a mathematical formula}d-DNNF, the result comes easily from the fact that {a mathematical formula}d-DNNF is not at least as succinct as DNF, unless the polynomial hierarchy collapses [1], plus the fact that DNF is polynomially translatable into the disjunction closure and into the full disjunctive closure of each of KROM, HORN, {a mathematical formula}K/H, and renH.We finally get the results given in Table 14.  □
     </paragraph>
    </section>
   </appendices>
  </root>
 </body>
</html>