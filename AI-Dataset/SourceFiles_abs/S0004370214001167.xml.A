<?xml version="1.0" encoding="utf-8"?>
<html>
 <body>
  <root>
   <title>
    The limits of decidability in fuzzy description logics with general concept inclusions.
   </title>
   <content>
    <section label="1">
     <section-title>
      Introduction
     </section-title>
     <paragraph>
      Description logics (DLs) [1] are a family of knowledge representation formalisms, designed to represent the terminological knowledge of a domain in a formally well-understood way. They form the base language for many large-scale knowledge bases, like Snomed CT{sup:1} and the Gene Ontology,{sup:2} but arguably their largest success to date is the recommendation by the W3C of the DL-based language OWL as the standard ontology language for the Semantic Web.{sup:3} DLs essentially allow to state relations between concepts, which represent subsets of a specific domain containing exactly those domain elements that share certain properties. Roles correspond to binary relations that allow to state connections between concepts. For example, the concept of a human father can be expressed as{a mathematical formula} which describes the set of all humans that are male and have a child. Here, {a mathematical formula}Human and {a mathematical formula}Male are atomic concept names, whereas {a mathematical formula}hasChild is a role name. Domain-specific relations between concepts can be expressed in axioms such as{a mathematical formula} saying that bob is a male individual, and that every human can only have human children, respectively. The former axiom is called an assertion, the latter a general concept inclusion (GCI). In DLs, various reasoning problems over a set of such axioms, called an ontology or knowledge base, are studied. The most fundamental one is to decide whether an ontology is consistent; that is, if the restrictions expressed by its axioms can actually be realized in a model. Different sets of constructors for expressing concepts, such as conjunctions (⊓) or value restrictions (∀), lead to logics of varying expressivity, resulting in differences between the computational complexity of their consistency problems. For example, in the inexpressive DL {a mathematical formula}EL, consistency is trivial, whereas other reasoning problems such as subsumption have only polynomial complexity. In the more expressive {a mathematical formula}ALC, consistency without GCIs is PSpace-complete, and is ExpTime-complete in the presence of GCIs. The very expressive {a mathematical formula}SROIQ, the formalism underlying the OWL 2 Direct Semantics, has a 2-NExpTime-complete consistency problem.
     </paragraph>
     <paragraph>
      In their classical form, however, DLs are not well-suited for representing and reasoning with the vagueness and imprecision that are endemic to many knowledge domains, e.g. in the bio-medical fields. For example, one of the most common symptoms of diseases is the presence of fever, which is characterized by a high body temperature. Clearly, it is not possible to precisely distinguish high body temperatures from non-high body temperatures. In order to appropriately represent this knowledge, it is necessary to use a formalism capable of handling imprecision. Fuzzy variants of DLs have been introduced as a means of handling imprecise terminological knowledge. This is achieved by interpreting concepts as fuzzy sets. In a nutshell, a fuzzy set associates with every element of the universe a value from the interval {a mathematical formula}[0,1], which expresses its degree of membership to the set. This makes it possible to express, e.g. that 38 °C is a high body temperature to degree 0.7, while 39 °C belongs to the same concept with degree 1.
     </paragraph>
     <paragraph>
      Compared to classical DLs, fuzzy DLs have an additional degree of freedom for choosing how to interpret the logical constructors. A standard approach, inherited from mathematical fuzzy logic [2], [3], is to use a continuous triangular norm (t-norm) [4] to interpret conjunction. The three most commonly used t-norms, called Gödel, Łukasiewicz, and product, have the interesting property that all other continuous t-norms can be represented by composing copies of them in a certain way. From the chosen t-norm ⊗, the semantics of all other logical constructors is determined, generalizing the properties of the classical operators. Ontologies of fuzzy DLs generalize classical ontologies by annotating each axiom with a fuzzy value that specifies the degree to which the axiom holds. For example, a fuzzy assertion like {a mathematical formula}〈bob:∃hasFever.High≥0.6〉 can specify that an individual (in this case bob) belongs to a fuzzy concept ({a mathematical formula}∃hasFever.High) at least to a certain degree (e.g. 0.6).
     </paragraph>
     <paragraph>
      For the last two decades, research on fuzzy DLs has covered many different logics, from the inexpressive {a mathematical formula}EL[5] to the expressive {a mathematical formula}SROIQ(D)[6], from simple fuzzy semantics [7] to ones covering all continuous t-norms [8], from acyclic terminologies [9] to GCIs [10]. Fuzzy reasoning algorithms were implemented [11], [12] and the use of fuzziness in practical applications was studied [13], [14]. Recently, the focus in the area changed when some tableau-based algorithms for DLs allowing general concept inclusions were shown to be incorrect [15], [16]. This raised doubts about the decidability of the consistency problem in these logics, and eventually led to a plethora of undecidability results for fuzzy DLs [16], [17], [18], [19]. In particular, one does not need to go beyond the expressivity of {a mathematical formula}⊗-ALC to get undecidability [18], [19].
     </paragraph>
     <paragraph>
      The main goal of this paper is to characterize the limits of decidability in fuzzy DLs; in other words, we want to partition the family of fuzzy DLs according to the decidability of consistency in them. For the cases where the problem is decidable, we are also interested in finding precise complexity bounds. Given the sheer number of fuzzy DLs available, identified by the set of constructors, types of axioms, and t-norm that they use, it is infeasible to study each of them independently. Instead, we develop general methods for proving (un)decidability of these logics.
     </paragraph>
     <paragraph>
      Most of the known undecidability results [16], [17], [19] focus on one specific fuzzy DL; that is, undecidability is proven for a specific set of constructors, axioms, and chosen semantics. The papers [16], [17] show undecidability of (extensions of) {a mathematical formula}⊗-ALCf,≥, where ⊗ is the product t-norm, while [19] shows the same for the Łukasiewicz t-norm. The only exception is [18], where undecidability is shown for {a mathematical formula}⊗-IALf,= for all t-norms ⊗ “starting” with the product t-norm. Abstracting from the details of each specific logic, all these proofs of undecidability follow the same basic pattern. In essence, it is shown that the logic satisfies a series of properties that allows it to encode the Post Correspondence Problem [20].
     </paragraph>
     <paragraph>
      In the first part of this paper, we generalize these ideas and describe a set of properties that together imply undecidability of a fuzzy DL. We use this general framework to strengthen all previously known undecidability results to cover all continuous t-norms except the Gödel t-norm, for which the problem is decidable [21]. Additionally, we present some variants on the same ideas that allow us to prove undecidability of fuzzy DLs that do not fit precisely into the main framework. For instance, we show that the fairly inexpressive fuzzy DL {a mathematical formula}⊗-IEL= is undecidable for any continuous t-norm ⊗ except the Gödel t-norm. This can be strengthened to the even less expressive {a mathematical formula}⊗-NEL if ⊗ starts with the Łukasiewicz t-norm. These logics are of interest since they correspond to fuzzy variants of the prototypical classical DL {a mathematical formula}ALC. Indeed, they have the same expressivity as {a mathematical formula}ALC when their semantics is restricted to the two classical truth values.
     </paragraph>
     <paragraph>
      In the second part of the paper, we complement these results by considering fuzzy DLs based on t-norms that do not start with the Łukasiewicz t-norm, which in particular includes the product and Gödel t-norms. Under this assumption, we show that consistency is decidable even for the very expressive logic {a mathematical formula}⊗-SROIQf,≥ if axioms are not allowed to express upper bounds. We show an even stronger result: under these conditions, an ontology is consistent w.r.t. fuzzy semantics iff it is consistent w.r.t. crisp semantics, i.e. using only the classical truth values 0 and 1. Thus, ontology consistency in {a mathematical formula}⊗-SHOI is ExpTime-complete, and in {a mathematical formula}⊗-SROIQ it is 2-NExpTime-complete. If these restrictions are not met, then the problem is undecidable, as shown in the first part of the paper.
     </paragraph>
     <paragraph>
      Some of the results in this paper have appeared in a preliminary form in conference papers [22], [23]. Here, we not only combine those previous publications, but include more detailed proofs, add new undecidability results (see Section 3.5), and discuss (un-)decidability results for fuzzy DLs under general model semantics (see Section 5.1). In particular, we
     </paragraph>
     <list>
      <list-item label="•">
       use the framework for showing undecidability from [22] to prove these results here in more detail;
      </list-item>
      <list-item label="•">
       add some explanatory material (examples, figures) to aid understanding of these proofs;
      </list-item>
      <list-item label="•">
       describe additions to the framework that allow us to show more undecidability results for fuzzy DLs of the form {a mathematical formula}⊗-IEL (Section 3.5);
      </list-item>
      <list-item label="•">
       extend the proof from [23] that shows decidability for many of the remaining fuzzy DLs to deal with {a mathematical formula}⊗-SROIQf,≥ instead of only {a mathematical formula}⊗-SHOIf,≥; and
      </list-item>
      <list-item label="•">
       discuss related semantics and reasoning problems and present related work in more detail (Section 5).
      </list-item>
     </list>
    </section>
    <section label="2">
     <section-title>
      Preliminaries
     </section-title>
     <paragraph>
      We start with a brief introduction to t-norms and mathematical fuzzy logic, which will be useful for defining fuzzy extensions of description logics.
     </paragraph>
     <section label="2.1">
      <section-title>
       Triangular norms and mathematical fuzzy logic
      </section-title>
      <paragraph>
       Mathematical fuzzy logic can be used to express imprecise or vague information [2]. It extends classical logic by interpreting predicates as fuzzy sets over an interpretation domain. Given a non-empty domain {a mathematical formula}D, a fuzzy set is a function {a mathematical formula}F:D→[0,1] from {a mathematical formula}D into the real unit interval {a mathematical formula}[0,1], with the intuition that an element {a mathematical formula}x∈D belongs to F with degree{a mathematical formula}F(x). The interpretation of the logical constructors is based on appropriate truth functions that generalize the properties of the connectives of classical logic to the interval {a mathematical formula}[0,1]. The most prominent truth functions used in the fuzzy logic literature are based on triangular norms (or t-norms) [4].
      </paragraph>
      <paragraph>
       A t-norm is a binary operator {a mathematical formula}⊗:[0,1]×[0,1]→[0,1] that is associative, commutative, and monotone, and has 1 as its unit element. The t-norm is used to generalize classical conjunction. We will only consider continuous t-norms in this paper, which means that they are continuous as a function, i.e. we have for all convergent sequences {a mathematical formula}(xn)n≥0,(yn)n≥0 that{a mathematical formula} The residuum of a t-norm ⊗ is a binary operator {a mathematical formula}⇒:[0,1]×[0,1]→[0,1] that satisfies {a mathematical formula}z≤x⇒y iff {a mathematical formula}x⊗z≤y for all {a mathematical formula}x,y,z∈[0,1]. If ⊗ is continuous, then this equivalence determines the unique residuum{a mathematical formula} The residuum behaves like classical implication on the truth values 0 and 1 and is used to generalize the implication to fuzzy logics. Given a residuum ⇒, the residual negation is the unary operator {a mathematical formula}⊖:[0,1]→[0,1] defined by {a mathematical formula}⊖x:=x⇒0. As implied by its name, this operator generalizes classical negation. Finally, the disjunction can be fuzzified using the t-conorm of a t-norm ⊗, which is a binary operator {a mathematical formula}⊕:[0,1]×[0,1]→[0,1] defined as {a mathematical formula}x⊕y:=1−((1−x)⊗(1−y)). Like ⊗, it is associative, commutative, and monotone in both arguments, but its unit element is 0.
      </paragraph>
      <paragraph>
       Whenever we have a continuous t-norm ⊗, then we denote by ⇒, ⊖, and ⊕ the corresponding residuum, residual negation, and t-conorm, respectively. Three important continuous t-norms are the Gödel ({a mathematical formula}G), product ({an inline-figure}), and Łukasiewicz (Ł) t-norms. They are listed in Table 1 together with their induced operators. Fuzzy logics are sometimes extended with the involutive negation operator, defined as {a mathematical formula}∼x:=1−x[24], [25]. Observe that for {a mathematical formula}⊗=Ł the involutive negation and the residual negation coincide; that is, the equality {a mathematical formula}∼x=x⇒0 holds. However, for any other continuous t-norm ⊗, the involutive negation is not expressible in terms of ⊗ and its residuum ⇒.
      </paragraph>
      <paragraph>
       The following are simple consequences of the above definitions [4].
      </paragraph>
      <paragraph label="Proposition 1">
       For every continuous t-norm ⊗ and{a mathematical formula}x,y∈[0,1],
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}x⇒y=1iff{a mathematical formula}x≤y,
       </list-item>
       <list-item label="•">
        {a mathematical formula}1⇒y=y, and
       </list-item>
       <list-item label="•">
        {a mathematical formula}x⊕y=0iff{a mathematical formula}x=0and{a mathematical formula}y=0.
       </list-item>
      </list>
      <paragraph>
       From the three fundamental t-norms listed in Table 1, all continuous t-norms can be constructed as described next. For any {a mathematical formula}a,b∈[0,1] with {a mathematical formula}a&lt;b, we define the scaling function{a mathematical formula}σa,b:[0,1]→[a,b] by {a mathematical formula}σa,b(x):=a+(b−a)x for all {a mathematical formula}x∈[0,1]. This linear function is bijective with the inverse given by {a mathematical formula}σa,b−1(x):=x−ab−a. Let now {a mathematical formula}((ai,bi))i∈I be a (possibly infinite) family of non-empty, mutually disjoint open subintervals of {a mathematical formula}[0,1] and {a mathematical formula}(⊗i)i∈I be a family of continuous t-norms over the same index set I. The ordinal sum of {a mathematical formula}(((ai,bi),⊗i))i∈I is the t-norm ⊗, defined for every {a mathematical formula}x,y∈[0,1] by{a mathematical formula} This construction always yields a continuous t-norm, whose residuum is given by{a mathematical formula} where {a mathematical formula}⇒i denotes the residuum of {a mathematical formula}⊗i, for each {a mathematical formula}i∈I. Intuitively, this means that the t-norm ⊗ and its residuum “behave like” {a mathematical formula}⊗i and its residuum in each of the intervals {a mathematical formula}[ai,bi], and like the Gödel t-norm and residuum everywhere else.
      </paragraph>
      <paragraph>
       Two t-norms ⊗, {a mathematical formula}⊗′ are isomorphic if there exists a strictly increasing mapping {a mathematical formula}ι:[0,1]→[0,1] such that {a mathematical formula}ι(x⊗y)=ι(x)⊗′ι(y). It has been shown that, up to isomorphism, every continuous t-norm can be represented as the ordinal sum of copies of the Łukasiewicz and product t-norms.
      </paragraph>
      <paragraph label="Theorem 2">
       (See[26].) Every continuous t-norm is an ordinal sum of t-norms isomorphic to the Łukasiewicz t-norm or the product t-norm.
      </paragraph>
      <paragraph>
       In the following, let ⊗ be a continuous t-norm and {a mathematical formula}(((ai,bi),⊗i))i∈I be its (unique) representation as ordinal sum given by Theorem 2. For ease of presentation, we assume without loss of generality that the isomorphisms occurring in this theorem are the identity mapping, which means that each {a mathematical formula}⊗i is either the Łukasiewicz or product t-norm. We call the tuples {a mathematical formula}(((ai,bi),⊗i))i∈I the components of ⊗. We say that {a mathematical formula}⊗(a,b)-contains Łukasiewicz or product if it has a component of the form {a mathematical formula}((a,b),Ł) or {a mathematical formula}((a,b),{an inline-figure}), respectively. Similarly, ⊗ starts with Łukasiewicz if it has a component {a mathematical formula}((0,b),Ł). Whenever the exact location of the interval {a mathematical formula}(a,b) is irrelevant, we will omit it.
      </paragraph>
      <paragraph>
       An element {a mathematical formula}x∈[0,1] is called idempotent (w.r.t. ⊗) if {a mathematical formula}x⊗x=x. Note that the idempotent elements are exactly those that are not in {a mathematical formula}(ai,bi) for any {a mathematical formula}i∈I. In particular, 0 and 1 are always idempotent, as are {a mathematical formula}ai and {a mathematical formula}bi for any {a mathematical formula}i∈I. It is easy to see that a continuous t-norm has infinitely many non-idempotent elements if and only if it is not the Gödel t-norm.
      </paragraph>
      <paragraph>
       An element {a mathematical formula}x∈(0,1] is called a zero divisor (of ⊗) if there exists a {a mathematical formula}y∈(0,1] such that {a mathematical formula}x⊗y=0. Of the three fundamental continuous t-norms from Table 1, only the Łukasiewicz t-norm has zero divisors: every element {a mathematical formula}x∈(0,1) is a zero divisor for this t-norm since {a mathematical formula}1−x&gt;0 and {a mathematical formula}x⊗(1−x)=0. In fact, a continuous t-norm has zero divisors if and only if it starts with Łukasiewicz.
      </paragraph>
      <paragraph label="Lemma 3">
       (See[4].) A continuous t-norm has zero divisors iff it starts with the Łukasiewicz t-norm.
      </paragraph>
      <paragraph>
       All continuous t-norms that do not start with Łukasiewicz define the same residual negation, known as the Gödel negation (cf. Table 1).
      </paragraph>
      <paragraph label="Lemma 4">
       (See[4].) For any t-norm ⊗ without zero divisors and every{a mathematical formula}x∈[0,1],
      </paragraph>
      <list>
       <list-item label="(a)">
        {a mathematical formula}x⇒y=0iff{a mathematical formula}x&gt;0and{a mathematical formula}y=0; and
       </list-item>
       <list-item label="(b)">
        {a mathematical formula}⊖x={1ifx=0,0otherwise.
       </list-item>
      </list>
      <paragraph label="Example 5">
       The continuous t-norm ⊗ defined by{a mathematical formula} is the ordinal sum of the two components {a mathematical formula}((0,0.5),{an inline-figure}) and {a mathematical formula}((0.5,1),Ł). In particular, it has no zero divisors, and therefore its residual negation is the Gödel negation. Its only idempotent elements are 0, 0.5, and 1.
      </paragraph>
      <paragraph>
       Triangular norms are the basis for defining the semantics of fuzzy description logics, which are introduced in the following section.
      </paragraph>
     </section>
     <section label="2.2">
      <section-title>
       Fuzzy description logics
      </section-title>
      <paragraph>
       The syntax and semantics of a fuzzy description logic {a mathematical formula}⊗-L are determined by two components: the language {a mathematical formula}L and the t-norm ⊗. We first introduce the syntactical part {a mathematical formula}L, which is determined by a choice of logical constructors and axioms, and usually extends the syntax of an underlying classical description logic. As there exists a large variety of constructors available in description logics, we start defining a generic syntax of {a mathematical formula}L and later describe instantiations to more specific logics.
      </paragraph>
      <paragraph>
       The central notion of DLs is that of concepts, which are built from atomic concepts (so-called concept names) using different constructors, like conjunction, implication, or existential restrictions.
      </paragraph>
      <paragraph label="Definition 6">
       ConceptsLet {a mathematical formula}NC, {a mathematical formula}NR, and {a mathematical formula}NI be mutually disjoint sets of concept names, role names, and individual names, respectively. The set of (complex) concepts is defined inductively as follows:
      </paragraph>
      <list>
       <list-item label="•">
        every concept name {a mathematical formula}A∈NC is a concept; and
       </list-item>
       <list-item label="•">
        if {a mathematical formula}C,D are concepts and r is a role name, then ⊤ (top concept), ⊥ (bottom concept), {a mathematical formula}C⊓D (conjunction), {a mathematical formula}C→D (implication), ¬C (strong negation), ⊟C (residual negation), {a mathematical formula}∃r.C (existential restriction), and {a mathematical formula}∀r.C (value restriction) are also concepts.
       </list-item>
      </list>
      <paragraph>
       For {a mathematical formula}n∈N, we define {a mathematical formula}Cn as the n-ary conjunction of a concept C with itself. More formally, if C is a concept, then we set
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}C0:=⊤, and
       </list-item>
       <list-item label="•">
        {a mathematical formula}Cn+1:=C⊓Cn for all {a mathematical formula}n∈N.
       </list-item>
      </list>
      <paragraph>
       As mentioned before, different description logics {a mathematical formula}L are determined by the constructors they allow. In the DL {a mathematical formula}EL, concepts are built using only the constructors {a mathematical formula}⊤,⊓, and ∃. Extending {a mathematical formula}EL with value restrictions yields the DL {a mathematical formula}AL. Following the notation from [27], the letters {a mathematical formula}C and {a mathematical formula}N denote the presence of the strong negation (¬) and residual negation (⊟), respectively. The prefix {a mathematical formula}I expresses that the implication (→) and bottom (⊥) constructors are allowed. Table 2 summarizes this nomenclature for the logics that we will investigate in this paper. Constructors that can be simulated by others in the same logic are indicated in parentheses. In Section 4 we further extend the set of constructors to prove decidability of more expressive fuzzy DLs.
      </paragraph>
      <paragraph>
       The second component defining the expressivity of a fuzzy DL {a mathematical formula}⊗-L are its axioms. Axioms are the means to represent domain knowledge, by describing relations between individuals, roles, and concepts. In contrast to classical DLs, in fuzzy DLs axioms often include a lower bound for the degree to which the axiom should hold. This lower bound provides a larger flexibility for the interpretations that satisfy the axiom.
      </paragraph>
      <paragraph label="Definition 7">
       AxiomsAn axiom is either a general concept inclusion (GCI) or an assertion, where
      </paragraph>
      <list>
       <list-item label="•">
        a GCI is an expression of the form {a mathematical formula}〈C⊑D≥p〉, where {a mathematical formula}C,D are concepts and {a mathematical formula}p∈[0,1]; and
       </list-item>
       <list-item label="•">
        an assertion is of the form {a mathematical formula}〈e:C▹p〉 or {a mathematical formula}〈(d,e):r▹p〉, where C is a concept, r is a role name, {a mathematical formula}d,e are individual names, {a mathematical formula}p∈[0,1], and {a mathematical formula}▹∈{≥,=}. It is an inequality assertion if ▹ is ≥ and an equality assertion if ▹ is =.
       </list-item>
      </list>
      <paragraph>
       For crisp axioms, we will usually remove the part “▹1”, and simply write, e.g. {a mathematical formula}〈C⊑D〉. As with the choice of the constructors, the axioms influence the expressivity of the logic. We always assume that our logics allow at least classical ontologies. Given a DL {a mathematical formula}L, we will use the subscripts {a mathematical formula}f, ≥, and = to denote that arbitrary GCIs, inequality assertions, and equality assertions are allowed, respectively. For instance, {a mathematical formula}ELf,≥ denotes the logic {a mathematical formula}EL where ontologies may contain arbitrary GCIs and inequality assertions, but no equality assertions. Table 3 summarizes the expressivity of these subscripts.
      </paragraph>
      <paragraph>
       The semantics of a fuzzy DL {a mathematical formula}⊗-L is defined by interpreting concepts as fuzzy sets, and roles as fuzzy binary relations. Compared to classical DLs, fuzzy DLs have an additional degree of freedom in the selection of their semantics since the interpretation of the constructors depends on the continuous t-norm ⊗ that was chosen. The semantics of fuzzy DLs is usually obtained by viewing the DL part as a fragment of first-order logic [1] and lifting the first-order expression to the fuzzy semantics used in fuzzy predicate logics [2]. In particular, this means that existential and value restrictions are interpreted by suprema and infima, respectively, over the whole interpretation domain.
      </paragraph>
      <paragraph label="Definition 8">
       InterpretationsAn interpretation{a mathematical formula}I=(ΔI,⋅I) consists of a non-empty domain{a mathematical formula}ΔI and an interpretation function{a mathematical formula}⋅I that assigns to every {a mathematical formula}A∈NC a fuzzy set {a mathematical formula}AI:ΔI→[0,1], to every {a mathematical formula}r∈NR a fuzzy binary relation {a mathematical formula}rI:ΔI×ΔI→[0,1], and to every {a mathematical formula}d∈NI an element {a mathematical formula}dI∈ΔI of the domain. The interpretation function is extended to complex concepts as follows for all {a mathematical formula}x∈ΔI:
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}⊤I(x)=1,
       </list-item>
       <list-item label="•">
        {a mathematical formula}(C⊓D)I(x)=CI(x)⊗DI(x),
       </list-item>
       <list-item label="•">
        {a mathematical formula}(C→D)I(x)=CI(x)⇒DI(x),
       </list-item>
       <list-item label="•">
        {a mathematical formula}(¬C)I(x)=∼CI(x),
       </list-item>
       <list-item label="•">
        {a mathematical formula}(⊟C)I(x)=⊖CI(x),
       </list-item>
       <list-item label="•">
        {a mathematical formula}(∃r.C)I(x)=supy∈ΔI⁡(rI(x,y)⊗CI(y)),
       </list-item>
       <list-item label="•">
        {a mathematical formula}(∀r.C)I(x)=infy∈ΔI⁡(rI(x,y)⇒CI(y)).
       </list-item>
      </list>
      <paragraph>
       The interpretation {a mathematical formula}I is finite if its domain is finite, and crisp if {a mathematical formula}AI(x)∈{0,1} and {a mathematical formula}rI(x,y)∈{0,1} for all concept names A, role names r, and domain elements {a mathematical formula}x,y. We say that an interpretation {a mathematical formula}I′ is an extension of {a mathematical formula}I if it has the same domain as {a mathematical formula}I, agrees with {a mathematical formula}I on the interpretation of {a mathematical formula}NC, {a mathematical formula}NR, and {a mathematical formula}NI and additionally defines values for some new concept names not appearing in {a mathematical formula}NC.
      </paragraph>
      <paragraph>
       Notice that the semantics of existential and value restrictions require the computation of a supremum or infimum of the membership degrees of a possibly infinite set of elements of the interpretation domain. As is customary for fuzzy DLs, we therefore restrict reasoning to a special kind of models, called witnessed models [8], [28]. An interpretation {a mathematical formula}I is called witnessed if for every concept C, role name r, and {a mathematical formula}x∈ΔI there exist {a mathematical formula}y,y′∈ΔI such that
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}(∃r.C)I(x)=rI(x,y)⊗CI(y), and
       </list-item>
       <list-item label="•">
        {a mathematical formula}(∀r.C)I(x)=rI(x,y′)⇒CI(y′).
       </list-item>
      </list>
      <paragraph>
       This means that the suprema and infima in the semantics of existential and value restrictions are actually maxima and minima, respectively. Without this restriction, the value of {a mathematical formula}(∃r.C)I(x) might, e.g. be 1 without x actually having a single r-successor with degree 1 that belongs to C with degree 1. Such a behavior is usually unwanted in description logics, where an existential restriction is intended to express the existence of an adequate successor.
      </paragraph>
      <paragraph>
       The main reasoning problem that we consider in this paper is (witnessed) ontology consistency; that is, deciding whether one can find a witnessed interpretation satisfying all the axioms of an ontology.
      </paragraph>
      <paragraph label="Definition 9">
       ConsistencyA witnessed interpretation {a mathematical formula}I=(ΔI,⋅I)satisfies the GCI {a mathematical formula}〈C⊑D≥p〉 if for all {a mathematical formula}x∈ΔI, we have {a mathematical formula}CI(x)⇒DI(x)≥p. It satisfies the assertion {a mathematical formula}〈e:C▹p〉 (resp., {a mathematical formula}〈(d,e):r▹p〉) if {a mathematical formula}CI(eI)▹p (resp., {a mathematical formula}rI(dI,eI)▹p). It is a model of an ontology {a mathematical formula}O if it satisfies all the axioms in {a mathematical formula}O.An ontology is consistent if it has a model.
      </paragraph>
      <paragraph>
       According to this semantics, the crisp GCIs {a mathematical formula}〈C⊑D〉 and {a mathematical formula}〈D⊑C〉 are satisfied iff {a mathematical formula}CI(x)=DI(x) for every {a mathematical formula}x∈ΔI. It thus makes sense to abbreviate them by the expression {a mathematical formula}〈C≡D〉, as we will do for the rest of this paper. Note that the restriction to witnessed interpretations is not without loss of generality since there exist ontologies that have general models, but no witnessed models [28]. In Section 5.1, we comment on the importance of this restriction and the consequences of dropping it.
      </paragraph>
      <paragraph>
       We now relate some of the introduced fuzzy DLs according to their expressive power. For every choice of constructors {a mathematical formula}L and t-norm ⊗, the inequality concept assertion {a mathematical formula}〈e:C≥q〉 can be expressed in {a mathematical formula}⊗-L= using the two axioms {a mathematical formula}〈e:A=q〉 and {a mathematical formula}〈A⊑C〉, where A is a new concept name, and thus {a mathematical formula}⊗-L= is at least as expressive as {a mathematical formula}⊗-L≥. Furthermore, since the residual negation can be expressed using the implication and bottom constructors, we know that {a mathematical formula}⊗-IAL is as least as expressive as {a mathematical formula}⊗-NAL and the same holds for {a mathematical formula}⊗-IEL and {a mathematical formula}⊗-NEL.
      </paragraph>
      <paragraph>
       If we restrict the semantics to the Łukasiewicz t-norm, for which involutive and residual negation coincide, we obtain that {a mathematical formula}Ł-ELC, {a mathematical formula}Ł-NEL, {a mathematical formula}Ł-IEL, {a mathematical formula}Ł-ALC, {a mathematical formula}Ł-NAL, and {a mathematical formula}Ł-IAL are all equivalent [2]. Indeed, under this semantics value and existential restrictions are dual to each other {a mathematical formula}((∀r.C)I=(¬∃r.¬C)I) and the implication can be expressed by negation and conjunction {a mathematical formula}((C→D)I=(¬(C⊓¬D))I). However, for arbitrary t-norms these equalities need not hold. For instance, if any t-norm different from Łukasiewicz is used, then {a mathematical formula}(¬∃r.¬C)I≠(∀r.C)I.
      </paragraph>
      <paragraph>
       In the next section, we describe a general framework to show undecidability of consistency in fuzzy description logics. Subsequently, we show that consistency in many of the logics for which we cannot show undecidability is equivalent to consistency in the underlying crisp description logics, and thus decidable. Intuitively, a fuzzy DL is undecidable whenever it can express upper bounds for the membership degrees of concepts, e.g. through the involutive negation or the implication constructor. On the other hand, our decidability results exploit the fact that some fuzzy DLs cannot express such upper bounds except for 0. At the end of this paper, we comment on reasoning w.r.t. general (non-witnessed) models and on the decidability of reasoning problems other than consistency.
      </paragraph>
     </section>
    </section>
    <section label="3">
     <section-title>
      Undecidable fuzzy DLs
     </section-title>
     <paragraph>
      We now describe a general approach for proving that the consistency problem for a fuzzy DL {a mathematical formula}⊗-L is undecidable. It is based on a reduction from a variant of the Post correspondence problem (PCP) which is known to be undecidable [20].
     </paragraph>
     <paragraph label="Definition 10">
      PCPLet {a mathematical formula}P={(v1,w1),…,(vn,wn)} be a finite set of pairs of words over the alphabet {a mathematical formula}Σ={1,…,s} with {a mathematical formula}s&gt;1. The Post correspondence problem asks whether there is a finite sequence {a mathematical formula}i1…ik∈{1,…,n}⁎ such that {a mathematical formula}v1vi1…vik=w1wi1…wik. If this sequence exists, it is called a solution for {a mathematical formula}P.
     </paragraph>
     <paragraph>
      Notice that in this variant of the PCP, a solution always starts with the first pair of words {a mathematical formula}(v1,w1). We will abbreviate {a mathematical formula}{1,…,n} by {a mathematical formula}N. For {a mathematical formula}ν=i1…ik∈N⁎, we use the notation {a mathematical formula}vν:=v1vi1…vik and {a mathematical formula}wν:=w1wi1…wik. In order to solve an instance {a mathematical formula}P={(v1,w1),…,(vn,wn)} of the PCP, we consider its search tree, which has one node for every {a mathematical formula}ν∈N⁎, where ε is the root, and νi is the i-th successor of ν for each {a mathematical formula}i∈N. Every node ν in this tree is labeled with the words {a mathematical formula}vν,wν∈Σ⁎, as shown in Fig. 1. Obviously, the instance {a mathematical formula}P has a solution iff its search tree contains a node labeled by two equal words.
     </paragraph>
     <paragraph>
      Correspondingly, our reduction of the PCP to the consistency problem of a fuzzy DL consists of two parts. Given an instance {a mathematical formula}P of the PCP, we first construct an ontology {a mathematical formula}OP that describes the search tree of {a mathematical formula}P, and then check whether this tree contains a solution for {a mathematical formula}P. More precisely, we enforce that for every model {a mathematical formula}I of {a mathematical formula}OP and every {a mathematical formula}ν∈N⁎, there is an {a mathematical formula}xν∈ΔI such that {a mathematical formula}VI(xν)=enc(vν) and {a mathematical formula}WI(xν)=enc(wν), where {a mathematical formula}enc:Σ⁎→[0,1] is an injective function that encodes words over Σ into the interval {a mathematical formula}[0,1] (see Theorem 12). Once we have encoded the words {a mathematical formula}vν and {a mathematical formula}wν using V and W, we add axioms that restrict the models to those that satisfy {a mathematical formula}VI(xν)≠WI(xν) for all {a mathematical formula}ν∈N⁎. This ensures that {a mathematical formula}P has a solution if and only if the ontology is inconsistent (see Theorem 13).
     </paragraph>
     <section label="3.1">
      <section-title>
       A special case
      </section-title>
      <paragraph>
       We first describe the construction on the relatively easy example of the fuzzy DL {a mathematical formula}{an inline-figure}-IAL=. This is essentially the proof from [18], divided into several small steps. Later, we present a general framework that allows us to prove undecidability of many fuzzy DLs at the same time. This framework consists of several properties that a fuzzy DL can have, which together lead to undecidability. We label each part of the following construction by the name of the property of the general framework it corresponds to (see Section 3.2).
      </paragraph>
      <paragraph>
       Let in the following {a mathematical formula}P={(v1,w1),…,(vn,wn)} be an instance of the PCP over the alphabet Σ. Recall that Σ consists of the first s positive integers. We can thus view every word in {a mathematical formula}Σ⁎ as a natural number represented in base {a mathematical formula}s+1. On the other hand, every natural number n has a unique representation in base {a mathematical formula}s+1, which can be seen as a word over the alphabet {a mathematical formula}Σ0:=Σ∪{0}={0,…,s}. This is not a bijection since, e.g. the words 001202 and 1202 represent the same number. However, it is a bijection between the set {a mathematical formula}ΣΣ0⁎ and the positive natural numbers. In the following, we interpret the empty word ε as 0, thereby extending this bijection to {a mathematical formula}{ε}∪ΣΣ0⁎ and all non-negative integers.
      </paragraph>
      <paragraph>
       In the following constructions and proofs, we view elements of {a mathematical formula}Σ0⁎ both as words and as natural numbers in base {a mathematical formula}s+1. It is usually clear from the context which interpretation is used. However, to avoid confusion, we sometimes use the notation {a mathematical formula}u̲ to express that u is seen as a word. Thus, for instance, if {a mathematical formula}s=3, then {a mathematical formula}3⋅22=30 (in base 4), but {a mathematical formula}3̲⋅2̲2=322̲. Furthermore, {a mathematical formula}000̲ is a word of length 3, whereas 000 is simply the number 0. We extend this notation to rational numbers, and may use, e.g. the expression {a mathematical formula}0.0̲3⋅1̲ to denote the number 0.0001 (again, in base 4). For a word {a mathematical formula}u=α1⋯αm with {a mathematical formula}αi∈Σ0, {a mathematical formula}1≤i≤m, we denote by {a mathematical formula}u← the word {a mathematical formula}αm⋯α1∈Σ0⁎.
      </paragraph>
      <paragraph>
       For the case of {a mathematical formula}{an inline-figure}-IAL=, we use the encoding function {a mathematical formula}enc:Σ⁎→[0,1] given by {a mathematical formula}enc(u):=2−u to encode words as values from the interval {a mathematical formula}[0,1], and thus we have, e.g. {a mathematical formula}enc(ε)=2−0=1 and {a mathematical formula}enc(2)=2−2=1/4.
      </paragraph>
      <section>
       <section-title>
        The initialization property
       </section-title>
       <paragraph>
        The first step in constructing the ontology {a mathematical formula}OP that describes the search tree of {a mathematical formula}P is to initialize the root of this search tree. The root is represented by the individual name {a mathematical formula}e0, for which we have to initialize the values for V and W, as well as several other auxiliary concept names. Due to the presence of equality assertions, this step is particularly easy in {a mathematical formula}{an inline-figure}-IAL=:{a mathematical formula} The concept names {a mathematical formula}V1,…,Vn,W1,…,Wn are intended to be constants that hold the above values at every node of the search tree, and are used in each step to concatenate the words {a mathematical formula}v1,…,vn,w1,…,wn to the words currently encoded by V and W. Similarly, the value of M is always 1/2 throughout the search tree, and is used to compare the values of V and W at each node.
       </paragraph>
      </section>
      <section>
       <section-title>
        The concatenation property
       </section-title>
       <paragraph>
        The next step is to compute the values {a mathematical formula}enc(v1vi) and {a mathematical formula}enc(w1wi) for the successors {a mathematical formula}i∈N of the root node. We introduce additional auxiliary concept names {a mathematical formula}DV∘vi and {a mathematical formula}DW∘wi to hold these values. We can achieve the correct concatenation using the equivalence{a mathematical formula} for every {a mathematical formula}i∈N, and similarly for {a mathematical formula}DW∘wi. Indeed, since V has the value {a mathematical formula}enc(v1)=2−v1 and {a mathematical formula}Vi has the value {a mathematical formula}enc(vi)=2−vi at {a mathematical formula}e0, {a mathematical formula}DV∘vi is evaluated to {a mathematical formula}2−(v1(s+1)|vi|+vi)=2−v1vi̲=enc(v1vi). In general, whenever V has the value {a mathematical formula}enc(vν) for some {a mathematical formula}ν∈N⁎, then {a mathematical formula}DV∘vi has the value {a mathematical formula}enc(vνi).
       </paragraph>
      </section>
      <section>
       <section-title>
        The successor property
       </section-title>
       <paragraph>
        We now construct the successors of the root node, which are labeled by the role names {a mathematical formula}r1,…,rn, using the axioms{a mathematical formula} Every (witnessed) model of these axioms has an {a mathematical formula}ri-successor for every domain element and every {a mathematical formula}i∈N.
       </paragraph>
      </section>
      <section>
       <section-title>
        The transfer property
       </section-title>
       <paragraph>
        To finish the construction of the search tree of {a mathematical formula}P, it remains to transfer the values of {a mathematical formula}DV∘vi to the value of V at the {a mathematical formula}ri-successors. We also have to transfer the values of {a mathematical formula}DW∘wi and the auxiliary constants {a mathematical formula}M,V1,…,Vn,W1,…,Wn. This is accomplished using the axioms{a mathematical formula} for each {a mathematical formula}i∈N. It can be shown that the axioms in (1), (2), (3), (4) restrict all their models to “embed” an encoding of the search tree of {a mathematical formula}P. This is summarized in the canonical model property in the next section (for details, see the proof of Theorem 12).
       </paragraph>
      </section>
      <section>
       <section-title>
        The solution property
       </section-title>
       <paragraph>
        Finally, to ensure that V and W always encode different words, we employ the axiom{a mathematical formula} This ensures that at each node {a mathematical formula}ν∈N⁎ of the search tree one of the concepts {a mathematical formula}V→W or {a mathematical formula}W→V has a value smaller than or equal to that of M, i.e. 1/2. This means that {a mathematical formula}enc(vν) and {a mathematical formula}enc(wν) differ by at least a factor of 2, which is equivalent to the fact that {a mathematical formula}vν≠wν (for details, see Lemma 14, Lemma 19). Axiom (5) is of a simpler form than the ones used in previous undecidability proofs [18], [19] since we consider here the variant of the PCP where all solutions must start with the first pair of words {a mathematical formula}(v1,w1), and thus we do not need to exclude the root node ε from consideration.
       </paragraph>
       <paragraph>
        If we collect all the axioms in (1), (2), (3), (4), (5), the resulting ontology is consistent iff {a mathematical formula}P has no solution. Therefore, the consistency problem in {a mathematical formula}{an inline-figure}-IAL= is undecidable. For different fuzzy DLs, different steps of this construction are more or less difficult, depending on the t-norm and the allowed constructors. In the next section, we present a generalized description of how to show undecidability by a reduction of the PCP, which we then instantiate to yield undecidability results for a variety of fuzzy description logics.
       </paragraph>
      </section>
     </section>
     <section label="3.2">
      <section-title>
       The framework
      </section-title>
      <paragraph>
       In the following, let {a mathematical formula}P be an instance of the PCP and {a mathematical formula}⊗-L be any fuzzy DL as introduced in Section 2. We first formalize the requirements for the encoding function {a mathematical formula}enc. Recall from the previous section that we have to be able to concatenate constant words (i.e. {a mathematical formula}vi) to already computed encodings of words (i.e. {a mathematical formula}vν). Furthermore, we need to be able to test equality of words by comparing the residua of their encodings. When {a mathematical formula}enc satisfies the latter property, we call it a valid encoding function. The former requirement is formalized later in the concatenation property.
      </paragraph>
      <paragraph>
       Recall that for every {a mathematical formula}p,q∈[0,1], we have {a mathematical formula}p=q iff {a mathematical formula}p⇒q=q⇒p=1 (see Lemma 1). Thus, to decide whether {a mathematical formula}P has a solution, we have to check whether {a mathematical formula}enc(vν)⇒enc(wν)&lt;1 or {a mathematical formula}enc(wν)⇒enc(vν)&lt;1 holds for every {a mathematical formula}ν∈N⁎. In the special case in Section 3.1, it is clear that these residua are either 1 or smaller or equal to 1/2. Thus, the test simplifies to checking whether {a mathematical formula}enc(vν)⇒enc(wν)≤1/2 or {a mathematical formula}enc(wν)⇒enc(vν)≤1/2 holds. However, in general it is not possible to put a constant bound on these residua in case they are smaller than 1. Instead, we can often construct a word whose encoding bounds these residua. Clearly, the precise word and encoding must depend on the t-norm used. Another difference to the special case of Section 3.1 is that we allow a word u to be encoded by a set of values {a mathematical formula}Enc(u)⊆[0,1]. This simplifies some of the proofs, but requires us to ensure that these encodings remain unique, i.e. that no two words can be encoded by the same value.
      </paragraph>
      <paragraph label="Definition 11">
       Valid encoding functionA function {a mathematical formula}Enc:Σ0⁎→2[0,1] is called a valid encoding function for ⊗ if
      </paragraph>
      <list>
       <list-item label="(a)">
        for every {a mathematical formula}u∈{ε}∪ΣΣ0⁎ and every {a mathematical formula}v∈{0}⁎, we have {a mathematical formula}Enc(vu)=Enc(u),
       </list-item>
       <list-item label="(b)">
        the sets {a mathematical formula}Enc(u) and {a mathematical formula}Enc(u′) are nonempty and disjoint for any two different words {a mathematical formula}u,u′∈{ε}∪ΣΣ0⁎, and
       </list-item>
       <list-item label="(c)">
        there exist two words {a mathematical formula}uε,u+∈Σ0⁎ such that for every {a mathematical formula}ν∈N⁎, {a mathematical formula}p∈Enc(vν), {a mathematical formula}q∈Enc(wν), and {a mathematical formula}m∈Enc(uε̲⋅u+̲|ν|) it holds that {a mathematical formula}uε̲⋅u+̲|ν|∈{ε}∪ΣΣ0⁎ and{a mathematical formula}
       </list-item>
      </list>
      <paragraph>
       Condition (a) is due to the fact that we often view the words of {a mathematical formula}Σ0⁎ as natural numbers in base {a mathematical formula}s+1 (cf. Section 3.1), and thus words that differ only in the number of leading zeros should have the same encoding. Condition (b) ensures that one can uniquely identify a word from its encoding, modulo leading zeros. Finally, Condition (c) requires that every value in {a mathematical formula}Enc(uε̲⋅u+̲|ν|) can be used to check whether encodings of {a mathematical formula}vν and {a mathematical formula}wν are equal by comparing the above residua to this value.
      </paragraph>
      <paragraph>
       In the following, {a mathematical formula}Enc represents a valid encoding function for ⊗, and {a mathematical formula}uε, {a mathematical formula}u+ are the words required by Condition (c). We additionally assume that we have a function {a mathematical formula}enc:Σ0⁎→[0,1] that chooses a representative {a mathematical formula}enc(u)∈Enc(u) for each {a mathematical formula}u∈Σ0⁎. Such a function must always exist due to the Conditions (a) and (b) of Definition 11.
      </paragraph>
      <paragraph>
       As in the previous section, we use the concept names {a mathematical formula}V,W to represent the values of the words {a mathematical formula}vν and {a mathematical formula}wν at the nodes of the search tree for {a mathematical formula}P. We designate the concept name M to represent the bounding word {a mathematical formula}uε̲⋅u+̲|ν| from Definition 11, and {a mathematical formula}M+ to represent {a mathematical formula}u+. We also use the concept names {a mathematical formula}Vi,Wi to encode the words {a mathematical formula}vi,wi from {a mathematical formula}P, and the role names {a mathematical formula}ri to distinguish the different successors in the search tree, for each {a mathematical formula}i∈N. The individual name {a mathematical formula}e0 is used to distinguish the root node. Formally, the search tree for {a mathematical formula}P is represented by the canonical model {a mathematical formula}IP=(N⁎,⋅IP) of the ontology {a mathematical formula}OP we will construct. It is defined as follows for every {a mathematical formula}ν∈N⁎ and {a mathematical formula}i∈N:
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}e0IP:=ε,
       </list-item>
       <list-item label="•">
        {a mathematical formula}VIP(ν):=enc(vν), {a mathematical formula}WIP(ν):=enc(wν),
       </list-item>
       <list-item label="•">
        {a mathematical formula}ViIP(ν):=enc(vi), {a mathematical formula}WiIP(ν):=enc(wi),
       </list-item>
       <list-item label="•">
        {a mathematical formula}MIP(ν):=enc(uε̲⋅u+̲|ν|), {a mathematical formula}M+IP(ν):=enc(u+),
       </list-item>
       <list-item label="•">
        {a mathematical formula}riIP(ν,νi):=1 and {a mathematical formula}riIP(ν,ν′):=0 if {a mathematical formula}ν′≠νi.
       </list-item>
      </list>
      <paragraph>
       Since every element of {a mathematical formula}N⁎ has exactly one {a mathematical formula}ri-successor with degree greater than 0, {a mathematical formula}IP is a witnessed interpretation. This model is depicted in Fig. 2 and clearly represents the search tree for {a mathematical formula}P (cf. Fig. 1).
      </paragraph>
      <paragraph>
       The goal is to construct an ontology {a mathematical formula}OP that can only be satisfied by interpretations that “include” the search tree of {a mathematical formula}P. Given that the interpretation {a mathematical formula}IP represents this tree, we want the logic to satisfy the following property. Here, we use the expression {a mathematical formula}p∼q for {a mathematical formula}p,q∈[0,1] to denote the fact that {a mathematical formula}p,q∈Enc(u) for some word {a mathematical formula}u∈Σ0⁎. By Conditions (a) and (b) of Definition 11, this word is unique except for the number of leading zeros. But Condition (a) ensures that leading zeros are irrelevant for the encoding, and thus from {a mathematical formula}p∼q and {a mathematical formula}p∈Enc(u) for some {a mathematical formula}u∈Σ0⁎, we can always infer that {a mathematical formula}q∈Enc(u).
      </paragraph>
      <list label="The canonical model property ({a mathematical formula}P△)">
       <list-item>
        {a mathematical formula}
       </list-item>
       <list-item>
        As in the previous section, rather than trying to prove this property directly for some fuzzy DL, we provide several simpler properties that together imply the canonical model property. We often motivate the following constructions using only the concept V and the words {a mathematical formula}vν; however, all arguments apply analogously to {a mathematical formula}W,wν and {a mathematical formula}M,uε̲⋅u+̲|ν|.
       </list-item>
       <list-item>
        As illustrated in Section 3.1, we construct the search tree in an inductive way. First, we restrict every interpretation {a mathematical formula}I to satisfy that {a mathematical formula}AIP(ε)∼AI(e0I) for every relevant concept name. This makes sure that the root ε of the search tree is properly represented at the individual {a mathematical formula}g(ε):=e0I. Let now {a mathematical formula}g(ν) be a node satisfying this property, and {a mathematical formula}i∈N. We ensure that there is a node {a mathematical formula}g(νi) that also satisfies the property in three steps: first, we force the existence of an individual y with {a mathematical formula}riI(g(ν),y)=1 and set {a mathematical formula}g(νi):=y. Then, we compute a value in {a mathematical formula}Enc(vνvi) from {a mathematical formula}VI(g(ν))∈Enc(vν) and {a mathematical formula}ViI(g(ν))∈Enc(vi). Finally, we transfer this value to the previously created successor to ensure that {a mathematical formula}VI(g(νi))∼enc(vνvi). The value of {a mathematical formula}VjI(g(ν)) for every {a mathematical formula}j∈N is similarly transferred to {a mathematical formula}VjI(g(νi)).
       </list-item>
       <list-item>
        Each step of the previous construction is guaranteed by a property of the logic {a mathematical formula}⊗-L. These properties, which are ultimately used to produce the ontology {a mathematical formula}OP, are described next.
       </list-item>
      </list>
      <list label="The initialization property ({a mathematical formula}Pini)">
       <list-item>
        {a mathematical formula}
       </list-item>
       <list-item>
        Assume now that {a mathematical formula}⊗-L satisfies {a mathematical formula}Pini. Then, to initialize the search tree, we can set the values of V and W at {a mathematical formula}e0 to valid encodings of {a mathematical formula}v1 and {a mathematical formula}w1, respectively, and the value of M to an encoding of {a mathematical formula}uε. Moreover, we need that {a mathematical formula}M+ encodes {a mathematical formula}u+ and every {a mathematical formula}Vi and {a mathematical formula}Wi encodes the word {a mathematical formula}vi and {a mathematical formula}wi, respectively, for every {a mathematical formula}i∈N. We thus define the ontology{a mathematical formula} This is an abstract version of the axioms (1) presented in Section 3.1 for {a mathematical formula}{an inline-figure}-IAL=. Note that there we had {a mathematical formula}u+=ε, and thus the concept name {a mathematical formula}M+ was not needed.
       </list-item>
      </list>
      <list label="The successor property ({a mathematical formula}P→)">
       <list-item>
        {a mathematical formula}
       </list-item>
       <list-item>
        If a logic satisfies this property, then the ontology{a mathematical formula} ensures the existence of an {a mathematical formula}ri-successor with value 1 for every node of the search tree and every {a mathematical formula}i∈N, corresponding to the {a mathematical formula}ri-connections in the canonical model. For our initial example of {a mathematical formula}{an inline-figure}-IAL=, this task was achieved by the axioms in (3).
       </list-item>
      </list>
      <list label="The concatenation property ({a mathematical formula}P∘)">
       <list-item>
        {a mathematical formula}
       </list-item>
       <list-item>
        The goal of this property is to ensure that at every node where {a mathematical formula}VI(x)∈Enc(u) for some {a mathematical formula}u∈{ε}∪ΣΣ0⁎, and {a mathematical formula}CviI(x)∈Enc(vi), then {a mathematical formula}DV∘viI(x)∈Enc(uvi̲), and similarly for {a mathematical formula}W,wi and {a mathematical formula}M,u+. Thus, we define the ontology{a mathematical formula} To simplify the notation, we use the concept names {a mathematical formula}Vi,Wi,M+ instead of {a mathematical formula}Cvi,Cwi,Cu+ in this ontology. This corresponds to the axioms given for {a mathematical formula}{an inline-figure}-IAL= in (2). Note that by construction, the values of {a mathematical formula}VI(x), {a mathematical formula}WI(x), and {a mathematical formula}MI(x) should always be encodings of words from {a mathematical formula}{ε}∪ΣΣ0⁎.
       </list-item>
      </list>
      <section label="3.2.1">
       The transfer property ({a mathematical formula}P⇝)
       <paragraph>
        {a mathematical formula}
       </paragraph>
       <paragraph>
        To ensure that the values of {a mathematical formula}enc(uε̲⋅u+̲|ν|), {a mathematical formula}enc(u+), {a mathematical formula}enc(vνi), and {a mathematical formula}enc(vj) for every {a mathematical formula}j∈N are transferred from x to the {a mathematical formula}ri-successor {a mathematical formula}yi for every {a mathematical formula}i∈N, we use the ontology{a mathematical formula} This was accomplished by the {a mathematical formula}{an inline-figure}-IAL=-axioms in (4).
       </paragraph>
       <paragraph>
        As argued before, if we combine these four properties, then we obtain the canonical model property.
       </paragraph>
       <paragraph label="Theorem 12">
        Let{a mathematical formula}Encbe a valid encoding function for ⊗. If the logic{a mathematical formula}⊗-Lsatisfies{a mathematical formula}Pini,{a mathematical formula}P→,{a mathematical formula}P∘, and{a mathematical formula}P⇝, then it also satisfies{a mathematical formula}P△.
       </paragraph>
       <paragraph label="Proof">
        We show that the ontology {a mathematical formula}OP:=OP,ini∪OP,∘∪OP,→∪OP,⇝ satisfies the conditions of {a mathematical formula}P△. For a model {a mathematical formula}I of {a mathematical formula}OP, we construct the function {a mathematical formula}g:N⁎→ΔI inductively as follows.We first set {a mathematical formula}g(ε):=e0I. The fact that {a mathematical formula}I is a model of {a mathematical formula}OP,ini implies that {a mathematical formula}VI(g(ε))=VI(e0I)∈Enc(v1), and thus {a mathematical formula}VI(g(ε))∼enc(v1)=VIP(ε), and likewise for W, M, {a mathematical formula}M+, {a mathematical formula}Vi, and {a mathematical formula}Wi for all {a mathematical formula}i∈N.Let now ν be such that {a mathematical formula}g(ν) has already been defined, {a mathematical formula}VI(g(ν))∼enc(vν), and {a mathematical formula}ViI(g(ν))∼enc(vi). Since {a mathematical formula}Enc is a valid encoding function and by the definition of ∼, we know that {a mathematical formula}VI(g(ν))∈Enc(vν) and {a mathematical formula}ViI(g(ν))∈Enc(vi) hold. Thus, from the fact that {a mathematical formula}I is a model of {a mathematical formula}OP,∘ we infer that {a mathematical formula}DV∘viI(g(ν))∈Enc(vνi). Since {a mathematical formula}I satisfies {a mathematical formula}OP,→, for each {a mathematical formula}i∈{1,…,n} there must be an element {a mathematical formula}yi∈ΔI with {a mathematical formula}riI(g(ν),yi)=1. Define now {a mathematical formula}g(νi):=yi. The restrictions of {a mathematical formula}OP,⇝ ensure that {a mathematical formula}VI(g(νi))∼DV∘viI(g(ν))∼VIP(νi) and {a mathematical formula}ViI(g(νi))∼ViIP(νi) for all {a mathematical formula}i∈N, and analogously for W, {a mathematical formula}Wi and M, {a mathematical formula}M+. □
       </paragraph>
       <paragraph>
        We now describe how the property {a mathematical formula}P△ can be used to prove undecidability of {a mathematical formula}⊗-L. Recall that the idea is to add a set {a mathematical formula}OV≠W of axioms (as in (5)) to {a mathematical formula}OP so that every model {a mathematical formula}I is restricted to satisfy {a mathematical formula}VI(g(ν))≁WI(g(ν)) for every {a mathematical formula}ν∈N⁎, thus obtaining an ontology that is consistent if and only if {a mathematical formula}P has no solution. More formally, we have to show that (i) every model of {a mathematical formula}OP∪OV≠W witnesses the non-existence of a solution for {a mathematical formula}P, and (ii) if {a mathematical formula}P has no solution, then we can find a model of {a mathematical formula}OP∪OV≠W. Part (i) uses the fact that every model of {a mathematical formula}OP encodes the canonical model by {a mathematical formula}P△. For part (ii), the idea is to show that {a mathematical formula}IP can be extended to a model of {a mathematical formula}OP∪OV≠W. However, for this to work, {a mathematical formula}IP has to be a model of {a mathematical formula}OP in the first place.
       </paragraph>
       <paragraph>
        For the rest of this section, we thus assume that {a mathematical formula}IP can actually be extended to a model of {a mathematical formula}OP; while {a mathematical formula}OP might define additional concept names, it should not contradict the information about {a mathematical formula}V,W,M,… represented by {a mathematical formula}IP. It is important to keep in mind for the subsequent sections that this constitutes an additional condition that has to be verified before we can show undecidability of a given fuzzy DL {a mathematical formula}⊗-L. We also assume that {a mathematical formula}⊗-L satisfies {a mathematical formula}P△, and for a given model {a mathematical formula}I of {a mathematical formula}OP, g denotes the function mapping the nodes of {a mathematical formula}IP to elements of {a mathematical formula}ΔI given by the property. In Section 3.3, we show that these assumptions actually hold for a variety of fuzzy description logics.
       </paragraph>
       <paragraph>
        Recall that the key to showing undecidability of {a mathematical formula}⊗-L is to be able to express the restriction that V and W encode different words at every node {a mathematical formula}ν∈N⁎ of the search tree. Since {a mathematical formula}Enc is a valid encoding function and the concept name M encodes the word {a mathematical formula}uε̲⋅u+̲|ν| at every {a mathematical formula}ν∈N⁎, it suffices to check whether, for all {a mathematical formula}ν∈N⁎, either {a mathematical formula}(V→W)IP(ν)≤MIP(ν) or {a mathematical formula}(W→V)IP(ν)≤MIP(ν) holds (see Condition (c) of Definition 11).
       </paragraph>
       <section>
        The solution property ({a mathematical formula}P≠)
        <paragraph>
         {a mathematical formula}
        </paragraph>
        <paragraph>
         Notice that for any instance {a mathematical formula}P of the PCP, the ontologies {a mathematical formula}OP and {a mathematical formula}OV≠W are both finite. We now show that if a fuzzy DL satisfies this property, then consistency of ontologies is undecidable.
        </paragraph>
        <paragraph label="Theorem 13">
         If{a mathematical formula}⊗-Lsatisfies{a mathematical formula}P≠, then{a mathematical formula}Phas a solution iff{a mathematical formula}OP∪OV≠Wis inconsistent.
        </paragraph>
        <paragraph label="Proof">
         If {a mathematical formula}OP∪OV≠W is inconsistent, then in particular no extension of {a mathematical formula}IP can satisfy this ontology. By {a mathematical formula}P≠, there is a {a mathematical formula}ν∈N⁎ such that{a mathematical formula} By the definition of {a mathematical formula}IP and Condition (c) of Definition 11, we have {a mathematical formula}vν=wν, and thus {a mathematical formula}P has a solution.For the converse direction, assume that {a mathematical formula}OP∪OV≠W has a model {a mathematical formula}I. By {a mathematical formula}P≠, for every {a mathematical formula}ν∈N⁎ we have{a mathematical formula} By {a mathematical formula}P△, the definition of {a mathematical formula}IP, and Condition (c) of Definition 11, it follows that {a mathematical formula}vν≠wν. Since this holds for all {a mathematical formula}ν∈N⁎, we know that {a mathematical formula}P has no solution. □
        </paragraph>
        <paragraph>
         Fig. 3 informally depicts the relationships between all notions introduced in this section. The existence of a valid encoding function is the basic condition for all our properties. The canonical model property is implied by the conjunction of the smaller properties. Finally, the solution property depends on the canonical model property and guarantees undecidability of consistency in the given logic {a mathematical formula}⊗-L.
        </paragraph>
       </section>
      </section>
     </section>
     <section label="3.3">
      <section-title>
       First results
      </section-title>
      <paragraph>
       We use the properties of the previous section to show undecidability results for consistency in numerous fuzzy DLs. In Sections 3.4 and 3.5, we develop extensions of the framework to prove undecidability of this problem in a wider class of logics. The technical proofs of the following lemmata can be found in Appendix A.
      </paragraph>
      <paragraph>
       The first step is to find a valid encoding function for our continuous t-norm ⊗. We assume in the following that ⊗ is not the Gödel t-norm. The reason for this is that our encoding function and the subsequent constructions depend on the choice of one component {a mathematical formula}((a,b),⊗′) of ⊗ where {a mathematical formula}⊗′ is either Ł or {an inline-figure}. If ⊗ is different from the Gödel t-norm, such a component must exist by Theorem 2. It is important that the component that we choose remains fixed throughout the whole construction. In the case that {a mathematical formula}⊗′=Ł, we denote our choice by {a mathematical formula}Ł(a,b), and similarly for {a mathematical formula}⊗′={an inline-figure}. Correspondingly, we denote the fuzzy description logic by {a mathematical formula}Ł(a,b)-L or {a mathematical formula}{an inline-figure}(a,b)-L.
      </paragraph>
      <paragraph>
       We now use the chosen component to encode the words from {a mathematical formula}Σ0⁎. For {a mathematical formula}u∈{0}⁎ (in particular for {a mathematical formula}u=ε) we always use the encoding {a mathematical formula}Enc(u):=[b,1], i.e. all values from the upper bound of our component to 1 are valid encodings for ε. For these words, we define {a mathematical formula}enc(u):=b. For the remaining words {a mathematical formula}u∈Σ0⁎ΣΣ0⁎, we use only a singleton set {a mathematical formula}Enc(u):={enc(u)}, where {a mathematical formula}enc(u) depends on the chosen component. For the case of {a mathematical formula}{an inline-figure}(a,b), we define{a mathematical formula} and for {a mathematical formula}Ł(a,b) we use{a mathematical formula} Recall that we defined {a mathematical formula}σa,b(x):=a+(b−a)x for all {a mathematical formula}x∈[0,1] (see Section 2).
      </paragraph>
      <paragraph label="Lemma 14">
       The functions{a mathematical formula}Encdescribed above are valid encoding functions for t-norms of the form{a mathematical formula}{an inline-figure}(a,b)or{a mathematical formula}Ł(a,b).
      </paragraph>
      <paragraph>
       Variants of these encoding functions and words {a mathematical formula}uε, {a mathematical formula}u+ have been used before to show undecidability of fuzzy description logics based on the product [18] and Łukasiewicz [19] t-norms.
      </paragraph>
      <paragraph>
       We now present several results about instances of {a mathematical formula}⊗-L that satisfy the properties introduced in the previous section. Recall that one precondition for the property {a mathematical formula}P≠ is that {a mathematical formula}IP can be extended to a model of {a mathematical formula}OP. Thus, in the following constructions of {a mathematical formula}OC(e)=u, {a mathematical formula}O∃r, {a mathematical formula}OC∘u, and {a mathematical formula}OC⇝rD, it is important keep in mind that the resulting ontology {a mathematical formula}OP (as defined in the previous section) should not contradict information in {a mathematical formula}IP. However, we are allowed to define values for auxiliary concept names like {a mathematical formula}DV∘vi.
      </paragraph>
      <paragraph>
       First, we present several cases for {a mathematical formula}⊗-L in which the initialization property holds. For the case of the logic {a mathematical formula}Ł(0,b)-NEL, note first that for every {a mathematical formula}x∈(0,b] we have that {a mathematical formula}x⇒0=b−x; that is, the residual negation yields a “local involutive negation” over the interval {a mathematical formula}[0,b]. Thus, the concept ⊟C is interpreted as the local involutive negation of the interpretation of C, whenever the latter is in this interval. In this logic, we use the short-hand {a mathematical formula}C⇀D for {a mathematical formula}⊟(C⊓⊟D) to express a function similar to the residuum. In fact, for all {a mathematical formula}x,y∈[0,1], we have{a mathematical formula} In particular, {a mathematical formula}(C⇀D)I(x)=(C→D)I(x) holds whenever {a mathematical formula}DI(x)&lt;b for an interpretation {a mathematical formula}I and {a mathematical formula}x∈ΔI.
      </paragraph>
      <paragraph label="Lemma 15">
       For every continuous t-norm ⊗, the logics{a mathematical formula}⊗-EL=,{a mathematical formula}⊗-ELC≥, and{a mathematical formula}Ł(0,b)-NELsatisfy{a mathematical formula}Pini.
      </paragraph>
      <paragraph>
       It turns out that the successor and concatenation properties hold for all logics {a mathematical formula}⊗-L that we consider. In particular, the successor property only needs the constructors ⊤ and ∃ and the restriction to witnessed models, whereas the concatenation property only requires the constructors ⊤ and ⊓.
      </paragraph>
      <paragraph label="Lemma 16">
       For every continuous t-norm ⊗, the logic{a mathematical formula}⊗-ELsatisfies{a mathematical formula}P→.
      </paragraph>
      <paragraph>
       For the concatenation property, it is necessary to have non-idempotent elements. Since we have assumed at the beginning of this section that ⊗ is not the Gödel t-norm, this restriction is always satisfied.
      </paragraph>
      <paragraph label="Lemma 17">
       For every continuous t-norm ⊗ except the Gödel t-norm, the logic{a mathematical formula}⊗-ELsatisfies{a mathematical formula}P∘.
      </paragraph>
      <paragraph>
       This leaves only one property required for the canonical model property, namely the transfer property. We prove in Appendix A that this can be satisfied using existential restrictions in combination with either value restrictions, involutive negation, or residual negation under Łukasiewicz semantics.
      </paragraph>
      <paragraph label="Lemma 18">
       For every continuous t-norm ⊗ except the Gödel t-norm, the logics{a mathematical formula}⊗-AL,{a mathematical formula}⊗-ELC, and{a mathematical formula}Ł(0,b)-NELsatisfy{a mathematical formula}P⇝.
      </paragraph>
      <paragraph>
       Together with Theorem 12, the previous lemmata show that the logics {a mathematical formula}⊗-AL=, {a mathematical formula}⊗-ELC≥, and {a mathematical formula}Ł(0,b)-NEL have the canonical model property. We will see that the last two logics also satisfy the solution property, while for {a mathematical formula}⊗-AL= we additionally need the implication constructor.
      </paragraph>
      <paragraph>
       Recall that a necessary condition for the solution property is that the canonical model {a mathematical formula}IP can be extended to a model of the ontology {a mathematical formula}OP constructed from the individual parts in Lemmata Lemma 15, Lemma 18. It is a simple task to verify that this holds in all the cases described above. We only need to assume that a unique new concept name is used for every auxiliary concept name appearing in the different ontologies, such as {a mathematical formula}DV∘vi. In fact, the values of these auxiliary concept names at each node ν are uniquely determined by the values of the concept names {a mathematical formula}V,W,Vi,Wi,M,M+ at ν. Moreover, since every ν has exactly one {a mathematical formula}ri-successor with degree greater than 0 for every {a mathematical formula}i∈N, it follows that {a mathematical formula}IP can be extended to a witnessed model of {a mathematical formula}OP.
      </paragraph>
      <paragraph label="Lemma 19">
       Let ⊗ be any continuous t-norm except the Gödel t-norm. If one of the logics{a mathematical formula}⊗-IEL=,{a mathematical formula}⊗-ELC≥, or{a mathematical formula}Ł(0,b)-NELsatisfies{a mathematical formula}P△with{a mathematical formula}OPand{a mathematical formula}IPcan be extended to a model of{a mathematical formula}OP, then this logic also satisfies{a mathematical formula}P≠.
      </paragraph>
      <paragraph>
       This concludes the first round of undecidability proofs using the framework presented in Section 3.2. Using Theorem 13, we get the following results.
      </paragraph>
      <paragraph label="Corollary 20">
       For every continuous t-norm ⊗ except the Gödel t-norm, ontology consistency is undecidable in the logics{a mathematical formula}⊗-IAL=,{a mathematical formula}⊗-ELC≥, and furthermore it is undecidable for{a mathematical formula}Ł(0,b)-NEL.
      </paragraph>
      <paragraph>
       Table 4 summarizes the results and distinguishes between classical ontologies, inequality assertions, and equality assertions on the vertical axis, and different combinations of constructors on the horizontal axis. An entry “⊗” stands for every continuous t-norm except the Gödel t-norm. Note that {a mathematical formula}Ł-ELC is as expressive as {a mathematical formula}Ł-NEL=Ł(0,1)-{a mathematical formula}NEL, and thus consistency {a mathematical formula}Ł-ELC is also undecidable. This already subsumes the previously known undecidability results for consistency in
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}{an inline-figure}-ALCf,≥ with strict GCIs [16],
       </list-item>
       <list-item label="•">
        {a mathematical formula}{an inline-figure}(0,b)-IALf,=[18], and
       </list-item>
       <list-item label="•">
        {a mathematical formula}Ł-ELCf,≥[19].
       </list-item>
      </list>
      <paragraph>
       We have strengthened the first and the last result to cover all fuzzy DLs {a mathematical formula}⊗-ELC≥ with any continuous t-norm except the Gödel t-norm. Moreover, consistency in {a mathematical formula}Ł-ELC is undecidable even for classical ontologies. The second result was similarly extended to cover (almost) all continuous t-norms. Interestingly, all logics considered so far are fuzzy extensions of classical {a mathematical formula}ALC, and indeed equivalent to {a mathematical formula}ALC when restricted to two truth values.
      </paragraph>
      <paragraph>
       We will show in Section 4 that ontology consistency is decidable in {a mathematical formula}⊗-IALf,≥ if ⊗ does not start with Łukasiewicz. Furthermore, for the Gödel t-norm, consistency even in {a mathematical formula}G-IALCf,= is decidable [21]. Together with Corollary 20, this already covers many fuzzy description logics. Only two gaps remain for which the decidability status of consistency is still open.
      </paragraph>
      <paragraph>
       The first gap concerns the fuzzy DLs above {a mathematical formula}⊗-NEL=, where ⊗ does not start with Łukasiewicz. For such t-norms, we show in Section 3.5 that consistency is undecidable for {a mathematical formula}⊗-IEL=. Unfortunately, we must leave open the decidability status of consistency in {a mathematical formula}⊗-NEL= and {a mathematical formula}⊗-NAL= if ⊗ does not start with Łukasiewicz.
      </paragraph>
      <paragraph>
       The second gap is about fuzzy DLs {a mathematical formula}⊗-ELC with involutive negation over classical ontologies. In addition to the Łukasiewicz t-norm, in Section 3.4 we show that consistency is also undecidable for the product t-norm. However, apart from the fundamental t-norms, not much is known about the decidability of consistency in {a mathematical formula}⊗-ELC.
      </paragraph>
     </section>
     <section label="3.4">
      The case of {a mathematical formula}{an inline-figure}-ELC
      <paragraph>
       To prove that consistency in {a mathematical formula}{an inline-figure}-ELC is also undecidable, we extend the framework of Section 3.2 by allowing a different version of the PCP to be reduced. In this section, the compared words do not start with {a mathematical formula}v1/w1, but with the empty word. More formally, we consider a solution to an instance {a mathematical formula}P={(v1,w1),…,(vn,wn)} of the PCP to be a non-empty sequence {a mathematical formula}ν=i1…ik∈{1,…,n}+ for which {a mathematical formula}vi1…vik=wi1…wik holds. Correspondingly, we redefine here the abbreviations {a mathematical formula}vν:=vi1…vik and {a mathematical formula}wν:=wi1…wik. We call the canonical model resulting from these modified definitions {a mathematical formula}IP′. It can be defined just as in Section 3.2, but the values it holds are now different. This also leads to a modified canonical model property {a mathematical formula}P△′, which is defined exactly as before, except that {a mathematical formula}IP is replaced by {a mathematical formula}IP′. Observe that {a mathematical formula}Enc, as defined in Section 3.3 for {a mathematical formula}{an inline-figure}(a,b), remains a valid encoding function, and we can use {a mathematical formula}uε=1 and {a mathematical formula}u+=ε as before.
      </paragraph>
      <paragraph>
       Unfortunately, we cannot show the initialization property, and instead directly construct an ontology for the canonical model property. The full construction is presented in Appendix A (p. 49).
      </paragraph>
      <paragraph label="Lemma 21">
       The logic{a mathematical formula}{an inline-figure}-ELCsatisfies{a mathematical formula}P△′.
      </paragraph>
      <paragraph>
       As before, it is easily verified that {a mathematical formula}IP′ can be extended to a witnessed model ontology constructed in this proof. In the light of the different version of the PCP we consider here, it is clear that we also need a different solution property. It has to be ensured that V and W encode different words at every node of the search tree except the root node, where they both encode ε. We denote by {a mathematical formula}P≠′ the solution property in which {a mathematical formula}N⁎ has been replaced by {a mathematical formula}N+ to reflect this change. It is easy to see that Theorem 13 also holds under these changes.
      </paragraph>
      <paragraph label="Lemma 22">
       The logic{a mathematical formula}{an inline-figure}-ELCsatisfies{a mathematical formula}P≠′.
      </paragraph>
      <paragraph>
       We thus obtain the following result.
      </paragraph>
      <paragraph label="Corollary 23">
       Ontology consistency in{a mathematical formula}{an inline-figure}-ELCis undecidable.
      </paragraph>
      <paragraph>
       The proofs of undecidability for both {a mathematical formula}Ł-ELC and {a mathematical formula}{an inline-figure}-ELC use the fact that one can construct the constant 1/2 using the axiom {a mathematical formula}〈H≡¬H〉. We conjecture that these proofs can be lifted to {a mathematical formula}⊗-ELC, where ⊗ is any continuous t-norm for which 1/2 is not an idempotent element. This condition ensures that 1/2 lies in a component of norm that uses either the Łukasiewicz or the product t-norm. Starting from this value, one can construct encodings of the words {a mathematical formula}vi and {a mathematical formula}wi. However, the encoding has to be adapted since 1/2 need not lie in the exact center of the component interval.
      </paragraph>
     </section>
     <section label="3.5">
      The case of {a mathematical formula}⊗-IEL=
      <paragraph>
       We have shown so far that for every continuous t-norm ⊗, except the Gödel t-norm, {a mathematical formula}⊗-IEL= satisfies the properties {a mathematical formula}Pini, {a mathematical formula}P∘, and {a mathematical formula}P→. By Theorem 12, we need only to show the transfer property to know that these logics satisfy {a mathematical formula}P△ and, due to Lemma 19, that consistency is undecidable. Rather than showing that {a mathematical formula}⊗-IEL= satisfies {a mathematical formula}P⇝, in this section we strengthen Theorem 12 by showing that a weaker property, which we call the simultaneous transfer property, together with the other properties, implies the canonical model property. This extends our framework by another method to verify {a mathematical formula}P△. We then show that for every continuous t-norm except the Gödel t-norm {a mathematical formula}⊗-IEL satisfies the simultaneous transfer property.
      </paragraph>
      <paragraph>
       Recall that the transfer property ensures that it is possible to transfer a membership degree from any domain element to all its r-successors. In the reduction from the PCP, this property is used to copy several degrees. It thus makes sense to allow for all these degrees to be transferred simultaneously, as described in the following property.
      </paragraph>
      <section>
       Simultaneous transfer property ({a mathematical formula}P⇝→)
       <paragraph>
        {a mathematical formula}
       </paragraph>
       <paragraph>
        Given an instance {a mathematical formula}P of the PCP with words {a mathematical formula}(v1,w1),…,(vn,wn), we can assume w.l.o.g. that {a mathematical formula}v1≠ε, and thus {a mathematical formula}v1∉{0}⁎. Then, we can choose for every i, {a mathematical formula}1≤i≤n, the set{a mathematical formula} which ensures the existence of the i-th successor of every node; i.e., that the concatenation with the pair {a mathematical formula}(vi,wi) is considered. The last three pairs are used to transfer the computed concatenations to the i-th successors, while the remaining pairs ensure that all constants are available for the next round of concatenations. We then define the ontology {a mathematical formula}OP,⇝→ as the union of the resulting ontologies {a mathematical formula}O(Cj(i))⇝(Dj(i)) to transfer all the needed values to the correct successors.
       </paragraph>
       <paragraph>
        It is easy to see that any logic that satisfies {a mathematical formula}P→ and {a mathematical formula}P⇝ must also satisfy {a mathematical formula}P⇝→. Indeed, {a mathematical formula}P→ ensures that there is an r-successor with degree 1, and {a mathematical formula}P⇝ states that each {a mathematical formula}CjI(x) can be copied to {a mathematical formula}DjI(y) if {a mathematical formula}rI(x,y)=1. Moreover, the ontology {a mathematical formula}OP:=OP,⇝→∪OP,ini∪OP,∘ satisfies the conditions in the definition of {a mathematical formula}P△.
       </paragraph>
       <paragraph label="Theorem 24">
        If a logic{a mathematical formula}⊗-Lsatisfies the properties{a mathematical formula}Pini,{a mathematical formula}P∘, and{a mathematical formula}P⇝→, then it also satisfies{a mathematical formula}P△.
       </paragraph>
       <paragraph label="Proof">
        The function g for a model {a mathematical formula}I of {a mathematical formula}OP can be constructed as in the proof of Theorem 12, with the exception that we define as {a mathematical formula}g(νi) that element {a mathematical formula}y∈ΔI whose existence is guaranteed by {a mathematical formula}OP,⇝→ when we consider {a mathematical formula}x=g(ν). □
       </paragraph>
       <paragraph>
        Fig. 4 depicts the alternative way of showing undecidability using the simultaneous transfer property instead of the successor and transfer properties (cf. Fig. 3).
       </paragraph>
       <paragraph label="Lemma 25">
        For every continuous t-norm except the Gödel t-norm, the logic{a mathematical formula}⊗-IELsatisfies{a mathematical formula}P⇝→.
       </paragraph>
       <paragraph>
        Together with Theorem 24, this implies that {a mathematical formula}⊗-IEL= satisfies the canonical model property whenever ⊗ is not the Gödel t-norm.
       </paragraph>
       <paragraph>
        It is also easy to see that {a mathematical formula}IP can be extended to a model of the ontology {a mathematical formula}OP constructed from the ontologies provided by the initialization, concatenation, and simultaneous transfer properties: as before, the values of the auxiliary variables are uniquely determined by the values of the concept names {a mathematical formula}V,W,Vi,Wi at each node ν. By Lemma 19, we know that {a mathematical formula}⊗-IEL= satisfies the solution property, which yields the final undecidability result of this paper.
       </paragraph>
       <paragraph label="Corollary 26">
        For any continuous t-norm ⊗ except the Gödel t-norm, ontology consistency in{a mathematical formula}⊗-IEL=is undecidable.
       </paragraph>
      </section>
     </section>
    </section>
    <section label="4">
     <section-title>
      Decidable fuzzy DLs
     </section-title>
     <paragraph>
      It remains to show the decidability results claimed in the previous section. We will prove that ontology consistency is decidable in {a mathematical formula}⊗-IALf,≥ if ⊗ has no zero divisors, i.e. it does not start with Łukasiewicz. We show this by means of a straightforward reduction of fuzzy to classical ontologies. We present this reduction for a much more expressive description logic, namely {a mathematical formula}⊗-SROIQf,≥+, which extends {a mathematical formula}⊗-IALf,≥ by several concept and role constructors and complex role inclusion axioms.
     </paragraph>
     <paragraph>
      Note that even in the classical case the syntax of {a mathematical formula}SROIQ+ we introduce below leads to undecidability of consistency. Decidability is regained for {a mathematical formula}SROIQ, which imposes several restrictions on the form of number restrictions and complex role inclusions [29], [30]. However, our reduction also works for the more expressive logic and is easier to present without the restrictions of {a mathematical formula}SROIQ.
     </paragraph>
     <section label="4.1">
      Fuzzy {a mathematical formula}SROIQ+
      <paragraph>
       Formally, in addition to the syntax of {a mathematical formula}⊗-IALf,≥, the fuzzy DL {a mathematical formula}⊗-SROIQf,≥+ allows the role constructors u (universal role), {a mathematical formula}s− (inverse), and ⊟s (residual negation) to build complex roles s from role names. An interpretation {a mathematical formula}I is extended to complex roles as follows for all {a mathematical formula}x,y∈ΔI:
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}uI(x,y)=1,
       </list-item>
       <list-item label="•">
        {a mathematical formula}(s−)I(x,y)=sI(y,x),
       </list-item>
       <list-item label="•">
        {a mathematical formula}(⊟s)I(x,y)=⊖sI(x,y).
       </list-item>
      </list>
      <paragraph>
       We also introduce the new concept constructors {a mathematical formula}∃s.Selff, {a mathematical formula}{d} (nominal), {a mathematical formula}C⊔D (disjunction), {a mathematical formula}≥ns.C (at-least restriction), and {a mathematical formula}≤ns.C (at-most restriction) for {a mathematical formula}d∈NI, a complex role s, and {a mathematical formula}n∈N. Moreover, complex roles are allowed in existential and value restrictions and role assertions. The new constructors are interpreted by an interpretation {a mathematical formula}I as follows for all {a mathematical formula}x∈ΔI:
      </paragraph>
      <list>
       <list-item label="•">
        {a mathematical formula}(∃s.Self)I(x)=sI(x,x),
       </list-item>
       <list-item label="•">
        {a mathematical formula}{d}I(x)=1 if {a mathematical formula}dI=x and 0 otherwise,
       </list-item>
       <list-item label="•">
        {a mathematical formula}(C⊔D)I(x)=CI(x)⊕DI(x),
       </list-item>
       <list-item label="•">
        {a mathematical formula}(≥ns.C)I(x)=sup⁡{p∈[0,1]||{y∈ΔI|sI(x,y)⊗CI(y)≥p}|≥n},
       </list-item>
       <list-item label="•">
        {a mathematical formula}(≤ns.C)I(x)=sup⁡{p∈[0,1]||{y∈ΔI|sI(x,y)⇒⊖CI(y)&lt;p}|≤n}.
       </list-item>
      </list>
      <paragraph>
       The last two expressions are equivalent to the semantics of number restrictions used in [31]. Notice that whenever ⊗ has no zero divisors, the residual negation ⊖ is the Gödel negation (see Lemma 4) and for every interpretation {a mathematical formula}I and {a mathematical formula}x∈ΔI, it holds that{a mathematical formula} This means that under such a t-norm at-most restrictions are always crisp.
      </paragraph>
      <paragraph>
       We additionally allow complex role inclusions to occur in ontologies, which are axioms of the form {a mathematical formula}〈s1∘⋯∘sn⊑t≥p〉, where {a mathematical formula}n∈N, {a mathematical formula}s1,…,sn,t are complex roles, and {a mathematical formula}p∈[0,1]. An interpretation {a mathematical formula}Isatisfies this role inclusion if{a mathematical formula} for all {a mathematical formula}x0,…,xn∈ΔI. If {a mathematical formula}n=0, then we write {a mathematical formula}〈id⊑t≥p〉 and the semantics simplifies to {a mathematical formula}tI(x0,x0)≥p for all {a mathematical formula}x0∈ΔI.
      </paragraph>
      <paragraph>
       Those axioms of classical {a mathematical formula}SROIQ that are not included in {a mathematical formula}SROIQ+ can be simulated as follows:
      </paragraph>
      <list>
       <list-item label="•">
        negated role assertions: {a mathematical formula}〈(d,e):⊟s〉;
       </list-item>
       <list-item label="•">
        inequality assertions between individual names: {a mathematical formula}〈{d}⊑⊟{e}〉;
       </list-item>
       <list-item label="•">
        transitivity: {a mathematical formula}〈s∘s⊑s〉;
       </list-item>
       <list-item label="•">
        symmetry: {a mathematical formula}〈s⊑s−〉;
       </list-item>
       <list-item label="•">
        asymmetry: {a mathematical formula}〈s⊑⊟s−〉;
       </list-item>
       <list-item label="•">
        reflexivity: {a mathematical formula}〈id⊑s〉;
       </list-item>
       <list-item label="•">
        irreflexivity: {a mathematical formula}〈id⊑⊟s〉;
       </list-item>
       <list-item label="•">
        role disjointness: {a mathematical formula}〈s⊑⊟t〉.
       </list-item>
      </list>
     </section>
     <section label="4.2">
      <section-title>
       The crisp model property
      </section-title>
      <paragraph>
       The undecidability results of Section 3 all rely heavily on the fact that one can design ontologies that allow only models with infinitely many truth values. We shall see that one cannot construct such an ontology in {a mathematical formula}⊗-SROIQf,≥+ if ⊗ has no zero divisors. It is even true that all consistent {a mathematical formula}⊗-SROIQf,≥+-ontologies have a crisp model; that is, a model using only the values 0 and 1.
      </paragraph>
      <paragraph label="Definition 27">
       A fuzzy DL {a mathematical formula}⊗-L has the crisp model property if every ontology that is consistent in {a mathematical formula}⊗-L has a crisp model.
      </paragraph>
      <paragraph>
       As mentioned in the beginning of this section, we now consider only continuous t-norms without zero divisors. Our main result is based on the function {a mathematical formula}1 that maps fuzzy truth values to crisp truth values by defining, for all {a mathematical formula}x∈[0,1],{a mathematical formula} Since ⊗ is a continuous t-norm without zero divisors, it follows from Lemma 4 that {a mathematical formula}1(x)=⊖⊖x for all {a mathematical formula}x∈[0,1]. This function is compatible with the residual negation, the t-norm, the corresponding t-conorm, implication, and suprema. It is also compatible with minima, provided that they exist. The proofs of the following lemmata can be found in Appendix B.
      </paragraph>
      <paragraph label="Lemma 28">
       Let ⊗ be a continuous t-norm without zero divisors. For all{a mathematical formula}x,y∈[0,1]and all non-empty sets{a mathematical formula}X⊆[0,1]it holds that
      </paragraph>
      <list>
       <list-item label="1.">
        {a mathematical formula}1(⊖x)=⊖1(x),
       </list-item>
       <list-item label="2.">
        {a mathematical formula}1(x⊗y)=1(x)⊗1(y),
       </list-item>
       <list-item label="3.">
        {a mathematical formula}1(x⊕y)=1(x)⊕1(y),
       </list-item>
       <list-item label="4.">
        {a mathematical formula}1(x⇒y)=1(x)⇒1(y),
       </list-item>
       <list-item label="5.">
        {a mathematical formula}1(sup⁡{x|x∈X})=sup⁡{1(x)|x∈X}, and
       </list-item>
       <list-item label="6.">
        if{a mathematical formula}min⁡{x|x∈X}exists, then{a mathematical formula}1(min⁡{x|x∈X})=min⁡{1(x)|x∈X}.
       </list-item>
      </list>
      <paragraph>
       Notice that in general the function {a mathematical formula}1 is not compatible with the infimum. Consider for example the set {a mathematical formula}X={1n|n∈N}. Then {a mathematical formula}inf⁡X=0 and hence {a mathematical formula}1(inf⁡X)=0, but {a mathematical formula}inf⁡{1(1n)|n∈N}=inf⁡{1}=1. However, under witnessed model semantics all infima needed to interpret universal restrictions are minima, which eliminates this problem.
      </paragraph>
      <paragraph>
       We use Lemma 28 to construct a crisp interpretation from a fuzzy interpretation by simply applying the function {a mathematical formula}1. Given a (witnessed) interpretation {a mathematical formula}I, we construct the interpretation {a mathematical formula}J over the domain {a mathematical formula}ΔJ:=ΔI by defining, for all concept names {a mathematical formula}A∈NC, role names {a mathematical formula}r∈NR, individual names {a mathematical formula}d∈NI, and {a mathematical formula}x,y∈ΔI,{a mathematical formula} We now show that {a mathematical formula}J preserves the compatibility shown in Lemma 28 w.r.t. complex roles and concepts.
      </paragraph>
      <paragraph label="Lemma 29">
       For all complex concepts C, complex roles s, and{a mathematical formula}x,y∈ΔI, it holds that{a mathematical formula}CJ(x)=1(CI(x))and{a mathematical formula}sJ(x,y)=1(sI(x,y)).
      </paragraph>
      <paragraph>
       With the help of this lemma, we can show that the crisp interpretation {a mathematical formula}J satisfies all the axioms that are satisfied by {a mathematical formula}I.
      </paragraph>
      <paragraph label="Lemma 30">
       If{a mathematical formula}Iis a witnessed model of an ontology{a mathematical formula}Oin{a mathematical formula}⊗-SROIQf,≥+, then{a mathematical formula}Jis also a witnessed model of{a mathematical formula}O.
      </paragraph>
      <paragraph label="Proof">
       Observe first that axioms with value {a mathematical formula}p=0 are trivially satisfied by {a mathematical formula}J. Let now {a mathematical formula}〈e:C≥p〉 be a concept assertion in {a mathematical formula}O with {a mathematical formula}p∈(0,1]. Since it is satisfied by {a mathematical formula}I, we have {a mathematical formula}CI(eI)≥p&gt;0. Lemma 29 yields {a mathematical formula}CJ(eJ)=1≥p. The same argument can be used for role assertions.Let now {a mathematical formula}〈C⊑D≥p〉 be a GCI in {a mathematical formula}O with {a mathematical formula}p∈(0,1] and consider any {a mathematical formula}x∈ΔI. As the GCI is satisfied by {a mathematical formula}I, we have {a mathematical formula}CI(x)⇒DI(x)≥p&gt;0. By Lemma 28, Lemma 29, we obtain{a mathematical formula} and thus {a mathematical formula}J satisfies the GCI.A similar argument shows that {a mathematical formula}J satisfies all complex role inclusions in {a mathematical formula}O. □
      </paragraph>
      <paragraph>
       Thus, by applying {a mathematical formula}1 to the truth degrees we obtain a crisp model {a mathematical formula}J from any fuzzy model {a mathematical formula}I of a ⊗-{a mathematical formula}SROIQf,≥+-ontology {a mathematical formula}O.
      </paragraph>
      <paragraph label="Theorem 31">
       If ⊗ is a continuous t-norm without zero divisors, then the logic{a mathematical formula}⊗-SROIQf,≥+has the crisp model property.
      </paragraph>
      <paragraph>
       In the next section, we use this result to show that ontology consistency in sublogics of {a mathematical formula}⊗-SROIQf,≥+ can be decided using classical reasoning algorithms.
      </paragraph>
     </section>
     <section label="4.3">
      <section-title>
       Consistency
      </section-title>
      <paragraph>
       For a given ontology {a mathematical formula}O in {a mathematical formula}⊗-SROIQf,≥+, we define {a mathematical formula}crisp(O) to be the classical {a mathematical formula}SROIQ+-ontology that is obtained from {a mathematical formula}O by replacing all the non-zero truth values appearing in the axioms by 1. Axioms with value 0 can be removed without affecting the semantics of {a mathematical formula}O. For example, for the ontology{a mathematical formula} we obtain{a mathematical formula}
      </paragraph>
      <paragraph label="Lemma 32">
       Let ⊗ be a continuous t-norm without zero divisors,{a mathematical formula}Obe a{a mathematical formula}⊗-SROIQf,≥+-ontology and{a mathematical formula}Ibe a crisp interpretation. Then{a mathematical formula}Iis a model of{a mathematical formula}Oiff it is a model of{a mathematical formula}crisp(O).
      </paragraph>
      <paragraph label="Proof">
       In the proof of both directions we can ignore axioms with truth value 0. Assume that {a mathematical formula}crisp(O) has a model {a mathematical formula}I and let {a mathematical formula}〈C⊑D≥p〉 be an axiom from {a mathematical formula}O with {a mathematical formula}p∈(0,1]. Since {a mathematical formula}I is a model of {a mathematical formula}crisp(O), it must satisfy {a mathematical formula}〈C⊑D〉; that is, {a mathematical formula}CI(x)⇒DI(x)≥1≥p holds for all {a mathematical formula}x∈ΔI. Thus, {a mathematical formula}I satisfies {a mathematical formula}〈C⊑D≥p〉. The proof that {a mathematical formula}I satisfies assertions and complex role inclusions is analogous. Hence {a mathematical formula}I is also a model of {a mathematical formula}O.For the other direction, assume that {a mathematical formula}I satisfies a GCI {a mathematical formula}〈C⊑D≥p〉 from {a mathematical formula}O with {a mathematical formula}p∈(0,1]. As {a mathematical formula}I is a crisp interpretation, we have {a mathematical formula}CI(x)⇒DI(x)∈{0,1} for all {a mathematical formula}x∈ΔI. Together with {a mathematical formula}CI(x)⇒DI(x)≥p&gt;0, this implies that {a mathematical formula}CI(x)⇒DI(x)=1, and thus {a mathematical formula}I satisfies the crisp GCI {a mathematical formula}〈C⊑D〉. The same argument can be used for complex role inclusions and assertions. Thus {a mathematical formula}I is also a model of {a mathematical formula}crisp(O). □
      </paragraph>
      <paragraph>
       In particular, a {a mathematical formula}⊗-SROIQf,≥+-ontology {a mathematical formula}O has a crisp model iff {a mathematical formula}crisp(O) has a crisp model. Together with Theorem 31, this shows that a {a mathematical formula}⊗-SROIQf,≥+-ontology {a mathematical formula}O is consistent iff {a mathematical formula}crisp(O) has a crisp model. The latter is a classical reasoning problem.
      </paragraph>
      <paragraph>
       Consistency in classical {a mathematical formula}SROIQ+ is undecidable in general, as the number restrictions and role axioms we introduced are too powerful. However, one can use reasoning algorithms for any sublogic of {a mathematical formula}SROIQ+, for example {a mathematical formula}SROIQ or {a mathematical formula}SHOI, to decide consistency of ontologies in the corresponding fuzzy DL over a t-norm without zero divisors. For example, reasoning with GCIs in crisp {a mathematical formula}SHOI is known to be ExpTime-complete [32], while in {a mathematical formula}SROIQ it is 2-NExpTime-complete [30].
      </paragraph>
      <paragraph label="Corollary 33">
       If ⊗ is a continuous t-norm without zero divisors, then the complexity of deciding consistency in any sublogic of{a mathematical formula}⊗-SROIQf,≥+is the same as in the underlying classical description logic.
      </paragraph>
      <paragraph>
       This result is different from previous work on reducing reasoning in finite-valued fuzzy DLs to classical reasoning [6], [31], [33], [34]. There, the authors simulate fuzzy concepts by using linearly many cut-concepts and -roles of the form {a mathematical formula}Ap and {a mathematical formula}rp for {a mathematical formula}A∈NC, {a mathematical formula}r∈NR, and {a mathematical formula}p∈[0,1]. They then recursively translate the fuzzy ontology into a classical one, which may be exponentially larger. In contrast, our reduction shows that infinite-valued fuzzy DLs of the form {a mathematical formula}⊗-SROIQf,≥+ for a t-norm ⊗ without zero divisors are too weak to support actual fuzzy consistency reasoning—one can simply remove all fuzzy values from the input ontology. However, this is not true for other reasoning problems supported by the algorithms in [6], [31], [33], [34] (see Section 5.3).
      </paragraph>
      <paragraph>
       Theorem 31 and Lemma 32 still hold when we restrict the semantics to the less expressive logics {a mathematical formula}⊗-SHOf,≥, or {a mathematical formula}⊗-SIf,≥. The crisp DLs {a mathematical formula}SHO and {a mathematical formula}SI are known to have the finite model property [35], [36], and {a mathematical formula}⊗-SHOf,≥ and {a mathematical formula}⊗-SIf,≥ inherit the finite model property from their crisp ancestors.
      </paragraph>
      <paragraph label="Theorem 34">
       If ⊗ is a continuous t-norm without zero divisors, then the logics{a mathematical formula}⊗-SHOf,≥and{a mathematical formula}⊗-SIf,≥and their sublogics have the finite model property.
      </paragraph>
      <paragraph>
       At this point, we want to correct a typing error in [15, Theorem 3.8]. There, it appears to be shown that {a mathematical formula}{an inline-figure}-AL≥ does not have the finite model property, contradicting the above result. However, the assertion {a mathematical formula}〈a:A≥0.5〉 used in the proof must in fact be {a mathematical formula}〈a:A=0.5〉 in order for the arguments to work.
      </paragraph>
     </section>
    </section>
    <section label="5">
     <section-title>
      Discussion and related work
     </section-title>
     <paragraph>
      Table 5 summarizes the results obtained in Sections 3 and 4. As in Table 4, columns describe the class of logical constructors allowed in the logic, while the rows denote the types of assertions allowed: classical, inequality assertions, or equality assertions. The content of a cell then shows the class of continuous t-norms for which consistency has been shown to be undecidable, where ⊗ stands for any non-idempotent t-norm; that is, any t-norm except the Gödel t-norm. Thus, for instance, the upper–left cell states that {a mathematical formula}Ł(0,b)-NEL is undecidable. Cells with gray background mark logics for which decidability of consistency has been fully characterized, either between t-norms with or without zero divisors, or between the Gödel t-norm and all other t-norms. For the other logics, only the stated undecidability results are known. Regarding the Gödel t-norm, one could think that papers like [6], [31] show decidability even for the very expressive fuzzy DL {a mathematical formula}G-SROIQf,=. However, these papers explicitly restrict reasoning to a finite set of truth values. Thus, decidability of consistency for the Gödel t-norm is only known up to {a mathematical formula}G-IALCf,=[21]. However, we strongly believe also {a mathematical formula}G-SROIQf,= to have a decidable consistency problem. Notice that we have shown undecidability using only classical ontologies, while the decidability results hold also in the presence of fuzzy GCIs (f). Thus, the results depicted in Table 5 are independent of whether we use crisp or fuzzy GCIs.
     </paragraph>
     <paragraph>
      In the rest of this section, we present a short survey on other kinds of reasoning problems in fuzzy DLs. We start by describing the known results regarding reasoning w.r.t. general models, i.e., removing the restriction to witnessed models. Afterwards, we briefly discuss the other standard reasoning tasks in fuzzy DLs, namely satisfiability, subsumption, and instance checking.
     </paragraph>
     <section label="5.1">
      <section-title>
       General models
      </section-title>
      <paragraph>
       The general framework for proving undecidability presented in Section 3 is independent of the class of models used for reasoning, and hence applies also for reasoning w.r.t. general models. However, when instantiating the general framework to specific fuzzy DLs, we have used the properties of witnessed models to prove the successor property. Indeed, in the proof of Lemma 16, we use that if {a mathematical formula}(∃r.⊤)I(x)=1 for some model {a mathematical formula}I and {a mathematical formula}x∈ΔI, then there must exist a {a mathematical formula}y∈ΔI such that {a mathematical formula}rI(x,y)=1, which cannot be guaranteed for general models. If this assumption is dropped, it is possible to modify the fuzzy DL in question to show (a variant of) the successor property.
      </paragraph>
      <paragraph>
       First, one can see from the proof of Lemma 16 that it is only necessary to witness existential restrictions of the form {a mathematical formula}∃r.⊤. In [22], interpretations that fulfill the witnessing condition only for this kind of existential restrictions are called ⊤-witnessed. Restricting the semantics to ⊤-witnessed interpretations thus also leads to undecidability in the logics of Corollary 20, Corollary 23. A second possibility is to allow axioms of the form {a mathematical formula}crisp(r), asserting that the role name r can take only the values 0 or 1. Indeed, in such a logic one can use the two axioms {a mathematical formula}crisp(r) and {a mathematical formula}∃r.⊤ to show the successor property. The corresponding results have also been shown in [22].
      </paragraph>
      <paragraph>
       Consider now a continuous t-norm ⊗ that has a component {a mathematical formula}((a,b),Ł) or {a mathematical formula}((a,b),{an inline-figure}) with {a mathematical formula}b&lt;1. Using this component for the encoding function, it is possible to relax the successor property to only create an r-successor with value ≥b rather than =1, similar to the construction used in Section 3.5. Indeed, if we modify the successor and the transfer properties to say {a mathematical formula}rI(x,y)≥b instead of {a mathematical formula}rI(x,y)=1, we can show a result analogous to Theorem 12 to obtain the canonical model property. For the successor property, we can still use the axiom {a mathematical formula}∃r.⊤ since for every model {a mathematical formula}I of this axiom and every {a mathematical formula}x∈ΔI there must be at least one {a mathematical formula}y∈ΔI such that {a mathematical formula}rI(x,y)≥b, as the supremum of all these values is 1 (recall the semantics of ∃ from Definition 8). For the transfer property, it is often irrelevant whether {a mathematical formula}rI(x,y) has the value 1 or any value ≥b since both behave in the same way when combined with encodings in the interval {a mathematical formula}[a,b] using ⊗ and ⇒. Unfortunately, under the mentioned modification we cannot show the transfer property for {a mathematical formula}⊗-ELC anymore. The reason is that we cannot guarantee that the involutive negation remains in the interval {a mathematical formula}[a,b], and hence {a mathematical formula}rI(x,y) need not behave as a neutral element when computing its t-norm with {a mathematical formula}(¬D)I(y) (see the proof of Lemma 18).
      </paragraph>
      <paragraph>
       For the special case of {a mathematical formula}Ł-NEL, it is also possible to show undecidability of consistency w.r.t. general models [37], but this requires greater modifications. The main idea is not to encode the words {a mathematical formula}u∈Σ+ by single values, but to allow a certain error bound in the encoding. Thus, the encoding {a mathematical formula}Enc(u) of each {a mathematical formula}u∈Σ+ is a subinterval of {a mathematical formula}[0,1]. To obtain a valid encoding function, one has to ensure that intervals encoding different words do not overlap. Since the axiom {a mathematical formula}∃r.⊤ can only ensure, for each {a mathematical formula}p&lt;1, the existence of an r-successor with value greater than or equal to p, the transfer of values using the axioms from the proof of Lemma 18 might incur some additional error. By always choosing p large enough, one can ensure that the resulting value stays inside the prescribed error bounds. A final difference is that for the solution property, instead of a single value M one has to use two values that keep track of the length of the words {a mathematical formula}vν and {a mathematical formula}wν encoded in V and W, respectively. For further details, see [37].
      </paragraph>
      <paragraph>
       For the special case of {a mathematical formula}⊗-IEL= treated in Section 3.5, the restriction to witnessed models is fundamental in the proofs of the simultaneous transfer property (Lemma 36, Lemma 37). In this case, undecidability can still be shown if roles can be restricted to be crisp; unfortunately, the same is not true if we restrict only to ⊤-witnessed models, or to t-norms containing a component {a mathematical formula}((a,b),Ł) or {a mathematical formula}((a,b),{an inline-figure}) with {a mathematical formula}b&lt;1.
      </paragraph>
      <paragraph>
       For the decidability results from Section 4, the restriction to witnessed models was only used in the proof of Lemma 29 to show that the semantics of value restrictions {a mathematical formula}∀s.C is compatible with the function {a mathematical formula}1. From this it is easy to see that, under general model semantics, the result of Corollary 33 still holds for all sublogics of {a mathematical formula}⊗-SROIQf,≥+ that do not have the ∀ constructor [38].
      </paragraph>
      <paragraph>
       Furthermore, the decidability result for {a mathematical formula}G-IALCf,= also holds under general model semantics [39].
      </paragraph>
     </section>
     <section label="5.2">
      <section-title>
       Satisfiability and local consistency
      </section-title>
      <paragraph>
       Given an ontology {a mathematical formula}O without assertions, a concept C, and a degree {a mathematical formula}p&gt;0, we say that C is p-satisfiable w.r.t. {a mathematical formula}O if there is a model {a mathematical formula}I of {a mathematical formula}O where {a mathematical formula}CI(x)≥p holds for some {a mathematical formula}x∈ΔI. The undecidability results for consistency of classical ontologies (the first row of Table 5) immediately carry over to this problem since the reduction uses only one individual name and consistency of a finite set {a mathematical formula}O of GCIs together with the crisp assertions {a mathematical formula}〈e0:C1〉, …, {a mathematical formula}〈e0:Cn〉 is equivalent to the 1-satisfiability of the concept {a mathematical formula}C1⊓⋯⊓Cn w.r.t. {a mathematical formula}O.
      </paragraph>
      <paragraph>
       For the other undecidability results of Section 3, such an adaptation is not so straightforward. The reason is that several concept names need to be initialized to different values. However, this shows undecidability of local consistency[40], [41], which is a decision problem between concept satisfiability and ontology consistency that asks for a model with an individual that has different degrees for several concepts at the same time. In the presence of fuzzy GCIs, at least the consistency of inequality assertions {a mathematical formula}〈e0:C1≥p1〉, …, {a mathematical formula}〈e0:Cn≥pn〉 can be reduced to the 1-satisfiability of a new concept name A w.r.t. the original GCIs and the axioms {a mathematical formula}〈A⊑C1≥p1〉, …, {a mathematical formula}〈A⊑Cn≥pn〉. This shows that all undecidability results in the first row of Table 5 also apply to concept satisfiability w.r.t. classical ontologies. Similarly, the second row can be used to determine the decidability of concept satisfiability in the presence of fuzzy GCIs.
      </paragraph>
      <paragraph>
       On the other hand, the decidability results of Section 4 also hold for concept satisfiability since C is p-satisfiable w.r.t. {a mathematical formula}O iff {a mathematical formula}O∪{〈a:C≥p〉} is consistent, where a is a fresh individual name. Furthermore, it follows from the construction of Section 4 that the best satisfiability degree of a concept C, i.e. the supremum over all p for which C is p-satisfiable, is always either 0 or 1 (for details, see [23]).
      </paragraph>
      <paragraph>
       Also note that in the smaller logics {a mathematical formula}⊗-EL and {a mathematical formula}⊗-AL, both consistency and satisfiability are trivial problems since all ontologies written in these logics are consistent.
      </paragraph>
     </section>
     <section label="5.3">
      <section-title>
       Subsumption and instance checking
      </section-title>
      <paragraph>
       Little is known about subsumption, another fundamental reasoning problem for fuzzy DLs, in the presence of GCIs. Formally, for {a mathematical formula}p∈[0,1], a concept C is p-subsumed by a concept D w.r.t. an ontology {a mathematical formula}O if the fuzzy GCI {a mathematical formula}〈C⊑D≥p〉 is satisfied in every model of {a mathematical formula}O. A related problem is to find the best subsumption degree of C and D w.r.t. {a mathematical formula}O, i.e. the supremum over all p for which C is p-subsumed by D w.r.t. {a mathematical formula}O.
      </paragraph>
      <paragraph>
       Even though {a mathematical formula}⊗-SROIQf,≥+ has the crisp model property, p-subsumption in this logic cannot be decided using only crisp models. In fact, the GCI {a mathematical formula}〈⊤⊑A≥p〉 for {a mathematical formula}p∈(0,1) forces the best subsumption degree of ⊤ and A to be p, whereas ⊤ is even 1-subsumed by A when only crisp models are considered. Thus, in every fuzzy DL of the form {a mathematical formula}⊗-Lf, p-subsumption cannot be decided using only crisp models. A similar example is used in [23] to show the same for all fuzzy DLs {a mathematical formula}⊗-L where ⊗ has no zero divisors and {a mathematical formula}L contains the residual negation. If ⊗ is the product t-norm, then p-subsumption cannot even be decided over the class of all finite models [23].
      </paragraph>
      <paragraph>
       The listed negative results also hold for the related problem of deciding p-instances, i.e. whether an assertion {a mathematical formula}〈a:C≥p〉 holds in every model of a given ontology [23].
      </paragraph>
      <paragraph>
       On the positive side, p-subsumption in {a mathematical formula}G-EL can be decided in polynomial time in the size of the input ontology [5]. However, p-subsumption is co-NP-hard in {a mathematical formula}⊗-EL whenever ⊗ contains the Łukasiewicz t-norm [42].
      </paragraph>
     </section>
     <section label="5.4">
      <section-title>
       Related work
      </section-title>
      <paragraph>
       Fuzzy description logics were first considered in [43], where a sublanguage of {a mathematical formula}ALC was fuzzified using the so-called Zadeh semantics. This approach has its origin in fuzzy set theory [24] and uses the Gödel t-norm and t-conorm, but the S-implication{a mathematical formula}∼x⊕y rather than the residuum {a mathematical formula}x⇒y. In fact, the first algorithms for deciding consistency and entailment in fuzzy variants of {a mathematical formula}ALC were based on the Zadeh semantics [9], [44], [45]. Later, it was discovered that reasoning in this logic can be restricted to the finitely many values occurring in the input ontology (and their negations). Based on this idea, a reduction to reasoning in classical DLs was presented [7].
      </paragraph>
      <paragraph>
       As later noticed by Hájek [28], all the previously developed tableau algorithms implicitly restricted reasoning to witnessed models, without making this assumption explicit. In that paper, Hájek also introduced general t-norm based fuzzy semantics for fuzzy {a mathematical formula}ALC and proved that 1-satisfiability and 1-subsumption under these semantics are decidable if the background ontology is empty. For the Łukasiewicz t-norm, this is true even without the restriction to witnessed models since in this case the two semantics coincide. In [46], it is proved that 1-subsumption is also decidable in {a mathematical formula}{an inline-figure}-ALC without a background ontology. If one restricts reasoning to so-called quasi-witnessed models, satisfiability is also decidable in this setting. In [47], the framework from [28] is extended to include ontologies, and axiomatizations of t-norm based fuzzy DLs are investigated.
      </paragraph>
      <paragraph>
       After the introduction of t-norm based semantics for fuzzy DLs, several tableau algorithms were developed to decide consistency and subsumption in these new logics. The main idea is that the tableau rules generate a system of constraints that has to be solved at the end. The variables in these constraints are either binary variables or range over {a mathematical formula}[0,1]. The constraints themselves are either linear or quadratic, depending on the t-norm used. Such tableau algorithms are presented in [48] for an extension of {a mathematical formula}{an inline-figure}-ALCf,=, and in [49] for an extension of {a mathematical formula}Ł-ALCf,=. In [50], the latter algorithm is extended to deal with qualified cardinality restrictions (denoted by {a mathematical formula}Q). In [51], a tableau algorithm for {a mathematical formula}⊗-SI= is developed for arbitrary continuous t-norms ⊗, as long as the fuzzy operators can be expressed by finite systems of quadratic equations. Finally, in [52] the authors propose a tableau algorithm for {a mathematical formula}⊗-ALCf,=, but using S-implications instead of residua, and even allow for truth values from an arbitrary complete lattice instead of {a mathematical formula}[0,1].
      </paragraph>
      <paragraph>
       However, all of the above tableau algorithms were shown to be incorrect in the presence of (crisp) GCIs [15], [16]. The reason is that the blocking conditions employed by these algorithms are too greedy, and might lead to a satisfiable set of constraints, even though the given ontology has no model. A sound, complete and terminating tableau-based algorithm for consistency of {a mathematical formula}⊗-ALCf,≥ was proposed in [53], [54]; however, it requires the solution of a finitely-represented, but infinite, system of (linear or quadratic) inequalities. Following these revelations, many t-norm based fuzzy description logics were shown to have an undecidable consistency problem, e.g. {a mathematical formula}{an inline-figure}-ALCf,≥ with strict GCIs [16], {a mathematical formula}{an inline-figure}(0,b)-IALf,=[18], and {a mathematical formula}Ł-ELCf,≥[19]. In [22], a first version of the framework presented in Section 3 was described, which subsumed all previously known undecidability results.
      </paragraph>
      <paragraph>
       Restricting to Zadeh semantics, decidability of consistency has been shown even for very expressive description logics like {a mathematical formula}SHOIN[7], [55]. The main reason for these results is that reasoning can be limited to the values occurring in the input ontology (and their negations). Under Gödel semantics, consistency is ExpTime-complete in {a mathematical formula}G-IALCf,= w.r.t. both witnessed [21] and non-witnessed semantics [39]. Here, one additionally needs to keep track of the order between the values of concepts, but not the values themselves. Moreover, we first proved in [23] that in {a mathematical formula}⊗-SHOIf,≥ for any t-norm ⊗ without zero divisors, the values in the input ontology do not have any effect in the consistency of the ontology, and can simply be removed (see Section 4). The inexpressive DL {a mathematical formula}EL also keeps its polynomial complexity for subsumption under Gödel semantics [5].
      </paragraph>
      <paragraph>
       Some work has also considered fuzzy DLs that are restricted a priori to finitely many degrees of truth. The idea to reduce consistency to consistency in classical DLs has been used for arbitrary finite chains of truth values with combination functions similar to ordinal sums of the Gödel and Łukasiewicz t-norms, and even for very expressive DLs such as {a mathematical formula}SROIQ[33], [34]; however, the reduction often increases the size of the input ontology by an exponential factor. In contrast, tight complexity bounds were shown for consistency and subsumption in fuzzy DLs below {a mathematical formula}SHOI over an arbitrary finite lattice using a combination of automata-based constructions [40], [56] and tableaux rules [41].
      </paragraph>
     </section>
    </section>
    <section label="6">
     <section-title>
      Conclusions
     </section-title>
     <paragraph>
      We have studied the limits of decidability of ontology consistency in fuzzy DLs. On one hand, we have presented several undecidability results that strengthen all previously-known cases of fuzzy DLs with an undecidable consistency problem. To do this, we have developed a general framework for proving undecidability, which is based on a set of relatively simple properties. Using this framework, we were able to show, for instance, that consistency is undecidable in the very simple DL {a mathematical formula}NEL if the semantics are based on a t-norm with zero divisors. Extensions of this framework with different ways to prove the canonical model property also allowed us to prove that the problem is undecidable in {a mathematical formula}{an inline-figure}-ELC and {a mathematical formula}⊗-IEL= for any t-norm different from the Gödel t-norm. All of these logics are equivalent to classical {a mathematical formula}ALC when their semantics is restricted to two truth values.
     </paragraph>
     <paragraph>
      An analysis of these results suggests that the culprit for undecidability of a fuzzy DL is the capacity of expressing specific upper bounds within a non-idempotent component of the t-norm. Indeed, fuzzy GCIs usually provide a lower bound for the interpretation of a concept. If the involutive negation is allowed, then a lower bound for the concept ¬C corresponds to an upper bound for C. Similarly, the implication constructor can be used to propagate upper bounds through concepts, and the residual negation defines a “local” involutive negation in every t-norm that contains zero divisors. Conversely, our proofs of decidability exploit the fact that for any continuous t-norm ⊗ without zero divisors, upper bounds different from 0 cannot be expressed in {a mathematical formula}⊗-SROIQf,≥. If {a mathematical formula}I is a witnessed model of an ontology {a mathematical formula}O, then mapping all the positive truth degrees given by {a mathematical formula}I to 1 yields a crisp model of {a mathematical formula}O (see Lemma 30). If this intuition is correct, then it suggests that for any t-norm without zero divisors, consistency in {a mathematical formula}⊗-NEL= and {a mathematical formula}⊗-NAL= is decidable.
     </paragraph>
     <paragraph>
      Our analysis of the limits of decidability for fuzzy DLs is almost complete. As can be seen from Table 5, there are only a few remaining gaps, which we plan to cover in future work. In this work, we consider mainly standard constructors studied for classical DLs. Other fuzzy constructors like hedges[44], [57], [58], [59], or aggregation operators[60], [61] may require a different analysis. Note also that we have considered here only the ontology consistency problem. The decidability and complexity of other standard reasoning tasks, such as subsumption or instance checking, are other topics for future research. We also intend to find the precise complexity, and optimal algorithms, for reasoning in light-weight fuzzy DLs, such as {a mathematical formula}⊗-EL and {a mathematical formula}⊗-DL-Lite, over arbitrary continuous t-norms ⊗.
     </paragraph>
     <paragraph>
      As has been noted by several authors [13], [14], the ability to manage vague and imprecise knowledge is a desired feature of intelligent systems to be used in the biological and medical domains, among many others. Studying the complexity of reasoning with different fuzzy DLs allows us to discern which of these may be suitable formalisms for implementing a fuzzy knowledge representation and reasoning system. It is clearly desirable to stay in the decidable part of Table 5. However, the decidability results of Section 4 are also not helpful since they show that consistency can be decided using classical reasoners without any modification of the input ontology. This leaves only the Gödel t-norm as a promising candidate for an implementation. As an alternative, one could use many-valued DLs that support only a finite set of truth values, arranged in a residuated lattice or a total order [31], [33], [34], [40], [41]. The complexity of reasoning in such logics is often the same as for the underlying classical DLs. Sometimes, highly-optimized reasoners [62], [63] for classical reasoning problems can be reused after a suitable reduction.
     </paragraph>
    </section>
   </content>
   <appendices>
    <section label="Appendix A">
     Proofs for Section 3
     <paragraph label="Lemma 14">
      The functions{a mathematical formula}Encdescribed above are valid encoding functions for t-norms of the form{a mathematical formula}{an inline-figure}(a,b)or{a mathematical formula}Ł(a,b).
     </paragraph>
     <paragraph label="Proof">
      In both cases described in Section 3.3, the encodings of different words {a mathematical formula}u,u′∈ΣΣ0⁎ are different, and in particular smaller than b, and thus are not included in {a mathematical formula}Enc(ε). Furthermore, the encodings do not depend on the number of leading zeros. Thus, the first two conditions of Definition 11 are satisfied. For Condition (c), we analyze the two cases of {a mathematical formula}{an inline-figure}(a,b) and {a mathematical formula}Ł(a,b) separately.For {a mathematical formula}{an inline-figure}(a,b), consider two different words {a mathematical formula}v,w∈Σ⁎ and assume w.l.o.g. that {a mathematical formula}v&lt;w. Then {a mathematical formula}v+1≤w and hence {a mathematical formula}2−w≤2−(v+1)=2−v/2. If {a mathematical formula}v≠ε, this implies that{a mathematical formula} For {a mathematical formula}v=ε, we similarly have {a mathematical formula}p⇒enc(w)=enc(w)≤enc(1)&lt;1 for any {a mathematical formula}p∈Enc(ε)=[b,1]. Conversely, if {a mathematical formula}v=w, then {a mathematical formula}enc(v)⇒enc(w)=1=enc(w)⇒enc(v). Thus, the words {a mathematical formula}uε:=1 and {a mathematical formula}u+:=ε satisfy Condition (c) of Definition 11.For the case of {a mathematical formula}Ł(a,b), let {a mathematical formula}k=max⁡{|vi|,|wi||i∈N} be the maximal length of a word occurring in {a mathematical formula}P. Then, for every {a mathematical formula}ν∈N⁎, we have {a mathematical formula}|vν|≤(|ν|+1)k and {a mathematical formula}|wν|≤(|ν|+1)k. If {a mathematical formula}vν≠wν, these words must differ in one of the first {a mathematical formula}ℓ:=(|ν|+1)k letters. Thus, if {a mathematical formula}vν≠ε and {a mathematical formula}wν≠ε, then either {a mathematical formula}enc(vν)&gt;enc(wν), and thus{a mathematical formula} or, similarly, {a mathematical formula}enc(vν)&lt;enc(wν) and {a mathematical formula}enc(wν)⇒enc(vν)≤enc(1̲⋅0̲ℓ)&lt;1. Note that again this also holds if {a mathematical formula}vν=ε, since {a mathematical formula}wν also differs from {a mathematical formula}0̲ℓ in one of the first ℓ letters, and similarly if {a mathematical formula}wν=ε. Conversely, if {a mathematical formula}vν=wν, then both residua yield 1 as result, which is greater than {a mathematical formula}enc(1̲⋅0̲ℓ). Thus, setting {a mathematical formula}uε:=1̲⋅0̲k and {a mathematical formula}u+:=0̲k satisfies Condition (c) of Definition 11. □
     </paragraph>
     <paragraph label="Lemma 15">
      For every continuous t-norm ⊗, the logics{a mathematical formula}⊗-EL=,{a mathematical formula}⊗-ELC≥, and{a mathematical formula}Ł(0,b)-NELsatisfy{a mathematical formula}Pini.
     </paragraph>
     <paragraph label="Proof">
      In the case of {a mathematical formula}⊗-EL=, we can use the simple ontology {a mathematical formula}OC(e)=u:={〈e:C=enc(u)〉} to enforce that {a mathematical formula}CI(eI)=enc(u)∈Enc(u) is satisfied by every model {a mathematical formula}I.In {a mathematical formula}⊗-ELC≥, the two axioms {a mathematical formula}〈e:C≥enc(u)〉 and {a mathematical formula}〈e:¬C≥1−enc(u)〉 express the same restriction. The first axiom ensures that {a mathematical formula}CI(eI)≥enc(u), while the second requires that {a mathematical formula}1−CI(eI)≥1−enc(u), i.e. {a mathematical formula}CI(eI)≤enc(u), holds.For the logic {a mathematical formula}Ł(0,b)-NEL, a more involved construction is necessary. We first ensure that a fresh auxiliary concept name A has a value from {a mathematical formula}Enc(u) at all domain elements, and then require that C and A have the same value at e. For the first part, we use the two axioms{a mathematical formula} Observe that, whenever {a mathematical formula}HI(x)∈[0,b] for some interpretation {a mathematical formula}I and {a mathematical formula}x∈ΔI, then for every {a mathematical formula}m∈N we have by linearity of {a mathematical formula}σ0,b that{a mathematical formula} Let now {a mathematical formula}I be an interpretation that satisfies these axioms and {a mathematical formula}x∈ΔI. If {a mathematical formula}u∈{0}⁎, then the second axiom enforces that {a mathematical formula}AI(x)=⊤I(x)=1∈Enc(u) holds. If {a mathematical formula}u∉{0}⁎, then by the first axiom we have{a mathematical formula} This shows that {a mathematical formula}−b=2(s+1)|u|(HI(x)−b), and thus {a mathematical formula}HI(x)=b−b2(s+1)|u|. From the second axiom it follows that{a mathematical formula} Since {a mathematical formula}u←(s+1)|u|=0.u←&lt;1, we obtain {a mathematical formula}AI(x)=b−b(0.u←)=σ0,b(1−0.u←)=enc(u).For the second part, we use the axiom{a mathematical formula} If {a mathematical formula}u∈{0}⁎, the semantics of ⇀ and the fact that {a mathematical formula}AI(eI)∈Enc(u)=Enc(ε)=[b,1] imply that {a mathematical formula}CI(eI)∈[b,1]=Enc(u). If {a mathematical formula}u∉{0}⁎, then {a mathematical formula}AI(eI)=enc(u)&lt;b, which implies that {a mathematical formula}CI(eI)&lt;b, and thus {a mathematical formula}CI(eI)=AI(eI)=enc(u). □
     </paragraph>
     <paragraph label="Lemma 16">
      For every continuous t-norm ⊗, the logic{a mathematical formula}⊗-ELsatisfies{a mathematical formula}P→.
     </paragraph>
     <paragraph label="Proof">
      Consider the ontology {a mathematical formula}O∃r:={〈⊤⊑∃r.⊤〉}. Any model {a mathematical formula}I of this axiom satisfies {a mathematical formula}(∃r.⊤)I(x)=1 for every {a mathematical formula}x∈ΔI. Since reasoning is restricted to witnessed models, there must exist a {a mathematical formula}y∈ΔI with {a mathematical formula}rI(x,y)=1, as required for the successor property. □
     </paragraph>
     <paragraph label="Lemma 17">
      For every continuous t-norm ⊗ except the Gödel t-norm, the logic{a mathematical formula}⊗-ELsatisfies{a mathematical formula}P∘.
     </paragraph>
     <paragraph label="Proof">
      By assumption, ⊗ must contain either the product or the Łukasiewicz t-norm in some interval. We divide the proof depending on the representative chosen for the encoding function.For the case of {a mathematical formula}{an inline-figure}(a,b)-EL, observe that for every {a mathematical formula}u∈Σ0⁎ and {a mathematical formula}u′∈ΣΣ0⁎, we have {a mathematical formula}u′(s+1)|u|+u=u′u̲. Given {a mathematical formula}u∈Σ0⁎, we define the ontology{a mathematical formula} Observe that for every interpretation {a mathematical formula}I and {a mathematical formula}x∈ΔI, if {a mathematical formula}CI(x)=σa,b(p) and {a mathematical formula}m∈N, then{a mathematical formula} Let now {a mathematical formula}I be a model of {a mathematical formula}OC∘u, {a mathematical formula}x∈ΔI, and {a mathematical formula}u′∈{ε}∪ΣΣ0⁎ such that {a mathematical formula}CuI(x)∈Enc(u) and {a mathematical formula}CI(x)∈Enc(u′). If {a mathematical formula}u∉{0}⁎ and {a mathematical formula}u′≠ε, then we have{a mathematical formula} If {a mathematical formula}u∈{0}⁎ and {a mathematical formula}u′≠ε, we have {a mathematical formula}CuI(x)∈[b,1], and thus{a mathematical formula} Similarly, for {a mathematical formula}u∉{0}⁎ and {a mathematical formula}u′=ε we get {a mathematical formula}(C(s+1)|u|)I(x)∈[b,1], which implies that{a mathematical formula} Finally, if {a mathematical formula}u∈{0}⁎ and {a mathematical formula}u′=ε, then {a mathematical formula}DI(x)=(C(s+1)|u|⊓Cu)I(x)∈[b,1]=Enc(εu̲).For the case of {a mathematical formula}Ł(a,b)-EL, we define the ontology{a mathematical formula} Let {a mathematical formula}I be a model of {a mathematical formula}OC∘u, {a mathematical formula}x∈ΔI, and assume that {a mathematical formula}CuI(x)∈Enc(u) and {a mathematical formula}CI(x)∈Enc(u′) for some {a mathematical formula}u′∈{ε}∪ΣΣ0⁎. If {a mathematical formula}u′≠ε, then from the first axiom it follows that{a mathematical formula} Since {a mathematical formula}⊗(a,b)-contains Łukasiewicz, this implies that {a mathematical formula}C′I(x)∈(a,b). Thus,{a mathematical formula} which shows that{a mathematical formula} If {a mathematical formula}u∉{0}⁎, then it follows that{a mathematical formula} If {a mathematical formula}u∈{0}⁎, then {a mathematical formula}CuI(x)∈[b,1], and thus{a mathematical formula} It remains to consider the case that {a mathematical formula}u′ is the empty word, and thus {a mathematical formula}CI(x)∈[b,1]. By the first axiom, we also have {a mathematical formula}C′I(x)∈[b,1]. If {a mathematical formula}u∉{0}⁎, then{a mathematical formula} On the other hand, if {a mathematical formula}u∈{0}⁎, then we have {a mathematical formula}DC∘uI(x)∈[b,1]=Enc(εu̲). □
     </paragraph>
     <paragraph label="Lemma 18">
      For every continuous t-norm ⊗ except the Gödel t-norm, the logics{a mathematical formula}⊗-AL,{a mathematical formula}⊗-ELC, and{a mathematical formula}Ł(0,b)-NELsatisfy{a mathematical formula}P⇝.
     </paragraph>
     <paragraph label="Proof">
      Let {a mathematical formula}I be an interpretation and {a mathematical formula}x,y∈ΔI such that {a mathematical formula}CI(x)∈Enc(u) for some {a mathematical formula}u∈Σ0⁎ and {a mathematical formula}rI(x,y)=1. Regardless of whether we have chosen {a mathematical formula}{an inline-figure}(a,b) or {a mathematical formula}Ł(a,b), if {a mathematical formula}u∉{0}⁎, then the goal is to have {a mathematical formula}DI(y)=CI(x). On the other hand, if {a mathematical formula}u∈{0}⁎, then {a mathematical formula}CI(x)≥b, and we only need to ensure that {a mathematical formula}DI(x)≥b.In all fuzzy DLs based on {a mathematical formula}EL, we can formulate the axiom {a mathematical formula}〈∃r.D⊑C〉. If {a mathematical formula}I satisfies this axiom, then{a mathematical formula} We now add an axiom ensuring that also {a mathematical formula}DI(y)≥CI(x) holds if {a mathematical formula}u∉{0}⁎, and {a mathematical formula}DI(y)≥b holds if {a mathematical formula}u∈{0}⁎. The precise form of this axiom depends on the expressivity of the logic used.In {a mathematical formula}⊗-AL, we can use the axiom {a mathematical formula}〈C⊑∀r.D〉 to restrict {a mathematical formula}I to satisfy{a mathematical formula} and thus also {a mathematical formula}DI(y)≥CI(x)≥b if {a mathematical formula}u∈{0}⁎.In the case of {a mathematical formula}⊗-ELC, if {a mathematical formula}I is a model of {a mathematical formula}〈∃r.¬D⊑¬C〉, then{a mathematical formula} and thus {a mathematical formula}CI(x)≤DI(y) as in the previous case.Finally, for {a mathematical formula}Ł(0,b)-NEL, we use the axiom {a mathematical formula}〈∃r.⊟D⊑⊟C〉, similar to the one for {a mathematical formula}⊗-ELC. If {a mathematical formula}I satisfies this axiom, then{a mathematical formula} If {a mathematical formula}u∉{0}⁎, then {a mathematical formula}DI(y)≤CI(x)&lt;b, which shows that {a mathematical formula}b−DI(y)≤b−CI(x), and thus {a mathematical formula}CI(x)≤DI(y). If {a mathematical formula}u∈{0}⁎, then {a mathematical formula}⊖DI(y)≤⊖CI(x)=0, and thus {a mathematical formula}DI(y)≥b as required. □
     </paragraph>
     <paragraph label="Lemma 19">
      Let ⊗ be any continuous t-norm except the Gödel t-norm. If one of the logics{a mathematical formula}⊗-IEL=,{a mathematical formula}⊗-ELC≥, or{a mathematical formula}Ł(0,b)-NELsatisfies{a mathematical formula}P△with{a mathematical formula}OPand{a mathematical formula}IPcan be extended to a model of{a mathematical formula}OP, then this logic also satisfies{a mathematical formula}P≠.
     </paragraph>
     <paragraph label="Proof">
      For {a mathematical formula}⊗-IEL=, we define the ontology{a mathematical formula} For every model {a mathematical formula}I of {a mathematical formula}OP∪OV≠W and every {a mathematical formula}ν∈N⁎, we have{a mathematical formula} Since at least one of the two residua must be 1, this implies{a mathematical formula} as required.For the second condition, assume that {a mathematical formula}IP cannot be extended to a model of {a mathematical formula}OP∪OV≠W. Since there is an extension {a mathematical formula}I of {a mathematical formula}IP that satisfies {a mathematical formula}OP, we know that {a mathematical formula}I must violate {a mathematical formula}OV≠W. This means that there is a {a mathematical formula}ν∈N⁎ such that{a mathematical formula} This implies that{a mathematical formula}For {a mathematical formula}⊗-ELC≥, consider the ontology{a mathematical formula}{a mathematical formula}{a mathematical formula}For every model of the axioms in (A.1) and every {a mathematical formula}x∈ΔI, we know that {a mathematical formula}XI(x)≤XI(x)⊗XI(x) and hence, {a mathematical formula}XI(x) must be an idempotent element w.r.t. ⊗. Recall that {a mathematical formula}XI(x) can thus not lie in any component of ⊗, which implies that ⊗ behaves like the Gödel t-norm on {a mathematical formula}XI(x). In particular, we get {a mathematical formula}0≥(X⊓¬X)I(x)=min⁡{XI(x),1−XI(x)}, and thus {a mathematical formula}XI(x)∈{0,1}.Let now {a mathematical formula}I be a model of {a mathematical formula}OP∪OV≠W and {a mathematical formula}ν∈N⁎. If {a mathematical formula}XI(g(ν))=1, then axiom (A.2) states that {a mathematical formula}VI(g(ν))≤WI(g(ν))⊗MI(g(ν)). We consider which representative was chosen for the encoding function:
      <paragraph>
       Since {a mathematical formula}WI(g(ν))∈Enc(wν), we know in particular that {a mathematical formula}WI(g(ν))&gt;a. Furthermore, since {a mathematical formula}MI(g(ν))=enc(1)&lt;b and product is a strict t-norm,{sup:4} for every {a mathematical formula}z&gt;MI(g(ν)), we have that {a mathematical formula}WI(g(ν))⊗z&gt;WI(g(ν))⊗MI(g(ν))≥VI(g(ν)).If {a mathematical formula}wν≠ε, then since the length of {a mathematical formula}wν is bounded by {a mathematical formula}ℓ:=(|ν|+1)k and{a mathematical formula} we have{a mathematical formula} For {a mathematical formula}wν=ε, it also follows that{a mathematical formula} Thus, by the properties of the Łukasiewicz t-norm we again have that for any {a mathematical formula}z&gt;MI(g(ν)), {a mathematical formula}WI(g(ν))⊗z&gt;WI(g(ν))⊗MI(g(ν))≥VI(g(ν)) holds.To show the second point of
      </paragraph>
      <paragraph>
       {a mathematical formula}P≠, assume that{a mathematical formula} and consider an extension {a mathematical formula}I of {a mathematical formula}IP that satisfies {a mathematical formula}OP, which exists by assumption. We show that {a mathematical formula}I can be further extended to a model of {a mathematical formula}OV≠W.To find the values for X, consider any element {a mathematical formula}ν∈N⁎. By assumption, exactly one of the residua {a mathematical formula}VIP(ν)⇒WIP(ν) and {a mathematical formula}WIP(ν)⇒VIP(ν) is equal to 1. If {a mathematical formula}VIP(ν)⇒WIP(ν)=1, we set {a mathematical formula}XI(ν):=1, which trivially satisfies axiom (A.3) at ν. By assumption, we must then have {a mathematical formula}WIP(ν)⇒VIP(ν)≤MIP(ν). By the definition of the residuum, we know that {a mathematical formula}WIP(ν)⊗m′&gt;VIP(ν) for all {a mathematical formula}m′&gt;MIP(ν). Since ⊗ is continuous and monotone, this means that {a mathematical formula}VIP(ν)≤WIP(ν)⊗MIP(ν), i.e. axiom (A.2) is also satisfied at ν.If the other residuum is equal to 1, we set {a mathematical formula}XI(ν):=0 and can use dual arguments to show that axioms (A.2) and (A.3) are satisfied at ν. We have thus constructed an extension of {a mathematical formula}IP that satisfies both {a mathematical formula}OP and {a mathematical formula}OV≠W.The last case is that of {a mathematical formula}Ł(0,b)-NEL, for which we can use the ontology{a mathematical formula} which is similar to the one for {a mathematical formula}⊗-IEL=. In any model {a mathematical formula}I of {a mathematical formula}OP∪OV≠W it holds that for every {a mathematical formula}ν∈N⁎, {a mathematical formula}(((V⇀W)⊓(W⇀V))⇀M)I(g(ν))≥1.If {a mathematical formula}VI(g(ν))≤WI(g(ν)), then {a mathematical formula}((W⇀V)⇀M)I(g(ν))≥1. This can only be the case if {a mathematical formula}MI(g(ν))≥b or {a mathematical formula}MI(g(ν))≥(W⇀V)I(g(ν)). The former is impossible since {a mathematical formula}MI(g(ν))=enc(1̲⋅0̲(|ν|+1)k)&lt;b by construction of {a mathematical formula}OP. By the definition of ⇀, the latter implies that {a mathematical formula}VI(g(ν))&lt;b, and thus{a mathematical formula} Similarly, if {a mathematical formula}WI(g(ν))≤VI(g(ν)), then {a mathematical formula}VI(g(ν))⇒WI(g(ν))≤MI(g(ν)). In both cases, we have{a mathematical formula}To show the second condition of {a mathematical formula}P≠, assume that {a mathematical formula}IP cannot be extended to a model of {a mathematical formula}OP∪OV≠W. Since there is an extension {a mathematical formula}I of {a mathematical formula}IP that satisfies {a mathematical formula}OP, we know that {a mathematical formula}I violates {a mathematical formula}OV≠W. This means that there is a {a mathematical formula}ν∈N⁎ such that{a mathematical formula} and thus{a mathematical formula} As above, the value {a mathematical formula}(V⇀W)IP(ν)⊗(W⇀V)IP(ν) is either {a mathematical formula}VIP(ν)⇒WIP(ν) or {a mathematical formula}WIP(ν)⇒VIP(ν), depending on which of the values {a mathematical formula}VIP(ν) and {a mathematical formula}WIP(ν) is greater. Thus, both {a mathematical formula}VIP(ν)⇒WIP(ν) and {a mathematical formula}WIP(ν)⇒VIP(ν) must be greater than {a mathematical formula}MIP(ν), showing that{a mathematical formula}  □
      </paragraph>
     </paragraph>
     <paragraph label="Lemma 21">
      The logic{a mathematical formula}{an inline-figure}-ELCsatisfies{a mathematical formula}P△′.
     </paragraph>
     <paragraph label="Proof">
      We use the following modified ontology instead of {a mathematical formula}OP from Section 3.3:{a mathematical formula} Here, {a mathematical formula}OP,∘, {a mathematical formula}OP,→, and {a mathematical formula}OC⇝rD are as defined in Section 3.2 and in the proofs of the corresponding lemmata in Section 3.3. As before, the values of the concept names V and W are initialized at {a mathematical formula}e0 to an encoding of {a mathematical formula}vε=wε=ε, namely 1. But instead of initializing all the constants M, {a mathematical formula}M+, {a mathematical formula}Vi, {a mathematical formula}Wi at {a mathematical formula}e0 and then transferring their values to all successors, we define the values to be constant at all domain elements and need to transfer only the new values of V and W. In particular, M always has the value {a mathematical formula}enc(1)=1/2, while {a mathematical formula}M+ is always {a mathematical formula}enc(ε)=1. The axioms for {a mathematical formula}Vi and {a mathematical formula}Wi ensure that they get the values {a mathematical formula}(1/2)vi=2−vi=enc(vi) and {a mathematical formula}enc(wi), respectively, at all domain elements.It can now be shown similarly to Theorem 12 that this ontology satisfies the conditions of the canonical model property. □
     </paragraph>
     <paragraph label="Lemma 22">
      The logic{a mathematical formula}{an inline-figure}-ELCsatisfies{a mathematical formula}P≠′.
     </paragraph>
     <paragraph label="Proof">
      The proof is essentially the same as that of Lemma 19; we only describe the differences here.The ontology {a mathematical formula}OV≠W is similar to the one used for {a mathematical formula}⊗-ELC≥, with the addition of a flag Y to distinguish the root node ε of {a mathematical formula}IP′. We define{a mathematical formula} Every model of the axioms in (A.4) has to satisfy that every {a mathematical formula}ri-successor with degree 1 must belong to Y with degree 1, for every {a mathematical formula}i∈N. In particular, because of the construction of {a mathematical formula}OP,→ (see the proof of Lemma 16), this means that for every model {a mathematical formula}I of {a mathematical formula}OP′∪OV≠W and every {a mathematical formula}ν∈N+, we have {a mathematical formula}YI(g(ν))=1. On the other hand, {a mathematical formula}YI(g(ε)) must be 0. The role of X is the same as before. The remainder of the first condition of {a mathematical formula}P≠′ can thus be shown as in the proof of Lemma 19, but using {a mathematical formula}N+ instead of {a mathematical formula}N⁎.For the second condition of {a mathematical formula}P≠′, consider an extension {a mathematical formula}I of {a mathematical formula}IP′ that satisfies {a mathematical formula}OP′. To extend {a mathematical formula}I to a model of {a mathematical formula}OV≠W, we first set {a mathematical formula}YI(ν):=1 for every {a mathematical formula}ν∈N+ and {a mathematical formula}XI(ε):=YI(ε):=0. The remaining values {a mathematical formula}XI(ν) for {a mathematical formula}ν∈N+ can be chosen exactly as in the proof of Lemma 19. Again, the proof is the same as before, with {a mathematical formula}N+ instead of {a mathematical formula}N⁎. □
     </paragraph>
     <paragraph label="Lemma 25">
      For every continuous t-norm except the Gödel t-norm, the logic{a mathematical formula}⊗-IELsatisfies{a mathematical formula}P⇝→.
     </paragraph>
     <paragraph>
      The proof is divided into the following three lemmata. The first one provides an auxiliary result that is similar to the successor property.
     </paragraph>
     <paragraph label="Lemma 35">
      Let ⊗ be a continuous t-norm of the form{a mathematical formula}{an inline-figure}(a,b)or{a mathematical formula}Ł(a,b). In{a mathematical formula}⊗-EL, for every role name r and all concept names{a mathematical formula}C,D, there is a classical ontology{a mathematical formula}OC→rDsuch that for every model{a mathematical formula}Iof this ontology and every{a mathematical formula}x∈ΔIwith{a mathematical formula}CI(x)⊗CI(x)∈(a,b)there is a{a mathematical formula}y∈ΔIsuch that{a mathematical formula}rI(x,y)≥band{a mathematical formula}CI(x)=DI(y).
     </paragraph>
     <paragraph label="Proof">
      We can use the ontology {a mathematical formula}OC→rD:={〈C⊑∃r.D〉,〈∃r.(D⊓D)⊑C⊓C〉} to achieve this behavior. To see this, consider a model {a mathematical formula}I of this ontology and some {a mathematical formula}x∈ΔI with {a mathematical formula}CI(x)⊗CI(x)∈(a,b). Since {a mathematical formula}I is witnessed, the first axiom ensures that there is an element {a mathematical formula}y∈ΔI such that{a mathematical formula} while the second axiom implies that{a mathematical formula} From these two inequalities and the monotonicity of ⊗, we then have{a mathematical formula} Since {a mathematical formula}CI(x)⊗CI(x)∈(a,b), from this it follows that {a mathematical formula}rI(x,y)⊗DI(y)⊗DI(y) is also in ({a mathematical formula}a,b). This means that {a mathematical formula}rI(x,y) must be greater than or equal to b since otherwise we would have{a mathematical formula} by the definitions of ordinal sums and the product and the Łukasiewicz t-norms, in contradiction to (A.5). This implies that {a mathematical formula}DI(y)⊗DI(y)∈(a,b), and thus (A.5) can be simplified to {a mathematical formula}DI(y)⊗DI(y)=CI(x)⊗CI(x).If ⊗ contains the product t-norm in {a mathematical formula}(a,b), then we obtain {a mathematical formula}(DI(y))2=(CI(x))2, i.e. {a mathematical formula}DI(y)=CI(x). On the other hand, if ⊗ contains the Łukasiewicz t-norm in {a mathematical formula}(a,b), then the fact that {a mathematical formula}CI(x)⊗CI(x)&gt;a implies that {a mathematical formula}CI(x) must be strictly greater than {a mathematical formula}a+b2, and similarly for {a mathematical formula}DI(y). We obtain {a mathematical formula}2⋅DI(y)−b=2⋅CI(x)−b, which again shows that {a mathematical formula}DI(y)=CI(x). □
     </paragraph>
     <paragraph>
      We divide the main proof of Lemma 25 in two cases, depending on whether ⊗ contains the product or the Łukasiewicz t-norm.
     </paragraph>
     <paragraph label="Proof">
      {a mathematical formula}{an inline-figure}(a,b)-IELsatisfies{a mathematical formula}P⇝→.We know that for every word {a mathematical formula}u∈Σ0⁎, {a mathematical formula}enc(u)=σa,b(2−u)&gt;a. In particular, for every interpretation {a mathematical formula}I, {a mathematical formula}x∈ΔI, and j, {a mathematical formula}1≤j≤k, we have {a mathematical formula}CjI(x)&gt;a. We define the ontology {a mathematical formula}O(Cj)⇝(Dj) as follows:{a mathematical formula}{a mathematical formula} where r is a fresh role name, H and {a mathematical formula}H′ are fresh concept names, and {a mathematical formula}OH→rH′ is the ontology given by Lemma 35.We show that this ontology satisfies the conditions for the simultaneous transfer property. Let {a mathematical formula}I be a model of this ontology and {a mathematical formula}x∈ΔI. By assumption, we know that there exists a word {a mathematical formula}u∈Σ0⁎∖{0}⁎ such that {a mathematical formula}C1I(x)=enc(u)∈(a,b), and furthermore, {a mathematical formula}CjI(x)∈(a,1] for all j, {a mathematical formula}2≤j≤k. Using the axiom from (A.6), we get {a mathematical formula}HI(x)∈(a,b). Since ⊗ behaves as the product t-norm in ({a mathematical formula}a,b), this implies {a mathematical formula}HI(x)⊗HI(x)∈(a,b), and thus by Lemma 35 there exists an element {a mathematical formula}y∈ΔI with {a mathematical formula}rI(x,y)≥b and {a mathematical formula}H′I(y)=HI(x).We need only show that, for every {a mathematical formula}j,1≤j≤k, {a mathematical formula}DjI(y)=CjI(x)=enc(uj) if {a mathematical formula}uj∉{0}⁎ and {a mathematical formula}DjI(y)≥b if {a mathematical formula}CjI(x)≥b. Let j be an arbitrary index {a mathematical formula}1≤j≤k and suppose first that {a mathematical formula}CjI(x)≥b holds. Since {a mathematical formula}HI(x)&lt;b, then it also follows that {a mathematical formula}CjI(x)⇒HI(x)=HI(x)&lt;b. The second axiom from (A.7) ensures that{a mathematical formula} Since {a mathematical formula}rI(x,y)≥b and {a mathematical formula}H′I(y)=HI(x), this implies {a mathematical formula}a&lt;DjI(y)⇒HI(x)≤HI(x)&lt;b, and thus by the definition of the residuum ⇒of an ordinal sum, it must be the case that {a mathematical formula}DjI(y)≥b.For the other case, suppose now that {a mathematical formula}CjI(x)=enc(uj)&lt;b for some {a mathematical formula}uj∈Σ0⁎∖{0}⁎. We show that the two axioms from (A.7) ensure that {a mathematical formula}DjI(y)=CjI(x). The first axiom restricts {a mathematical formula}I to satisfy{a mathematical formula} and since {a mathematical formula}rI(x,y)≥b, it follows that {a mathematical formula}DjI(y)≤CjI(x). Analogously, from the second axiom, we derive that {a mathematical formula}DjI(y)⇒H′I(y)≤CjI(x)⇒HI(x). Recall that {a mathematical formula}a&lt;H′I(y)=HI(x)&lt;b, and thus by the axiom in (A.6) we have {a mathematical formula}CjI(x)&gt;HI(x). We can infer that {a mathematical formula}DjI(y)⇒HI(x)≤CjI(x)⇒HI(x)&lt;b, and thus we also have {a mathematical formula}DjI(x)&gt;HI(x). From the definition of the residuum of an ordinal sum, we obtain{a mathematical formula} and since {a mathematical formula}HI(x)&gt;a and {a mathematical formula}σa,b is a strictly monotone bijection between {a mathematical formula}[0,1] and {a mathematical formula}[a,b], we get {a mathematical formula}σa,b−1(HI(x))&gt;0 and {a mathematical formula}DjI(y)≥CjI(x). As this holds for every j, it is possible to transfer all the values simultaneously. □
     </paragraph>
     <paragraph>
      The novel idea in this construction is to exploit the fact that the residuum is antitone in its first argument to provide a lower bound for {a mathematical formula}DjI(y). For this construction to work, it is necessary that {a mathematical formula}a&lt;HI(x)&lt;CjI(y) since otherwise the implication {a mathematical formula}CjI(x)⇒HI(x) will simply be a or 1. This restriction is ensured by the axiom in (A.6).
     </paragraph>
     <paragraph>
      For the case in which ⊗ contains the Łukasiewicz t-norm in the interval {a mathematical formula}(a,b), we use the same idea for showing that the simultaneous transfer property holds. However, in this case we cannot ensure that H, which is interpreted as the conjunction of all the concepts {a mathematical formula}Cj2, has a degree strictly greater than a. Thus, we need to add some additional restrictions to handle the case where {a mathematical formula}HI(x)=a.
     </paragraph>
     <paragraph label="Lemma 37">
      {a mathematical formula}Ł(a,b)-IELsatisfies{a mathematical formula}P⇝→.
     </paragraph>
     <paragraph label="Proof">
      Define the ontology {a mathematical formula}O(Cj)⇝(Dj) as follows:{a mathematical formula}{a mathematical formula}{a mathematical formula} where r is a fresh role name, {a mathematical formula}H,H′,G,G′,E, and {a mathematical formula}E′ are fresh concept names, and {a mathematical formula}OG→rG′, {a mathematical formula}OE→rE′ are the ontologies given by Lemma 35.Let {a mathematical formula}I be a model of this ontology and {a mathematical formula}x∈ΔI. It is easy to see that {a mathematical formula}HI(x)≤CjI(x) holds for all j, {a mathematical formula}1≤j≤k. Additionally, we know that {a mathematical formula}HI(x)∈[a,b). Using Lemma 35, we first show that there exists a {a mathematical formula}y∈ΔI such that {a mathematical formula}rI(x,y)≥b and {a mathematical formula}HI(x)=H′I(y). The proof is divided in two cases: (1) if {a mathematical formula}HI(x)&gt;a and (2) if {a mathematical formula}HI(x)=a.
     </paragraph>
     <section>
      <section-title>
       Case (1)
      </section-title>
      <paragraph>
       If {a mathematical formula}HI(x)&gt;a, then from the second axiom in (A.8) we get {a mathematical formula}GI(x)⊗GI(x)=HI(x)∈(a,b). Thus, Lemma 35 yields the existence of an element {a mathematical formula}y∈ΔI with {a mathematical formula}rI(x,y)≥b and {a mathematical formula}G′I(y)=GI(x). The third axiom in (A.8) then implies that {a mathematical formula}H′I(y)=G′I(y)⊗G′I(y)=GI(x)⊗GI(x)=HI(x).
      </paragraph>
     </section>
     <section>
      <section-title>
       Case (2)
      </section-title>
      <paragraph>
       If {a mathematical formula}HI(x)=a, then we use the axioms from (A.9). By assumption, {a mathematical formula}EI(x)⊗EI(x)=C1I(x)∈(a,b), and hence as before Lemma 35 shows the existence of an element {a mathematical formula}y∈ΔI such that {a mathematical formula}rI(x,y)≥b and {a mathematical formula}EI(x)=E′I(y). The second axiom in (A.9) states that {a mathematical formula}rI(x,y)⊗H′I(y)≤HI(x)=a. Since {a mathematical formula}rI(x,y)≥b, it follows that {a mathematical formula}H′I(y)≤a. From the third axiom we then have that{a mathematical formula} In particular, this means that {a mathematical formula}E′I(y)⇒H′I(y)&gt;H′I(y) since otherwise the residuum would be {a mathematical formula}1≥b. But since {a mathematical formula}E′I(y)&gt;a and by the definition of the residuum of an ordinal sum, this can only be the case if {a mathematical formula}H′I(y)=a=HI(x).
      </paragraph>
      <paragraph>
       In both cases, we have shown the existence of a {a mathematical formula}y∈ΔI with {a mathematical formula}rI(x,y)≥b and {a mathematical formula}HI(x)=H′I(y)∈[a,b). As in Lemma 36, we need to show that, whenever {a mathematical formula}CjI(x)≥b, then also {a mathematical formula}DjI(y)≥b, and if {a mathematical formula}uj∉{0}⁎, then {a mathematical formula}DjI(y)=CjI(x)=enc(uj). The former case can be shown as in the proof of Lemma 36. In the latter case, the first axiom from (A.10) again ensures that {a mathematical formula}DjI(y)≤CjI(x) since {a mathematical formula}CjI(x)&lt;b and {a mathematical formula}rI(x,y)≥b. From the second axiom and the fact that {a mathematical formula}H′I(y)=HI(x) it similarly follows that {a mathematical formula}DjI(y)⇒HI(x)≤CjI(x)⇒HI(x)&lt;b. We now know that {a mathematical formula}HI(x)&lt;CjI(x)&lt;b and {a mathematical formula}HI(x)&lt;DjI(y)&lt;b, and therefore{a mathematical formula} Thus, we have {a mathematical formula}DjI(y)≥CjI(x), which finishes the proof.
      </paragraph>
      <paragraph>
       This concludes the proof of Lemma 25.
      </paragraph>
     </section>
    </section>
    <section label="Appendix B">
     Proofs for Section 4
     <paragraph label="Lemma 28">
      Let ⊗ be a continuous t-norm without zero divisors. For all{a mathematical formula}x,y∈[0,1]and all non-empty sets{a mathematical formula}X⊆[0,1]it holds that
     </paragraph>
     <list>
      <list-item label="1.">
       {a mathematical formula}1(⊖x)=⊖1(x),
      </list-item>
      <list-item label="2.">
       {a mathematical formula}1(x⊗y)=1(x)⊗1(y),
      </list-item>
      <list-item label="3.">
       {a mathematical formula}1(x⊕y)=1(x)⊕1(y),
      </list-item>
      <list-item label="4.">
       {a mathematical formula}1(x⇒y)=1(x)⇒1(y),
      </list-item>
      <list-item label="5.">
       {a mathematical formula}1(sup⁡{x|x∈X})=sup⁡{1(x)|x∈X}, and
      </list-item>
      <list-item label="6.">
       if{a mathematical formula}min⁡{x|x∈X}exists, then{a mathematical formula}1(min⁡{x|x∈X})=min⁡{1(x)|x∈X}.
      </list-item>
     </list>
     <paragraph label="Proof">
      It holds that {a mathematical formula}1(⊖x)=⊖⊖⊖x=⊖1(x), which proves 1. Since ⊗ does not have zero divisors, it holds that {a mathematical formula}x⊗y=0 iff {a mathematical formula}x=0 or {a mathematical formula}y=0. This yields {a mathematical formula}1(x⊗y)=0 iff {a mathematical formula}1(x)=0 or {a mathematical formula}1(y)=0. Because there are no zero divisors, this shows that{a mathematical formula} Since both {a mathematical formula}1(x⊗y) and {a mathematical formula}1(x)⊗1(y) can only have the values 0 or 1, this is sufficient to prove the second statement. Since 0 is a unit for ⊕, we have {a mathematical formula}x⊕y=0 iff {a mathematical formula}x=y=0, and thus {a mathematical formula}1(x⊕y)=0 holds iff {a mathematical formula}1(x)⊕1(y)=0. This suffices to prove 3. We use Proposition 4 to prove 4:{a mathematical formula} To prove 5, observe that {a mathematical formula}sup⁡X=0 iff {a mathematical formula}X={0}, which yields{a mathematical formula} Assume now that {a mathematical formula}min⁡X=xmin exists. Then we have{a mathematical formula} which proves 6. □
     </paragraph>
     <paragraph label="Lemma 29">
      For all complex concepts C, complex roles s, and{a mathematical formula}x,y∈ΔI, it holds that{a mathematical formula}CJ(x)=1(CI(x))and{a mathematical formula}sJ(x,y)=1(sI(x,y)).
     </paragraph>
     <paragraph label="Proof">
      We first prove the claim for complex roles by induction over the structure of s. For role names, this follows directly from the definition of {a mathematical formula}J. If s is the universal role u, then {a mathematical formula}uJ(x,y)=1=1(1)=1(uI(x,y)) holds for all {a mathematical formula}x,y∈ΔI. If {a mathematical formula}s=t−, then we have {a mathematical formula}sJ(x,y)=tJ(y,x)=1(tI(y,x))=1(sI(x,y)) by induction. Finally, if {a mathematical formula}s=⊟t, then {a mathematical formula}(⊟t)J(x,y)=⊖tJ(x,y)=⊖1(tI(x,y))=1((⊟t)I(x,y)) by Lemma 28.For the complex concepts, we also use induction over the structure of C. The claim obviously holds for {a mathematical formula}C=⊥ and {a mathematical formula}C=⊤. For {a mathematical formula}C=A∈NC it follows immediately from the definition of {a mathematical formula}J. It also holds for {a mathematical formula}C={a} with {a mathematical formula}a∈NI, because {a mathematical formula}{a}I(x) can only take the values 0 or 1 for all {a mathematical formula}x∈ΔI. Furthermore, we have {a mathematical formula}(∃s.Self)J(x)=sJ(x,x)=1(sI(x,x))=1((∃s.Self)I(x)) by the claim for complex roles.Assume now that the concepts D and E satisfy {a mathematical formula}DJ(x)=1(DI(x)) and {a mathematical formula}EJ(x)=1(EI(x)) for all {a mathematical formula}x∈ΔI. For the case of {a mathematical formula}C=D⊓E, Lemma 28 yields that for all {a mathematical formula}x∈ΔI{a mathematical formula} Likewise, the compatibility of {a mathematical formula}1 with the t-conorm, residuum, and residual negation entails the result for the cases {a mathematical formula}C=D⊔E, {a mathematical formula}C=D→E, and {a mathematical formula}C=⊟D.For {a mathematical formula}C=≥ns.D, where s is a complex role and {a mathematical formula}n∈N, we obtain{a mathematical formula} from Lemma 28 and the claim for complex roles. The claim for existential restrictions follows from rewriting {a mathematical formula}∃r.C as {a mathematical formula}≥1r.C and observing that the restriction to witnessed models is irrelevant in this situation.If {a mathematical formula}C=≤ns.D, we have{a mathematical formula} by the same arguments.Finally, if {a mathematical formula}C=∀s.D, we have{a mathematical formula} Since {a mathematical formula}I is witnessed, there must be some {a mathematical formula}y0∈ΔI such that{a mathematical formula} that is, {a mathematical formula}miny∈ΔI⁡sI(x,y)⇒DI(y) exists. Thus, as in the above cases, we can apply Lemma 28 and the claim for complex roles to derive that {a mathematical formula}1(CI(x))=CJ(x). □
     </paragraph>
    </section>
   </appendices>
  </root>
 </body>
</html>