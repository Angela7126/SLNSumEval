<html>
<head>
<meta name="TextLength" content="SENT_NUM:25, WORD_NUM:345">
</head>
<body bgcolor="white">
<a href="#0" id="0">A program P and a set {a mathematical formula}M ⊆ at(P).</a>
<a href="#1" id="1">A program P and an atom {a mathematical formula}a ∈ at(P).</a>
<a href="#2" id="2">A program P and an atom {a mathematical formula}a ∈ at(P).</a>
<a href="#3" id="3">Definition 3.1</a>
<a href="#4" id="4">Let P be a program, X a set of atoms, and {a mathematical formula} Τ ∈ 2X.</a>
<a href="#5" id="5">The truth assignment reduct of P under Τ is the logic program {a mathematical formula}P Τ obtained from P by</a>
<a href="#6" id="6">Definition 3.2</a>
<a href="#7" id="7">Let {a mathematical formula}C be a class of programs.</a>
<a href="#8" id="8">A set X of atoms is a strong{a mathematical formula}C-backdoor of a program P if {a mathematical formula}P Τ ∈ C for all truth assignments {a mathematical formula} Τ ∈ 2X.</a>
<a href="#9" id="9">Next we define a variant of answer set backdoors similar to satisfiability deletion backdoors.</a>
<a href="#10" id="10">For a program P and a set X of atoms we define {a mathematical formula}P − X as the program obtained from P by deleting {a mathematical formula}a,¬a for {a mathematical formula}a ∈ X from the rules of P. The definition gives rise to deletion backdoors.</a>
<a href="#11" id="11">We will see that finding deletion backdoors is in some cases easier than finding strong backdoors.</a>
<a href="#12" id="12">Definition 3.3</a>
<a href="#13" id="13">Let {a mathematical formula}C be a class of programs.</a>
<a href="#14" id="14">A set X of atoms is a deletion{a mathematical formula}C-backdoor of a program P if {a mathematical formula}P − X ∈ C.</a>
<a href="#15" id="15">A program P, a strong {a mathematical formula}C-backdoor X of P and a set {a mathematical formula}M ⊆ at(P).</a>
<a href="#16" id="16">Decide whether P has a strong {a mathematical formula}C-backdoor X of size at most k.</a>
<a href="#17" id="17">Decide whether P has a deletion {a mathematical formula}C-backdoor X of size at most k.</a>
<a href="#18" id="18">1.</a>
<a href="#19" id="19">A directed cycle of P is a directed cycle in the dependency digraph {a mathematical formula}DP.</a>
<a href="#20" id="20">Observation 5.5</a>
<a href="#21" id="21">{a mathematical formula}C ⊆ Normalholds for all{a mathematical formula}C ∈ Acyc.</a>
<a href="#22" id="22">If we have two programs {a mathematical formula}P ⊆ P ′ , then clearly the dependency (di)graph of P is a sub(di)graph of the dependency (di)graph of {a mathematical formula}P ′ .</a>
<a href="#23" id="23">A graph {a mathematical formula}G=(V,E) and an integer k.</a>
<a href="#24" id="24">Definition 7.2</a>
</body>
</html>