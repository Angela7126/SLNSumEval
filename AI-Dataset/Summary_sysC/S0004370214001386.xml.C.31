<html>
<head>
<meta name="TextLength" content="SENT_NUM:26, WORD_NUM:730">
</head>
<body bgcolor="white">
<a href="#0" id="0">The problem addressed in this paper is to find an optimal solution to the MAPF problem.</a>
<a href="#1" id="1">Optimal solvers are usually applied when the number of agents is relatively small and the task is to find an optimal, minimal-cost solution.</a>
<a href="#2" id="2">This can be formalized as a global, single-agent search problem.</a>
<a href="#3" id="3">Therefore, the traditional approach for solving MAPF optimally is by using A*-based searches [35], [45].</a>
<a href="#4" id="4">A node in the search tree consists of the set of locations for all the agents at time t. The start state and goal state consist of the initial and goal locations of the different agents, respectively.</a>
<a href="#5" id="5">Given a graph with branching factor b, there are {a mathematical formula}O(b) possible moves for any single agent and thus the branching factor for an A* search is {a mathematical formula}O(bk) which is exponential in the number of agents.</a>
<a href="#6" id="6">Naturally, search algorithms that are based on A* can solve this problem optimally, but they may run for a very long time or exhaust the available memory.</a>
<a href="#7" id="7">A constraint is a tuple {a mathematical formula}(ai,v,t) where agent {a mathematical formula}ai is prohibited from occupying vertex v at time step t. During the course of the algorithm, agents will be associated with constraints.</a>
<a href="#8" id="8">A consistent path for agent {a mathematical formula}ai is a path that satisfies all its constraints.</a>
<a href="#9" id="9">Likewise, a consistent solution is a solution that is made up from paths, such that the path for any agent {a mathematical formula}ai is consistent with the constraints of {a mathematical formula}ai.</a>
<a href="#10" id="10">Given the list of constraints for a node N of the CT, the low-level search is invoked.</a>
<a href="#11" id="11">The low-level search (described in detail below) returns one shortest path for each agent, {a mathematical formula}ai, that is consistent with all the constraints associated with {a mathematical formula}ai in node N. Once a consistent path has been found for each agent (with respect to its own constraints) these paths are then validated with respect to the other agents.</a>
<a href="#12" id="12">The validation is performed by iterating through all time steps and matching the locations reserved by all agents.</a>
<a href="#13" id="13">The low-level search is given an agent, {a mathematical formula}ai, and the set of constraints associated with {a mathematical formula}ai.</a>
<a href="#14" id="14">It performs a search in the underlying graph to find an optimal path for agent {a mathematical formula}ai that satisfies all its constraints while completely ignoring the other agents.</a>
<a href="#15" id="15">The search space for the low-level search has two dimensions: the spatial dimension and the time dimension.</a>
<a href="#16" id="16">{sup:2} Any single-agent pathfinding algorithm can be used to find the path for agent {a mathematical formula}ai, while verifying that the constraints are satisfied.</a>
<a href="#17" id="17">We implemented the low-level search of CBS with A* which handled the constraints as follows.</a>
<a href="#18" id="18">Whenever a state {a mathematical formula}(v,t) is generated where v is a location and t a time step and there exists a constraint ({a mathematical formula}ai,v,t) in the current CT (high-level) node, this state is discarded.</a>
<a href="#19" id="19">The heuristic we used is the shortest path in the spatial dimension, ignoring other agents and constraints.</a>
<a href="#20" id="20">When merging {a mathematical formula}ai and {a mathematical formula}aj one would be tempted to introduce a meta constraint {a mathematical formula}(a{i,j},{ai} âˆª {aj},v,t) where both agents {a mathematical formula}ai and {a mathematical formula}aj are prohibited from location v at time t. However, this might break the optimality of the algorithm because of the following scenario.</a>
<a href="#21" id="21">Assume a 3-agent problem where in the optimal solution agent {a mathematical formula}a3 must go through vertex v at time step t. Calling MA-CBS to solve this problem creates the root CT node.</a>
<a href="#22" id="22">Assume that in the path chosen for each agent in the root CT node both agents {a mathematical formula}a1 and {a mathematical formula}a2 are assigned vertex v at time step t. Next, MA-CBS branches according to the conflict {a mathematical formula}(a1,a2,v,t).</a>
<a href="#23" id="23">Two new CT nodes are generated {a mathematical formula}{N1,N2}.</a>
<a href="#24" id="24">In {a mathematical formula}N1 ({a mathematical formula}N2) agent {a mathematical formula}a1 ({a mathematical formula}a2) is constrained from taking v at time t. Next, agent {a mathematical formula}a1 ({a mathematical formula}a2) is merged with agent {a mathematical formula}a3 at node {a mathematical formula}N1 ({a mathematical formula}N2).</a>
<a href="#25" id="25">If we allow the constraints imposed on agents {a mathematical formula}a1 and {a mathematical formula}a2 to apply to agent {a mathematical formula}a3 we will block the optimal solution in both {a mathematical formula}N1 and {a mathematical formula}N2 which are the only two nodes in OPEN.</a>
</body>
</html>