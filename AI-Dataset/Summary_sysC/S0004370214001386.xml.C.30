<html>
<head>
<meta name="TextLength" content="SENT_NUM:26, WORD_NUM:727">
</head>
<body bgcolor="white">
<a href="#0" id="0">Recall that the state space spanned by A* in MAPF is exponential in k (the number of agents).</a>
<a href="#1" id="1">By contrast, in a single-agent pathfinding problem, {a mathematical formula}k=1, and the state space is only linear in the graph size.</a>
<a href="#2" id="2">CBS solves MAPF by decomposing it into a large number of constrained single-agent pathfinding problems.</a>
<a href="#3" id="3">Each of these problems can be solved in time proportional to the size of the map and length of the solution, but there may be an exponential number of such single-agent problems.</a>
<a href="#4" id="4">A constraint is a tuple {a mathematical formula}(ai,v,t) where agent {a mathematical formula}ai is prohibited from occupying vertex v at time step t. During the course of the algorithm, agents will be associated with constraints.</a>
<a href="#5" id="5">A consistent path for agent {a mathematical formula}ai is a path that satisfies all its constraints.</a>
<a href="#6" id="6">Likewise, a consistent solution is a solution that is made up from paths, such that the path for any agent {a mathematical formula}ai is consistent with the constraints of {a mathematical formula}ai.</a>
<a href="#7" id="7">A conflict is a tuple {a mathematical formula}(ai,aj,v,t) where agent {a mathematical formula}ai and agent {a mathematical formula}aj occupy vertex v at time point t. A solution (of k paths) is valid if all its paths have no conflicts.</a>
<a href="#8" id="8">A consistent solution can be invalid if, despite the fact that the individual paths are consistent with the constraints associated with their agents, these paths still have conflicts.</a>
<a href="#9" id="9">A set of k paths, one path for each agent.</a>
<a href="#10" id="10">The path for agent {a mathematical formula}ai must be consistent with the constraints of {a mathematical formula}ai.</a>
<a href="#11" id="11">Such paths are found by the low-level search.</a>
<a href="#12" id="12">Node N in the CT is a goal node when {a mathematical formula}N.solution is valid, i.e., the set of paths for all agents has no conflicts.</a>
<a href="#13" id="13">Given the list of constraints for a node N of the CT, the low-level search is invoked.</a>
<a href="#14" id="14">The low-level search (described in detail below) returns one shortest path for each agent, {a mathematical formula}ai, that is consistent with all the constraints associated with {a mathematical formula}ai in node N. Once a consistent path has been found for each agent (with respect to its own constraints) these paths are then validated with respect to the other agents.</a>
<a href="#15" id="15">Given a non-goal CT node N whose solution {a mathematical formula}N.solution includes a conflict{a mathematical formula}Cn=(ai,aj,v,t) we know that in any valid solution, at most one of the conflicting agents ({a mathematical formula}ai and {a mathematical formula}aj) may occupy vertex v at time t. Therefore, at least one of the constraints {a mathematical formula}(ai,v,t) or {a mathematical formula}(aj,v,t) must be added to the set of constraints in {a mathematical formula}N.constraints.</a>
<a href="#16" id="16">The low-level search is given an agent, {a mathematical formula}ai, and the set of constraints associated with {a mathematical formula}ai.</a>
<a href="#17" id="17">It performs a search in the underlying graph to find an optimal path for agent {a mathematical formula}ai that satisfies all its constraints while completely ignoring the other agents.</a>
<a href="#18" id="18">The search space for the low-level search has two dimensions: the spatial dimension and the time dimension.</a>
<a href="#19" id="19">{sup:2} Any single-agent pathfinding algorithm can be used to find the path for agent {a mathematical formula}ai, while verifying that the constraints are satisfied.</a>
<a href="#20" id="20">We implemented the low-level search of CBS with A* which handled the constraints as follows.</a>
<a href="#21" id="21">Whenever a state {a mathematical formula}(v,t) is generated where v is a location and t a time step and there exists a constraint ({a mathematical formula}ai,v,t) in the current CT (high-level) node, this state is discarded.</a>
<a href="#22" id="22">The heuristic we used is the shortest path in the spatial dimension, ignoring other agents and constraints.</a>
<a href="#23" id="23">Two agents {a mathematical formula}ai,aj are merged into a meta-agent {a mathematical formula}a{i,j} if the number of conflicts between {a mathematical formula}ai and {a mathematical formula}aj recorded during the search exceeds a parameter B.</a>
<a href="#24" id="24">Assume that agents {a mathematical formula}ai and {a mathematical formula}aj are to be merged into a new meta agent {a mathematical formula}a{i,j} and that {a mathematical formula}ai has the external constraint {a mathematical formula}(ai,v,t).</a>
<a href="#25" id="25">Next, we describe how MA-CBS can be modified to be an effective optimal solver that requires memory of size {a mathematical formula}O(k ⋅ C ⁎ ⋅ |V|), that is the product of the number of agents, k, the cost of the optimal solution cost, {a mathematical formula}C ⁎ and the size of the input graph, {a mathematical formula}|V|.</a>
</body>
</html>