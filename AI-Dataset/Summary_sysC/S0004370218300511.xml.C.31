<html>
<head>
<meta name="TextLength" content="SENT_NUM:28, WORD_NUM:644">
</head>
<body bgcolor="white">
<a href="#0" id="0">Definition 1</a>
<a href="#1" id="1">Abstraction [12]Let Π be a planning task with state space {a mathematical formula} Θ Π =(S,L,T,s0,S ⋆ ).</a>
<a href="#2" id="2">An abstraction of Θ is a surjective function {a mathematical formula} Α :S → S Α mapping {a mathematical formula}S to a set of abstract states, {a mathematical formula}S Α .</a>
<a href="#3" id="3">Definition 2</a>
<a href="#4" id="4">Abstraction heuristic [12]Let Α be an abstraction with an associated abstract state space {a mathematical formula} Θ Α .</a>
<a href="#5" id="5">The induced abstraction heuristic{a mathematical formula}h Α (s) is a heuristic function that returns the cost of the cheapest path from {a mathematical formula} Α (s) to {a mathematical formula}S ⋆ Α in {a mathematical formula} Θ Α .</a>
<a href="#6" id="6">Each table represents an intermediate abstraction with relevant variables {a mathematical formula}W ⊆ V.</a>
<a href="#7" id="7">These tables recursively define the mapping between states in {a mathematical formula} Θ W to abstract states.</a>
<a href="#8" id="8">Each abstract state is identified with a number, from 0 to {a mathematical formula}| Α | − 1, where {a mathematical formula}| Α | is the number of abstract states in the abstraction.</a>
<a href="#9" id="9">We will mostly use hierarchies in which each node has only one child, i.e., lists of an arbitrary number of abstractions, {a mathematical formula} Α 0, Α 1, … , Α k such that each {a mathematical formula} Α i is an abstraction of {a mathematical formula} Θ Α i − 1 for all {a mathematical formula}i>0.</a>
<a href="#10" id="10">Note that {a mathematical formula} Α 0 is usually defined as the identity abstraction, {a mathematical formula} Α 0(s)=s, so that the first search is performed on the original state space {a mathematical formula} Θ Α 0 ≡ Θ .</a>
<a href="#11" id="11">All other abstractions can be defined either using M&S or PDBs.</a>
<a href="#12" id="12">After constructing a perimeter around the goal, the search frontier is relaxed into an abstract state space {a mathematical formula} Α 1.</a>
<a href="#13" id="13">Abstract searches are used to explore the state space outside the perimeter.</a>
<a href="#14" id="14">However, the abstraction will typically consider states in the perimeter equivalent to other states, so the information is not perfect anymore.</a>
<a href="#15" id="15">This is reflected in Fig.</a>
<a href="#16" id="16">3 by the irregular shape of the perimeters.</a>
<a href="#17" id="17">The algorithm does not only build a single perimeter; whenever the abstract search in {a mathematical formula} Α i becomes intractable, it is relaxed into a coarser abstract state space {a mathematical formula} Α i+1.</a>
<a href="#18" id="18">In the end, all the abstract perimeters are used as heuristics, to estimate the cost from states in the forward search to the perimeter.</a>
<a href="#19" id="19">Algorithm 2 shows the precomputation phases of a PA heuristic.</a>
<a href="#20" id="20">The algorithm initializes the first search in {a mathematical formula} Θ Α 0 with the set of goal states.</a>
<a href="#21" id="21">Then, each phase i consists of a backward uniform-cost search in the abstract state space {a mathematical formula} Θ Α i initialized with the perimeter frontier of search {a mathematical formula}i − 1.</a>
<a href="#22" id="22">A search may be stopped at any point and then the get-h function generates an ADD that represents the corresponding heuristic, as specified in Definition 7.</a>
<a href="#23" id="23">If there are more state spaces to explore, we re-seed (line 9) open and closed with abstract states relative to the next abstraction as specified in Definition 6.</a>
<a href="#24" id="24">The algorithm terminates returning the heuristic when all phases have been completed or if at some point there are no states left in open.</a>
<a href="#25" id="25">Definition 7</a>
<a href="#26" id="26">Partial abstraction heuristicLet {a mathematical formula}UCS= 〈 open,closed 〉 be a backward uniform-cost search over an abstract state space {a mathematical formula} Θ Α , then the partial abstraction heuristic of UCS is {a mathematical formula}hUCS(s)=min ⁡ (gUCS( Α (s)),r(UCS)+mina ∈ A ⁡ c(a)), where:{a mathematical formula}</a>
<a href="#27" id="27">Algorithm 3 can be adapted to compute the ADD representation of the M&S abstraction function (that maps states in S to abstract states in {a mathematical formula}Sn Α ) by assigning to terminal nodes the id of each abstract state instead of their heuristic value.</a>
</body>
</html>