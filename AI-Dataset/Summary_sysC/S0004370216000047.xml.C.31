<html>
<head>
<meta name="TextLength" content="SENT_NUM:26, WORD_NUM:425">
</head>
<body bgcolor="white">
<a href="#0" id="0">Definition 1</a>
<a href="#1" id="1">A program Π is finitely restrictable, if there exists some finite subset {a mathematical formula} Π ′ ⊆ grnd( Π ) such that {a mathematical formula} Π ′ ≡ Π .</a>
<a href="#2" id="2">Definition 2</a>
<a href="#3" id="3">External atom dependenciesLet Π be a hex-program and let {a mathematical formula}a=&g[X](Y) be an external atom in Π .</a>
<a href="#4" id="4">Definition 5</a>
<a href="#5" id="5">Strong safetyAn atom {a mathematical formula}b=&g[X](Y) in a rule r of a program Π is strongly safe wrt.</a>
<a href="#6" id="6">Π , if either b is not involved in any cycles in {a mathematical formula}ADG( Π ), or every variable in Y occurs also in some positive ordinary atom {a mathematical formula}a ∈ B+(r) that does not depend on b in {a mathematical formula}ADG( Π ).</a>
<a href="#7" id="7">A program Π is strongly safe, if every external atom in a rule {a mathematical formula}r ∈ Π is strongly safe in Π .</a>
<a href="#8" id="8">Definition 14</a>
<a href="#9" id="9">Liberal domain-expansion safety relevanceA set R of external atoms is relevant for lde-safety of a program Π , if {a mathematical formula} Π |R is lde-safe and {a mathematical formula}var(r)=var(r|R), for all {a mathematical formula}r ∈ Π .</a>
<a href="#10" id="10">Definition 15</a>
<a href="#11" id="11">Input auxiliary ruleLet Π be a program and let {a mathematical formula}&g[Y](X) be some external atom occurring in a rule {a mathematical formula}r ∈ Π .</a>
<a href="#12" id="12">Then, for each such atom, a rule {a mathematical formula}rinp&g[Y](X) is composed as follows:</a>
<a href="#13" id="13">Definition 16</a>
<a href="#14" id="14">External atom guessing ruleLet Π be a program and let furthermore {a mathematical formula}&g[Y](X) be some external atom.</a>
<a href="#15" id="15">Then a rule {a mathematical formula}rguess&g[Y](X) is composed as follows:</a>
<a href="#16" id="16">Definition 18</a>
<a href="#17" id="17">An algorithm {a mathematical formula}GroundASP is a faithful ASP grounder, if for a safe ordinary program Π it returns a ground program {a mathematical formula} Π ′ ⊆ os(grndC Π ( Π )) s.t.</a>
<a href="#18" id="18">{a mathematical formula} Π ′ ≡ Π and for all {a mathematical formula}r ∈ grndC Π ( Π )</a>
<a href="#19" id="19">The converse does not hold, as there are clearly lde-safe programs that are not strongly safe, cf.</a>
<a href="#20" id="20">the program {a mathematical formula} Π ′ from the introduction.</a>
<a href="#21" id="21">Proof of Corollary 5</a>
<a href="#22" id="22">Since Π is lde-safe by assumption, {a mathematical formula}a ∈ S ∞ ( Π ) for all attribute positions a of Π .</a>
<a href="#23" id="23">Then by Corollary 4, the range of all attribute positions of Π in {a mathematical formula}G Π ∞ ( ∅ ) is finite.</a>
<a href="#24" id="24">But then there exists also only a finite number of ground atoms in {a mathematical formula}G Π ∞ ( ∅ ).</a>
<a href="#25" id="25">Since the original non-ground program Π is finite, this implies that also the grounding is finite.</a>
</body>
</html>