<html>
<head>
<meta name="TextLength" content="SENT_NUM:55, WORD_NUM:1210">
</head>
<body bgcolor="white">
<a href="#0" id="0">We set up four different showcases for the QBF Gallery 2013.</a>
<a href="#1" id="1">The four showcases are (1) solving, (2) preprocessing, (3) applications, and (4) certification.</a>
<a href="#2" id="2">Set eval2012r2-inc-preprocessed: Instances from the set eval2012r2 which were obtained by repeated, incremental preprocessing using the four preprocessors that were submitted to the showcase on preprocessing, as described in Section 3.2.</a>
<a href="#3" id="3">We obtained the following two sets:</a>
<a href="#4" id="4">Table 3 shows detailed results for the set eval2012r2 without preprocessing.</a>
<a href="#5" id="5">Note that some solvers like dual_Ooq and Hiqqer3, for example, apply built-in preprocessing.</a>
<a href="#6" id="6">This benchmark set is very suitable for search-based solvers such as bGhostQ-CEGAR (and its variants) and Hiqqer3, while the performance of expansion-based solvers like RAReQS and Nenofex is worse.</a>
<a href="#7" id="7">However, both RAReQS and Nenofex solved five unique instances that no other solver could solve.</a>
<a href="#8" id="8">Table 4 presents detailed numbers of solved instances for each benchmark family in the set eval2012r2.</a>
<a href="#9" id="9">We obtain a very different picture of the solver performance when the set eval2012r2 is preprocessed using Bloqqer.</a>
<a href="#10" id="10">In the following experiment, every solver is run on the 276 instances that were preprocessed but not solved by Bloqqer.</a>
<a href="#11" id="11">We ran Bloqqer on all 345 instances in the benchmark set eval2012r2.</a>
<a href="#12" id="12">From all these instances, 276 remained unsolved by Bloqqer.</a>
<a href="#13" id="13">We ran each solver twice: once on the 276 instances after they have been preprocessed by Bloqqer, and once on the respective 276 original instances from the set eval2012r2 without preprocessing.</a>
<a href="#14" id="14">That is, in this experiment we exclude instances from the set eval2012r2 that were solved already by Bloqqer.</a>
<a href="#15" id="15">In addition to the application of preprocessing prior to solving, the actual selection of benchmarks might have an influence on the performance of solvers and hence on the rankings in terms of solved instances.</a>
<a href="#16" id="16">A ranking of solvers obtained by experiments might be skewed if certain families of instances are overrepresented in the benchmark set that underlies the experimental evaluation.</a>
<a href="#17" id="17">In order to analyze the effect of the benchmark selection on the ranking of solvers, we carried out the following sampling experiment.</a>
<a href="#18" id="18">In this experiment, we deliberately do not disclose the actual names of the solvers, but used two-letter names.</a>
<a href="#19" id="19">The intention was to put the focus on the experiment itself (which is the evaluation of the benchmark set) and not on the evaluation of a particular solving technique.</a>
<a href="#20" id="20">The purpose of this showcase was to find out how many instances can be solved solely by preprocessing and to analyze the effects of preprocessing on the performance of solvers.</a>
<a href="#21" id="21">The latter is closely related to the showcase on solving (Section 3.1).</a>
<a href="#22" id="22">We carried out experiments in two settings: in the first setting, we ran each of the four submitted preprocessors shown in Table 1 individually on a given set of original instances.</a>
<a href="#23" id="23">Given the statistics in Table 10, the performance of the preprocessors varies with respect to the benchmark set.</a>
<a href="#24" id="24">For example, in the benchmark set conformant-planning, Hiqqer3e solves the largest number of instances whereas Hiqqer3p solves the largest number of instances in the set reduction-finding.</a>
<a href="#25" id="25">Table 11 shows a combination of the statistics from Table 10: an instance is considered to be solved if it was solved by at least one of the four considered preprocessors.</a>
<a href="#26" id="26">Interestingly, the total counts in Table 11 are not always clearly higher than the largest individual count from Table 10.</a>
<a href="#27" id="27">This indicates that there are preprocessors that, regarding their effects, subsume other preprocessors on certain benchmark sets.</a>
<a href="#28" id="28">For example, in the set planning-CTE, all instances that are solved by Bloqqer are also solved by Hiqqer3p.</a>
<a href="#29" id="29">Further results including pairwise comparisons of the individual preprocessors can be found at the website of the QBF Gallery 2013.</a>
<a href="#30" id="30">Table 12 shows the number of instances solved by each execution sequence.</a>
<a href="#31" id="31">Each execution sequence solves more instances than any of the individual preprocessors (Table 10, Table 11).</a>
<a href="#32" id="32">In total, 119 instances where solved by any of the execution sequences, which is 34% of the instances contained in the benchmark set eval2012r2.</a>
<a href="#33" id="33">With individual preprocessing, in total 87 instances (25%) were solved by any of the preprocessors (first line in Table 11).</a>
<a href="#34" id="34">These statistics clearly indicate the benefits of incremental preprocessing in terms of solved instances.</a>
<a href="#35" id="35">According to the results shown in Table 12, the largest number of instances in the eval2012r2 were solved with the sequence ABCD.</a>
<a href="#36" id="36">Based on this observation, we ran the sequence ABCD on the other benchmark sets for at most six rounds.</a>
<a href="#37" id="37">Table 13 shows the results of these experiments.</a>
<a href="#38" id="38">Except for the set qbf-hardness, incremental preprocessing solves considerably more instances than the individual preprocessors (Table 11).</a>
<a href="#39" id="39">For example, for the sets planning-CTE and conformant-planning, 57% and 23% more instances are solved, respectively.</a>
<a href="#40" id="40">In an additional experiment, we tested selected execution sequences from Table 12 on the benchmark set eval2012r2, where each preprocessor is run twice in a row.</a>
<a href="#41" id="41">We selected the sequences to be tested according to the numbers of solved instances shown in Table 12 and the individual characteristics of the preprocessors.</a>
<a href="#42" id="42">Thereby, we preprocessed the benchmark set eval2012r2 (345 instances) using the execution sequences {a mathematical formula}(A2B2C2D2)6 and {a mathematical formula}(A2D2B2C2)6.</a>
<a href="#43" id="43">This way, we obtained the two new benchmark sets AABBCCDD (234 instances remaining unsolved after preprocessing) and AADDBBCC (241 instances remaining) listed in Section 2.1.2, respectively.</a>
<a href="#44" id="44">We selected the sequence {a mathematical formula}(A2B2C2D2)6 because it solved the largest number of instances (Table 15) and because {a mathematical formula}(ABCD)6 performed best according to Table 12.</a>
<a href="#45" id="45">Since Bloqqer ( “ B ” ) and sQueezeBF ( “ D ” ) have different characteristics, we additionally selected the sequence {a mathematical formula}(A2D2B2C2)6 where the ordering of these two preprocessors is swapped and still Bloqqer is executed before Hiqqer3p ( “ C ” ).</a>
<a href="#46" id="46">We did not consider the sequence {a mathematical formula}(A2D2C2B2)6 where only Bloqqer and SqueezeBF are swapped since, according to the results shown in Table 12, the execution ordering {a mathematical formula}(ADCB) solved one instance less than the execution ordering {a mathematical formula}(ADBC) in the sequence {a mathematical formula}(A2D2B2C2)6 we selected.</a>
<a href="#47" id="47">Table 16, Table 17 show the performance of solvers on the two benchmark sets.</a>
<a href="#48" id="48">The different rankings of the solvers in the tables indicate that their performance is sensitive to the execution ordering of the preprocessors.</a>
<a href="#49" id="49">Furthermore, the total number of instances solved by preprocessing and by solving is different for the two benchmark sets.</a>
<a href="#50" id="50">For the set AABBCCDD, 111 instances were solved by preprocessing (first line in Table 15) and 92 instances were solved by the best solver (first line in Table 16), giving a total of 203 solved instances.</a>
<a href="#51" id="51">For the set AADDBBCC, 104 instances were solved by preprocessing (third line in Table 15) and 104 by the best solver (first line in Table 17), which gives 208 solved instances in total.</a>
<a href="#52" id="52">That is, although preprocessing alone using the execution sequence {a mathematical formula}(A2D2B2C2)6 solves fewer instances than when using the sequence {a mathematical formula}(A2B2C2D2)6, solving performs better on the instances that were preprocessed using the former and results in a higher total number of instances solved by preprocessing and solving.</a>
<a href="#53" id="53">In this showcase, we used the benchmark set eval2012r2 without preprocessing in order to evaluate the generation of proofs and certificates on original instances.</a>
<a href="#54" id="54">Due to the lack of submissions of tools for the generation of strategies, we focused on proofs and certificates.</a>
</body>
</html>