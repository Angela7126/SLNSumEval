<html>
<head>
<meta name="TextLength" content="SENT_NUM:22, WORD_NUM:555">
</head>
<body bgcolor="white">
<a href="#0" id="0">The third contribution concerns improving local search algorithms for random k-SAT instances with {a mathematical formula}k>3.</a>
<a href="#1" id="1">Although the SAT community has made great achievements in solving random 3-SAT instances in the past two decades, the progress lags far behind on random k-SAT instances with {a mathematical formula}k>3.</a>
<a href="#2" id="2">In this work, we propose a new variable property called subscore, which is related to but different from the commonly used variable property score.</a>
<a href="#3" id="3">While the score property considers the transformations between satisfied and falsified clauses by flipping a variable, the subscore property takes into account the transformations between critical clauses (i.e., those clauses having exactly one true literal) and the clauses with two true literals.</a>
<a href="#4" id="4">Finally, we perform some theoretical analyses on the configuration checking strategy for SAT and the subscore property.</a>
<a href="#5" id="5">We analyze the relationships of the CC strategy with the widely used promising decreasing variable exploiting strategy [26] and the tabu method in terms of forbidding strength.</a>
<a href="#6" id="6">Moreover, as the CC strategy is not always effective, we predict when it is effective through both theoretical and experimental analysis.</a>
<a href="#7" id="7">Generally, the effectiveness of the CC strategy decreases as k increases.</a>
<a href="#8" id="8">Specifically, our analysis shows that the CC strategy is effective for random k-SAT instances with {a mathematical formula}k<6 and ineffective for those with {a mathematical formula}k ⩾ 6.</a>
<a href="#9" id="9">We also show that the subscore based tie-breaking mechanism is ineffective for random 3-SAT instances, although it is very effective for random k-SAT instances with {a mathematical formula}k>3.</a>
<a href="#10" id="10">Given a SAT local search algorithm solving a CNF formula F, the configuration checking strategy can be described as follows.</a>
<a href="#11" id="11">For a variable {a mathematical formula}x ∈ V(F), if the configuration of x has not been changed (in this work, this means none of its neighboring variables has been flipped) since its last flip, then it is forbidden to be flipped.</a>
<a href="#12" id="12">Typically, the CC strategy is used in the greedy mode, to decrease blind unreasonable greedy search.</a>
<a href="#13" id="13">This section improves Swcca for random k-SAT with {a mathematical formula}k>3.</a>
<a href="#14" id="14">First, we replace the SWT scheme in Swcca with PAWS [46], leading to a new algorithm called CCApaws.</a>
<a href="#15" id="15">More importantly, we propose a new variable property called subscore, and utilize it to break ties in CCApaws, resulting in the algorithm CCAsubscore, which proves very efficient for random k-SAT with {a mathematical formula}k>3.</a>
<a href="#16" id="16">Our experiments show that CCAsubscore significantly outperforms other state-of-the-art local search algorithms on random 5-SAT and 7-SAT instances.</a>
<a href="#17" id="17">Although Swcca exhibits good performance on random 3-SAT and crafted instances, its performance on random k-SAT instances with large k is relatively weak.</a>
<a href="#18" id="18">Our experiments suggest that the SWT weighting scheme is ineffective for random k-SAT instances with large k. As a first step towards improving Swcca for such instances, we replace the SWT scheme with the PAWS one [46], which results in the CCApaws algorithm.</a>
<a href="#19" id="19">Note that the PAWS scheme is adopted by state-of-the-art SLS algorithms for SAT such as Sparrow2011 [3] and EagleUP [15], which show better performance than Swcca on random k-SAT instances with {a mathematical formula}k>3.</a>
<a href="#20" id="20">We specially remark that the CC strategy degrades to the tabu method with {a mathematical formula}tt=1 for random 7-SAT instances at {a mathematical formula}r=85 with {a mathematical formula}n<564.</a>
<a href="#21" id="21">On the other hand, modern local search solvers for SAT cannot solve such random 7-SAT instances with more than 300 variables (within reasonable time).</a>
</body>
</html>