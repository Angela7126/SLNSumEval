<html>
<head>
<meta name="TextLength" content="SENT_NUM:33, WORD_NUM:869">
</head>
<body bgcolor="white">
<a href="#0" id="0">We compare PTS and {a mathematical formula}APTS/ANA ⁎ with previous anytime algorithms on five representative search domains: the 15-puzzle, robot motion planning, gridworld navigation, Key player problem in communication (KPP-COM), and multiple sequence alignment.</a>
<a href="#1" id="1">As mentioned above, the experimental results suggest that {a mathematical formula}APTS/ANA ⁎ improves upon previous anytime search algorithms in terms of key metrics that determine the quality of an anytime algorithm.</a>
<a href="#2" id="2">As a bounded-cost algorithm, our results suggest that PTS, which is specifically designed for bounded-cost problems, outperforms competing algorithms for most cost bounds and exhibits an overall robust behavior.</a>
<a href="#3" id="3">In every call to ImproveSolution, try to find a solution with cost lower than G as fast as possible.</a>
<a href="#4" id="4">It is easy to see that every such call to ImproveSolution is exactly a bounded-cost search problem, where the cost-bound C is set to be the cost of the incumbent solution (G).</a>
<a href="#5" id="5">Thus, we can use PTS in every call to ImproveSolution (line 4) with cost bound G. The resulting anytime search algorithm does not require parameter tuning (e.g., of w) and is shown empirically to be superior to other anytime search algorithms on a wide range of domains (see Section 5).</a>
<a href="#6" id="6">Because initially there is no incumbent solution, the purpose of the first iteration of {a mathematical formula}APTS/ANA ⁎ is to find a solution as fast as possible, without any bound on its cost.</a>
<a href="#7" id="7">Thus, {a mathematical formula}C= ∞ and as a result the PTS evaluation function {a mathematical formula}u(n)=C − g(n)h(n) is also equal to ∞ for all the nodes in OPEN, making them indistinguishable.</a>
<a href="#8" id="8">However, if w is decreased by too little, the subsequent iteration of {a mathematical formula}ARA ⁎ -ImproveSolution might not expand a single node.</a>
<a href="#9" id="9">This is because {a mathematical formula}ARA ⁎ -ImproveSolution returns when {a mathematical formula}minn ∈ OPEN{fw(n)}>G (line 4 in Algorithm 4).</a>
<a href="#10" id="10">If w is hardly decreased in the next iteration, it might still be the case that {a mathematical formula}minn ∈ OPEN{fw(n)}>G.</a>
<a href="#11" id="11">So, what is the maximal value of w for which at least one node can be expanded?</a>
<a href="#12" id="12">That is when{a mathematical formula} which follows from the fact that{a mathematical formula} The one node that can then be expanded is indeed the node {a mathematical formula}n ∈ OPEN with a maximal value of {a mathematical formula}u(n).</a>
<a href="#13" id="13">This is precisely the node that {a mathematical formula}APTS/ANA ⁎ expands.</a>
<a href="#14" id="14">One could imagine an adapted version of {a mathematical formula}ARA ⁎ that uses Eq.</a>
<a href="#15" id="15">(1) to set w after each iteration of {a mathematical formula}ARA ⁎ -ImproveSolution.</a>
<a href="#16" id="16">This would also allow initializing w to ∞ for the first iteration, as is done in {a mathematical formula}APTS/ANA ⁎ .</a>
<a href="#17" id="17">However, even such a variation of {a mathematical formula}ARA ⁎ is not maximally greedy to find an improved solution, as explained next.</a>
<a href="#18" id="18">Assume that {a mathematical formula}ARA ⁎ -ImproveSolution is called with {a mathematical formula}w=maxn ∈ OPEN{u(n)}, and let {a mathematical formula}w ˆ denote this specific value of w. In {a mathematical formula}ARA ⁎ , the value of w is fixed throughout a call to {a mathematical formula}ARA ⁎ -ImproveSolution.</a>
<a href="#19" id="19">However, during an {a mathematical formula}ARA ⁎ -ImproveSolution call a node n might be generated for which {a mathematical formula}fw ˆ (n)<G.</a>
<a href="#20" id="20">If {a mathematical formula}fw ˆ (n)<G, then node n could have been expanded if w was increased even further (up to {a mathematical formula}u(n)).</a>
<a href="#21" id="21">A higher w corresponds to a greedier search, so instead one could always maximize w such that there is at least one node {a mathematical formula}n ∈ OPEN for which {a mathematical formula}fw(n) ≤ G.</a>
<a href="#22" id="22">This is equivalent to what {a mathematical formula}APTS/ANA ⁎ does, by continually expanding the node {a mathematical formula}n ∈ OPEN with a maximal value of {a mathematical formula}u(n).</a>
<a href="#23" id="23">Thus, {a mathematical formula}APTS/ANA ⁎ can be derived as non-parametric tuning of w, such that the search is as greedy as possible, but still has nodes that can be expanded with {a mathematical formula}fw smaller than G.</a>
<a href="#24" id="24">Additionally, every time w is changed in {a mathematical formula}ARA ⁎ , all the nodes in OPEN must be reordered to account for the new w value (line 12 in Algorithm 3).</a>
<a href="#25" id="25">While {a mathematical formula}APTS/ANA ⁎ has all the attractive properties listed above, it also has some limitations.</a>
<a href="#26" id="26">Since {a mathematical formula}APTS/ANA ⁎ runs a sequence of PTS calls, all the limitations described for PTS in Section 3.5 apply also to {a mathematical formula}APTS/ANA ⁎ .</a>
<a href="#27" id="27">In addition, {a mathematical formula}APTS/ANA ⁎ has two further limitations:</a>
<a href="#28" id="28">If the heuristic is inaccurate and there are not many goals, finding even a single, unbounded solution can be hard.</a>
<a href="#29" id="29">As defined above, until the first solution is found, {a mathematical formula}APTS/ANA ⁎ runs a pure heuristic search.</a>
<a href="#30" id="30">Thus, {a mathematical formula}APTS/ANA ⁎ would be inefficient in domains where pure heuristic search is inefficient.</a>
<a href="#31" id="31">For example, in domains where there is a distance-to-go heuristic ({a mathematical formula}d(n)), a much more effective way to find a solution fast is to search according to {a mathematical formula}d(n) rather than {a mathematical formula}h(n)[46], [39].</a>
<a href="#32" id="32">Every time a better solution is found, {a mathematical formula}APTS/ANA ⁎ is required to re-sort all the nodes in OPEN (Algorithm 2) to account for the new incumbent solution (the {a mathematical formula}u( ⋅ ) values change).</a>
</body>
</html>