<html>
<head>
<meta name="TextLength" content="SENT_NUM:39, WORD_NUM:906">
</head>
<body bgcolor="white">
<a href="#0" id="0">Furthermore, we show that using this algorithm allows us to establish theoretical guarantees for its performance.</a>
<a href="#1" id="1">More specifically, we prove that the performance regret (i.e., the difference between the performance of a particular algorithm and that of the optimal solution) of the bounded Ε -first approach is at most {a mathematical formula}O(B23) with a high probability, where B is the total budget.</a>
<a href="#2" id="2">Now, we reduce the task assignment problem in the exploitation phase to a bounded knapsack problem as follows.</a>
<a href="#3" id="3">Let {a mathematical formula} Μ ˆ i denote the estimate of {a mathematical formula} Μ i after the exploration phase.</a>
<a href="#4" id="4">This estimate can be calculated by simply taking the average of the received reward samples from arm i.</a>
<a href="#5" id="5">Given this, we aim to solve the following integer program:{a mathematical formula} where {a mathematical formula}xiexploit are the decision variables, representing the number of times we pull arm i in the exploitation phase.</a>
<a href="#6" id="6">In order to solve this problem, we use the abovementioned bounded greedy algorithm for the bounded knapsack.</a>
<a href="#7" id="7">Having the value of each {a mathematical formula}xiexploit, we now run the exploitation algorithm as follows: At each subsequent time step t, if the number of times arm i has been pulled does not exceed {a mathematical formula}xiexploit, then we pull that arm at t. Hereafter we refer to this exploitation approach as {a mathematical formula}Agreedy.</a>
<a href="#8" id="8">When used together with the uniform exploration technique described above, we refer to this algorithm as bounded Ε -first, or {a mathematical formula}A Ε -first.</a>
<a href="#9" id="9">In this section, we first derive an upper bound for the bounded Ε -first algorithm, for any given Ε value.</a>
<a href="#10" id="10">We then show that by efficiently tuning the value of Ε , we can refine the upper bound to {a mathematical formula}O(B23) (Section 5.1).</a>
<a href="#11" id="11">In addition, we also investigate the performance of the modified version of the Ε -first, where the uniform exploration phase is replaced with Successive Rejects (SR), a state-of-the-art pure exploration algorithm [3].</a>
<a href="#12" id="12">In particular, we also provide an {a mathematical formula}O(B23) bound for this modified version, however, with larger coefficient constants (Section 5.2).</a>
<a href="#13" id="13">This implies that even with this more sophisticated exploration method, we cannot achieve a better performance, compared to that of uniform exploration.</a>
<a href="#14" id="14">7.</a>
<a href="#15" id="15">Optimal: this is a hypothetical optimal algorithm with full knowledge of each worker's mean quality {a mathematical formula} Μ i.</a>
<a href="#16" id="16">We approximate its performance in this section using the solution to the corresponding fractional bounded knapsack problem.</a>
<a href="#17" id="17">Hence, any results we present are an upper bound on the performance of any algorithm.</a>
<a href="#18" id="18">As we can see, for jobs with very small budgets (i.e., smaller than $100), the performance of our algorithm is similar to that of the budget-limited Ε -first and trialsourcing.</a>
<a href="#19" id="19">This is due to the fact that with a small budget, longer exploration is a luxury, and thus, those approaches perform well with only a small budget for exploration.</a>
<a href="#20" id="20">However, if the budget is higher than $100, our algorithm clearly outperforms the others by up to {a mathematical formula}67%.</a>
<a href="#21" id="21">As before, this is because our approach identifies the best-performing workers and deals with the task limits of workers (which start to become an issue with a rising budget).</a>
<a href="#22" id="22">We can also observe that the uniform and random algorithms are clearly worse than our approach for any budget size, as they do not take into account the workers' performance characteristics at all.</a>
<a href="#23" id="23">In addition, it can clearly be seen that our algorithm is the only one that can guarantee the regret bound (as the others all perform worse than the regret bound as the budget rises above $150).</a>
<a href="#24" id="24">Another interesting set of jobs is those with large budgets, as they present long-term investments that require careful task allocation.</a>
<a href="#25" id="25">Thus, we also vary the budget B from $5000 to {a mathematical formula}$20,000, to analyse the performance of the algorithms (for consistency fixing the set of candidates to those that charge at most $50 per hour).</a>
<a href="#26" id="26">In fact, this range covers {a mathematical formula}77% of large jobs on oDesk (i.e., jobs with budget {a mathematical formula}>$5000).</a>
<a href="#27" id="27">From Fig.</a>
<a href="#28" id="28">3, we can see that our algorithm typically outperforms the others by up to {a mathematical formula}200%, and it achieves around {a mathematical formula}95% of the optimum.</a>
<a href="#29" id="29">Here, the significantly higher performance compared to the benchmarks is due to the ability of our algorithm to take into account the workers' task limits and divide the high budget between several workers.</a>
<a href="#30" id="30">In addition, our algorithm outperforms the others by up to {a mathematical formula}162% (for the case of budget {a mathematical formula}B=$10,000).</a>
<a href="#31" id="31">We can also see that when the budget is sufficiently large, bounded KUBE achieves a higher performance, compared to other benchmarks.</a>
<a href="#32" id="32">However, it can still only achieve less than {a mathematical formula}60% of the bounded Ε -first.</a>
<a href="#33" id="33">In Fig.</a>
<a href="#34" id="34">5, similar trends can be observed for larger budgets.</a>
<a href="#35" id="35">As in Section 6.3.1, our approach, bounded Ε -first, performs significantly better than all other benchmarks when the budget is high.</a>
<a href="#36" id="36">Here, the higher budget also allows it to sustain a high quality of around 80 – 90% of the optimal even when there are a few hundreds of candidates.</a>
<a href="#37" id="37">This is because it has a sufficient budget to explore even the larger number of candidates.</a>
<a href="#38" id="38">In addition, we can see that our method outperforms the best benchmark by up to 300% (in the case of budget {a mathematical formula}B=30,000 and when the number of candidates is between 100 and 300).</a>
</body>
</html>