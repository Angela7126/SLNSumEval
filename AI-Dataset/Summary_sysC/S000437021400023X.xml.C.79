<html>
<head>
<meta name="TextLength" content="SENT_NUM:12, WORD_NUM:558">
</head>
<body bgcolor="white">
<a href="#0" id="0">First, it runs a propagation algorithm on SD to compute the prunings required given current knowledge of S. This set of prunings is conservative in the sense that they can be performed whatever the true value of S because {a mathematical formula}S ⊆ SD.</a>
<a href="#1" id="1">For this proof, we implicitly match up nodes generated by Algorithm 1 with points in the code generated by Algorithm 2.By the same argument used in Lemma 1, the Deletions generated on line 1 can also be removed from S. If applying these deletions to S leads to a domain wipe-out, then the constraint solver sets {a mathematical formula}S(x)= ∅ for all {a mathematical formula}x ∈ scope(c), and the propagator has established GAC, no matter what happens in the rest of the tree.If no domain wipe-out occurs, we progress to line 9.</a>
<a href="#2" id="2">As in the previous case, the requirements of the induction hypothesis are met and we have a correct GAC propagator for S.Finally we note that the set {a mathematical formula}SD ∖ ValsIn is always reduced by at least one literal on each recursive call to Algorithm 1.</a>
<a href="#3" id="3">Assuming the Propagate function correctly establishes GAC for any constraint c, then the code generatorAlgorithm 2applied to the result ofAlgorithm 1with inputs{a mathematical formula}(c,D, ∅ ), where D are the initial domains of the variables in c, generates a correct GAC propagator for all search states.</a>
<a href="#4" id="4">To test propagator trees on this problem, we combine pairs of product constraints into a single arity 5 constraint: {a mathematical formula}(s[i]×s[k+i])+(s[i+1]×s[k+i+1])=pki.</a>
<a href="#5" id="5">We compare eight models of LABS: Product, the model with ternary product constraints; Propagator tree, where the new 5-ary constraint has a propagator tree, and this is either compiled or executed in the VM; Table, Lighttable, MDDC and {a mathematical formula}STR2+ where the 5-ary constraint is implemented with a generic propagator using a table with 16 satisfying tuples; and Regular[17] which has 10 states and uses a ternary table constraint (representing the transition table) with 17 satisfying tuples.</a>
<a href="#6" id="6">The Propagator Tree, Table, Lighttable, MDDC, Regular and {a mathematical formula}STR2+ models search the same number of nodes as each other, and exhibit stronger propagation than Product, but their node rate is lower than Product in all cases.</a>
<a href="#7" id="7">live cells are contained within an {a mathematical formula}n×n bounding box at each time step) and period p is represented by a 3-dimensional array of Boolean variables {a mathematical formula}b[n+4,n+4,p] indexed (from 0) by position i, j and time step t. To enforce the bounding box, for each t, the rows 0, 1, {a mathematical formula}n+2 and {a mathematical formula}n+3 are set to 0.</a>
<a href="#8" id="8">We use the letter T in this definition to represent any set where the appropriate operation is defined: permutations {a mathematical formula}g ∈ G can be applied to members of T. Note that our canonicalising function returns a group element rather than the image.</a>
<a href="#9" id="9">In all cases the worst case complexity is polynomial in the size of the data structure.</a>
<a href="#10" id="10">In some cases the data structure can be much smaller than an explicit list of all allowed tuples, but the worst case time remains exponential.</a>
<a href="#11" id="11">That is, establishing GAC during search can take time {a mathematical formula}dn, compared to our worst case of {a mathematical formula}O(nd), or {a mathematical formula}O(n2d2) with symmetry reduction (assuming the solver can query and remove domain values in {a mathematical formula}O(1) time).</a>
</body>
</html>