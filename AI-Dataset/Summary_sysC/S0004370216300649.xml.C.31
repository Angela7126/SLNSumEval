<html>
<head>
<meta name="TextLength" content="SENT_NUM:28, WORD_NUM:599">
</head>
<body bgcolor="white">
<a href="#0" id="0">Nowadays, modern SAT solvers are able to efficiently solve many industrial, or real-world, SAT instances.</a>
<a href="#1" id="1">However, the process of development and testing of new SAT solving techniques is conditioned to the finite and reduced number of known industrial benchmarks.</a>
<a href="#2" id="2">The main contribution of this work is a new model of generation of random SAT instances based on the notion of modularity.</a>
<a href="#3" id="3">{sup:1} With this new model, we can generate formulas for any given value of modularity.</a>
<a href="#4" id="4">For a high modularity, the resulting instance is more adequate to model industrial problems than classical random formulas.</a>
<a href="#5" id="5">On the contrary, with a low modularity we can generate SAT instances very similar to classical random ones.</a>
<a href="#6" id="6">We show that this model works appropriately for different input values of number of variables n and clauses m. We also show that, if there exists a phase transition point SAT-UNSAT when the ratio clause/variable is increased, then it does not depend on the modularity.</a>
<a href="#7" id="7">We give empirical evidence that the performance of SAT solvers is consistent with the expected properties of the generated formulas, i.e.</a>
<a href="#8" id="8">SAT solvers specialized in industrial problems perform better in high modular instances than SAT solvers specialized in random formulas, and vice versa.</a>
<a href="#9" id="9">Finally, we use this generator to answer the questions stated in the previous paragraph.</a>
<a href="#10" id="10">In particular, we analyze the relations between the community structure and the branching decision heuristics, and the mechanism of learning new clauses from the conflicts the solver finds along its execution.</a>
<a href="#11" id="11">A preliminary version of this paper was published as [20].</a>
<a href="#12" id="12">In order to analyze the community structure of the SAT instances obtained with our model, we have generated some sets of random formulas for different values of {a mathematical formula}Q ∈ {0.9,0.8,0.7,0.5,0.3} (hence {a mathematical formula}p=Q+1/c), and for different values of number of communities {a mathematical formula}c ∈ {10,20,40,80}.</a>
<a href="#13" id="13">Each set contains 50 random instances.</a>
<a href="#14" id="14">Remark that the modularity Q of (real) industrial SAT instances is usually greater than 0.7 [9], while no modularity greater than 0.3 is found for classical random k-CNF formulas.</a>
<a href="#15" id="15">Moreover, the number of communities c is usually in the interval {a mathematical formula}[10,100][9].</a>
<a href="#16" id="16">In this section we check if this phenomenon also exists in the random SAT instances generated with our model, and if the new transition point, noted {a mathematical formula}r ′ , differs from the classical {a mathematical formula}r ′ ≠ r.</a>
<a href="#17" id="17">In Fig.</a>
<a href="#18" id="18">4, we represent the fraction of UNSAT instances for some sets of random formulas with distinct Q, varying the clause/variable ratio {a mathematical formula}m/n.</a>
<a href="#19" id="19">We observe that the fraction of UNSAT formulas increases with {a mathematical formula}m/n.</a>
<a href="#20" id="20">Therefore, for small (big) values of {a mathematical formula}m/n, nearly all formulas are SAT (UNSAT).</a>
<a href="#21" id="21">When Q is small, the value {a mathematical formula}r ′ is close to the classical {a mathematical formula}r ≈ 4.26.</a>
<a href="#22" id="22">Recall that when {a mathematical formula}p ≈ 1/c, our model is quite similar to the classical random k-SAT model.</a>
<a href="#23" id="23">However, we also observe that, when Q increases, {a mathematical formula}r ′ decreases.</a>
<a href="#24" id="24">In Fig.</a>
<a href="#25" id="25">5 we compare the performance of the SAT solvers Glucose [11] (version 3.0) and March [22] (version br) over some sets of SAT formulas generated with our model, with distinct modularity values.</a>
<a href="#26" id="26">While Glucose is a CDCL SAT solver which has been shown very good for solving industrial problems, March is a Look-ahead SAT solver commonly used to solve random k-CNF instances.</a>
<a href="#27" id="27">We use sets of instances from {a mathematical formula}Fk(n,m,c,p) with a clause/variable ratio {a mathematical formula}m/n in the phase transition point, a number of communities {a mathematical formula}c=40 and a clause length {a mathematical formula}k=3.</a>
</body>
</html>