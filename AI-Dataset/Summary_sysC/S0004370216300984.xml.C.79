<html>
<head>
<meta name="TextLength" content="SENT_NUM:9, WORD_NUM:334">
</head>
<body bgcolor="white">
<a href="#0" id="0">Since the number of available benchmark problems for SAT solving is huge while computational resources are limited it is necessary to somehow select a subset of the instances to be used for a competition.</a>
<a href="#1" id="1">The instances are not too hard â€“ Instances that none of the participating solvers can solve in the given time limit do not provide any information about the relative performance of the competing solvers.</a>
<a href="#2" id="2">It is possible to solve such problems by solving the incrementally generated instances independently, however this might be very inefficient compared to an incremental SAT solver, which can reuse knowledge acquired while solving the previous instances (for example the learned clauses and variable activity statistics).</a>
<a href="#3" id="3">The benchmark applications were executed in parallel, i.e., eight instances of a solver-application pair were running at the same time on eight different input files.</a>
<a href="#4" id="4">{sup:13} Two different solvers or two different applications were not allowed to run at the same time, therefore each solver-application pair could only interfere with itself (on different input files).</a>
<a href="#5" id="5">In contrast to other adaptive approaches that focus on problem feature extraction Glucose 4 records its runtime parameters (while running in default configuration for a constant amount of conflicts) which then are used as indicators for a strategy switch.</a>
<a href="#6" id="6">At the end of each incremental run a phase of extreme clause learning is started and a majority of the learned clauses that accumulated in the database during the solver run is cleared.</a>
<a href="#7" id="7">In order to make CryptoMiniSat adaptive, the top 5 parameter configurations were experimentally determined and then a classifier has been trained with benchmark problems from the previous SAT Competitions to select the best configuration for the problem at hand.</a>
<a href="#8" id="8">One novelty in this competition was introduced by the winner of the Main Track, abcdSAT (Section 7.1.1), that makes creative use of blocked clause decomposition to restrict variable selection for a constant amount of decision levels to a set of variables that satisfies clauses that are adjacent in the order imposed by blocked clause elimination.</a>
</body>
</html>