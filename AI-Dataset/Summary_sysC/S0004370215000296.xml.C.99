<html>
<head>
<meta name="TextLength" content="SENT_NUM:26, WORD_NUM:952">
</head>
<body bgcolor="white">
<a href="#0" id="0">Given that the goal state can be achieved in an acceptable time, the next question to consider is how to determine a good sequence of control actions that achieves this.</a>
<a href="#1" id="1">More generally, given that there may be disturbances, it is important to be able to determine the set of initial states from which the goal can be achieved in an acceptable time, and to determine a control policy that covers these states.</a>
<a href="#2" id="2">The control policy representation must be such that when given a spatially and temporally specified goal, and a current state, it can quickly determine whether the goal can be achieved, and what the next control action should be.</a>
<a href="#3" id="3">The key innovations include: 1) the use of a sampling algorithm, RRT, which was originally developed for robot motion planning, to explore the state space; 2) a search heuristic that biases growth of the RRT tree towards the unsafe set; 3) metrics that provide information about the completeness of the search, which can be used to obtain a probabilistic certificate of validation; and 4) an extension of RRT called “ Recursively Refined RRT ” , which uses progressively smaller time steps to improve the resolution of the RRT tree.</a>
<a href="#4" id="4">It may also include state constraints on quantities like center of mass, and temporal constraints specifying time ranges by which the state goals must be achieved.</a>
<a href="#5" id="5">Thus, a qualitative state is a loose, partial specification of desired behavior for a specific maneuver, like taking a step.</a>
<a href="#6" id="6">Temporally Feasible ActivityGiven an activity and associated plant, the activity is Temporally Feasible in the duration range {a mathematical formula}[l,u] if{a mathematical formula}</a>
<a href="#7" id="7">This states that the set of plant feasible trajectories includes ones that go from {a mathematical formula}Rinit to {a mathematical formula}Rgoal over the entire duration range {a mathematical formula}[l,u].</a>
<a href="#8" id="8">More specifically, if a trajectory starting anywhere in the initial region, {a mathematical formula}Rinit, of the activity (see Definition 8) and ending somewhere in the goal region, {a mathematical formula}Rgoal, at any duration d such that {a mathematical formula}l ≤ d ≤ u, is Plant Feasible, then the activity is temporally feasible in the duration range.</a>
<a href="#9" id="9">This implies that the actuation limits imposed by the plant, and the operating constraints of the activity allow for actuation commands that can be used to control the linearized subsystem to the goal region from the initial region, at any duration in the duration range.</a>
<a href="#10" id="10">Temporally Controllable ActivityGiven an activity and associated plant, and given a Valid Control Policy, P, for the activity, the activity is Temporally Controllable by P in the duration range {a mathematical formula}[l,u] if the activity is Temporally Feasible in this range, and if all trajectories for the activity are consistent with (generated by) P. A trajectory is consistent with, or generated by P if for every state {a mathematical formula}x(k) in the trajectory, the subsequent state {a mathematical formula}x(k+1) results from applying P to {a mathematical formula}x(k).</a>
<a href="#11" id="11">In order to support efficient execution, the flow tube representation must allow the dispatcher to: 1) quickly determine whether a feasible state trajectory exists from the current state, and 2) if such a trajectory exists, what the control commands should be (based on a control policy) that achieve the trajectory.</a>
<a href="#12" id="12">For the case of the last cross section before the goal, the new state requirement is {a mathematical formula}xnew ∈ Rgoal, where {a mathematical formula}Rgoal is the goal region specified for the activity in the QSP.</a>
<a href="#13" id="13">Thus, each linear control law of a valid cross section has the property that application of the control input to the linearized sub-system moves the state of this sub-system into the region of the cross section of the next time increment closer to the goal, if there are no disturbances.</a>
<a href="#14" id="14">The algorithm iterates over each activity in the QSP, calling ComputeFlowTubeForActivity.</a>
<a href="#15" id="15">If the result is a flow tube with no valid cross sections, then the algorithm stops and indicates an error; the QSP is infeasible.</a>
<a href="#16" id="16">If the flow tube is non-empty (has valid cross sections), then these cross sections are feasible in terms of plant dynamics, but not necessarily other aspects of the QSP.</a>
<a href="#17" id="17">Therefore, the algorithm calls PruneInfeasibleCrossSections, which performs the intersection of initial region, predecessor goal region, and cross section regions specified in Lemma 2.</a>
<a href="#18" id="18">The steps for computing the cross sections of a flow tube for an activity are shown in Algorithm 3.</a>
<a href="#19" id="19">However, unlike discrete activity systems, which can simply set the occurrence of events so that they coincide with target completion times, our dispatcher must generate control inputs that guide the hybrid plant to its goal state at the target completion time.</a>
<a href="#20" id="20">Thus, the activity completion event time cannot simply be set, but rather, occurs as a consequence of the control policy applied to the plant dynamics.</a>
<a href="#21" id="21">Temporally Controllable Activity for Target Completion Time and Current StateAn activity is Temporally Controllable for Target Completion Time {a mathematical formula}tf from current state x if there exists a Valid Control Policy for Target Completion Time, {a mathematical formula}P(tf), that covers x.</a>
<a href="#22" id="22">We call this a Valid Control Policy for Target Completion Time and State, and denote this by {a mathematical formula}P(tf,x).</a>
<a href="#23" id="23">During initialization, the dispatcher chooses a goal duration (and target completion time) for the control activity that is consistent with its execution window, and computes an initial control input, based on the control policy for the chosen target completion time.</a>
<a href="#24" id="24">This control input is consistent with an optimal trajectory that will reach the activity's goal region in the chosen duration, if there are no disturbances.</a>
<a href="#25" id="25">After initializing an activity, the dispatcher begins monitoring its execution by obtaining an updated state estimate at each time increment, and checking whether the state is within the flow tube as expected.</a>
</body>
</html>