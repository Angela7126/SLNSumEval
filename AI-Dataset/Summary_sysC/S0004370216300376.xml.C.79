<html>
<head>
<meta name="TextLength" content="SENT_NUM:39, WORD_NUM:1215">
</head>
<body bgcolor="white">
<a href="#0" id="0">Frameworks for certification and solution extraction emerged that allow for a detailed interpretation of a QBF solver's results, and new types of QBF encodings were presented for various application problems.</a>
<a href="#1" id="1">Quantified Boolean formulas (QBF) [28] provide a powerful framework for encoding any application problem located in the complexity class of PSPACE.</a>
<a href="#2" id="2">Many important verification problems like bounded model checking [27] or artificial intelligence tasks like conformant planning [12] can be efficiently encoded as QBF (cf.</a>
<a href="#3" id="3">A major breakthrough has been achieved by solving the long open problem of calculating certificates for a solver's result, leading to elegant approaches based on the analysis of resolution proofs [1], [19], to name one example.</a>
<a href="#4" id="4">We set up four showcases where we addressed typical usage scenarios such as solving, preprocessing, novel applications, and strategies/certificates.</a>
<a href="#5" id="5">On purpose, we decided to use the simplest possible performance metrics like number of solved formulas, average and total runtimes.</a>
<a href="#6" id="6">This set was generated in similar fashion as the set AABBCCDD except that the execution ordering AADDBBCC was used.We selected the execution orderings AABBCCDD and AADDBBCC based on empirical findings we made in the showcase on preprocessing.</a>
<a href="#7" id="7">Set reduction-finding: formulas generated from instances of reduction finding [11], [25], [26], which is the problem to determine whether parametrized quantifier-free reductions exist between various decision problems in NL for one set of fixed parameters.</a>
<a href="#8" id="8">Table 4 presents detailed numbers of solved instances for each benchmark family in the set eval2012r2.</a>
<a href="#9" id="9">In the category “ WANT Bloqqer ” , the columns “ Best Foot ” and “ Worst Foot ” report the numbers of instances that were solved by a solver with and without prior preprocessing by Bloqqer, respectively.</a>
<a href="#10" id="10">In contrast to that, in the category “ NO Bloqqer ” , these columns report the numbers of instances that were solved by a solver without and with prior preprocessing by Bloqqer, respectively.</a>
<a href="#11" id="11">That is, column “ Best Foot ” represents the best choice of a solver in terms of solved instances whether to run on the original instances or on the preprocessed ones.</a>
<a href="#12" id="12">Contrary to the best choice, column “ Worst Foot ” represents the respective worst choice in each category.</a>
<a href="#13" id="13">Solvers in the “ NO Bloqqer ” category like bGhostQ-CEGAR (and its variants) perform better without prior preprocessing and thus are more highly ranked in Table 3 than solvers in the “ WANT Bloqqer ” category like RAReQS and DepQBF-lazy-qpup.</a>
<a href="#14" id="14">In contrast to that, solvers in the “ WANT Bloqqer ” category perform better with prior preprocessing and thus dominate the solvers from the “ NO Bloqqer ” category in the ranking shown in Table 5.</a>
<a href="#15" id="15">The best-foot-forward analysis presented above revealed that the performance of the solvers might heavily depend on the use of preprocessing when applied before the actual solving.</a>
<a href="#16" id="16">In addition to the application of preprocessing prior to solving, the actual selection of benchmarks might have an influence on the performance of solvers and hence on the rankings in terms of solved instances.</a>
<a href="#17" id="17">In order to analyze the effect of the benchmark selection on the ranking of solvers, we carried out the following sampling experiment.</a>
<a href="#18" id="18">Furthermore, solvers that perform particularly well on certain families no longer have an advantage when running on benchmark sets where the selection of instances is biased towards that family.</a>
<a href="#19" id="19">The purpose of this showcase was to find out how many instances can be solved solely by preprocessing and to analyze the effects of preprocessing on the performance of solvers.</a>
<a href="#20" id="20">The choice of the time limits for preprocessing was based on the conjecture that if an instance can be solved solely by preprocessing, then it can be solved rather quickly.</a>
<a href="#21" id="21">If a preprocessor fails to process an instance within the given time limit or if it fails due to any other reason, then its input formula is passed on to the next preprocessor in the execution sequence without any modifications.</a>
<a href="#22" id="22">We considered the benchmark set eval2012r2 and tested all {a mathematical formula}4!=24 possible execution sequences of A, B, C, and D.</a>
<a href="#23" id="23">In an additional experiment, we tested selected execution sequences from Table 12 on the benchmark set eval2012r2, where each preprocessor is run twice in a row.</a>
<a href="#24" id="24">We selected the sequences to be tested according to the numbers of solved instances shown in Table 12 and the individual characteristics of the preprocessors.</a>
<a href="#25" id="25">The results in Table 14 show a moderate increase in the number of solved instances, except for the sequences {a mathematical formula}(B2C2D2A2)6 and {a mathematical formula}(D2A2B2C2)6.</a>
<a href="#26" id="26">In contrast to the experiments conducted in the case of the best-foot-forward experiments above, in the following we are interested in the effects of applying different combinations of preprocessors in multiple rounds and assess the solving performance of preprocessors.</a>
<a href="#27" id="27">As illustrated by Table 15, the numbers of instances solved by preprocessing using a particular execution sequence is sensitive to the ordering of the preprocessing tools in the sequence.</a>
<a href="#28" id="28">Since Bloqqer ( “ B ” ) and sQueezeBF ( “ D ” ) have different characteristics, we additionally selected the sequence {a mathematical formula}(A2D2B2C2)6 where the ordering of these two preprocessors is swapped and still Bloqqer is executed before Hiqqer3p ( “ C ” ).</a>
<a href="#29" id="29">We did not consider the sequence {a mathematical formula}(A2D2C2B2)6 where only Bloqqer and SqueezeBF are swapped since, according to the results shown in Table 12, the execution ordering {a mathematical formula}(ADCB) solved one instance less than the execution ordering {a mathematical formula}(ADBC) in the sequence {a mathematical formula}(A2D2B2C2)6 we selected.</a>
<a href="#30" id="30">That is, although preprocessing alone using the execution sequence {a mathematical formula}(A2D2B2C2)6 solves fewer instances than when using the sequence {a mathematical formula}(A2B2C2D2)6, solving performs better on the instances that were preprocessed using the former and results in a higher total number of instances solved by preprocessing and solving.</a>
<a href="#31" id="31">The goal was to find out which types of solvers perform well on a specific family, what the reasons are for good or bad performance, and to identify future research directions to improve QBF solvers for benchmark families that arise from practical applications.</a>
<a href="#32" id="32">Table A.19, Table A.20, Table A.21, Table A.22, Table A.23, Table A.24 show detailed solving statistics for each of the considered benchmark sets, illustrating the different rankings of the solvers in terms of the numbers of solved formulas.</a>
<a href="#33" id="33">In that respect, the difference is more pronounced in the showcase on applications than in the showcase on solving due to the homogeneity of instances within a particular application benchmark family.</a>
<a href="#34" id="34">The goal of this showcase was to evaluate the current state of the art of the generation of proofs, certificates, and strategies, which has been a long standing problem in QBF research.</a>
<a href="#35" id="35">This insight can be helpful for QBF applications where a mere “ SAT/UNSAT ” result produced by the solver is insufficient (e.g., QBF-based synthesis [8]).</a>
<a href="#36" id="36">Instead, we comment on the results of the experiments shown in Table 18 using various workflows consisting of different solvers and tools for the extraction and checking of certificates.</a>
<a href="#37" id="37">These tools implement the same approach to certificate extraction based on Q-resolution proofs [1], [39] and show similar performance.</a>
<a href="#38" id="38">In the lower part of Table 18, the workflow implemented in QuBE-cert and ResQu is also based on Q-resolution proofs and certificates in terms of Skolem and Herbrand functions and thus is most closely related to DepQBF combined with QBFcert and ResQu.</a>
</body>
</html>