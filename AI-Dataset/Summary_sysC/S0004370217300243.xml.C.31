<html>
<head>
<meta name="TextLength" content="SENT_NUM:11, WORD_NUM:332">
</head>
<body bgcolor="white">
<a href="#0" id="0">{a mathematical formula}t:L → R − , i.e., the time cost of driving through a given path,</a>
<a href="#1" id="1">Additivity trivially applies to any cost function in real-world ridesharing scenario.</a>
<a href="#2" id="2">Notice that we do not assume that the above cost functions are monotonic with respect to the length of the path, i.e., longer paths can results in lower costs.</a>
<a href="#3" id="3">Finally, {a mathematical formula}LS ⁎ represents the optimal path for S, defined as{a mathematical formula} Considering this, a SR problem can be easily translated into a GCCF problem, as each feasible set of riders is indeed a feasible coalition and {a mathematical formula}v( ⋅ ) provides its coalitional value.</a>
<a href="#4" id="4">Hence, {a mathematical formula}CS ⁎ represents the optimal coalition structure which maximises the social welfare (i.e., minimises the total cost) for the system.</a>
<a href="#5" id="5">However, the computation of the optimal path in Equation (3) is NP-hard [31], which would not be solvable in realistic scenarios.</a>
<a href="#6" id="6">Hence, in the next section we show how a reasonable assumption allows us make such computation tractable, by means of well-known optimisation techniques [20].</a>
<a href="#7" id="7">In this section we address the problem of computing the optimal departure time {a mathematical formula} Τ S ⁎ for a given coalition S. Specifically, we now propose an algorithm to compute the best departure time for a car S (given a tuple {a mathematical formula}L ∈ VT(S) and a driver {a mathematical formula}aj ∈ S ∩ D), so to avoid trying every possible departure time for the trip of S. Algorithm 3 achieves this by considering the ideal departure time of the driver, i.e., {a mathematical formula} Τ j Σ , and by applying a sequence of shifts so to obtain the optimal Τ .</a>
<a href="#8" id="8">Due to its strength, the core is not guaranteed to be always non-empty, i.e., it is not always possible to compute a core-stable payment allocation.</a>
<a href="#9" id="9">Consider the following SR instance, which, for simplicity, does not take into account time constraints.</a>
<a href="#10" id="10">Such instance has been generated from the datasets discussed in Section 6.</a>
</body>
</html>