<html>
<head>
<meta name="TextLength" content="SENT_NUM:30, WORD_NUM:628">
</head>
<body bgcolor="white">
<a href="#0" id="0">In summary, {a mathematical formula}hC has the necessary power to refute arbitrary dead-end states in principle, and there is reason to believe it will be useful for that purpose in practice.</a>
<a href="#1" id="1">We cover the identification of conflicts during search, conflict analysis & refinement for {a mathematical formula}uC, and clause learning, in this order.</a>
<a href="#2" id="2">After any search step, how to navigate directly to the known conflict states?</a>
<a href="#3" id="3">And actually, how to directly identify the components of such states, which may be (and is, for one of our {a mathematical formula}uC refinement methods) relevant to the learning?</a>
<a href="#4" id="4">We now tackle the refinement step in Algorithm 1, Algorithm 2, for the dead-end detector {a mathematical formula}uC.</a>
<a href="#5" id="5">Given {a mathematical formula}R[s] where all {a mathematical formula}t ∈ R[s] are dead-ends, how to refine {a mathematical formula}uC on {a mathematical formula}R[s] to recognize all these dead-ends?</a>
<a href="#6" id="6">{a mathematical formula}uC ∪ X(s)= ∞ for all {a mathematical formula}t ∈ R[s].</a>
<a href="#7" id="7">All these t must already be recognized as dead-ends.</a>
<a href="#8" id="8">But recognized by which dead-end detector?</a>
<a href="#9" id="9">We say that {a mathematical formula}R[s] has {a mathematical formula}uC-recognized neighbors if all t are recognized by {a mathematical formula}uC, {a mathematical formula}uC(t)= ∞ .</a>
<a href="#10" id="10">This necessarily holds if {a mathematical formula}uC is the only dead-end detector used.</a>
<a href="#11" id="11">But if {a mathematical formula}uC is combined with some other dead-end detector u, then some of the states t may be recognized only by u, not by {a mathematical formula}uC.</a>
<a href="#12" id="12">Neighbors refinement assumes as input a set {a mathematical formula}S ˆ of dead-end states that satisfies the {a mathematical formula}uC-recognized neighbors property.</a>
<a href="#13" id="13">Namely, we denote by {a mathematical formula}T ˆ the neighbors of {a mathematical formula}S ˆ , i.e., the set of states {a mathematical formula}t ∉ S ˆ where there exists {a mathematical formula}s ∈ S ˆ s.t.</a>
<a href="#14" id="14">{a mathematical formula}s → t.</a>
<a href="#15" id="15">The {a mathematical formula}uC-recognized neighbors property requires that {a mathematical formula}uC(t)= ∞ for all {a mathematical formula}t ∈ T ˆ .</a>
<a href="#16" id="16">In the context of Algorithm 1, Algorithm 2, we set {a mathematical formula}S ˆ :={s ′ |s ′ ∈ R[s],uC(s ′ )=0}.</a>
<a href="#17" id="17">Provided that {a mathematical formula}uC is the only dead-end detector used, it is easy to see that the {a mathematical formula}uC-recognized neighbors property always holds at the refinement step on {a mathematical formula}R[s]: {a mathematical formula}R[s] contains only closed states, so it contains all states {a mathematical formula}s ′ reachable from s, up to the neighbor states {a mathematical formula}t ∈ R[s] ∖ S ˆ where {a mathematical formula}uC(t)= ∞ .</a>
<a href="#18" id="18">Let C be any set of atomic conjunctions, let s be a state, and let{a mathematical formula}G ⊆ F.</a>
<a href="#19" id="19">Then{a mathematical formula}uC(s,G)= ∞ if and only if there exists{a mathematical formula}c ∈ Csuch that:</a>
<a href="#20" id="20">for every{a mathematical formula}a ∈ A[c],{a mathematical formula}uC(s,R(c,a))= ∞ .</a>
<a href="#21" id="21">Let C be any set of atomic conjunctions.</a>
<a href="#22" id="22">Let{a mathematical formula}S ˆ be a set of dead-end states, and let{a mathematical formula}T ˆ be its neighbors with the{a mathematical formula}uC-recognized neighbors property.</a>
<a href="#23" id="23">Let{a mathematical formula}x ⊆ F.</a>
<a href="#24" id="24">Let C be any set of atomic conjunctions.</a>
<a href="#25" id="25">Let{a mathematical formula}S ˆ be a set of dead-end states, and let{a mathematical formula}T ˆ be its neighbors with the{a mathematical formula}uC-recognized neighbors property.</a>
<a href="#26" id="26">Observe that the only reason for this is generalization, i.e., refinements of {a mathematical formula}uC on states s leading to pruning on states other than s. Without generalization, the search spaces would be identical, including tie-breaking.</a>
<a href="#27" id="27">Generalization is what lifts a hopeless planner (DFS with {a mathematical formula}h1 dead-end detection) to a planner competitive with the state of the art in resource-constrained planning.</a>
<a href="#28" id="28">Compared to the baselines, DFS without learning has basically the same coverage as search with {a mathematical formula}h1, which makes sense as both use the same dead-end detector throughout.</a>
<a href="#29" id="29">Let C be any set of atomic conjunctions.</a>
</body>
</html>