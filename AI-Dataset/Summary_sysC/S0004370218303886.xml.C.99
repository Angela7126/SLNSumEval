<html>
<head>
<meta name="TextLength" content="SENT_NUM:15, WORD_NUM:628">
</head>
<body bgcolor="white">
<a href="#0" id="0">The term ‘ logic ’ is maybe not appropriate for LPML; rather, it is a specific approach to ‘ connect ’ , in a modal object language, a modal formula {a mathematical formula} Θ ∈ Lml and a first-order property {a mathematical formula} Θ ∈ Lfo1 through the introduction of a relational atom ⊡ (or {a mathematical formula} ⊡ (a → )), in such a way that on Kripke models ⊡ is interpreted as Θ locally.</a>
<a href="#1" id="1">More precisely, the language of LPML extends {a mathematical formula}Lml with formulas of type {a mathematical formula} ⊡ (a → ), whose interpretation is provided by an associated formula {a mathematical formula} Θ ⊡ (a → ,x) ∈ Lfo1, according to the following satisfaction clause:{a mathematical formula}</a>
<a href="#2" id="2">By clause (9) we say that formula {a mathematical formula} ⊡ (a → )expresses locally first-order property {a mathematical formula} Θ ⊡ (at w).</a>
<a href="#3" id="3">Then, LPML investigates how operator ⊡ can help us, in the object language, to build a bridge between modal formulas {a mathematical formula} Θ ⊡ and first-order properties {a mathematical formula} Θ ⊡ that {a mathematical formula} Θ ⊡ locally defines.</a>
<a href="#4" id="4">So, for instance, we can have {a mathematical formula} ⊡ (a)=Refl(a) for {a mathematical formula} Θ ⊡ (a,x)=Ra(x,x), or {a mathematical formula} ⊡ (b,c)=Sup(b,c) for {a mathematical formula} Θ ⊡ (b,c,x)= ∀ y(Rc(x,y) → Rb(x,y)) (for more examples, see Table 1).</a>
<a href="#5" id="5">Recalling that operator ⊡ is part of the object language of lpml, [18] then adds to the basic modal logic K, for specific formulas {a mathematical formula} Θ ⊡ ∈ Lml, an axiom {a mathematical formula}Ax ⊡ and an inference rule {a mathematical formula}R ⊡ .</a>
<a href="#6" id="6">A proof of Theorem 23 is given in Appendix A.</a>
<a href="#7" id="7">This theorem implies, in a sense, that what can be done in lpml, can also be done in sopml: if {a mathematical formula} Θ (a → ,p → ), {a mathematical formula} ⊡ (a → ) and {a mathematical formula} Θ (a → ) are in local harmony, then, to reason locally about a scheme Θ , one can either use the universal closure {a mathematical formula} ∀ p → Θ in sopml, or atom {a mathematical formula} ⊡ (a → ) in lpml.</a>
<a href="#8" id="8">The result also suggests ways in which sopml may be more appropriate to reason about local properties, namely cases where Θ is not locally defined by any formula {a mathematical formula} Θ ∈ Lml (i.e., there is no Θ such that {a mathematical formula} ∀ P → STx( Θ ) is equivalent to Θ ), or, conversely, when Θ does not define a first-order property Θ locally (i.e., there is no Θ such that {a mathematical formula} ∀ P → STx( Θ ) is equivalent to Θ ).</a>
<a href="#9" id="9">However, we cannot directly apply Lemma 35 to Δ , as it is a set of formulas over {a mathematical formula}AP ∪ Y.</a>
<a href="#10" id="10">We prove that Δ can nonetheless be extended to a saturated set Φ of formulas over {a mathematical formula}AP ∪ Y.</a>
<a href="#11" id="11">The proof structure is similar to the one for Lemma 35, namely, we define a sequence {a mathematical formula} Φ 0, Φ 1, … of sets of formulas over {a mathematical formula}AP ∪ Y as follows:{a mathematical formula}We prove by induction on n that every {a mathematical formula} Φ n is consistent (and well-defined).</a>
<a href="#12" id="12">First of all, {a mathematical formula} Φ 0= Δ is consistent as shown above.</a>
<a href="#13" id="13">As to the inductive step, suppose that {a mathematical formula} Φ n is consistent.</a>
<a href="#14" id="14">EquivalenceGiven a frame{a mathematical formula}F, let ∼ be the equivalence relation on W such that for every state{a mathematical formula}w,w ′ ∈ W,{a mathematical formula}w ∼ w ′ implies that for every{a mathematical formula}U ∈ D,{a mathematical formula}w ∈ Uiff{a mathematical formula}w ′ ∈ U.</a>
</body>
</html>