<html>
<head>
<meta name="TextLength" content="SENT_NUM:21, WORD_NUM:531">
</head>
<body bgcolor="white">
<a href="#0" id="0">1, provides a simple example in which each agent has two possible values, and the constraints involving agent {a mathematical formula}Aa are shown.</a>
<a href="#1" id="1">Assume that agent {a mathematical formula}Aa knows of an upper bound {a mathematical formula}UB=10, and is attempting to assign the value {a mathematical formula}va=x from its domain.</a>
<a href="#2" id="2">Since the assignment {a mathematical formula}va=x has a unary constraint cost of 1 the current CPA has {a mathematical formula}CPA_Cost=1 (note that unary constraints are only used in the example.</a>
<a href="#3" id="3">When agent {a mathematical formula}Ab receives the LB_Request with {a mathematical formula}va=x it sees that its own added cost to that assignment can be no less than 2 (if it will assign {a mathematical formula}vb=x), so it send LB_Report back to {a mathematical formula}Aa with that number.</a>
<a href="#4" id="4">When agent {a mathematical formula}Aa receives LB_Reports from agents {a mathematical formula}Ab, {a mathematical formula}Ad and {a mathematical formula}Af, it will update {a mathematical formula}Sub_Tree_LB(Ab,x) to be the sum of these messages (4 in our example).</a>
<a href="#5" id="5">Let us examine the different methods of UB propagation between agents, according to their number of children.</a>
<a href="#6" id="6">When an agent has exactly one child, its upper bound UB is the same as that of its child's UB, which means that all agents within a chain in the pseudo tree share the same UB.</a>
<a href="#7" id="7">As defined above, the {a mathematical formula}Latest_Divider(Ai) is the latest ancestor of agent {a mathematical formula}Ai that has more than a single child, the {a mathematical formula}Latest_Divider(Ai) is the closest ancestor of {a mathematical formula}Ai, who divided the problem into sub-problems.</a>
<a href="#8" id="8">When a leaf agent extends a CPA with an assignment to its variable, in effect it finds a new UB.</a>
<a href="#9" id="9">That UB is relevant to all agents in its chain.</a>
<a href="#10" id="10">The agent sends UB messages up to all members of its chain, up to the {a mathematical formula}Latest_Divider(Ai) (inclusive).</a>
<a href="#11" id="11">Agents in {a mathematical formula}Ai's chain will simply update their UB, except for the {a mathematical formula}Latest_Divider(Ai), who needs to sum the UB values received from each one of its children.</a>
<a href="#12" id="12">The {a mathematical formula}Latest_Divider(Ai) will then send its new UB to all members of its own chain, up to its own {a mathematical formula}Latest_Divider.</a>
<a href="#13" id="13">This process is carried out until the root is able to compute the UB of the entire problem.</a>
<a href="#14" id="14">First, when an agent receives a LB_Report message it only needs to check its constraints with a single agent, instead of every assigned agent.</a>
<a href="#15" id="15">Secondly, it means that LB_Request messages now contain only a single value assignment.</a>
<a href="#16" id="16">As a result, when an agent receives a CPA message it needs no computations, since its added cost for every value {a mathematical formula}vi is already calculated and stored at {a mathematical formula}Local_Costi(parent(Ai),vi) (marked for simplicity as {a mathematical formula}Local_Costi(vi)).</a>
<a href="#17" id="17">First, that the algorithm terminates and second, that when the algorithm terminates the cost of the complete assignment found by the algorithm is optimal.</a>
<a href="#18" id="18">To prove termination, it is enough to show that the same partial assignment will not be searched twice.</a>
<a href="#19" id="19">We can prove that recursively: First, consider the claim that an agent {a mathematical formula}Ai does not receive the same CPA from its parent twice.</a>
<a href="#20" id="20">For example, when agent {a mathematical formula}Ab (Fig.</a>
</body>
</html>