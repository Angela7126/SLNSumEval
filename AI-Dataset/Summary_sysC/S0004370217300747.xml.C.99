<html>
<head>
<meta name="TextLength" content="SENT_NUM:25, WORD_NUM:632">
</head>
<body bgcolor="white">
<a href="#0" id="0">CP provides a richer language of discrete variables with domains either given in extension or expressed in terms of upper and lower bounds, arithmetic and logical operators over these variables, and a library of ‘ global ’ constraints that capture common reasoning patterns.</a>
<a href="#1" id="1">These languages provide facilities to model parameterised classes of problems (where an individual problem instance is specified by giving values for the class parameters), such as arrays and iteration or comprehension, and to abstract away from the specific details of the many available individual constraint solvers.</a>
<a href="#2" id="2">The fourth step is to extract common subsets of terms between row constraints and (simplified) scalar product constraints.</a>
<a href="#3" id="3">For example, given the product {a mathematical formula}X×(Y+Z) and a target solver that does not allow sums inside products, the flattening process will add a new variable aux, replace the product with the new expression {a mathematical formula}X×aux and add a new constraint {a mathematical formula}aux=Y+Z.</a>
<a href="#4" id="4">Importantly, Identical CSE can reduce the search space dramatically [60], [59] by linking different constraints together thus strengthening constraint propagation in a conventional CP solver.</a>
<a href="#5" id="5">Expressions containing these operators can be rearranged to reveal common subexpressions.</a>
<a href="#6" id="6">As an example, take the following two constraints over four variables, each with domain {a mathematical formula}{0 … 10}: {a mathematical formula}w+x+y+z=6,z+y+w=5.</a>
<a href="#7" id="7">They first solve small instances of the class and use machine learning to generate hypothetical implied constraints, and then use a theorem prover to test each hypothesis and those proven correct are added to the model.</a>
<a href="#8" id="8">As a time-intensive method that works on the problem class it is quite different from our approach.</a>
<a href="#9" id="9">For the following we assume that an AC expression is represented by a set data structure with {a mathematical formula}O(1) lookup, insertion and removal.</a>
<a href="#10" id="10">Creating commonset on line 10 takes {a mathematical formula}O(nk) time.</a>
<a href="#11" id="11">Computing the domain and creating the auxiliary variable and the new constraint can be done in {a mathematical formula}O(k) time.</a>
<a href="#12" id="12">The algorithm then replaces commonset in each ls expression in {a mathematical formula}O(nk) time.</a>
<a href="#13" id="13">X-CSE differs from the existing algorithms I-CSE(-NC) in that it can extract AC-CSs that are intersections of more than two expressions and AC-CSs containing auxiliary variables (from earlier steps).</a>
<a href="#14" id="14">Thus it has a larger palette of AC-CSs to choose from.</a>
<a href="#15" id="15">To find the value of ub (lb) for a given allDifferent or GCC constraint, we find an assignment to all the relevant variables such that each variable takes a value from its domain, the sum of the assignment is maximized (minimized), and the number of occurrences of each value is within the interval permitted for the value (for AllDifferent, the interval is {a mathematical formula}{0 … 1} for every value).</a>
<a href="#16" id="16">However, when a set of identical unary constraints must be extracted by general flattening (Section 3.4), Identical CSE will reduce the number of auxiliary variables and constraints.</a>
<a href="#17" id="17">We reviewed the related work in Section 2.5.</a>
<a href="#18" id="18">As an example, suppose we have {a mathematical formula}x=y and {a mathematical formula}x ≠ y in the model.</a>
<a href="#19" id="19">We can introduce a single Boolean variable a and a new constraint {a mathematical formula}a ↔ (x=y), then replace {a mathematical formula}x=y with a and {a mathematical formula}x ≠ y with ¬a.</a>
<a href="#20" id="20">The process is repeated with rows 2 and i, giving four constraints.</a>
<a href="#21" id="21">These implied constraints are derived using an approach resembling manual AC-CSE.</a>
<a href="#22" id="22">In the first tailoring process the implied sums will be {a mathematical formula} ∑ X=136 where X is the set of variables in the row, column or subsquare.</a>
<a href="#23" id="23">In the second tailoring process some variables may be assigned and deleted, with the assigned value removed from other variables in the same row, column or subsquare.</a>
<a href="#24" id="24">Finally, the algorithm is optimised (similarly to X-CSE) by using a second hash table recording the global number of occurrences of every expression contained in a sum.</a>
</body>
</html>