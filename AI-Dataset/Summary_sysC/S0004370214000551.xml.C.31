<html>
<head>
<meta name="TextLength" content="SENT_NUM:38, WORD_NUM:886">
</head>
<body bgcolor="white">
<a href="#0" id="0">Many existing anytime search algorithms are loosely based on {a mathematical formula}WA ⁎ .</a>
<a href="#1" id="1">Since this paper addresses anytime search algorithms in depth, we next provide a brief survey of existing {a mathematical formula}WA ⁎ -based anytime search algorithms.</a>
<a href="#2" id="2">A commonly used anytime algorithm that is not related to {a mathematical formula}WA ⁎ is Depth-first branch and bound (DFBnB) [23].</a>
<a href="#3" id="3">DFBnB runs a depth-first search, pruning nodes that have a cost higher than the incumbent solution ({a mathematical formula}=best solution found so far).</a>
<a href="#4" id="4">DFBnB does not require any parameters.</a>
<a href="#5" id="5">However, DFBnB is highly ineffective in domains with many cycles and large search depth.</a>
<a href="#6" id="6">{sup:6}</a>
<a href="#7" id="7">Anytime Weighted{a mathematical formula}A ⁎ ({a mathematical formula}AWA ⁎ ) [22] is an anytime version of {a mathematical formula}WA ⁎ .</a>
<a href="#8" id="8">It runs {a mathematical formula}WA ⁎ with a given value of w until it finds the first solution.</a>
<a href="#9" id="9">Then, it continues the search with the same w. Throughout, {a mathematical formula}AWA ⁎ expands a node in OPEN with minimal {a mathematical formula}fw(n)=g(n)+w ⋅ h(n), where w is a parameter of the algorithm.</a>
<a href="#10" id="10">Each time a goal node is extracted from OPEN, an improved solution may have been found.</a>
<a href="#11" id="11">Let G denote the cost of the incumbent solution.</a>
<a href="#12" id="12">If {a mathematical formula}h( ⋅ ) is admissible, then the suboptimality of the incumbent solution can be bounded by {a mathematical formula}G/minn ∈ OPEN{g(n)+h(n)}, as G is an upper bound of the cost of an optimal solution, and {a mathematical formula}minn ∈ OPEN{g(n)+h(n)} is a lower bound of the cost of an optimal solution.</a>
<a href="#13" id="13">One might be tempted to run any of the bounded-suboptimal search algorithms.</a>
<a href="#14" id="14">However, it is not clear how to tune any of the suboptimal algorithms (for example, which weight to use in {a mathematical formula}WA ⁎ and its variants), as the cost of an optimal solution is not known and therefore the ratio between the cost of the desired solution C and the optimal cost is also unknown.</a>
<a href="#15" id="15">Resolving these two problems is beyond the scope of this paper and remains as a challenge for future work.</a>
<a href="#16" id="16">Next, we describe {a mathematical formula}APTS/ANA ⁎ , which is a non-parametric anytime search algorithm using the PTS evaluation function {a mathematical formula}u( ⋅ ).</a>
<a href="#17" id="17">In this paper we do not assume any prior knowledge on the termination time of the search, nor do we assume a given utility function that trades off computation for solution quality.</a>
<a href="#18" id="18">In the absence of these, we propose the following greedy approach to anytime search.</a>
<a href="#19" id="19">In every call to ImproveSolution, try to find a solution with cost lower than G as fast as possible.</a>
<a href="#20" id="20">It is easy to see that every such call to ImproveSolution is exactly a bounded-cost search problem, where the cost-bound C is set to be the cost of the incumbent solution (G).</a>
<a href="#21" id="21">Thus, we can use PTS in every call to ImproveSolution (line 4) with cost bound G. The resulting anytime search algorithm does not require parameter tuning (e.g., of w) and is shown empirically to be superior to other anytime search algorithms on a wide range of domains (see Section 5).</a>
<a href="#22" id="22">This anytime search algorithm, which uses PTS for its Improve Solution part, is called Anytime Potential Search (APTS).</a>
<a href="#23" id="23">As stated above, we refer to it as {a mathematical formula}APTS/ANA ⁎ to emphasize its second derivation, described later in Section 4.3.</a>
<a href="#24" id="24">However, as C approaches infinity, the node in OPEN with the highest {a mathematical formula}u(n)=C − g(n)h(n) is actually the node with the lowest {a mathematical formula}h(n).</a>
<a href="#25" id="25">Thus, as C approaches infinity, PTS converges to pure heuristic search.</a>
<a href="#26" id="26">Therefore, we define the first ImproveSolution call of {a mathematical formula}APTS/ANA ⁎ to run pure heuristic search until the first solution is found.</a>
<a href="#27" id="27">{sup:11}</a>
<a href="#28" id="28">Next, we give a different derivation of {a mathematical formula}APTS/ANA ⁎ , as a non-parametric improvement of the {a mathematical formula}ARA ⁎ anytime search algorithm.</a>
<a href="#29" id="29">There are ad hoc solutions to these limitations.</a>
<a href="#30" id="30">Instead of using {a mathematical formula}APTS/ANA ⁎ to find the first solution, it is possible to use another algorithm (e.g., Speedy search [46]) to find the first solution and provide it to {a mathematical formula}APTS/ANA ⁎ as an initial incumbent solution.</a>
<a href="#31" id="31">Additionally, the bound of the next PTS can be set to be lower than the incumbent solution by some Δ , to avoid finding too many solutions.</a>
<a href="#32" id="32">Such a Δ , however, would be a parameter of the algorithm and setting it raises the parameter tuning problem we aim to avoid.</a>
<a href="#33" id="33">We compared PTS against a range of existing anytime search algorithms: {a mathematical formula}AWA ⁎ [22], {a mathematical formula}ARA ⁎ [6] and DFBnB [23].</a>
<a href="#34" id="34">To make the comparison to PTS fair, we also modified these anytime algorithms to prune every node n with {a mathematical formula}g(n)+h(n) larger than the cost bound, as is done for PTS (line 12 in Algorithm 1).</a>
<a href="#35" id="35">Thus, DFBnB can also be viewed as a depth-first search with node pruning, where nodes with {a mathematical formula}g(n)+h(n) larger than the cost bound are pruned.</a>
<a href="#36" id="36">Next, we present experimental results to evaluate the performance of {a mathematical formula}APTS/ANA ⁎ on the same range of domains described in Section 5.1.</a>
<a href="#37" id="37">In every experiment, we ran {a mathematical formula}APTS/ANA ⁎ and the best-performing anytime search algorithms (different for each domain), and recorded the suboptimality of the incumbent solution as a function of the runtime.</a>
</body>
</html>