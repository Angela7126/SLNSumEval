<html>
<head>
<meta name="TextLength" content="SENT_NUM:18, WORD_NUM:756">
</head>
<body bgcolor="white">
<a href="#0" id="0">We contribute a learning algorithm that uses only observations of the performance of teams of two and three agents, in order to learn the agent capabilities and weighted graph structure of the weighted synergy graph.</a>
<a href="#1" id="1">The learning algorithm iterates through weighted graph structures, and computes the agent capabilities using the observations.</a>
<a href="#2" id="2">In this section, we formally define the team formation problem and our weighted synergy graph model that models the synergistic effects of agents working together in a team, and contribute our team formation algorithms that use the weighted synergy graph model to form an effective team for the task.</a>
<a href="#3" id="3">Since the performance of a team is non-deterministic, we define the Δ -optimal team: The Δ -optimal team is the team {a mathematical formula}A Δ ⁎ ⊆ A such that there exists some utility u where {a mathematical formula}A Δ ⁎ obtains a utility of at least u with probability Δ , and the probability of any other team A doing so is at most Δ :{a mathematical formula}</a>
<a href="#4" id="4">The goal is to find the Δ -optimal team of agents {a mathematical formula}A Δ ⁎ ⊆ A, and we assume that Δ is given as part of the domain information.</a>
<a href="#5" id="5">This assumption is reasonable as the effect of agents working in a team is captured by the compatibility function and their distance in the weighted synergy graph, so the variables representing their individual capabilities ({a mathematical formula}Ci,Cj) are independent.</a>
<a href="#6" id="6">Using the pairwise synergy function, we now define the performance of a team of agents: The synergy{a mathematical formula}S(A) of a set of agents {a mathematical formula}A ⊆ A in a weighted synergy graph is the average of the pairwise synergy of its components, i.e., {a mathematical formula}1(|A|2) ⋅ ∑ {ai,aj} ∈ AS2(ai,aj).</a>
<a href="#7" id="7">In this section, we explain how to use a weighted synergy graph to form the Δ -optimal team for the task, i.e., the team {a mathematical formula}A Δ ⁎ such that {a mathematical formula}P(PA Δ ⁎ ⩾ u)= Δ and {a mathematical formula}P(PA ⩾ u) ⩽ Δ ∀ A ⊆ A.</a>
<a href="#8" id="8">Using the weighted synergy graph model and the synergy equations, we can compute the synergy of a team of agents {a mathematical formula}A ⊆ A.</a>
<a href="#9" id="9">In this way, neighbor teams are generated from the current best estimate {a mathematical formula}Abest so as to effectively explore the space of possible teams of size n. The value of the neighbor team {a mathematical formula}vneighbor is computed with Evaluate, and the team is accepted or rejected based on the criteria of the approximation algorithm (e.g., simulated annealing uses a temperature schedule).</a>
<a href="#10" id="10">To evaluate both team formation algorithms, and compare their performance (amount of the search space explored, and value of the formed team), we generated random weighted synergy graphs.</a>
<a href="#11" id="11">In this section, we contribute our learning algorithm that learns a weighted synergy graph using only observations of the performance of teams of agents in {a mathematical formula}A.</a>
<a href="#12" id="12">Since any subset of agents will attain a performance value at the task, and the synergy function {a mathematical formula}S is computed from the pairwise synergy function {a mathematical formula}S2, the observation set O is sufficient for learning.</a>
<a href="#13" id="13">However, there are multiple solutions for any pairwise synergy (increasing capabilities versus decreasing distances), and {a mathematical formula}A3 provides information about the overall structure of the graph using the synergy function {a mathematical formula}S (Definition 3.8), and provides additional constraints to the learning problem.</a>
<a href="#14" id="14">The observation set O used for training, i.e., the performance of teams of two and three agents, is extracted from the hidden model, and then used to learn a new weighted synergy graph, which we compare against the hidden one.</a>
<a href="#15" id="15">On average, the learning algorithm took {a mathematical formula}20.6±0.3 seconds to perform 1000 iterations of simulated annealing to learn the weighted synergy graph with 10 agents, and was consistent across the structure types.</a>
<a href="#16" id="16">The process of this set of experiments is similar to the previous section, but we only learn the structure of the weighted and unweighted synergy graphs, and not the agent capabilities (since they are known).</a>
<a href="#17" id="17">Since the internal schemas of the participants ʼ algorithms are unknown, we treat each agent as a single schema, and estimate its cost as the average of the score of agent combinations involving it:{a mathematical formula} where a is an agent (i.e., one of the 6 algorithms), A is a team of 2 to 5 agents, and {a mathematical formula}score(A) is the score obtained in the RoboCup Rescue simulator using the agents in A to control the rescue robots.</a>
</body>
</html>