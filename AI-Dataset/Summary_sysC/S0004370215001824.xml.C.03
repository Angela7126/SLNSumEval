<html>
<head>
<meta name="TextLength" content="SENT_NUM:9, WORD_NUM:197">
</head>
<body bgcolor="white">
<a href="#0" id="0">To apply ISAC++ we also need a parametrized MaxSAT solver that we can tune.</a>
<a href="#1" id="1">The solver also scored second place for crafted partial MaxSAT instances.</a>
<a href="#2" id="2">We first show the performance of ISAC++ on partial MaxSAT instances: a benchmark set of crafted instances, one consisting of industrial instances, and finally a set that contains both crafted and industrial instances.</a>
<a href="#3" id="3">In the subsequent experiment, we built a MaxSAT solver that excels on both crafted and industrial MaxSAT instances.</a>
<a href="#4" id="4">The best performing approach is ISAC++ which solves 96% of all instances in time, closing the gap between perfect performance and the state-of-the-art in partial MaxSAT before we conducted this study by over 60%.</a>
<a href="#5" id="5">For example, at the 2013 MaxSAT Evaluation MSE13, ISAC+2013 solved instances that no other solver submitted was able to solve, using one of the parameterizations that ISAC++ had generated automatically.</a>
<a href="#6" id="6">Finally, the weighted partial MaxSAT instances number 718.</a>
<a href="#7" id="7">On plain MaxSAT, ISAC++ solves 8% more instances, 58% more on partial MaxSAT, 6% more on weighted MaxSAT, and 29% more instances on weighted partial MaxSAT instances within the timeout.</a>
<a href="#8" id="8">In Table 17 we show which solver/parametrization ISAC+2014 invoked for how many MaxSAT instances within each industrial problem family.</a>
</body>
</html>