<html>
<head>
<meta name="TextLength" content="SENT_NUM:26, WORD_NUM:625">
</head>
<body bgcolor="white">
<a href="#0" id="0">We use ConstrainProblem in Find-Acceptable-Plan (Algorithm 3), which is used to construct acyclic plans whose nondeterministic images avoid known unsolvable states.</a>
<a href="#1" id="1">Find-Acceptable-Plan's parameters consist of a nondeterministic planning domain D, its determinization {a mathematical formula}D¯, an initial state {a mathematical formula}s0, a set of goal states G, a classical planner CP, and a set U of states to avoid.</a>
<a href="#2" id="2">For example, if {a mathematical formula}D ⁎ contains two “ abstract states ” that represent the sets {a mathematical formula}S1 and {a mathematical formula}S2 above, then in {a mathematical formula}D ⁎ , NDP2 can plan how to go through d1 with only two calls to CP.</a>
<a href="#3" id="3">In this case, the solution to the planning problem is the same hyperpolicy {a mathematical formula} Π ⁎ as in Eq.</a>
<a href="#4" id="4">(1), but with {a mathematical formula}S1 and {a mathematical formula}S2 represented by abstract states rather than BDDs.</a>
<a href="#5" id="5">If s is a state and {a mathematical formula} Α ∉ s, then according to the usual classical planning semantics, Α is false in s and Α is true in the state {a mathematical formula}s ∪ { Α }.</a>
<a href="#6" id="6">If we let {a mathematical formula}s ′ =s ∪ { Α ⁎ }, then {a mathematical formula}s ′ is an abstract state that is intended to represent both of the states s and {a mathematical formula}s ∪ { Α }.</a>
<a href="#7" id="7">More generally:</a>
<a href="#8" id="8">Definition 3</a>
<a href="#9" id="9">An abstraction of a nondeterministic planning domain D is a planning domain {a mathematical formula}D ⁎ in which the set of operators is {a mathematical formula}O ⁎ ∪ Σ , where</a>
<a href="#10" id="10">{a mathematical formula}O ⁎ contains an abstraction of each planning operator o in D;</a>
<a href="#11" id="11">Having shown termination, we can now show that Find-Acceptable-Plan returns failure or returns an acyclic plan whose policy image avoids the states in U.</a>
<a href="#12" id="12">As shorthand, we call these plans U-acceptable.</a>
<a href="#13" id="13">More formally, a plan p is U-acceptable in a state s with respect to a nondeterministic domain D, its determinization {a mathematical formula}D¯, a classical planning problem {a mathematical formula}(D¯,s,G) and a set of states U if:</a>
<a href="#14" id="14">p is applicable in the state s in the classical planning domain {a mathematical formula}D¯.</a>
<a href="#15" id="15">Proof</a>
<a href="#16" id="16">The proof is by induction on the size of U.Let s be the first state added to U, which means Find-Acceptable-Plan returned failure when planning from s. Since U is empty and by Lemma 6 Find-Acceptable-Plan is complete, there is no path to a goal state from s, and so s would not be a Π -descendant of {a mathematical formula}s0 in any valid strong cyclic policy.Induct.</a>
<a href="#17" id="17">Assume U contains only states which may not appear in any strong cyclic policy.</a>
<a href="#18" id="18">Proof</a>
<a href="#19" id="19">Proof by contradiction.</a>
<a href="#20" id="20">Assume NDP2 is not complete.</a>
<a href="#21" id="21">Then there is a domain D, initial states {a mathematical formula}S0, goal set G, and strong cyclic policy Π such that {a mathematical formula}NDP2(D,S0,G,CP) returns failure, even though Π is a valid strong cyclic policy.This means Find-Acceptable-Plan returned failure from an initial state, and so there is no path to the goal which also doesn't lead to a state in U.</a>
<a href="#22" id="22">However, Π has paths from each of the initial states to the goal, and so some action along each of those paths must lead to a state in U.</a>
<a href="#23" id="23">This is a contradiction with the above lemma, that U will never contain states that appear in any strong-cyclic solution.</a>
<a href="#24" id="24">If {a mathematical formula} Π (s ′ ) is not a split-p or {a mathematical formula}merge({}) action, then {a mathematical formula}s ′ is the last state on the Π -path corresponding to s.</a>
<a href="#25" id="25">If {a mathematical formula} Π (s ′ ) is the action {a mathematical formula}merge({ … }), then {a mathematical formula} Γ (s ′ ,merge({ … })) is the next state in the Π -path corresponding to s.</a>
</body>
</html>