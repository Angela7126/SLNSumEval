<html>
<head>
<meta name="TextLength" content="SENT_NUM:27, WORD_NUM:600">
</head>
<body bgcolor="white">
<a href="#0" id="0">It requires humans to encode knowledge in the form of methods and action models.</a>
<a href="#1" id="1">Methods describe how to decompose tasks into subtasks and the preconditions under which those methods are applicable whereas action models describe how actions change the world.</a>
<a href="#2" id="2">Encoding such knowledge is a difficult and time-consuming process, even for domain experts.</a>
<a href="#3" id="3">In this paper, we propose a new learning algorithm, called HTNLearn, to help acquire HTN methods and action models.</a>
<a href="#4" id="4">HTNLearn receives as input a collection of plan traces with partially annotated intermediate state information, and a set of annotated tasks that specify the conditions before and after the tasks' completion.</a>
<a href="#5" id="5">In addition, plan traces are annotated with potentially empty partial decomposition trees that record the processes of decomposing tasks to subtasks.</a>
<a href="#6" id="6">HTNLearn outputs are a collection of methods and action models.</a>
<a href="#7" id="7">HTNLearn first encodes constraints about the methods and action models as a constraint satisfaction problem, and then solves the problem using a weighted MAX-SAT solver.</a>
<a href="#8" id="8">HTNLearn can learn methods and action models simultaneously from partially observed plan traces (i.e., plan traces where the intermediate states are partially observable).</a>
<a href="#9" id="9">We test HTNLearn in several HTN domains.</a>
<a href="#10" id="10">The experimental results show that our algorithm HTNLearn is both effective and efficient.</a>
<a href="#11" id="11">In this paper, we present a new learning algorithm, called HTNLearn, to learn HTN models for HTN planning.</a>
<a href="#12" id="12">An HTN model consists of two parts: (1) a set of HTN methods including method preconditions and method structures (i.e., the method's task and subtasks), and (2) a set of action models, each of which is associated with a precondition list, an add list and a delete list.</a>
<a href="#13" id="13">In this section, we present the algorithm for learning HTN from partial decomposition trees.</a>
<a href="#14" id="14">In particular, we first present an overview of the algorithm HTNLearn in Section 4.1, and then provide a detailed description of each step in Sections 4.2 Step 1: extract predicates and action schemas, 4.3 Step 2: build method constraints, 4.4 Step 3: build state constraints, 4.5 Step 4: build decomposition constraints, 4.6 Step 5: build task constraints, 4.7 Step 6: build hard constraints, 4.8 Step 7: solve all the constraints.</a>
<a href="#15" id="15">Decomposition constraints and task constraints enhance the learned HTN models using statistical information from the partial decomposition trees</a>
<a href="#16" id="16">In this step, we build three types of hard constraints (denoted by HC), i.e., partialness constraints, action constraints and plan constraints, to ensure that the learned HTN models are consistent with the known structures of partial decomposition trees, the STRIPS conventions and the plan traces (i.e, the leaves of the partial decomposition trees), respectively.</a>
<a href="#17" id="17">In the following we describe each type of hard constraints in detail.</a>
<a href="#18" id="18">These constraints ensure that the learned HTN models are consistent with the given partial decomposition trees.</a>
<a href="#19" id="19">Specifically, the method structures indicated in the partial decomposition trees should be reflected in the learned methods.</a>
<a href="#20" id="20">For example, given the partial decomposition tree in Fig.</a>
<a href="#21" id="21">3, the method structure 〈 (superpose ?x ?y), [(pickup ?x), stack(?x ?y)] 〉 should be learned, where ?x is a variable that is instantiated by “ A ” , and ?y is a variable that is instantiated by “ B ” in Fig.</a>
<a href="#22" id="22">3.</a>
<a href="#23" id="23">We build a set of constraints, called partialness constraints, to ensure these method structures are learned.</a>
<a href="#24" id="24">For the HTNLearn algorithm, we will evaluate the learned HTN methods and the learned action models separately.</a>
<a href="#25" id="25">First, it is possible that our HTNLearn learns more decomposition methods than that in its corresponding ground-truth model.</a>
<a href="#26" id="26">First, we would like to see how the accuracy changes when increasing number of decomposition trees are given for the case when these decomposition trees are complete.</a>
</body>
</html>