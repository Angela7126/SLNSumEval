<html>
<head>
<meta name="TextLength" content="SENT_NUM:13, WORD_NUM:549">
</head>
<body bgcolor="white">
<a href="#0" id="0">Soft Global Constraint [56]A soft global constraint, denoted by {a mathematical formula}Soft_GC Μ (S ∪ {z},A1, … ,At), is a family of hard constraints parameterized by a violation measure Μ , a scope S, a cost variable z, and possibly extra parameters {a mathematical formula}A1, … ,At.</a>
<a href="#1" id="1">Global Cost Function [48], [65]A global cost function, denoted as {a mathematical formula}W_GCF(S,A1, … ,At), is a family of cost functions parameterized by a scope S and possibly extra parameters {a mathematical formula}A1, … ,At.</a>
<a href="#2" id="2">It is possible to derive a global cost function from an existing soft global constraint {a mathematical formula}Soft_GC Μ (S ∪ {z},A1, … ,At).</a>
<a href="#3" id="3">In this case, we denote the corresponding global cost function as {a mathematical formula}W_GCF Μ .</a>
<a href="#4" id="4">A global cost function {a mathematical formula}W_GCF(S,A1, … ,At) is said to be tractable iff the problem IsBetterThan({a mathematical formula}W_GCF(S,A1, … ,At),m) is in P.</a>
<a href="#5" id="5">For a tractable global cost function {a mathematical formula}WS=W_GCF(S,A1, … ,At), the time complexity of computing {a mathematical formula}min ⁡ {WS} is bounded above by a polynomial function in the size of the input, including the scope, the corresponding domains, the other parameters of the global cost function, and {a mathematical formula}log ⁡ (m).</a>
<a href="#6" id="6">Consider the softened variant {a mathematical formula}W_AllDifferentdec(S) of the global constraint {a mathematical formula}AllDifferent(S) constraint using the decomposition violation measure where the cost of an assignment is the number of pairs of variables taking the same value [56].</a>
<a href="#7" id="7">By the assumption that extra variables belong to at least two cost functions (see paragraph below Definition 21), leaf variables necessarily belong to S. We denote by {a mathematical formula}leaf(T) the set of leaf variables in the scope T. The first type of node aims at computing the value of the cost function {a mathematical formula}WT combined with the unary cost functions on each leaf variable.</a>
<a href="#8" id="8">This computation will be performed by a family of nodes {a mathematical formula}UT ℓ , where {a mathematical formula} ℓ ∈ DT − leaf(T) is an assignment of non-leaf variables.</a>
<a href="#9" id="9">Therefore, for a given cost function {a mathematical formula}WT and a given assignment ℓ of non-leaf variables, we define a DAG node with scope {a mathematical formula}leaf(T):{a mathematical formula}These nodes will be leaf nodes of the filtering DAG.</a>
<a href="#10" id="10">{a mathematical formula}xi ∈ E or else if {a mathematical formula} ℓ [xi]=a, this leads to the following definition of {a mathematical formula} Ω Ti,a( ℓ ):{a mathematical formula}Otherwise ({a mathematical formula}xi ∈ S and {a mathematical formula} ℓ [xi] ≠ a), {a mathematical formula} Ω Ti,a( ℓ )= ⊤ .</a>
<a href="#11" id="11">This captures the fact that there is no optimal extension of ℓ that extends {a mathematical formula}(xi,a) since ℓ is inconsistent with {a mathematical formula}xi=a.If we consider the root variable {a mathematical formula}xi ∈ S of I, the {a mathematical formula} Ω ia nodes provide the cost of a best extension of any assignment ℓ (if {a mathematical formula} ℓ [xi]=a) or ⊤ otherwise.</a>
<a href="#12" id="12">An ultimate root DAG node using the aggregation operator min over all these {a mathematical formula} Ω ia will therefore return the optimal extension of {a mathematical formula} ℓ ∈ DS to all variables in {a mathematical formula}I(xi), including extra variables.From equation (4), one can see that nodes {a mathematical formula} Ω Ti,a use the aggregation operator min on intermediary nodes.</a>
</body>
</html>