<html>
<head>
<meta name="TextLength" content="SENT_NUM:12, WORD_NUM:675">
</head>
<body bgcolor="white">
<a href="#0" id="0">This procedure is not independent on the full domain, but it is easy to see that it satisfies independence when restricted to {a mathematical formula}X=Mod(ic)N. As in the previous example, in the following sections we will specify restrictions on the domain of aggregation by means of propositional formulas.</a>
<a href="#1" id="1">Let us indicate with {a mathematical formula}L ≡ the set of formulas in {a mathematical formula}LPS that are equivalent to a formula in {a mathematical formula}L. It is important to stress the fact that we consider logical equivalence inside the language {a mathematical formula}LPS, not allowing the use of additional propositional variables.</a>
<a href="#2" id="2">This in turn implies that F is not in {a mathematical formula}CR[L2], and that the two classes {a mathematical formula}CR[L1] and {a mathematical formula}CR[L2] are different.Let {a mathematical formula}|N|=n where {a mathematical formula}n=|Mod( Φ )| and let F be a procedure in {a mathematical formula}CR[L1] defined for {a mathematical formula}N.{sup:8} We claim that it is possible to modify the behaviour of F on a single profile B in order to create another procedure {a mathematical formula}F ′ that is still CR with respect to {a mathematical formula}L1 but sends the profile B of Φ -rational ballots to an outcome that does not satisfy Φ .</a>
<a href="#3" id="3">In the first part of Section 3 we have associated with any language for integrity constraints {a mathematical formula}L a class of aggregation procedures that are collectively rational with respect to all formulas in {a mathematical formula}L. Once a set of issues {a mathematical formula}I is fixed, {a mathematical formula}CR[ − ] can therefore be viewed as an operator from the set of languages for integrity constraints (i.e., subsets of {a mathematical formula}LPS closed under conjunction and logical equivalence and containing ⊤ and ⊥ ) to subsets of the class {a mathematical formula}F of all aggregation procedures for {a mathematical formula}I.</a>
<a href="#4" id="4">A partial characterisation result for this class, i.e., a list of sufficient axiomatic conditions for collective rationality with respect to negative implications, involves the axiom of independence, and can be found in our previous work [18].</a>
<a href="#5" id="5">This can be seen by observing that, in the three cases under consideration, the condition required by the axiom is a vacuous requirement outside domains defined by formulas in {a mathematical formula}L. Therefore, if a procedure satisfies an axiom on domains defined by {a mathematical formula}L then it also satisfies the same axiom on the full domain.</a>
<a href="#6" id="6">Note that this argument can be generalised to prove that the class {a mathematical formula}FL[I] (and the same holds for A, M{sup:I} and MN) cannot be characterised for any restriction given by a language {a mathematical formula}L. It is sufficient to note that the constant procedure employed in the proof of Proposition 19 is defined regardless of the domain restriction.</a>
<a href="#7" id="7">This proves that no uniform quota rule is collectively rational on both positive and negative clauses of a given size larger than 2, except for the case of n odd and {a mathematical formula}q=n+12.</a>
<a href="#8" id="8">Since {a mathematical formula} Ρ ⁎ is a mifap-assignment and therefore cannot be extended to an assignment satisfying ic, the majority rule in this profile is not collectively rational with respect to ic.</a>
<a href="#9" id="9">More importantly, it implies that {a mathematical formula}CR[k-clauses] does not contain any uniform quota rule for {a mathematical formula}k>3 when the number of issues is even, since this language includes also k-clauses where exactly half of the issues are negative and half are positive, in which case the equation does not have any solutions.</a>
<a href="#10" id="10">We end this section by proving an expected negative result for the characterisation of general languages of clauses inside the class of quota rules: {a mathematical formula}CR[k-clauses] ∩ QR= ∅ for all{a mathematical formula}k>2.</a>
<a href="#11" id="11">Recall that aggregation procedures in preference aggregation are called social welfare functions[3], and that they associate a collective preference with every profile of individual orders over a set of alternatives {a mathematical formula}X. Axiomatic properties such as those presented in Section 2.4 can be devised for social welfare functions, and we refer to the relevant literature for their precise definition [17].</a>
</body>
</html>