<html>
<head>
<meta name="TextLength" content="SENT_NUM:16, WORD_NUM:606">
</head>
<body bgcolor="white">
<a href="#0" id="0">In that work, authors present a random SAT instances generator which takes into account the scale-free structure of real-world SAT instances to generate formulas in which the number of variable occurrences follows a power-law distribution.</a>
<a href="#1" id="1">We show that this model works appropriately for different input values of number of variables n and clauses m. We also show that, if there exists a phase transition point SAT-UNSAT when the ratio clause/variable is increased, then it does not depend on the modularity.</a>
<a href="#2" id="2">The proposed model is characterized by n variables, m clauses, c clusters and a parameter p. They generate c independent 3-SAT formulas, each one having {a mathematical formula}n/c variables and {a mathematical formula}(1 − p)m/c clauses, and then add pm link clauses using the entire set of variables, in the spirit of the techniques used traditionally to generate small-world graphs.</a>
<a href="#3" id="3">In order to analyze the community structure of the SAT instances obtained with our model, we have generated some sets of random formulas for different values of {a mathematical formula}Q ∈ {0.9,0.8,0.7,0.5,0.3} (hence {a mathematical formula}p=Q+1/c), and for different values of number of communities {a mathematical formula}c ∈ {10,20,40,80}.</a>
<a href="#4" id="4">2, we analyze their modularity {a mathematical formula}Q ′ (top) and their number of communities {a mathematical formula}c ′ (bottom), varying the number of variables n, for a fixed clause/variable ratio {a mathematical formula}m/n=4 (left), and varying the clause/variable ratio {a mathematical formula}m/n, for a fixed number of variables {a mathematical formula}n=1000 (right).</a>
<a href="#5" id="5">Notice that the main goal of this experiment is to show that our model generates instances with modularity {a mathematical formula}Q ′ and number of communities {a mathematical formula}c ′ similar to the input parameters Q and c, for any number of variables n and clauses m. We use the algorithm described in [9] to compute an approximation of {a mathematical formula}Q ′ and {a mathematical formula}c ′ .</a>
<a href="#6" id="6">In a second experiment, we generate families of instances with the same number of variables n and the same clause/variable ratios {a mathematical formula}m/n than in the previous experiment, and varying the number of communities c with a fixed modularity {a mathematical formula}Q=0.8.</a>
<a href="#7" id="7">Hereinafter we use in our experiments a fixed value of number of communities {a mathematical formula}c=40, assuming that this value is representative for real application problems, and therefore without altering general conclusions observed in the empirical results.</a>
<a href="#8" id="8">In this section we check if this phenomenon also exists in the random SAT instances generated with our model, and if the new transition point, noted {a mathematical formula}r ′ , differs from the classical {a mathematical formula}r ′ ≠ r.</a>
<a href="#9" id="9">4, we represent the fraction of UNSAT instances for some sets of random formulas with distinct Q, varying the clause/variable ratio {a mathematical formula}m/n.</a>
<a href="#10" id="10">In Table 1 we report the phase transition point {a mathematical formula}r ′ we found for some families of formulas with {a mathematical formula}k=3, varying the modularity Q.</a>
<a href="#11" id="11">We observe that the phase transition point {a mathematical formula}r ′ decreases as the modularity Q increases.</a>
<a href="#12" id="12">In Table 2, we report the phase transition point {a mathematical formula}r ′ of some families of instances with {a mathematical formula}k=4.</a>
<a href="#13" id="13">Again, the phase transition point {a mathematical formula}r ′ of these families tends to decrease as the modularity Q increases.</a>
<a href="#14" id="14">In order to explain this decrease in the phase transition point {a mathematical formula}r ′ , and predict the behavior when n tends to infinity, we will consider the extreme case with {a mathematical formula}p=1.</a>
<a href="#15" id="15">These experiments suggest that the performance of the solver is affected by the structure of the formula (e.g., its community structure) independently of the sizes of the clauses.</a>
</body>
</html>