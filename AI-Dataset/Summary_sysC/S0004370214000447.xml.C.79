<html>
<head>
<meta name="TextLength" content="SENT_NUM:13, WORD_NUM:611">
</head>
<body bgcolor="white">
<a href="#0" id="0">HTNLearn can learn methods and action models simultaneously from partially observed plan traces (i.e., plan traces where the intermediate states are partially observable).</a>
<a href="#1" id="1">This problem is hard, since the information given is limited, i.e., the only knowledge provided is a set of annotated tasks that indicates conditions that must be held before and after the task is executed and a collection of plan traces, some of which might be annotated with nonempty partial decomposition trees.</a>
<a href="#2" id="2">Similarly, in this scenario, we can get a large number of logs as partial decomposition trees, and use them to learn the task relationships (HTN structures) and service behaviors (or action models), even when we do not have precise descriptions of all events happening during the web service composition process.</a>
<a href="#3" id="3">HTN-Learner can learn method preconditions and action models simultaneously, but requires that method structures be given as input; while HTNLearn, which extends from HTN-Learner, can learn method structures, method preconditions, and action models simultaneously from partially observed plan traces which are annotated with partial decomposition trees.</a>
<a href="#4" id="4">[8] present and compare two automated methods that learn relevant information from previous experience in a domain and use it to solve new problem instances by lifting partial-order macros from plans based on an analysis of causal links between successive actions.</a>
<a href="#5" id="5">[19] presented an approach implemented in a development environment for constructing and maintaining a hierarchical task model from a set of annotated examples provided by domain experts, where the task model constructed did not include preconditions or effects, i.e., without methods' preconditions, actions' preconditions or actions' effects.</a>
<a href="#6" id="6">[30] and Xu and Muñoz-Avila [66] proposed eager (in the form of version spaces) and lazy learning (in the form of case-based reasoning) algorithms respectively to learn the preconditions of HTN methods, given as input the hierarchical relationships between tasks, the action models, and a complete description of the intermediate states.</a>
<a href="#7" id="7">[27] presented an algorithm, called HTN-MAKER, to learn structures by assuming that annotated tasks are given in the form of preconditions and effects (we made the same assumption in our work).</a>
<a href="#8" id="8">A Hierarchical Task Network (HTN) planning problem can be defined as a quadruple {a mathematical formula}(s0,T,M,A), where {a mathematical formula}s0 is an initial state, which is a conjunction of propositions, T is a list of tasks that need to be accomplished, M is a set of HTN methods, which specify how a high-level task can be decomposed into a totally ordered set of lower-level subtasks, and A is a set of actions, which correspond to primitive subtasks that can be directly executed [67], [20].</a>
<a href="#9" id="9">We do this by simply scanning each partial decomposition tree in {a mathematical formula} Π part and each annotated task in {a mathematical formula}T and exploiting their relations between states and task preconditions and task effects to build {a mathematical formula}Hcand.</a>
<a href="#10" id="10">In this step, we build three types of hard constraints (denoted by HC), i.e., partialness constraints, action constraints and plan constraints, to ensure that the learned HTN models are consistent with the known structures of partial decomposition trees, the STRIPS conventions and the plan traces (i.e, the leaves of the partial decomposition trees), respectively.</a>
<a href="#11" id="11">In this setting, our learning problem is reduced to learning action models and method preconditions simultaneously, with no need to learn method structures (since method structures can be directly extracted from decomposition trees), as is done by our previous work [70].</a>
<a href="#12" id="12">To determine the importance of learning the action models and method preconditions simultaneously, we ran an experiment comparing HTNLearn against a hybrid system, that we call it {a mathematical formula}ARMS+, which first uses ARMS to learn the action models and then uses the method-based constraints to learn the method preconditions.</a>
</body>
</html>