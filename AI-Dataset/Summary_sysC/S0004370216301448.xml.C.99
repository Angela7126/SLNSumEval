<html>
<head>
<meta name="TextLength" content="SENT_NUM:17, WORD_NUM:630">
</head>
<body bgcolor="white">
<a href="#0" id="0">It is well known that, for sufficiently large m, {a mathematical formula}hm delivers perfect goal distance estimates: simply set m to the number of state variables, reasoning over all relevant conjunctions.</a>
<a href="#1" id="1">We find that the success of our techniques depends on the extent of three structural properties of the input planning task: conflict identification, the ability of forward search to quickly find conflicts and thus enable the learning in the first place; effective learning, the ability to recognize dead-ends with small conjunction sets C; and generalization, the ability of {a mathematical formula}uC to detect states {a mathematical formula}s ′ it was not refined on.</a>
<a href="#2" id="2">We refer to this transition system as the search graph, and we denote it by {a mathematical formula} Θ search.</a>
<a href="#3" id="3">We say that a state s is a known dead-end if, given the search graph – intuitively, given the search “ knowledge ” about {a mathematical formula} Θ Π so far – s must be a dead end.</a>
<a href="#4" id="4">Formally, capturing the search knowledge as the set of transition systems Θ that coincide with {a mathematical formula} Θ search on Closed, s is a known dead-end if it is a dead-end in every such Θ .</a>
<a href="#5" id="5">In what follows, like in Equation (1) we use {a mathematical formula}hC(s,G) to denote the {a mathematical formula}hC value of subgoal fact set G, i.e., the approximated cost, given the {a mathematical formula}hC relaxation of achieving G from s. Correspondingly, we use {a mathematical formula}h ⁎ (s,G) to denote the real cost of achieving G from s. The {a mathematical formula}hC recursion path on a current subgoal G is cut off by identifying a small conjunction {a mathematical formula}x ⊆ G that cannot be achieved with action sequences of length at most {a mathematical formula}hC(s,G).</a>
<a href="#6" id="6">Observe that the only reason for this is generalization, i.e., refinements of {a mathematical formula}uC on states s leading to pruning on states other than s. Without generalization, the search spaces would be identical, including tie-breaking.</a>
<a href="#7" id="7">Consider now part (B) of Table 3, which shows data supporting a performance analysis with respect to the three prerequisites for online learning to work well: (1) conflict identification, i.e., the ability of forward search to find conflicts and thus enable the learning in the first place; (2) effective learning, i.e., the ability of recognizing dead-ends with small conjunction sets C; (3) strong generalization, i.e., the ability of {a mathematical formula}uC to detect states {a mathematical formula}s ′ it was not trained on.</a>
<a href="#8" id="8">For (ii), let {a mathematical formula}c0 ′ ∈ C, {a mathematical formula}c0 ′ ⊆ x ′ be some conjunction with {a mathematical formula}uC(t,c0 ′ )= ∞ .</a>
<a href="#9" id="9">Such a conjunction must exist due to the selection of {a mathematical formula}x ′ .</a>
<a href="#10" id="10">Since {a mathematical formula}uC(t,c0 ′ )= ∞ , it directly follows that {a mathematical formula}c0 ′ ⊈ R(x ′ ,a).</a>
<a href="#11" id="11">However, {a mathematical formula}c0 ′ ⊆ x ′ , so {a mathematical formula}c0 ′ ⊆ add(a), and thus {a mathematical formula}a ∈ A[c0 ′ ].</a>
<a href="#12" id="12">Now plugging in the definition of {a mathematical formula}uC, we get from {a mathematical formula}uC(t,R(x ′ ,a))< ∞ and {a mathematical formula}R(c0 ′ ,a) ⊆ R(x ′ ,a) that {a mathematical formula}uC(t,R(c0 ′ ,a))< ∞ .</a>
<a href="#13" id="13">In other words: {a mathematical formula}uC(t,c0 ′ )< ∞ .</a>
<a href="#14" id="14">This is clearly a contradiction to the selection of {a mathematical formula}c0 ′ .</a>
<a href="#15" id="15">We conclude that there must be a conjunction {a mathematical formula}x ⊆ G that satisfies the conditions of Lemma 2.For (ii) note that in every single recursion, a new conjunction x is added to X.</a>
<a href="#16" id="16">This is true because before going into recursion on some {a mathematical formula}R(x,a), we make sure that there does not exist {a mathematical formula}x ′ ∈ X so that {a mathematical formula}x ′ ⊆ R(x,a).</a>
</body>
</html>