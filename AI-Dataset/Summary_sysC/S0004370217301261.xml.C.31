<html>
<head>
<meta name="TextLength" content="SENT_NUM:15, WORD_NUM:487">
</head>
<body bgcolor="white">
<a href="#0" id="0">In this paper, we combine the ideas of lazy heuristic evaluation and of trading off more node expansions for less heuristic computation time.</a>
<a href="#1" id="1">We introduce a new variant of {a mathematical formula}LA ⁎ called Rational Lazy{a mathematical formula}A ⁎ ({a mathematical formula}RLA ⁎ ), as well as a new variant of {a mathematical formula}LIDA ⁎ called Rational Lazy{a mathematical formula}IDA ⁎ ({a mathematical formula}RLIDA ⁎ ).</a>
<a href="#2" id="2">These new rational algorithms are based on rational metareasoning in the sense of [1], and use a myopic regret criterion to decide whether to compute {a mathematical formula}h2(n) or to bypass the computation of {a mathematical formula}h2 and expand n instead.</a>
<a href="#3" id="3">(2)surplus regular (SR) — nodes for which {a mathematical formula}h2 was computed but are still in Open when the goal was found.</a>
<a href="#4" id="4">Both {a mathematical formula}A ⁎ MAX and {a mathematical formula}LA ⁎ spend {a mathematical formula}t1+t2 time computing heuristic estimates for each of these nodes.</a>
<a href="#5" id="5">{a mathematical formula}A ⁎ MAX inserts each of these nodes to the open list, for an extra {a mathematical formula}to time, while {a mathematical formula}LA ⁎ inserts each of these nodes into the open list twice, and removes them once, for an extra {a mathematical formula}3to time.</a>
<a href="#6" id="6">(3)surplus good (SG) — nodes for which only {a mathematical formula}h1 was computed when the goal was found.</a>
<a href="#7" id="7">{a mathematical formula}A ⁎ MAX spends {a mathematical formula}t1+t2 time computing heuristic estimates for each of these nodes, and {a mathematical formula}to time inserting each of them into the open list.</a>
<a href="#8" id="8">On the other hand, {a mathematical formula}LA ⁎ only spends {a mathematical formula}t1 time computing heuristic estimates for each of these nodes, as well as an extra {a mathematical formula}to time inserting each of them into the open list.</a>
<a href="#9" id="9">{a mathematical formula}LA ⁎ provides a very strong guarantee, of expanding the same set of nodes as {a mathematical formula}A ⁎ MAX.</a>
<a href="#10" id="10">While {a mathematical formula}LIDA ⁎ can potentially result in extra iterations, it is also guaranteed to expand the same set of nodes as {a mathematical formula}IDA ⁎ with the maximum of the two heuristics.</a>
<a href="#11" id="11">However, often we would prefer to expand more nodes, if it means reducing search time [13].</a>
<a href="#12" id="12">This will be possible, for example, if we skip the computation of {a mathematical formula}h2 for a given node n and expand it whenever we believe that expanding it and generating its children will consume less CPU time than calculating {a mathematical formula}h2(n).</a>
<a href="#13" id="13">We now present Rational Lazy{a mathematical formula}A ⁎ ({a mathematical formula}RLA ⁎ ) as well as Rational Lazy{a mathematical formula}IDA ⁎ ({a mathematical formula}RLIDA ⁎ ) — two algorithms which attempt to optimally manage this tradeoff, based on the principle of rational metareasoning.</a>
<a href="#14" id="14">Examining the geometric mean of the number of expanded nodes in each search algorithm (Table A.21 provides per-domain results), we can see that, {a mathematical formula}IDA ⁎ MAX has the fewest expanded nodes, and {a mathematical formula}LIDA ⁎ is very close.</a>
</body>
</html>