<html>
<head>
<meta name="TextLength" content="SENT_NUM:19, WORD_NUM:361">
</head>
<body bgcolor="white">
<a href="#0" id="0">A program P and a set {a mathematical formula}M ⊆ at(P).</a>
<a href="#1" id="1">A program P and an atom {a mathematical formula}a ∈ at(P).</a>
<a href="#2" id="2">A program P and an atom {a mathematical formula}a ∈ at(P).</a>
<a href="#3" id="3">Let {a mathematical formula}C be a class of programs.</a>
<a href="#4" id="4">A set X of atoms is a strong{a mathematical formula}C-backdoor of a program P if {a mathematical formula}P Τ ∈ C for all truth assignments {a mathematical formula} Τ ∈ 2X.</a>
<a href="#5" id="5">Let {a mathematical formula}C be a class of programs.</a>
<a href="#6" id="6">A set X of atoms is a deletion{a mathematical formula}C-backdoor of a program P if {a mathematical formula}P − X ∈ C.</a>
<a href="#7" id="7">A program P, a strong {a mathematical formula}C-backdoor X of P and a set {a mathematical formula}M ⊆ at(P).</a>
<a href="#8" id="8">The negation dependency graph{a mathematical formula}NP is the graph defined on the set of atoms of the given program P, where two distinct atoms {a mathematical formula}x,y are joined by an edge xy if there is a rule {a mathematical formula}r ∈ P with {a mathematical formula}x ∈ H(r) and {a mathematical formula}y ∈ H(r) ∪ B − (r).</a>
<a href="#9" id="9">2 visualizes the negation dependency graph {a mathematical formula}NP of the program P of Example 2.1.</a>
<a href="#10" id="10">All the problems in{a mathematical formula}AspFullare fixed-parameter tractable when parameterized by the size of a smallest strongHorn-backdoor of the given program.</a>
<a href="#11" id="11">3 visualizes the dependency digraph {a mathematical formula}DP and the dependency graph {a mathematical formula}Up of the program P of Example 2.1.</a>
<a href="#12" id="12">A cycle of P is a cycle in the dependency graph {a mathematical formula}UP.</a>
<a href="#13" id="13">If we have two programs {a mathematical formula}P ⊆ P ′ , then clearly the dependency (di)graph of P is a sub(di)graph of the dependency (di)graph of {a mathematical formula}P ′ .</a>
<a href="#14" id="14">We define the following programs:{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}</a>
<a href="#15" id="15">Consider program{a mathematical formula}P34n.</a>
<a href="#16" id="16">Since{a mathematical formula}P34n − {a}contains no even cycle,{a mathematical formula}dbno-EC(P34n) ≤ 1.</a>
<a href="#17" id="17">Consider program{a mathematical formula}P7n.</a>
<a href="#18" id="18">For each{a mathematical formula}L ∈ AspReason,{a mathematical formula}LNis NP-hard, even for programs that have dependency treewidth 2.</a>
</body>
</html>