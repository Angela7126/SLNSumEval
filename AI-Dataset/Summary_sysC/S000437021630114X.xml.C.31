<html>
<head>
<meta name="TextLength" content="SENT_NUM:54, WORD_NUM:1060">
</head>
<body bgcolor="white">
<a href="#0" id="0">As introduced in Section 3, the image operation is used to compute the set of successor states.</a>
<a href="#1" id="1">This is often the most time-consuming process in symbolic search, so it is important to perform it as efficiently as possible.</a>
<a href="#2" id="2">In this section we study the related work on image computation and propose three different image computation methods for symbolic search in planning.</a>
<a href="#3" id="3">Our first method, {a mathematical formula}TR1+, avoids using the set of auxiliary variables {a mathematical formula}x ′ when using a TR per operator.</a>
<a href="#4" id="4">Then, we present the {a mathematical formula}CT method whose goal is to improve how the operator preconditions are matched.</a>
<a href="#5" id="5">Finally, we discuss the {a mathematical formula}UT method, other disjunctive partitioning criteria to represent the TRs.</a>
<a href="#6" id="6">In symbolic search planning, operators are described in the transition relations (TRs).</a>
<a href="#7" id="7">A TR is a relation between predecessor and successor states, i.e., it represents all the pairs of states {a mathematical formula} 〈 s,s ′ 〉 such that {a mathematical formula}s ′ =o(s) for an operator o represented by the TR.</a>
<a href="#8" id="8">Thus, if sets of states are described as functions over the set of variables x, TRs also use a set of auxiliary variables, {a mathematical formula}x ′ , to represent successor states.</a>
<a href="#9" id="9">{sup:2} In the BDD variable ordering variables from x and {a mathematical formula}x ′ are alternated ({a mathematical formula}x1,x1 ′ ,x2,x2 ′ , … ,xn,xn ′ ) as proposed, e.g., by Burch et al.</a>
<a href="#10" id="10">[41].</a>
<a href="#11" id="11">This ordering is logical because {a mathematical formula}xi and {a mathematical formula}xi ′ are closely related since for any operator o with {a mathematical formula}vi ∉ Veff(o), {a mathematical formula}xi ′ is assigned the value of {a mathematical formula}xi.</a>
<a href="#12" id="12">In symbolic search the operators are not applied over a single state but rather over sets of states.</a>
<a href="#13" id="13">Nevertheless, operators only need to be applied over states that satisfy the corresponding conditions.</a>
<a href="#14" id="14">We take advantage of this by precomputing the subset of states relevant to a given TR prior to the image operation.</a>
<a href="#15" id="15">This is done by splitting the original set of states into subsets as the successor tree is traversed.</a>
<a href="#16" id="16">This way, the subset on which a TR, {a mathematical formula}To is applied once a leaf node is reached is the subset of states that satisfy {a mathematical formula}pre(o).</a>
<a href="#17" id="17">We call this method {a mathematical formula}CT.</a>
<a href="#18" id="18">A state is valid if and only if satisfies all the constraints.</a>
<a href="#19" id="19">Invalid states that violate a constraint can be pruned during the search since they are either unreachable or dead ends.</a>
<a href="#20" id="20">By definition, reachability constraints cannot possibly prune any state in forward search.</a>
<a href="#21" id="21">Similarly, relevance constraints are not useful in backward search.</a>
<a href="#22" id="22">An operator is valid if it is consistent with the constraints, i.e., exist s, {a mathematical formula}s ′ s.t.</a>
<a href="#23" id="23">{a mathematical formula}o(s)=s and {a mathematical formula}s,s ′ ⊨ c.</a>
<a href="#24" id="24">Invalid operators are removed in a preprocessing step so we assume all operators to be valid.</a>
<a href="#25" id="25">Pruning spurious states has been considered essential for backward search since long ago [7].</a>
<a href="#26" id="26">The use of mutexes in explicit-state search is straightforward: simply prune every (partial) state s such that facts {a mathematical formula}fi,fj ∈ s are mutex.</a>
<a href="#27" id="27">Despite the impact of state invariants in explicit-state regression, they have not been employed in symbolic search.</a>
<a href="#28" id="28">Although it is obvious that a per state application of mutexes in symbolic search is not practical, there are alternatives.</a>
<a href="#29" id="29">In particular, we propose creating a BDD that represents in a succinct way all the states that are valid according to the state invariants.</a>
<a href="#30" id="30">This BDD, that we call the constraint BDD (cBDD), can be used to discard all the invalid states that have been generated during the search.</a>
<a href="#31" id="31">All constraints must hold in valid states so cBDD results from the conjunction of all the constraints.</a>
<a href="#32" id="32">Formally, if M is the set of binary mutexes found by {a mathematical formula}h2 and {a mathematical formula}Ig the set “ exactly-1 ” invariant groups:{a mathematical formula}</a>
<a href="#33" id="33">Encoding constraints in the TRs.</a>
<a href="#34" id="34">In Section 5.3, we identified which subset of constraints must be encoded in the TR of each operator to guarantee that no invalid state is generated, given that the predecessor set of states does not contain invalid states.</a>
<a href="#35" id="35">For symbolic PDBs, full constraints are treated as in the case of the original search, getting the same guarantees of not generating any invalid abstract states.</a>
<a href="#36" id="36">This suffices to perform the first type of pruning, as with the {a mathematical formula}MBDD approach.</a>
<a href="#37" id="37">However, in the abstract search the predecessor set of states may contain invalid states.</a>
<a href="#38" id="38">In PDBs the value of abstracted variables is undefined, so abstract states correspond to partial states.</a>
<a href="#39" id="39">Consider the set of states associated to an abstract state, {a mathematical formula}Si Α , that corresponds to all the possible assignments that the abstracted variables may take.</a>
<a href="#40" id="40">Table 2 shows the impact of using state-invariant constraints to prune symbolic bidirectional uniform-cost search.</a>
<a href="#41" id="41">Our baseline is the original Gamer planner that does not use state-invariant pruning.</a>
<a href="#42" id="42">The rest of the configurations prune all the states that violate any invariant found by the preprocessor and they only differ on how the constraints are encoded.</a>
<a href="#43" id="43">{a mathematical formula}MBDD1k and {a mathematical formula}MBDD100k encode the constraints as BDDs with a maximum number of nodes of 1000 and 100 000, respectively.</a>
<a href="#44" id="44">In e-del and edel{sup:+} constraints are encoded directly in the TRs.</a>
<a href="#45" id="45">edel{sup:+} include all discovered constraints in the TR of each operator and e-del encodes only the necessary constraints for each operator.</a>
<a href="#46" id="46">Do our techniques improve{a mathematical formula}BDDA ⁎ ?</a>
<a href="#47" id="47">Image computation methods improve {a mathematical formula}BDDA ⁎ as much as bidirectional symbolic uniform-cost search.</a>
<a href="#48" id="48">This reveals that the advantage of the new image computation methods is not limited to a particular algorithm.</a>
<a href="#49" id="49">State-invariant constraints also help, but less than in bidirectional symbolic uniform-cost search.</a>
<a href="#50" id="50">The overall results again show that the use of state invariants helps to improve results of {a mathematical formula}A ⁎ as well.</a>
<a href="#51" id="51">However, the benefits are not as stable as in the case of uniform-cost search.</a>
<a href="#52" id="52">Even though pruning invalid states ({a mathematical formula}MBDD100k) increases total coverage, it decreases the coverage in 9 domains with respect to the version without invalid state pruning ({a mathematical formula}M ∅ ).</a>
<a href="#53" id="53">In order to find out whether the performance loss is caused by the abstract searches that generate the heuristic or the {a mathematical formula}A ⁎ search, we analyze the quality of the heuristic used.</a>
</body>
</html>