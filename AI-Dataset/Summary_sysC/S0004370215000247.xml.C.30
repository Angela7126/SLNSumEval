<html>
<head>
<meta name="TextLength" content="SENT_NUM:30, WORD_NUM:777">
</head>
<body bgcolor="white">
<a href="#0" id="0">The theoretical framework is composed of a planning language, tasks, operators, task networks, methods, planning problem and solution.</a>
<a href="#1" id="1">The HTN planning language is a first-order language that contains several mutually disjoint sets of symbols.</a>
<a href="#2" id="2">HTN planning problemAn HTN planning problem{a mathematical formula}P is a tuple {a mathematical formula}(Q,O,M,tn0,s0), where</a>
<a href="#3" id="3">HTN planners allow tasks with variables to be inserted into a task network.</a>
<a href="#4" id="4">The first type of space consists of task networks and task decompositions as evolutions from one task network to another.</a>
<a href="#5" id="5">Given an HTN planning problem {a mathematical formula}P, at the beginning of the search, a task decomposition is imposed on the initial task network {a mathematical formula}tn0, and the process continues by repeatedly decomposing tasks from a newly created task network until a primitive task network is produced.</a>
<a href="#6" id="6">A linearisation of this primitive task network executable in the initial state {a mathematical formula}s0 represents a solution to {a mathematical formula}P.</a>
<a href="#7" id="7">In the first type of search space, the initial task network is reduced to a primitive task network that constitutes a solution to the planning problem.</a>
<a href="#8" id="8">At each point in the space, the task network can be seen as a partially specified plan until the search reaches the point where the task network is primitive and represents a solution plan.</a>
<a href="#9" id="9">Thus, we employ the term plan space to refer to this type of search space.</a>
<a href="#10" id="10">We refer to HTN planners that search in this plan space as plan-based HTN planners, and to the model of HTN planning as plan-based HTN planning.</a>
<a href="#11" id="11">For the obvious reasons, we employ the term state space to refer to the second type of search space.</a>
<a href="#12" id="12">We refer to HTN planners searching in this space as state-based HTN planners, and to the model of HTN planning as state-based HTN planning.</a>
<a href="#13" id="13">Executable task networkGiven an HTN planning problem {a mathematical formula}P, {a mathematical formula}tn=(T, Φ , Ψ ) is executable in state s, if and only if it is primitive and there exists linearisation of its tasks {a mathematical formula}t1, … ,tn that is compatible with Ψ and the corresponding sequence of operators {a mathematical formula} Φ (t1), … , Φ (tn) is executable in s.</a>
<a href="#14" id="14">SolutionLet {a mathematical formula}P be an HTN planning problem.</a>
<a href="#15" id="15">A task network {a mathematical formula}tns is a solution to {a mathematical formula}P, if and only if {a mathematical formula}tns is executable in {a mathematical formula}s0, and {a mathematical formula}tn0 → D ⁎ tns for {a mathematical formula}tns being a solution to {a mathematical formula}P.</a>
<a href="#16" id="16">A task network tn in state-based HTN planning is less expressive than the one in plan-based HTN planning.</a>
<a href="#17" id="17">That is, tn does not allow multiple occurrences of a same task in the partial ordering of tasks.</a>
<a href="#18" id="18">SolutionLet {a mathematical formula}P be an HTN planning problem.</a>
<a href="#19" id="19">The sequence {a mathematical formula}o1, … ,on is a solution to {a mathematical formula}P, if and only if there exists a task {a mathematical formula}t ∈ T0, where {a mathematical formula}tn0= 〈 To, ≺ 0 〉 , such that {a mathematical formula}(t,t ′ ) ∈ ≺ 0 for all {a mathematical formula}t ′ ∈ T0 and</a>
<a href="#20" id="20">Given an HTN planning problem {a mathematical formula}P, we define each as follows.</a>
<a href="#21" id="21">HTN planning assumes an initial task network {a mathematical formula}tn0 to be accomplished as an objective for {a mathematical formula}P. In its simplest form, {a mathematical formula}tn0 does not allow to specify conditions to be satisfied in some intermediate state during or in the final state of the execution of the solution to {a mathematical formula}P. Extended goals enable to express a planning objective in a way that its satisfaction could be on a part, on the whole trajectory of the solution, or in the final state.</a>
<a href="#22" id="22">Solution flexibility defines the ordering of operators in the solution to a planning problem.</a>
<a href="#23" id="23">Let {a mathematical formula}P be an HTN planning problem.</a>
<a href="#24" id="24">The solution to {a mathematical formula}P is flexible if it is partially ordered.</a>
<a href="#25" id="25">Let {a mathematical formula}P be an HTN planning problem.</a>
<a href="#26" id="26">An HTN planner is sound if every plan it gives is a correct solution to {a mathematical formula}P.</a>
<a href="#27" id="27">Let {a mathematical formula}P be an HTN planning problem.</a>
<a href="#28" id="28">An HTN planner is complete if it always finds a solution to {a mathematical formula}P when such a solution exists.</a>
<a href="#29" id="29">Let {a mathematical formula}P be an HTN planning problem and Π be a solution to {a mathematical formula}P. An HTN planner is said to tolerate faults from a fault set F during the execution of Π iff for each {a mathematical formula}f ∈ F, there exists a sequence of operators {a mathematical formula} Π f such that {a mathematical formula} Π f is a solution to {a mathematical formula}P.</a>
</body>
</html>