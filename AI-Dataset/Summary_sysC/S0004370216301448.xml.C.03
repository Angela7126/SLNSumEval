<html>
<head>
<meta name="TextLength" content="SENT_NUM:45, WORD_NUM:636">
</head>
<body bgcolor="white">
<a href="#0" id="0">Nevertheless, as C becomes larger, recomputing {a mathematical formula}uC on every search state may cause substantial runtime overhead.</a>
<a href="#1" id="1">{a mathematical formula}S=2F is the set of all possible states.</a>
<a href="#2" id="2">{a mathematical formula}T ⊆ S×A×S is the set of transitions.</a>
<a href="#3" id="3">all those {a mathematical formula}s ∈ S where {a mathematical formula}G ⊆ s.</a>
<a href="#4" id="4">A plan for Π is a plan for {a mathematical formula}I.</a>
<a href="#5" id="5">The initial state is {a mathematical formula}I={t(l2),p1(l1),p2(l3),f(5)}.</a>
<a href="#6" id="6">The goal is {a mathematical formula}G={p1(l3),p2(l1)}.</a>
<a href="#7" id="7">The interpretation of {a mathematical formula}u(s)= ∞ will be “ dead-end ” , that of {a mathematical formula}u(s)=0 will be “ don't know ” .</a>
<a href="#8" id="8">This is to preserve optimality/completeness when pruning states where {a mathematical formula}u(s)= ∞ .</a>
<a href="#9" id="9">That will be recognized by {a mathematical formula}uC of course.</a>
<a href="#10" id="10">Having finished the {a mathematical formula}uC refinement on {a mathematical formula}s3, we call the clause learning on {a mathematical formula}s3.</a>
<a href="#11" id="11">First, say that {a mathematical formula}R[s] ⊆ Closed.</a>
<a href="#12" id="12">To see this, let {a mathematical formula}t ′ be such a state.</a>
<a href="#13" id="13">As refinement methods for the latter are not available at the time of writing, we will refine {a mathematical formula}uC only.</a>
<a href="#14" id="14">We now tackle the refinement step in Algorithm 1, Algorithm 2, for the dead-end detector {a mathematical formula}uC.</a>
<a href="#15" id="15">{a mathematical formula}uC ∪ X(s)= ∞ for all {a mathematical formula}t ∈ R[s].</a>
<a href="#16" id="16">At the end of the refinement on a dead-end state s, we will have {a mathematical formula}hC(s)=uC(s)= ∞ .</a>
<a href="#17" id="17">We initialize {a mathematical formula}x:=c.</a>
<a href="#18" id="18">Neighbors refinement assumes as input a set {a mathematical formula}S ˆ of dead-end states that satisfies the {a mathematical formula}uC-recognized neighbors property.</a>
<a href="#19" id="19">{a mathematical formula}s → t.</a>
<a href="#20" id="20">The neighbor states are {a mathematical formula}T ˆ ={s4,s5}.</a>
<a href="#21" id="21">Say now that s is any state in {a mathematical formula}S ˆ .</a>
<a href="#22" id="22">We need to find X so that {a mathematical formula}uC ∪ X(s)=uC ∪ X(s,G)= ∞ .</a>
<a href="#23" id="23">Now, we already know that the states {a mathematical formula}s ∈ S ˆ are dead-ends.</a>
<a href="#24" id="24">But then, in particular we have that {a mathematical formula}uC(t,x)= ∞ .</a>
<a href="#25" id="25">Given this, we must also have that {a mathematical formula}uC(t,R(x,a))= ∞ , i.e., {a mathematical formula}uC(t,G)= ∞ .</a>
<a href="#26" id="26">Assume for contradiction that there is a state {a mathematical formula}s ∈ S ˆ where {a mathematical formula}h ⁎ (s,x)< ∞ .</a>
<a href="#27" id="27">Consider the call to the sub-procedure, {a mathematical formula}Extract({p1(l3),p2(l2)}).</a>
<a href="#28" id="28">So we return {a mathematical formula}x={p1(l3)}.</a>
<a href="#29" id="29">Consider any state s where {a mathematical formula}uC(s)= ∞ .</a>
<a href="#30" id="30">We start with {a mathematical formula}s ′ :=s.</a>
<a href="#31" id="31">Consider again our running example, and the clause learning on state {a mathematical formula}s4 from Fig.</a>
<a href="#32" id="32">So we set {a mathematical formula}s ′ :=s ′ ∪ {p2(l1),p2(l2)}.</a>
<a href="#33" id="33">So we set {a mathematical formula}s ′ :=s ′ ∪ {p2(l2)}.</a>
<a href="#34" id="34">For dead-end detection, we refine {a mathematical formula}uC on the initial state until a size bound N is reached.</a>
<a href="#35" id="35">Then we use the same set C for {a mathematical formula}uC dead-end detection throughout the search.</a>
<a href="#36" id="36">We finally run offline learning with a size bound x to generate static {a mathematical formula}uC dead-end detectors.</a>
<a href="#37" id="37">We run search with {a mathematical formula}h1 as a canonical dead-end detector.</a>
<a href="#38" id="38">Compared to the baselines, DFS without learning has basically the same coverage as search with {a mathematical formula}h1, which makes sense as both use the same dead-end detector throughout.</a>
<a href="#39" id="39">Consider a recursive call {a mathematical formula}PathCutRefine(G,n).</a>
<a href="#40" id="40">If {a mathematical formula}hC(s,c)>n, then clearly {a mathematical formula}hC(s,x)>n and the claim follows.</a>
<a href="#41" id="41">This is a contradiction to the selection of {a mathematical formula}x ′ .</a>
<a href="#42" id="42">In other words: {a mathematical formula}uC(t,c0 ′ )< ∞ .</a>
<a href="#43" id="43">This is clearly a contradiction to the selection of {a mathematical formula}c0 ′ .</a>
<a href="#44" id="44">This shows that {a mathematical formula}hC ∪ X(s,x)= ∞ for every {a mathematical formula}x ∈ X, and for every state {a mathematical formula}s ∈ S ˆ , and thus {a mathematical formula}uC(s)= ∞ for every {a mathematical formula}s ∈ S ˆ .</a>
</body>
</html>