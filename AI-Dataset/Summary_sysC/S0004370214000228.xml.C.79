<html>
<head>
<meta name="TextLength" content="SENT_NUM:13, WORD_NUM:517">
</head>
<body bgcolor="white">
<a href="#0" id="0">Finally, we describe how to extend our method to all formulas in {a mathematical formula} Σ -CTL, and how to add states to the signature Σ if the input formula is not satisfiable by any Σ -model.</a>
<a href="#1" id="1">Note that {a mathematical formula}S+(M,S ″ ) is not a model over Σ , i.e., {a mathematical formula}S+(M,S ″ ) ∉ K Σ .</a>
<a href="#2" id="2">Below, we give a precise definition of what we regard as an acceptable modification of a model {a mathematical formula}M w.r.t.</a>
<a href="#3" id="3">Intuitively, {a mathematical formula}XUpdprot((M,P),s, Φ ) finds models for Φ at state s by modifying {a mathematical formula}M and respecting the protection P. The initial call to {a mathematical formula}XUpdprot may use the empty protection {a mathematical formula}P ⊥ .</a>
<a href="#4" id="4">In this case, and assuming that {a mathematical formula}n=| Φ |, we can extend our model update procedure so as to be able to add states to {a mathematical formula}M until {a mathematical formula}XUpdprot[(M,P),s, Φ ] ≠ ∅ or {a mathematical formula}|SM|>n8n.</a>
<a href="#5" id="5">The option -cN helped both {a mathematical formula}Upd1 and {a mathematical formula}Updprot to limit the search for solutions to models that result from applying at most N changes to the input model.</a>
<a href="#6" id="6">For instance, we gave {a mathematical formula}Updprot a complete CTL specification of the input model, together with (1), reducing the number of produced models to zero (the reason is that (1) is not only false in the model, it is also inconsistent with the specification).</a>
<a href="#7" id="7">Since the advantages these authors find over Zhang and Ding's model-update method do not depend on the inner workings of such a method, it seems fair to conclude that Guerra and Wassermann's algorithm would also be preferable to ours for model revision if {a mathematical formula}Updprot were substituted for CTLUpdate.</a>
<a href="#8" id="8">The application of {a mathematical formula}XUpdprot to a protected model {a mathematical formula}(M,P) should produce protected models {a mathematical formula}(M ′ ,P ′ ) such that {a mathematical formula}P ′ is “ greater than or equal to ” P. Therefore, we start by defining a partial order on protections suitable for model update.</a>
<a href="#9" id="9">If we assume that models computed by {a mathematical formula}XUpdprot are exactly modifications of the input model, i.e., for all {a mathematical formula}(M,P) ∈ KP Σ , {a mathematical formula}s ∈ SM, and {a mathematical formula} Φ ∈ Σ -XCTL, {a mathematical formula}XUpdprot[(M,P),s, Φ ]=Modif((M,P),s, Φ ), then the following theorem formalizes, in a sense, that {a mathematical formula}XUpdprot is sound and complete.</a>
<a href="#10" id="10">To define the size of a model in {a mathematical formula}KP Σ , we note that it is common to consider that the states of a model are vectors whose components correspond to variable values.</a>
<a href="#11" id="11">In addition, some parts of {a mathematical formula}Updprot depend not only on the states of input model but also on the model transitions.</a>
<a href="#12" id="12">On the other hand, the application of {a mathematical formula}Updprot to {a mathematical formula} Ψ fix implies the recursive application of {a mathematical formula}XUpdprot to Ψ at a state {a mathematical formula}s ′ , where {a mathematical formula}s ′ is a successor of s (obtained from {a mathematical formula}RM with cost m).</a>
</body>
</html>