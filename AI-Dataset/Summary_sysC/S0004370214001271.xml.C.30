<html>
<head>
<meta name="TextLength" content="SENT_NUM:19, WORD_NUM:410">
</head>
<body bgcolor="white">
<a href="#0" id="0">An underlying planner, such as {a mathematical formula}A ⁎ , is then employed to find an optimal path in the search space.</a>
<a href="#1" id="1">When the underlying planner encounters a robot – robot collision, the involved robots are permitted to diverge from their individual policies, locally increasing the dimensionality of the search space.</a>
<a href="#2" id="2">In the region of increased dimensionality, planning is conducted as a search over the joint actions of the robots involved in the collision, i.e.</a>
<a href="#3" id="3">coupled planning for those robots.</a>
<a href="#4" id="4">In this section the {a mathematical formula}M ⁎ algorithm will be described in detail.</a>
<a href="#5" id="5">{a mathematical formula}M ⁎ is an implementation of subdimensional expansion for multirobot path planning when the configuration space of each robot can be described by a graph.</a>
<a href="#6" id="6">Next, assume that an optimal collision-free path from {a mathematical formula}vs to {a mathematical formula}vf exists, i.e.</a>
<a href="#7" id="7">the configuration graph G contains an optimal path {a mathematical formula} Π ⁎ (vs,vf).</a>
<a href="#8" id="8">If an optimal path exists,{a mathematical formula}M ⁎ will find the optimal path in finite time if one of two cases always hold</a>
<a href="#9" id="9">The search graph{a mathematical formula}Gschcontains an optimal path,{a mathematical formula} Π ⁎ (vs,vf).</a>
<a href="#10" id="10">If the search graph{a mathematical formula}Gschcontains an optimal path (i.e.</a>
<a href="#11" id="11">case 1 holds),{a mathematical formula}M ⁎ will find the optimal path, unless case 2 also holds.</a>
<a href="#12" id="12">If the configuration graph contains an optimal path{a mathematical formula} Π ⁎ (vk,vf), then{a mathematical formula} ∀ Ω ⊂ I,{a mathematical formula}g( Π Ω ′ (vk,vf)) ≤ g( Π ⁎ (vk,vf).</a>
<a href="#13" id="13">Furthermore, if{a mathematical formula} Ω 1 ⊂ Ω 2, then{a mathematical formula}g( Π Ω 1 ′ (vk,vf)) ≤ g( Π Ω 2 ′ (vk,vf)).</a>
<a href="#14" id="14">If the configuration graph G does not contain an optimal path, then {a mathematical formula}M ⁎ will terminate in finite time without returning an invalid path (Lemma 1).</a>
<a href="#15" id="15">If G does contain an optimal path, then the search graph must always contain either the optimal path, or an unexplored path which costs no more than the optimal path (Lemma 7), which implies that then {a mathematical formula}M ⁎ will find the optimal path in finite time (Lemma 2).</a>
<a href="#16" id="16">{a mathematical formula}M ⁎ will thus find the optimal path in finite time, if one exists, or terminate in finite time if no path exists.</a>
<a href="#17" id="17">Therefore, {a mathematical formula}M ⁎ is complete and optimal.</a>
<a href="#18" id="18">The mean path cost and mean makespan (time until all robots reach their goals) of paths found by PPAS and {a mathematical formula}M ⁎ variants are shown in Fig.</a>
</body>
</html>