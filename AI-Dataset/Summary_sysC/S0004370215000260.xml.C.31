<html>
<head>
<meta name="TextLength" content="SENT_NUM:23, WORD_NUM:839">
</head>
<body bgcolor="white">
<a href="#0" id="0">While expected applications of Modular Robotic Systems (MRS) span various workspaces, scales, and structures, practical implementations of such systems lag behind their potentials in performing real-world tasks.</a>
<a href="#1" id="1">Challenges of enhancing MRS capabilities not only are limited to designing reliable, responsive, and robust hardware, but also include developing software and algorithms that can effectively fulfill tasks through performing fundamental functions like shape-formation, locomotion, manipulation, etc.</a>
<a href="#2" id="2">Thus, MRS solution methods must be able to resolve problems arising from the tightly-coupled kinematics of interconnected modules and their inherent limitations in resources, communication, connection strength, etc.</a>
<a href="#3" id="3">in performing such functions through domain-specific operations including Self-reconfiguration, Flow, Gait, Self-assembly, Self-disassembly, Self-adaptation, Grasping, Collective actuation, and Enveloping.</a>
<a href="#4" id="4">Despite the large number of developed solution methods, there is no inclusive and updated study in the literature dedicated to classifying, analyzing, and comparing their specifications and capabilities in a systematic manner.</a>
<a href="#5" id="5">This paper aims to fill in this gap through reviewing 64 solution methods and algorithms according to their application in each operation and by investigating their capabilities in (1) modeling and simplifying MRS problems through Abstraction methods, (2) solving MRS problems through Solution and Control methods, and (3) coordinating actions of modules through Synchronization methods.</a>
<a href="#6" id="6">While existing review or survey papers on modular robotics have mainly tackled the architecture and hardware aspects of modular robots, in this paper, we particularly focus on solutions to the challenging problems arisen when developing software components for modular robots.</a>
<a href="#7" id="7">In other words, we study the algorithms and solution methods that have been developed in the context of modular robotics for tackling problems that emerge when modular robots perform tasks through some fundamental functions such as shape-formation to form a desired configuration from an initial configuration, locomotion for moving from a place to another, manipulation for physical interaction with the objects, supporting and balancing for shoring up unstable objects, etc.</a>
<a href="#8" id="8">Instead of categorizing solution methods to these problems merely by their underlying technical and theoretical aspects, we have organized them according to their contribution toward performing nine basic operations performable by modular robots, namely (1) Self-reconfiguration, (2) Flow, (3) Gait, (4) Self-assembly, (5) Self-disassembly, (6) Self-adaptation, (7) Grasping, (8) Collective actuation, and (9) Enveloping.</a>
<a href="#9" id="9">While there is no guideline that prescribes to consider these operations as basic and underlying, we have deduced such a categorization based on reports on various experiments, success stories, and recommendations in the MRS literature.</a>
<a href="#10" id="10">The rationale behind is that these low-level operations can serve as building blocks for generating high-level behaviors such as shape-formation, locomotion, manipulation, supporting and balancing.</a>
<a href="#11" id="11">For example, reaching a desired shape (shape-formation) can be accomplished through either Self-reconfiguration or Self-assembly basic operations depending on hardware and software capabilities of the modules and the task-specific parameters.</a>
<a href="#12" id="12">The solution methods for achieving the abovementioned nine operations must address some domain-specific issues that make development of planners/controllers for modular robots very challenging.</a>
<a href="#13" id="13">For example, planning for self-reconfiguration of a modular robot is proved to be NP-complete as it has been reduced to known NP-complete problems like PSAT [65] or 3-PARTITION [78].</a>
<a href="#14" id="14">Thus, employment of search-based methods, which are conventional in Artificial Intelligence, is not straightforward in modular robotics as they need to explicitly represent the state-space and then search it for a solution.</a>
<a href="#15" id="15">In fact, search-based methods usually suffer from intractable configuration-space sizes due to exponential growth of the branching factor in the graph representation of the state-space with the increase of the number of modules.</a>
<a href="#16" id="16">Moreover, the tightly coupled kinematics of the connected modules within a configuration not only limits the number of possible actions of each module, but also urges development of such controllers that avoid taking actions that may lead to undesirable conditions in the structure of modular robot.</a>
<a href="#17" id="17">Examples of undesirable states are fragmentation of modular robots into multiple parts, overcrowding the structure of modular robot by several modules which intend to enter the same lattice position [196], hollow configurations in which modules are trapped in a hole or tunnel within the body, and solid configuration in which outer modules cannot find a path toward interior of the robot's body [158].</a>
<a href="#18" id="18">Such problems can be alleviated to some extent through using control-based and agent-based approaches that plan for reconfiguration in distributed manner based on local information available in modules.</a>
<a href="#19" id="19">However, their underlying methods must mainly concern with keeping the connectedness of the modular robot during reconfiguration steps, considering convergence to the desired shape or behavior as a result of local interaction between modules, maintaining adaptability to the environmental changes, and exhibiting robustness to module failures.</a>
<a href="#20" id="20">These challenges get even worse when modular robots operate in conditions of unpredictable events, sensor noise, uncertainty, and actuator imperfection.</a>
<a href="#21" id="21">Under such circumstances, classical engineering approaches fail to function efficiency, while it can be observed that biological systems, despite their relatively simple interactions, can handle such complex situations efficiently in an autonomous and decentralized manner.</a>
<a href="#22" id="22">Therefore, some bio-inspired solution methods are devised in the MRS context motivated from self-organization property of multicellular organisms with the aim of emulating self-organizing behaviors of natural systems by modular robots.</a>
</body>
</html>