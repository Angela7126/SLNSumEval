<html>
<head>
<meta name="TextLength" content="SENT_NUM:16, WORD_NUM:319">
</head>
<body bgcolor="white">
<a href="#0" id="0">Whenever a tuple of tid k becomes invalid, STR3 must look for a new support for every value in the dependency list {a mathematical formula}dep(C,k).</a>
<a href="#1" id="1">STR3 then merges these tids into {a mathematical formula}inv(C) if they are not already present (lines 12 – 15).</a>
<a href="#2" id="2">In this section, we trace the execution of STR3 on the ternary positive table constraint C, with scope {a mathematical formula}{X,Y,Z}, depicted in Fig.</a>
<a href="#3" id="3">Let us look first at what happens to g. STR3 locates a new valid support for g which is {a mathematical formula}tup(C,3).</a>
<a href="#4" id="4">Values for which STR3 needs to produce new supports are {a mathematical formula} ⋃ k ∈ {3,8}dep(C,k) ∖ {e,n}={g,i}.</a>
<a href="#5" id="5">As a result, STR3 will start seeking a new support for b only after {a mathematical formula}tup(C,2) becomes invalid.</a>
<a href="#6" id="6">As soon as a tuple {a mathematical formula}tup(C,k) becomes invalid, STR3 looks for a new support for each value in the dependency list indexed at k, i.e., {a mathematical formula}dep(C,k) (line 21).</a>
<a href="#7" id="7">{a mathematical formula}tup(C,k)becomes invalid.</a>
<a href="#8" id="8">The two supports of {a mathematical formula}(X,a) become unsynchronized.</a>
<a href="#9" id="9">Because STR3 seeks a new valid support for {a mathematical formula}(X,a) only when {a mathematical formula}tup(C,k) is invalid (line 21), nothing needs to be done.</a>
<a href="#10" id="10">The dependency lists and the separators are synchronized at {a mathematical formula}(X,a) as a result.</a>
<a href="#11" id="11">An interesting situation happens when {a mathematical formula}(X,a) is present before and after backtracking.</a>
<a href="#12" id="12">This means of course that {a mathematical formula}(X,a) is in {a mathematical formula}dep(C,k) before the backtrack.</a>
<a href="#13" id="13">For a value a that stays present along a path, the cost of STR3 on {a mathematical formula}table(C,X,a) is {a mathematical formula}O(|table(C,X,a).explored|).</a>
<a href="#14" id="14">The size of {a mathematical formula}inv(C) can only grow along the path so the cost of STR3 in dealing with {a mathematical formula}inv(C) is {a mathematical formula}O(t).Lastly, we consider the cost associated with dependency lists.</a>
<a href="#15" id="15">Our experiments show that {a mathematical formula}STR3circ is slower than both STR2 and STR3 on every problem instance tested.</a>
</body>
</html>