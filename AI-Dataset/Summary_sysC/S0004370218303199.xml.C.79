<html>
<head>
<meta name="TextLength" content="SENT_NUM:12, WORD_NUM:549">
</head>
<body bgcolor="white">
<a href="#0" id="0">We propose an optimal Mixed Integer Programming (MIP) formulation of the problem of scheduling EVs in a MoD scheme that maximizes the number of completed tasks (i.e., trip requests from consumers) or the EV utilization (i.e., number of time points each EV is travelling), either using battery swap or battery charging at each station.</a>
<a href="#1" id="1">Moreover, in case where some EVs do not have a large enough battery to execute some of the longest trips, we observe that the greedy algorithm does not provide the optimal solution anymore and that the incremental MIP is the correct choice as it generates solution 0.5% better than the greedy and with lower execution time, while the optimal algorithm is the best but scales up to medium sized problems only.</a>
<a href="#2" id="2">In fact, if (a) and (b) hold, the max flow algorithm returns the optimal solution in terms of the number of completed tasks.</a>
<a href="#3" id="3">Now, for an EV to execute a task, its full range, calculated based on the battery level at the starting time of the task, must not be violated (Equation (11)) (i.e., in case trip requests are not within the range of a single battery load, the solver will not schedule them).</a>
<a href="#4" id="4">Note that, in case Equation (17) is removed, the solver will decide on the optimal initial location of each EV given a specific set of tasks waiting to be executed.</a>
<a href="#5" id="5">In more detail, assuming that the MoD company has full knowledge of the demand for only a small number of tasks {a mathematical formula} Δ fix ⊆ Δ , the remainder of (usually longer term) future demand is stochastic in nature and, to some degree, can be captured using a probability distribution learnt from historical data – expected set of tasks, {a mathematical formula} Δ exp.</a>
<a href="#6" id="6">This can be explained by the fact that given the number of EVs remains stable and the number of tasks increases, the greedy algorithm already calculates a schedule which covers most of the EVs' availability and for this reason the local search cannot improve the solution a lot.</a>
<a href="#7" id="7">We next evaluate the execution time by varying the rest of the dimensions (i.e., EVs, time points and locations).</a>
<a href="#8" id="8">In this section, we evaluate our algorithms in terms of execution time while varying the other dimensions of the problem (i.e., EVs, time points and locations).</a>
<a href="#9" id="9">Given the execution time of the incremental and the greedy algorithms combined with local search, we argue that for a setting where the EVs carry different battery types, and when the number of tasks is larger than 1000, the incremental-MIP is the appropriate solution.</a>
<a href="#10" id="10">We choose {a mathematical formula} Η =15 and {a mathematical formula}r=5 (reminder: Η represents the number of sets of expected tasks, and r the number of rounds – see Section 6), as these numbers were observed to provide a good balance between performance and execution time.</a>
<a href="#11" id="11">Moreover, in case where some EVs do not have a large enough battery to execute some of the longest trips, we observe that the greedy algorithm does not provide the optimal solution anymore and that the incremental-MIP is the correct choice as it generates solution 0.5% better than the greedy and with lower execution time, while the optimal algorithm is still the best but scales up to medium sized problems only.</a>
</body>
</html>