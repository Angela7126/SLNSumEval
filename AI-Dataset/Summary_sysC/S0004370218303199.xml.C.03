<html>
<head>
<meta name="TextLength" content="SENT_NUM:17, WORD_NUM:555">
</head>
<body bgcolor="white">
<a href="#0" id="0">In our experiments, we observe that when all EVs carry the same battery which is large enough for the longest trips, the greedy algorithm with battery swap with the max-flow solution as a pre-processing step, provides the optimal solution.</a>
<a href="#1" id="1">We propose an optimal Mixed Integer Programming (MIP) formulation of the problem of scheduling EVs in a MoD scheme that maximizes the number of completed tasks (i.e., trip requests from consumers) or the EV utilization (i.e., number of time points each EV is travelling), either using battery swap or battery charging at each station.</a>
<a href="#2" id="2">For a task i to be accomplished, at least one EV j must be at location {a mathematical formula}kistart at time point {a mathematical formula}tistart.</a>
<a href="#3" id="3">Given that an EV changes location only after executing a task, for each location k and time point t, the number of tasks that started from k any time point prior to t, must be less or equal to the tasks that ended at k any time point prior to t, plus the EVs whose initial location was equal to k (i.e., no task can be executed without the existence of at least one EV).</a>
<a href="#4" id="4">Thus, a task can be executed if and only if at least one EV exists at {a mathematical formula}kistart the time point {a mathematical formula}tidep.</a>
<a href="#5" id="5">Note that in case the max flow algorithm returns the optimal set of tasks to be executed, this algorithm simply calculates the EV to task execution schedule.</a>
<a href="#6" id="6">Finally, at time point {a mathematical formula}t=0, all EVs must be at their initial locations (Equation (17)), which also means that no tasks are executed at {a mathematical formula}t=0.</a>
<a href="#7" id="7">The intuition behind this algorithm is the following: Given that the dimension of the problem that affects the execution time the most is the number of EVs (see Section 7.1), we solve the MIP problem for each EV separately.</a>
<a href="#8" id="8">In the case of our MIP formulation, the solver finds the optimal schedule for EVs that maximises the number of tasks executed, or the EV utilization.</a>
<a href="#9" id="9">In the case where the number of EVs is lower than the number of the remaining tasks, we need to carefully choose which of the tasks need to be executed in the current time point, so that more tasks can be executed in the future.</a>
<a href="#10" id="10">The execution of Algorithm 4 generates a schedule for all EVs as well as for the total number of completed tasks.</a>
<a href="#11" id="11">Thus, {a mathematical formula}conj=10% of battery for each time point.</a>
<a href="#12" id="12">Thus, {a mathematical formula}chj=25% of the battery for each time point.</a>
<a href="#13" id="13">For example, in a setting with 100 EVs and up to 3000 tasks we see that the execution times of both variations of the MaxFlow algorithm increase linearly (i.e., {a mathematical formula}R2=0.9971 for the MaxFlow and {a mathematical formula}R2=0.992 for the MaxFlowInit).</a>
<a href="#14" id="14">In the case of battery charge, we also plot the execution time of the greedy algorithm in combination with the local search technique.</a>
<a href="#15" id="15">However, in contrast to battery swap, for large number of tasks the Off-Incr-Charge has higher execution time compared to Off-Greedy-Charge-LS.</a>
<a href="#16" id="16">Given the execution time of the incremental and the greedy algorithms combined with local search, we argue that for a setting where the EVs carry different battery types, and when the number of tasks is larger than 1000, the incremental-MIP is the appropriate solution.</a>
</body>
</html>