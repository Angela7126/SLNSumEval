<html>
<head>
<meta name="TextLength" content="SENT_NUM:19, WORD_NUM:333">
</head>
<body bgcolor="white">
<a href="#0" id="0">The set of all coalition structures is {a mathematical formula} Π (A).</a>
<a href="#1" id="1">On the other hand, when the size of the coalitions is limited to k members, such an algorithm has polynomial time complexity [39], since the coalitions are {a mathematical formula}O(nk)[29].</a>
<a href="#2" id="2">Notice that such a constraint allows a rider {a mathematical formula}ai ∉ D to be in a singleton.</a>
<a href="#3" id="3">{a mathematical formula}t:L → R − , i.e., the time cost of driving through a given path,</a>
<a href="#4" id="4">First, we define {a mathematical formula}Ad(CS).</a>
<a href="#5" id="5">{a mathematical formula}Ad(CS)Given a coalition structure CS, {a mathematical formula}Ad(CS) is the set of coalitions in CS that contain at least one driver, i.e., the set of cars.</a>
<a href="#6" id="6">Proposition 1, Proposition 2 allows us to compute an upper bound on {a mathematical formula}V( ⋅ ) for all the coalition structures in {a mathematical formula}ST(CS).</a>
<a href="#7" id="7">Thus, we define {a mathematical formula} Θ S= − ∞ if any of the constraints is violated.</a>
<a href="#8" id="8">Assume that {a mathematical formula}a2 and {a mathematical formula}a3's time constraints satisfy Proposition 3.</a>
<a href="#9" id="9">{a mathematical formula}DIV(G,1,k)={{a1},{a2},{a3}}</a>
<a href="#10" id="10">{a mathematical formula}DIV(G,2,k)={{a4},{a1,a2},{a1,a3}}</a>
<a href="#11" id="11">{a mathematical formula}DIV(G,3,k)={{a1,a4},{a1,a2,a3}}</a>
<a href="#12" id="12">{a mathematical formula}DIV(G,4,k)={{a1,a2,a4},{a1,a3,a4}}</a>
<a href="#13" id="13">On the other hand, we vary the width of the time window {a mathematical formula} Θ i for each agent.</a>
<a href="#14" id="14">We further investigate the impact of time constraints on the performance of SR-CFSS by varying the {a mathematical formula} Θ i's radius, as discussed in Section 6.2.</a>
<a href="#15" id="15">To this end, we first compute the optimal solution of a SR problem without time constraints on random instances with {a mathematical formula}n ∈ {30,40,50,60,70,80,90,100} and {a mathematical formula}|D| ∈ {10%,50%,80%}, and we use our algorithm to compute a kernel-stable payoff vector.</a>
<a href="#16" id="16">Since we consider Constraint 2, {a mathematical formula}ai can be the only driver of any coalition containing both {a mathematical formula}ai and {a mathematical formula}aj.</a>
<a href="#17" id="17">Thus, Algorithm 6 computes all feasible coalitions only once and its worst-case time complexity is {a mathematical formula}O(nk).</a>
<a href="#18" id="18">Given this, Algorithm 2 has a worst-case time complexity of {a mathematical formula}O( − log2 ⁡ ( Ε ) ⋅ nk+1).</a>
</body>
</html>