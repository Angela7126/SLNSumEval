<html>
<head>
<meta name="TextLength" content="SENT_NUM:16, WORD_NUM:554">
</head>
<body bgcolor="white">
<a href="#0" id="0">It maintains two kinds of estimates of the cost of a path from {a mathematical formula}sstart to a state s: {a mathematical formula}g(s) and {a mathematical formula}v(s).</a>
<a href="#1" id="1">In the truncation rules, we use the {a mathematical formula}g Π value for an inconsistent state s and a chosen suboptimality bound Ε , to decide whether we need to expand state s to satisfy the bound.</a>
<a href="#2" id="2">We observe that when we are looking for an Ε bounded solution, we can reuse the old path cost {a mathematical formula}v(s) for an underconsistent state s (selected for expansion), as long as {a mathematical formula}g Π (s)+h(s) ≤ Ε ⋅ (v(s)+h(s)).</a>
<a href="#3" id="3">2, here we search for a two bounded solution (i.e., {a mathematical formula} Ε =2.0).</a>
<a href="#4" id="4">ComputePath in TLPA* uses the {a mathematical formula}g Π values to apply the truncation rules.</a>
<a href="#5" id="5">When an underconsistent state s is selected for expansion, its {a mathematical formula}g Π (s) is used to check whether Rule 1 can be applied.</a>
<a href="#6" id="6">Furthermore, while computing the {a mathematical formula}g Π for any state s other than {a mathematical formula}sgoal, we terminate the computation if the cost of the path is greater than or equal to {a mathematical formula} Ε ⋅ (v(s)+h(s)) and set {a mathematical formula}g Π (s)= ∞ , Π (s)=null, as s will not be truncated in this case.</a>
<a href="#7" id="7">The cost of every edge along this path is added to {a mathematical formula}g Π (s) (the states are added to {a mathematical formula} Π (s)).</a>
<a href="#8" id="8">Consider a least-cost path from {a mathematical formula}sstart to s, {a mathematical formula} Π (s0=sstart, … ,sk=s) with cost {a mathematical formula}g ⁎ (s).</a>
<a href="#9" id="9">Now, for {a mathematical formula}ss ∈ TRUNCATED we have a stored path {a mathematical formula} Π (ss) with cost {a mathematical formula}g Π (ss) ≤ Ε ⋅ v(ss)+( Ε − 1) ⋅ h(ss) (from Lemma 3, Lemma 4 and truncation condition).</a>
<a href="#10" id="10">Therefore, in D* Lite, the g and v values are estimates of the goal distances, i.e., for a state s, {a mathematical formula}g(s) denotes the path cost from s to {a mathematical formula}sgoal.</a>
<a href="#11" id="11">If heuristic inflation ensures that the path estimates are always within {a mathematical formula} Ε 1 bound of the optimal path cost and the truncation rules ensure that the actual path costs are within {a mathematical formula} Ε 2 bound of the path estimates, we can guarantee that the solution cost will be within {a mathematical formula} Ε 1 ⋅ Ε 2 of the optimal solution cost.</a>
<a href="#12" id="12">Now, if we apply the truncation rule (say Truncation Rule 1) to a state s having {a mathematical formula}v(s) ≥ Ε 1 ⋅ g ⁎ (s), the total path cost {a mathematical formula}C ≤ Ε 2 ⋅ (v(s)+h(s)) does not ensure that {a mathematical formula}C ≤ Ε 1 ⋅ Ε 2 ⋅ (g ⁎ (s)+h(s)).</a>
<a href="#13" id="13">TLPA* truncates the cost propagation for an underconsistent state s (selected for expansion), if {a mathematical formula}g Π (s)+h(s) ≤ Ε ⋅ (v(s)+h(s)).</a>
<a href="#14" id="14">First, the g and v values are now within {a mathematical formula} Ε 1 bound of the optimal path cost ({a mathematical formula}g ⁎ ).</a>
<a href="#15" id="15">Now, from Lemma 13, we have {a mathematical formula}g(sgoal) ≤ Ε 1 ⋅ g ⁎ (sgoal) and from Lemma 15, we have that {a mathematical formula}ObtainPath(sgoal) will return a path of cost {a mathematical formula} ≤ Ε 2 ⋅ g(sgoal).</a>
</body>
</html>