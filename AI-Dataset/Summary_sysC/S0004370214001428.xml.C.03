<html>
<head>
<meta name="TextLength" content="SENT_NUM:32, WORD_NUM:363">
</head>
<body bgcolor="white">
<a href="#0" id="0">Let P and {a mathematical formula}P ′ be programs.</a>
<a href="#1" id="1">A program P and a set {a mathematical formula}M ⊆ at(P).</a>
<a href="#2" id="2">A program P and an atom {a mathematical formula}a ∈ at(P).</a>
<a href="#3" id="3">A program P and an atom {a mathematical formula}a ∈ at(P).</a>
<a href="#4" id="4">Let {a mathematical formula}G=(V,E) be a graph.</a>
<a href="#5" id="5">Let {a mathematical formula}C be a class of programs.</a>
<a href="#6" id="6">Let {a mathematical formula}C be a class of programs.</a>
<a href="#7" id="7">A set X of atoms is a deletion{a mathematical formula}C-backdoor of a program P if {a mathematical formula}P − X ∈ C.</a>
<a href="#8" id="8">Let {a mathematical formula}r ′ ∈ P Τ .</a>
<a href="#9" id="9">We obtain the set {a mathematical formula}AS(P,X)={{e,f},{c,f},{b,e,f},{b,c,f}}.</a>
<a href="#10" id="10">The size {a mathematical formula}|X| of the backdoor.</a>
<a href="#11" id="11">Decide whether P has a deletion {a mathematical formula}C-backdoor X of size at most k.</a>
<a href="#12" id="12">Let {a mathematical formula}k>0.</a>
<a href="#13" id="13">A cycle of P is a cycle in the dependency graph {a mathematical formula}UP.</a>
<a href="#14" id="14">If we have two programs {a mathematical formula}P ⊆ P ′ , then clearly the dependency (di)graph of P is a sub(di)graph of the dependency (di)graph of {a mathematical formula}P ′ .</a>
<a href="#15" id="15">Let {a mathematical formula}C ∈ {no-C,no-DC,no-DC2,no-EC}.</a>
<a href="#16" id="16">Next we consider the problems in {a mathematical formula}AspReason.</a>
<a href="#17" id="17">Let X be a deletion {a mathematical formula}C-backdoor of P of size {a mathematical formula}dbC(P).</a>
<a href="#18" id="18">Thus, {a mathematical formula}P − X ∈ C ⊆ Normal.</a>
<a href="#19" id="19">{a mathematical formula}P ′ is a normal program.</a>
<a href="#20" id="20">Let {a mathematical formula}P ′ =P − X ′ .</a>
<a href="#21" id="21">{a mathematical formula}Bound[p]</a>
<a href="#22" id="22">For all the problems {a mathematical formula}L[p]N, p only needs to be a normal ASP-parameter.</a>
<a href="#23" id="23">Hence there is a function f such that for all normal programs P we have {a mathematical formula}p(P) ≤ f(q(P)).</a>
<a href="#24" id="24">Hence {a mathematical formula}p ↑ ⪯ q ↑ follows by Definition 7.3.</a>
<a href="#25" id="25">Let {a mathematical formula}C be a class of programs.</a>
<a href="#26" id="26">Let {a mathematical formula}C,C ′ ∈ SCC(DP) and {a mathematical formula}C ≠ C ′ .</a>
<a href="#27" id="27">Then {a mathematical formula}inctw(P):=tw(IP).</a>
<a href="#28" id="28">Let P be a program, then {a mathematical formula}deptw(P)=tw(UP).</a>
<a href="#29" id="29">Let P be a normal program and {a mathematical formula}DP+ its positive dependency digraph.</a>
<a href="#30" id="30">Let P be a program and {a mathematical formula}DP+ its positive dependency digraph.</a>
<a href="#31" id="31">Let P be a program and {a mathematical formula}DP+ its positive dependency digraph.</a>
</body>
</html>