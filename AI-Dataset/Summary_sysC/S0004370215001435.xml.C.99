<html>
<head>
<meta name="TextLength" content="SENT_NUM:11, WORD_NUM:404">
</head>
<body bgcolor="white">
<a href="#0" id="0">This example demonstrates the appeal of using a modeling language like MiniZinc for pattern mining: the formulation is high-level, declarative and close to the mathematical notation, it allows for user-defined constraints like the cover relation between items and transactions, and it is independent of the actual solution method.</a>
<a href="#1" id="1">Modeling a mining problem in MiningZinc follows the same methodology as modeling a constraint program: one has to express a problem in terms of variables with a domain, and constraints over these variables; for example, a set variable with a minimum frequency constraint over data.</a>
<a href="#2" id="2">Specifically, we describe a state of the rewrite process with a tuple{a mathematical formula} where L is an execution plan, and C is a set of constraints and annotations.</a>
<a href="#3" id="3">The initial state in the rewrite process is {a mathematical formula}( ∅ ,C), where C is the set of all FlatZinc constraints and the empty set indicates the initially empty execution plan; the final state in the rewrite process is {a mathematical formula}(L, ∅ ), where L represents a valid execution plan for the initial set of constraints C, and the empty set indicates that all constraints have been evaluated in the execution plan (modulo the optional annotations).</a>
<a href="#4" id="4">MiningZinc models are typically expressed over set variables, however, some CP solvers do not support constraints over set variables.</a>
<a href="#5" id="5">In previous work, we found that solvers that do support set variables are usually more efficient on a Boolean encoding of the set variables and constraints (for example, constraining the cardinality of a subset of a variable requires 2 constraints when expressed over sets, yet only 1 linear constraint in the Boolean encoding).</a>
<a href="#6" id="6">Hence, for CP solvers we provide a transformation that translates all set variables into arrays of Boolean variables.</a>
<a href="#7" id="7">Differences in this category come from the use of different redundant constraints and different CP systems.</a>
<a href="#8" id="8">As this involves only one CP system, one could very well apply algorithm selection techniques here.</a>
<a href="#9" id="9">As the ranking of generic plans is only important in case there are no specialized or hybrid plans, we rather use a simple ranking, first based on number of constraints (with the naive assumption that more redundant constraints are better), then on the global order of the CP systems.</a>
<a href="#10" id="10">{sup:4} For these datasets the pure CP approach does not work due to the complexity of flattening the model and data, while the post-processing based approaches are still able to solve the problem.</a>
</body>
</html>