<html>
<head>
<meta name="TextLength" content="SENT_NUM:18, WORD_NUM:543">
</head>
<body bgcolor="white">
<a href="#0" id="0">The variable property score is defined as {a mathematical formula}score(x)=cost(F, Α ) − cost(F, Α ′ ), where {a mathematical formula} Α ′ is obtained from Α by flipping x.</a>
<a href="#1" id="1">A variable x is decreasing if and only if {a mathematical formula}score(x)>0, as its flip will decrease the cost.</a>
<a href="#2" id="2">The score property is also defined as {a mathematical formula}score(x)=make(x) − break(x), where make and break is the number of clauses that would become satisfied and falsified, respectively, by flipping x.</a>
<a href="#3" id="3">In dynamic local search algorithms, make and break measures the total weight of clauses that would become satisfied and falsified, respectively, by flipping x.</a>
<a href="#4" id="4">A recent local search solver called FrwCB can solve random 3-SAT instances at {a mathematical formula}r=4.2 with up to 4 million variables within reasonable time, but its performance on those with ratio 4.267 is worse than that of CCASat [30].</a>
<a href="#5" id="5">The Survey Propagation (SP) algorithm [7], which is extremely good at solving random 3-SAT instances, can solve random 3-SAT instances at {a mathematical formula}r=4.2 with up to 10 million variables [35], but it fails to converge on those with ratio up to 4.267, or before that [7].</a>
<a href="#6" id="6">To sum up, our analysis shows that promising decreasing variables are a subset of CCD variables.</a>
<a href="#7" id="7">This indicates if a variable is forbidden by the CC strategy, it is also forbidden by the promising decreasing strategy, but the reverse is not necessarily true.</a>
<a href="#8" id="8">Therefore, the forbidding strength of CC is not so strong as that of the promising decreasing strategy.</a>
<a href="#9" id="9">In some sense, CCD variables and promising decreasing variables may be two extremities, and there may be an intermediate notion more effective to be investigated in the future.</a>
<a href="#10" id="10">As we have mentioned before, the tabu method is a previous significant method for handling the cycling problem in local search, and has been widely used in local search algorithms.</a>
<a href="#11" id="11">In this naive implementation, the CC strategy needs {a mathematical formula}O( Δ (F)) for both storing and checking the configuration for a variable.</a>
<a href="#12" id="12">Therefore, the worst complexity per step for the CC strategy under the naive implementation (which needs to check the configuration for the candidate variables and store the configuration for the flipped variable) is {a mathematical formula}O( Δ (F)n)+O( Δ (F))=O( Δ (F)n).</a>
<a href="#13" id="13">For the approximate implementation in this work, in each step, the algorithm first scans the CCDVar stack to remove those variables that are no longer CCD; then it updates the confChange values for the flipping variable x and each {a mathematical formula}y ∈ N(x), and also adds those variables that become CCD from among {a mathematical formula}N(x) into the CCDVar stack.</a>
<a href="#14" id="14">Therefore, the time complexity per step for the CC strategy is only {a mathematical formula}O(#CCDVar)+1+O( Δ (F)), which is at most (usually much less) {a mathematical formula}O(n)+O( Δ (F))=O(n).</a>
<a href="#15" id="15">As is usual in local search algorithms, there is a trade-off between the accuracy of heuristics and the complexity per step.</a>
<a href="#16" id="16">According to the above proposition, in order to make a random 3-SAT formula be evaluated true, at least half of the clauses ({a mathematical formula}(2 − 32)m=m2) should be critical, i.e., having only one true literal.</a>
<a href="#17" id="17">Thus, the subscore property would lose its power on random 3-SAT formulas, since it encourages transformations from critical clauses to stable ones.</a>
</body>
</html>