<html>
<head>
<meta name="TextLength" content="SENT_NUM:56, WORD_NUM:1060">
</head>
<body bgcolor="white">
<a href="#0" id="0">Bidirectional uniform-cost search performs a forward and a backward uniform-cost searches.</a>
<a href="#1" id="1">The forward search starts at the initial state, {a mathematical formula}I, and advances towards the goal states, {a mathematical formula}S ⋆ .</a>
<a href="#2" id="2">The backward search performs regression from {a mathematical formula}S ⋆ towards {a mathematical formula}I.</a>
<a href="#3" id="3">The two searches are performed in an interleaved manner so that at each step the algorithm decides whether to continue the backward or forward search.</a>
<a href="#4" id="4">Newly generated states are compared with the set of expanded states from the other search direction.</a>
<a href="#5" id="5">The heuristic evaluation is done with a conjunction: given a set of states S and the {a mathematical formula}heuri BDD, {a mathematical formula}S ∧ heuri corresponds to the subset of states that have a heuristic value equal to i.</a>
<a href="#6" id="6">2 with {a mathematical formula}g=1.</a>
<a href="#7" id="7">To inform {a mathematical formula}BDDA ⁎ , Gamer uses symbolic partial pattern databases.</a>
<a href="#8" id="8">Pattern databases (PDBs) map the original state space to a smaller abstract state space.</a>
<a href="#9" id="9">PDBs use backward uniform-cost search to precompute the optimal solution cost from each abstract state to the set of abstract goal states, and use it as an estimation for the original problem [35], [36].</a>
<a href="#10" id="10">In the planning literature, this abstract problem is usually defined by the projection of the planning task over a subset of variables [37].</a>
<a href="#11" id="11">When a disjunctive partitioning is used, the image is computed in two steps.</a>
<a href="#12" id="12">First, the image is computed for each TR, and then the results of TRs associated to operators of the same cost, c, are aggregated computing their disjunction {a mathematical formula} ⋁ i=1kimage(S,Tc,i).</a>
<a href="#13" id="13">This is not a single operation, but rather {a mathematical formula}k − 1 disjunctions of two BDDs at a time.</a>
<a href="#14" id="14">Even though the result will always be the same, the order in which the individual BDDs are merged has an impact on the performance of image computation.</a>
<a href="#15" id="15">In symbolic search the operators are not applied over a single state but rather over sets of states.</a>
<a href="#16" id="16">Nevertheless, operators only need to be applied over states that satisfy the corresponding conditions.</a>
<a href="#17" id="17">We take advantage of this by precomputing the subset of states relevant to a given TR prior to the image operation.</a>
<a href="#18" id="18">This is done by splitting the original set of states into subsets as the successor tree is traversed.</a>
<a href="#19" id="19">This way, the subset on which a TR, {a mathematical formula}To is applied once a leaf node is reached is the subset of states that satisfy {a mathematical formula}pre(o).</a>
<a href="#20" id="20">We call this method {a mathematical formula}CT.</a>
<a href="#21" id="21">Algorithm 2 shows how to compute the image of a BDD using {a mathematical formula}CT.</a>
<a href="#22" id="22">{a mathematical formula}</a>
<a href="#23" id="23">Invalid states that violate a constraint can be pruned during the search since they are either unreachable or dead ends.</a>
<a href="#24" id="24">By definition, reachability constraints cannot possibly prune any state in forward search.</a>
<a href="#25" id="25">Similarly, relevance constraints are not useful in backward search.</a>
<a href="#26" id="26">An operator is valid if it is consistent with the constraints, i.e., exist s, {a mathematical formula}s ′ s.t.</a>
<a href="#27" id="27">{a mathematical formula}o(s)=s and {a mathematical formula}s,s ′ ⊨ c.</a>
<a href="#28" id="28">Invalid operators are removed in a preprocessing step so we assume all operators to be valid.</a>
<a href="#29" id="29">The use of mutexes in explicit-state search is straightforward: simply prune every (partial) state s such that facts {a mathematical formula}fi,fj ∈ s are mutex.</a>
<a href="#30" id="30">Despite the impact of state invariants in explicit-state regression, they have not been employed in symbolic search.</a>
<a href="#31" id="31">Although it is obvious that a per state application of mutexes in symbolic search is not practical, there are alternatives.</a>
<a href="#32" id="32">In particular, we propose creating a BDD that represents in a succinct way all the states that are valid according to the state invariants.</a>
<a href="#33" id="33">This BDD, that we call the constraint BDD (cBDD), can be used to discard all the invalid states that have been generated during the search.</a>
<a href="#34" id="34">(Constrained operator) Let {a mathematical formula}To be the TR of {a mathematical formula}o ∈ O and let {a mathematical formula}cBDDbwo[x] and {a mathematical formula}cBDDfwo[x ′ ] be BDDs representing the reachability and relevance constraints relevant for o in terms of variables x and {a mathematical formula}x ′ .</a>
<a href="#35" id="35">Then the constrained TR is {a mathematical formula}Toc=To ∧ cBDDbwo[x] ∧ cBDDfwo[x ′ ].</a>
<a href="#36" id="36">{a mathematical formula}f1 ∉ s, {a mathematical formula}f2 ∈ s and all other variables have values compatible with {a mathematical formula}pre(o).</a>
<a href="#37" id="37">Such state exists because otherwise, either o is not valid (e.g., if {a mathematical formula}f2 ∈ eff(o)) or condition (1) does not hold contradicting the premises.</a>
<a href="#38" id="38">{a mathematical formula} Υ 1 ∈ Vpre(o).</a>
<a href="#39" id="39">As o must be applicable in s, {a mathematical formula}f1 ∈ pre(o).</a>
<a href="#40" id="40">Therefore, unlike the case of search in the original state space, {a mathematical formula}MBDD does not perform all the pruning possible.</a>
<a href="#41" id="41">All planners used in our experiment use the {a mathematical formula}h2 invariant analysis to remove operators and simplify the planning task before starting the search [57].</a>
<a href="#42" id="42">Originally, Gamer used unidirectional uniform-cost search and {a mathematical formula}BDDA ⁎ with symbolic Pattern Databases.</a>
<a href="#43" id="43">On top of that, we implemented the symbolic bidirectional uniform-cost search as described in Section 3.2.</a>
<a href="#44" id="44">We also implemented the image computation refinements and state-invariant pruning techniques.</a>
<a href="#45" id="45">{a mathematical formula}TR1 is our baseline, Gamer's original image computation.</a>
<a href="#46" id="46">Do our techniques improve{a mathematical formula}BDDA ⁎ ?</a>
<a href="#47" id="47">Image computation methods improve {a mathematical formula}BDDA ⁎ as much as bidirectional symbolic uniform-cost search.</a>
<a href="#48" id="48">This reveals that the advantage of the new image computation methods is not limited to a particular algorithm.</a>
<a href="#49" id="49">State-invariant constraints also help, but less than in bidirectional symbolic uniform-cost search.</a>
<a href="#50" id="50">The overall results again show that the use of state invariants helps to improve results of {a mathematical formula}A ⁎ as well.</a>
<a href="#51" id="51">However, the benefits are not as stable as in the case of uniform-cost search.</a>
<a href="#52" id="52">Even though pruning invalid states ({a mathematical formula}MBDD100k) increases total coverage, it decreases the coverage in 9 domains with respect to the version without invalid state pruning ({a mathematical formula}M ∅ ).</a>
<a href="#53" id="53">In order to find out whether the performance loss is caused by the abstract searches that generate the heuristic or the {a mathematical formula}A ⁎ search, we analyze the quality of the heuristic used.</a>
<a href="#54" id="54">One typical way to measure such quality is the heuristic value of the initial state.</a>
<a href="#55" id="55">Further experiments on {a mathematical formula}SymBA ⁎ have shown that, while abstraction heuristics may improve the performance of bidirectional search on particular domains, symbolic bidirectional uniform-cost search is yet a state-of-the-art planner [66].</a>
</body>
</html>