<html>
<head>
<meta name="TextLength" content="SENT_NUM:17, WORD_NUM:457">
</head>
<body bgcolor="white">
<a href="#0" id="0">An inherent computational problem of conceptual blending is to find a common ground, called generic space, between the two input concepts [27].</a>
<a href="#1" id="1">For example, the house-boat blend has the generic space of a person being inside an object that is not situated on any medium (or that is situated on a more general medium).</a>
<a href="#2" id="2">Once the generic space has been identified, one can develop possible blends by specialising the generic space with elements from the input concepts in a meaningful way.</a>
<a href="#3" id="3">However, this is not trivial because the naive union of input spaces can lead to inconsistencies.</a>
<a href="#4" id="4">For example, the medium on which an object is situated can not be land and water at the same time.</a>
<a href="#5" id="5">Hence, before combining the input concepts, it is necessary to generalise at least one medium assignment.</a>
<a href="#6" id="6">Another problem is the huge number of possible blends, which are often not meaningful.</a>
<a href="#7" id="7">These constitutive elements can be organised in a conceptual integration network, i.e., the network of all input spaces, generic spaces and blend spaces together with the selective projections that model a particular blending process.</a>
<a href="#8" id="8">Finally, Fauconnier and Turner propose certain optimality principles that govern the blending process, and that can be taken as a way to assess the quality of a blend.</a>
<a href="#9" id="9">Let us briefly review these constitutive elements and optimality principles as put forth in Fauconnier and Turner's model, using the house-boat blend depicted in Fig.</a>
<a href="#10" id="10">However, many computational blending systems (e.g., [37], [83]) that emanate from the work by Fauconnier and Turner [27] often simplify this aspect of their theory and consider blending to be an operation that takes two input spaces as given and generates one or more output spaces, i.e., blends.</a>
<a href="#11" id="11">The blending theory in principle allows for any finite number {a mathematical formula}S ≥ 2 input specifications, but in the implementation we use {a mathematical formula}S=2 for simplicity.</a>
<a href="#12" id="12">Second, {a mathematical formula}s1, {a mathematical formula}s2 are undergoing sequences of theory transitions that are guided by an ASP solver until a generic space is found.</a>
<a href="#13" id="13">Each transition is represented by a fact {a mathematical formula}exec( Γ ,s,t), where t is an iterator and Γ is a transition operator that removes or renames elements in the input specifications (see Sec.</a>
<a href="#14" id="14">A classical concept blending example is the blend between the concepts house and boat [34], [27].</a>
<a href="#15" id="15">This generic space is obtained by removing the {a mathematical formula}on(house,land) axiom from the House specification, the water operator and the {a mathematical formula}on(boat,water) axiom from the Boat specification, and by renaming the operators ride to liveIn, passenger to resident, boat to house and the sort Boat to House in the Boat specification.</a>
<a href="#16" id="16">The morphisms between the generic space and the input spaces are shown in the right part of Fig.</a>
</body>
</html>