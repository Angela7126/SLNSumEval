<html>
<head>
<meta name="TextLength" content="SENT_NUM:18, WORD_NUM:544">
</head>
<body bgcolor="white">
<a href="#0" id="0">The exact algorithms based on the backward induction are significantly better in the offline setting, where they are able to find the optimal strategy very quickly compared to the sampling algorithms.</a>
<a href="#1" id="1">In some cases, our novel algorithm ({a mathematical formula}DO Α Β ) solves the game in less than 2% of the time required by the standard backward induction algorithm.</a>
<a href="#2" id="2">However, the exact algorithms are less competitive in the online setting.</a>
<a href="#3" id="3">In contrast, the approximative sampling algorithms can perform very well in the online setting and find good strategies to play within a few seconds, however, they are not well-suited for offline solving of games.</a>
<a href="#4" id="4">When extracting strategies from {a mathematical formula}DO Α Β , we proceed exactly as in the case of {a mathematical formula}BI Α Β : either a double-oracle is initialized and solved for a certain matrix game and we keep the equilibrium strategies from the final restricted game, or the strategy is extracted from the serialized alpha-beta algorithms as before.</a>
<a href="#5" id="5">17 depicts the results for the observed convergence rates of the sampling algorithms for the game with 10 coins, K set to 3 and the minimum bid set to 1.</a>
<a href="#6" id="6">This is an easy game for {a mathematical formula}DO Α Β and {a mathematical formula}BI Α Β with a pure NE and both of these algorithms are able to solve the game in less than a second (0.73).</a>
<a href="#7" id="7">However, due to a large branching factor for both players (10 actions at the root node for each player) all sampling algorithms converge extremely slowly.</a>
<a href="#8" id="8">The performance of the algorithms in terms of iterations per second is similar to the previous games, however, OOS is slightly better in this case with {a mathematical formula}1.9×105 iterations per second compared to the RM with {a mathematical formula}1.6×105 iterations per second.</a>
<a href="#9" id="9">We compare all of the approximative sampling algorithms and {a mathematical formula}DO Α Β as a representative of backward induction algorithms, because it was clearly the fastest algorithm in all of the considered games.</a>
<a href="#10" id="10">Next, we analyze the results of the {a mathematical formula}DO Α Β algorithm compared to the sampling algorithms.</a>
<a href="#11" id="11">The results show that even though {a mathematical formula}DO Α Β uses a domain-specific heuristic evaluation function, it does not win significantly against any of the sampling algorithms that do not use any domain knowledge.</a>
<a href="#12" id="12">In the game with stochastic point card sequence, OOS, UCT and RM make approximately {a mathematical formula}10×103 iterations in the 1 second time limit in the root of the game.</a>
<a href="#13" id="13">Exp3 is slightly slower with {a mathematical formula}8×103 iterations.</a>
<a href="#14" id="14">The best algorithm in this game variant is RM, which wins against all other sampling algorithms and wins most often against {a mathematical formula}DO Α Β and Exp3.</a>
<a href="#15" id="15">The second best algorithm is OOS, which loses only against RM and Exp3 is the weakest algorithm losing against all other sampling algorithms.</a>
<a href="#16" id="16">The sampling algorithms in the second game variant (without chance) perform the same number of samples as in the first variant, with the exception of UCT, which performs {a mathematical formula}12×103 iterations per second.</a>
<a href="#17" id="17">The evaluation function in Tron approximates the situation in the game fairly well; hence, {a mathematical formula}DO Α Β strongly outperforms all other algorithms when they do not use the evaluation function (top).</a>
</body>
</html>