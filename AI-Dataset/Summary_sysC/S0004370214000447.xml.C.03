<html>
<head>
<meta name="TextLength" content="SENT_NUM:22, WORD_NUM:574">
</head>
<body bgcolor="white">
<a href="#0" id="0">HTNLearn can learn methods and action models simultaneously from partially observed plan traces (i.e., plan traces where the intermediate states are partially observable).</a>
<a href="#1" id="1">HTN-Learner can learn method preconditions and action models simultaneously, but requires that method structures be given as input; while HTNLearn, which extends from HTN-Learner, can learn method structures, method preconditions, and action models simultaneously from partially observed plan traces which are annotated with partial decomposition trees.</a>
<a href="#2" id="2">The first one is to learn action models from plan traces with complete intermediate state information.</a>
<a href="#3" id="3">A solution to an HTN planning problem {a mathematical formula}(s0,T,M,A) is a list of decomposition trees[67], [20].</a>
<a href="#4" id="4">Decomposition constraints and task constraints enhance the learned HTN models using statistical information from the partial decomposition trees</a>
<a href="#5" id="5">The solution to this MAX-SAT problem is the HTN model including the set of action models and HTN methods that best explains the given inputs.</a>
<a href="#6" id="6">Based on {a mathematical formula}Scand, we build a set of method constraints to capture the final set of method structures.</a>
<a href="#7" id="7">We do this by simply scanning each partial decomposition tree in {a mathematical formula} Π part and each annotated task in {a mathematical formula}T and exploiting their relations between states and task preconditions and task effects to build {a mathematical formula}Hcand.</a>
<a href="#8" id="8">Furthermore, using the candidate primitive hierarchies {a mathematical formula}Hcand generated by Algorithm 2, we generate a set of candidate method structures {a mathematical formula}Scand.</a>
<a href="#9" id="9">We denote the final set of primitive hierarchies as {a mathematical formula}H, and the final set of method structures as STR.</a>
<a href="#10" id="10">We have thus built the set of all the method constraints MC for creating a set of methods {a mathematical formula}M based on the given plan traces.</a>
<a href="#11" id="11">We denote the set of these constraints as {a mathematical formula}SCpa.</a>
<a href="#12" id="12">We denote the set of these constraints as {a mathematical formula}SCap.</a>
<a href="#13" id="13">This constraint indicates that predicate p might be a precondition of method m. We denote the set of these constraints as {a mathematical formula}SCpm.</a>
<a href="#14" id="14">In this step, we build three types of hard constraints (denoted by HC), i.e., partialness constraints, action constraints and plan constraints, to ensure that the learned HTN models are consistent with the known structures of partial decomposition trees, the STRIPS conventions and the plan traces (i.e, the leaves of the partial decomposition trees), respectively.</a>
<a href="#15" id="15">These constraints ensure that the learned HTN models are consistent with the given partial decomposition trees.</a>
<a href="#16" id="16">For example, if “ {a mathematical formula}p ∈ ADD(a) ” is assigned true in the result of the solver, then p will be converted into an effect of the action a in the HTN model.</a>
<a href="#17" id="17">For the HTNLearn algorithm, we will evaluate the learned HTN methods and the learned action models separately.</a>
<a href="#18" id="18">Specifically, for each learned action model a, we denote its corresponding ground-truth action model as {a mathematical formula}ag.</a>
<a href="#19" id="19">In this setting, our learning problem is reduced to learning action models and method preconditions simultaneously, with no need to learn method structures (since method structures can be directly extracted from decomposition trees), as is done by our previous work [70].</a>
<a href="#20" id="20">To determine the importance of learning the action models and method preconditions simultaneously, we ran an experiment comparing HTNLearn against a hybrid system, that we call it {a mathematical formula}ARMS+, which first uses ARMS to learn the action models and then uses the method-based constraints to learn the method preconditions.</a>
<a href="#21" id="21">There are no HTN learning systems that can be trivially extended to learn HTN structures without knowing action models.</a>
</body>
</html>