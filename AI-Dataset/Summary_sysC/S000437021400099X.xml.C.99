<html>
<head>
<meta name="TextLength" content="SENT_NUM:6, WORD_NUM:245">
</head>
<body bgcolor="white">
<a href="#0" id="0">This result shows that there are problems for which no efficient optimization algorithm exists (making the common assumption that the complexity classes {a mathematical formula}P and {a mathematical formula}NP are not identical), but that have a (small) polynomial unbiased black-box complexity.</a>
<a href="#1" id="1">Here in this work we will be concerned only with so-called pseudo-Boolean functions, i.e., real-valued objective functions defined on the set {a mathematical formula}{0,1}n of bit strings of length n. This is motivated by the fact that many randomized search heuristics, in particular evolutionary algorithms, use such a representation.</a>
<a href="#2" id="2">It follows from the black-box concept that the only type of action the algorithm may perform is, based on the objective values learned so far, deciding on a probability distribution on {a mathematical formula}{0,1}n, sampling a search point {a mathematical formula}x ∈ {0,1}n according to this distribution, and querying its function value (often referred to as “ fitness ” in the evolutionary computation community) from the oracle.</a>
<a href="#3" id="3">This leads to the scheme of Algorithm 1, which we call an unrestricted black-box algorithm.</a>
<a href="#4" id="4">As the performance measure of black-box algorithms we take the number of queries to the oracle performed by the algorithm until it first queries an optimal solution.</a>
<a href="#5" id="5">By Remark 2 it suffices to show that there exists an algorithm that, for an arbitrary instance {a mathematical formula}I of {a mathematical formula}Partition ≠ , has at least constant success probability to compute an optimal search point within {a mathematical formula}O(|I|log ⁡ |I|) function evaluations.</a>
</body>
</html>