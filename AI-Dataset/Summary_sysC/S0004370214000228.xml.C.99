<html>
<head>
<meta name="TextLength" content="SENT_NUM:18, WORD_NUM:483">
</head>
<body bgcolor="white">
<a href="#0" id="0">Finally, we describe how to extend our method to all formulas in {a mathematical formula} Σ -CTL, and how to add states to the signature Σ if the input formula is not satisfiable by any Σ -model.</a>
<a href="#1" id="1">Note that {a mathematical formula}S+(M,S ″ ) is not a model over Σ , i.e., {a mathematical formula}S+(M,S ″ ) ∉ K Σ .</a>
<a href="#2" id="2">Intuitively, {a mathematical formula}XUpdprot((M,P),s, Φ ) finds models for Φ at state s by modifying {a mathematical formula}M and respecting the protection P. The initial call to {a mathematical formula}XUpdprot may use the empty protection {a mathematical formula}P ⊥ .</a>
<a href="#3" id="3">In this case, and assuming that {a mathematical formula}n=| Φ |, we can extend our model update procedure so as to be able to add states to {a mathematical formula}M until {a mathematical formula}XUpdprot[(M,P),s, Φ ] ≠ ∅ or {a mathematical formula}|SM|>n8n.</a>
<a href="#4" id="4">Under these assumptions, we show how to improve the efficiency of {a mathematical formula}XUpd1(M,s, Φ ) in cases where {a mathematical formula} Φ =EX Α , {a mathematical formula} Φ =AX Α , or {a mathematical formula} Φ = Α ∨ Β (improvements for {a mathematical formula}XUpdprot are analogous).</a>
<a href="#5" id="5">To improve the efficiency of {a mathematical formula}XUpd1(M,s,EX Α ) we use an order on the generation of nondeterministic choices of states.</a>
<a href="#6" id="6">In line (7) of {a mathematical formula}XUpd1, we replace the command “ {a mathematical formula}guesss ′ ∈ SM ” by “ {a mathematical formula}guesss ′ ∈ [RM[s]]+[SM − RM[s]] ” .</a>
<a href="#7" id="7">Thus, the first nondeterministic choices will be elements of {a mathematical formula}RM[s].</a>
<a href="#8" id="8">To improve the efficiency of {a mathematical formula}XUpd1(M,s,AX Α ) we use an order on the generation of nondeterministic choices of sets of states.</a>
<a href="#9" id="9">The option -cN helped both {a mathematical formula}Upd1 and {a mathematical formula}Updprot to limit the search for solutions to models that result from applying at most N changes to the input model.</a>
<a href="#10" id="10">Remark that in the update of {a mathematical formula}Moven w.r.t.</a>
<a href="#11" id="11">{a mathematical formula} Ρ 1, both {a mathematical formula}Upd1 and {a mathematical formula}Updprot produced a first solution in less than one second, even without the aid provided by a limit on the number of changes (Table 2).</a>
<a href="#12" id="12">Thus, {a mathematical formula}Upd1 and {a mathematical formula}Updprot had a similar performance when updating {a mathematical formula}Moven w.r.t.</a>
<a href="#13" id="13">{a mathematical formula} Ρ 1.</a>
<a href="#14" id="14">Unlike {a mathematical formula}Updprot, however, an update through {a mathematical formula}Upd1 may cause {a mathematical formula}Moven to lose some of its properties, for example satisfying (parts of) the specification Ψ .</a>
<a href="#15" id="15">Indeed, the first solution of {a mathematical formula}Upd1(Moven,s0, Ρ 1) does not satisfy Ψ .</a>
<a href="#16" id="16">Even worse, many of the first solutions of {a mathematical formula}Upd1(Moven,s0, Ρ 1) do not satisfy Ψ , as can be inferred from the running time of {a mathematical formula}Upd1(Moven,s0, Φ 10) (Table 2).</a>
<a href="#17" id="17">In practice, a formula used to update a given model is usually more complex than {a mathematical formula} Ρ 1.</a>
</body>
</html>