<html>
<head>
<meta name="TextLength" content="SENT_NUM:17, WORD_NUM:515">
</head>
<body bgcolor="white">
<a href="#0" id="0">Act is the set of actions.</a>
<a href="#1" id="1">An action {a mathematical formula}a ∈ Act is a quadruple {a mathematical formula}a= 〈 id(a),in(a),precond(a),effects(a) 〉 , where:</a>
<a href="#2" id="2">After having derived the CSP state variables X, the actions' preconditions and effects are encoded into constraints.</a>
<a href="#3" id="3">Given an action {a mathematical formula}a=(id(a),in(a),precond(a),effects(a)), we use the notation {a mathematical formula}precond(a)[i],prop[i] and {a mathematical formula}effect(a)[i] to indicate the preconditions, propositions and effects on the state variables corresponding to state i.</a>
<a href="#4" id="4">Thus, {a mathematical formula}precond(a)[i] ({a mathematical formula}effect(a)[i] respectively) results from substituting every variable {a mathematical formula}x ∈ X which appears in {a mathematical formula}precond(a){a mathematical formula}(effect(a)) by its corresponding state variable {a mathematical formula}x[i].</a>
<a href="#5" id="5">We say that a plan has the potential to solve the planning problem, if it corresponds to an execution path which subsumes a sequence of states that satisfy the propositions inferred by the goal.</a>
<a href="#6" id="6">We denote the index of the last state set in an execution path with {a mathematical formula}last(S ˜ ).</a>
<a href="#7" id="7">We first introduce the notion of the minimal execution path.</a>
<a href="#8" id="8">We say that an execution path {a mathematical formula}S ˜ = 〈 S0, Γ (S0), … , Γ k(S0) 〉 has the potential to solve the planning problem P given a set of initial states {a mathematical formula}S0 and a goal g, and we write {a mathematical formula}S ˜ ⊨ g if:</a>
<a href="#9" id="9">The goal is translated into a set of constraints on the CSP-level state variables, which are added to the set of constraints formulating the planning domain.</a>
<a href="#10" id="10">The set of constraints resulting from the translation of the planning domain, the propositions referring to the initial state and the goal form the CSP are passed to the constraint solver.</a>
<a href="#11" id="11">The constraint solver computes a valid assignment to the CSP variables that model the planning actions, and this assignment corresponds to an optimistic plan that has the potential to solve the planning problem.</a>
<a href="#12" id="12">Since the execution time of some service operations may be very long, the orchestrator is able to continue planning and proceed to the execution of subsequent actions if this is allowed by the domain and goal restrictions, while waiting for the response of a service invocation.</a>
<a href="#13" id="13">3 shows plan computation time with respect to an increasing number of variables with domain range {a mathematical formula}[1,100], which all have to be sensed to fulfill the goal.</a>
<a href="#14" id="14">Sensing actions are dependent on each other, so that they have to be performed in sequence in the plan (i.e., plan length is equal to the number of unknowns).</a>
<a href="#15" id="15">Because the notion of state for the RuGPlanner encloses a set of fully instantiated states, the number of possible initial (instantiated) states of knowledge variables and their domain size affects planning time only with respect to the number of sensing actions which have to be included in the plan, their interdependencies, and entailed constraints.</a>
<a href="#16" id="16">This is important, considering that the compilation of the contingent planning problem to a problem which can be solved by a classical planner [2] is, in the general case, linear in the number of possible initial states, and exponential in the number of uncertain fluents.</a>
</body>
</html>