<html>
<head>
<meta name="TextLength" content="SENT_NUM:9, WORD_NUM:857">
</head>
<body bgcolor="white">
<a href="#0" id="0">In other words, we study the algorithms and solution methods that have been developed in the context of modular robotics for tackling problems that emerge when modular robots perform tasks through some fundamental functions such as shape-formation to form a desired configuration from an initial configuration, locomotion for moving from a place to another, manipulation for physical interaction with the objects, supporting and balancing for shoring up unstable objects, etc.</a>
<a href="#1" id="1">Various such metrics have been developed for both lattice- and chain-based modular robots, among which the most popular ones are: (1) ‘ Overlap ’ , which counts the number of modules in {a mathematical formula}A ∩ B in {a mathematical formula}O(n) time [126], (2) ‘ Minimal number of moves ’ , which identifies the minimum number of reconfiguration steps between configurations of A and B, although not practical as it requires that at each iteration reconfiguration between A and B be planned optimally [126], (3) ‘ Optimal assignment ’ , which optimally assigns each element {a mathematical formula}ai in configuration A to an element {a mathematical formula}bj in B in {a mathematical formula}O(n3) time using the Hungarian method such that the total reconfiguration displacements is minimized [125], and (4) ‘ Graph edit distance ’ for counting the least number of edge additions, deletions, and substitutions that transform graph representation of A into graph representation of B [6], [5].Hierarchical Task Network (HTN):As a method of Automated Planning (which is an AI approach that plans for sequences of actions in order to transform the system from an initial state into a goal state), Hierarchical Task Network plans a sequence of primitive actions so that a certain goal task satisfying a condition is realized.</a>
<a href="#2" id="2">Although this technique reduces the required memory and does not impose localization capabilities on modules, it cannot characterize the goal configuration completely so that it is likely to end up configurations that despite matching with the connectors' information, do not expose the same geometrical properties of the original goal configuration [158].Volume Approximation:This method describes the goal configuration as a geometrical expression and requires localization capability of modules.</a>
<a href="#3" id="3">In that work, the state of a cell is defined by the ID of modules located in front of its connectors and the next system state is computed by a transition rule generated by a two-layer artificial neural network with seven inputs (one for the cell state and six for states of neighboring cells) and one output (for the next state of cell).Murata and Kurokawa [115] employed CA for generating the Flow operation based on an abstract model for a specific meta-module of M-TRAN called ‘ tile ’ model, in which a planar regular structure is considered as a plane filled with {a mathematical formula}2×2 tiles (cells).</a>
<a href="#4" id="4">The former looks at fixed points in the cell space and measures changes of those points, while the latter treats an MRS as a system of particles, and studies the motion for each particle.Distributed Planning:It is possible to fulfill the Flow operation by parallel execution of locomotion paths planned per each individual module: for instance, the PacMan algorithm by Butler and Rus [24] can be utilized for generating surface-moving systems, and is applicable to unit-compressible systems like the ‘ Crystalline ’ module, in which paths of modules are planned in parallel using the depth-first search strategy and path conflicts are resolved in the actuation phase to let modules flow among obstacles or even climb up them (also see the Gradient-based solution method in Section 2.2.2 for more details on PacMan).</a>
<a href="#5" id="5">Fitch and Butler [48] employed distributed dynamic programming for planning an individual locomotion path for each module, where modules use local constant-time search and a module-locking scheme in order to ensure physical integrity of the robot, while following their paths toward the goal of locomotion which has been specified by a simple bounding box.Hierarchical Planning:Flow can be considered as a two-level planning problem: at the higher level gross locomotion of the modular robot's body is planned, and at the lower level detailed local movements of modules, coordination of their actions and conflict resolution issues are addressed.</a>
<a href="#6" id="6">Once the next morphology of the modular robot is determined, the lower level plans motions of modules using a PacMan-like algorithm to transform the current morphology to the target morphology identified by the higher level.Reinforcement Learning:The RL method (discussed in Section 2.3.2) can also be utilized for exhibiting flow-like motions.</a>
<a href="#7" id="7">More precisely, Self-assembly enables modular robots to transform into desired morphologies and concerns motion planning of several dispersed, initially-detached modules which move freely in the environment and can establish multiple bilateral connections to other modules in such a way that a coherent configuration is built up at the end [86].</a>
<a href="#8" id="8">In that work, the paths planned by {a mathematical formula}A ⁎ between vacant lattice positions in the goal configuration and modules located off those positions are automatically rewritten into a rule set Φ in such a way that the modular robot reconfigures into a goal configuration by decentralized execution of the rules.Finite State Machines (FSM):In this method each module is equipped with an internal logic that determines its docking behavior according to the sequence of states.</a>
</body>
</html>