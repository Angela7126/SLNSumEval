<html>
<head>
<meta name="TextLength" content="SENT_NUM:12, WORD_NUM:398">
</head>
<body bgcolor="white">
<a href="#0" id="0">We further extended our ACPP approach to produce parallel portfolio solvers consisting of several different solvers by combining their configuration spaces.</a>
<a href="#1" id="1">Applied to the component solvers of the 2012 SAT Challenge gold medal winning SAT Solver pfolioUZK, our ACPP procedures produced a significantly better-performing parallel SAT solver.</a>
<a href="#2" id="2">To evaluate our methods for generating parallel portfolios involving multiple solvers, we started with the set of solvers included by pfolioUZK, a parallel portfolio solver based on several solvers in their default configurations that won the gold medal in the parallel track of the 2012 SAT Challenge.</a>
<a href="#3" id="3">A sequential portfolio solver must somehow select component solvers (which can result in making the wrong decision), while static parallel solvers run the entire portfolio in parallel and thus achieve nearly the same performance as the portfolio's virtual best solver.</a>
<a href="#4" id="4">All other ACPP solvers fell short of this (high) bar; however, the portfolios of Global-MP(8) performed as well as the default portfolio of clasp without clause sharing (Default-MP(8)).</a>
<a href="#5" id="5">In a similar vein, some results in the literature indicate that the collaboration of SAT solvers via clause sharing performs better if the solvers use similar strategies, e.g., the same solver with a fixed configuration runs several times in parallel but with different seed (cf.</a>
<a href="#6" id="6">Given a solver with a rich design space (such as Lingeling and clasp), all our ACPP methods were able to generate 8-core parallel solvers that significantly outperformed their sequential counterparts.</a>
<a href="#7" id="7">We were also able to verify that clause sharing can be used to further improve the performance of an ACPP solver, especially when configuration is performed alongside the component solver instances.</a>
<a href="#8" id="8">Although we did not use parallel solvers with clause sharing (such as Plingeling) in our portfolio, our parHydra method was able to generate a parallel solver without clause sharing that nevertheless performed as well as pfolioUZK.</a>
<a href="#9" id="9">This section extends the scope of our ACPP methods to allow inclusion of parallel solvers that perform clause sharing as portfolio components.</a>
<a href="#10" id="10">The first part of Table 7 summarizes the performance results for these solvers: first the sequential solvers in their default configurations (Default-SP), then the parallel solvers using clause sharing in their default configurations (Default-MP(8)+CS), and finally our ACPP solvers based on the component solvers of pfolioUZK.</a>
<a href="#11" id="11">Using a parallel solver with clause sharing in our ACPP portfolios, we expect that performance could always be improved by increasing the number of parallel threads.</a>
</body>
</html>