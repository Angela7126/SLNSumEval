<html>
<head>
<meta name="TextLength" content="SENT_NUM:24, WORD_NUM:790">
</head>
<body bgcolor="white">
<a href="#0" id="0">On top of these issues, the ability of hierarchical planning to truly cope with the requirements of real-world applications has been often questioned.</a>
<a href="#1" id="1">As a remedy, we propose a framework-based approach where we first provide a basis for defining different formal models of hierarchical planning, and define two models that comprise a large portion of HTN planners.</a>
<a href="#2" id="2">The basic idea behind this technique includes an initial state description, a task network as an objective to be achieved, and domain knowledge consisting of networks of primitive and compound tasks.</a>
<a href="#3" id="3">The application framework concerns the application domain we choose to observe, and it helps us to analyse different studies in an organised and unified way, and possibly to identify points where HTN planning behaves as expected or can be further improved.</a>
<a href="#4" id="4">The criterion is based on the coverage a study gives, which may include information that ranges from a general discussion of techniques and approaches, peculiar matters, such as task interactions and condition types, relevant to our conceptual framework, to properties, such as domain authoring, expressiveness and competence, that may be a part of the analytical framework.</a>
<a href="#5" id="5">Definition 2 suggests that constraints are found in a task network, but constraints can be also added during the planning process in order to resolve inconsistencies.</a>
<a href="#6" id="6">The second category, called helpful interactions, refers to situations when one part of a task network can make use of information associated with another part in the same task network.</a>
<a href="#7" id="7">The detection of these interactions implies the possibility for a planner to generate better-quality task networks and solutions.</a>
<a href="#8" id="8">The condition may be satisfied either by an intentional insertion of a relevant effect earlier in the processing of the task network, or by an explicit introduction of a primitive task that will achieve the required effect.</a>
<a href="#9" id="9">In the first type of search space, the initial task network is reduced to a primitive task network that constitutes a solution to the planning problem.</a>
<a href="#10" id="10">At each point in the space, the task network can be seen as a partially specified plan until the search reaches the point where the task network is primitive and represents a solution plan.</a>
<a href="#11" id="11">Thus, we employ the term plan space to refer to this type of search space.</a>
<a href="#12" id="12">We refer to HTN planners that search in this plan space as plan-based HTN planners, and to the model of HTN planning as plan-based HTN planning.</a>
<a href="#13" id="13">For the obvious reasons, we employ the term state space to refer to the second type of search space.</a>
<a href="#14" id="14">We refer to HTN planners searching in this space as state-based HTN planners, and to the model of HTN planning as state-based HTN planning.</a>
<a href="#15" id="15">The constraint-related concepts, namely the commitment strategy and constraint management in the case of task interactions are shown in the upper part of Table 2.</a>
<a href="#16" id="16">In addition to explicitly typing them into the domain knowledge, the planner is extended to reason about implicit external conditions by examining the domain knowledge [53].</a>
<a href="#17" id="17">HTN planning assumes an initial task network {a mathematical formula}tn0 to be accomplished as an objective for {a mathematical formula}P. In its simplest form, {a mathematical formula}tn0 does not allow to specify conditions to be satisfied in some intermediate state during or in the final state of the execution of the solution to {a mathematical formula}P. Extended goals enable to express a planning objective in a way that its satisfaction could be on a part, on the whole trajectory of the solution, or in the final state.</a>
<a href="#18" id="18">Given that HTN planning can solve problems in various domains, and it requires specific-domain knowledge provided in the set of methods M, HTN planning is a domain-configurable planning technique.</a>
<a href="#19" id="19">This implies a design and implementation of HTN planners that include general problem-solving mechanisms.</a>
<a href="#20" id="20">The problem of finding a process instance suitable to a given context can be seen as a planning problem â€“ finding a plan whose execution depends on the given context.</a>
<a href="#21" id="21">While planning, sensing and possibly executing Web services, several approaches make some of the restricting assumptions, at least those that we were able to identify from the descriptions provided.</a>
<a href="#22" id="22">There is a number of systems that use different approaches to learn domain knowledge from examples: one approach learns preconditions of SHOP-like methods given the method structure as input to the system [18], another one learns incrementally approximate preconditions [148], an approach learns very general HTNs by learning from expert traces [149], or another one that learns HTNs with a better balance between generality and specificity [150].</a>
<a href="#23" id="23">Some approaches acquire methods by analysing a set of planning problems together with their solutions and a set of annotated tasks in a given deterministic domain [19], and others may learn knowledge for domains that include primitive tasks with multiple possible outcomes [151].</a>
</body>
</html>