<html>
<head>
<meta name="TextLength" content="SENT_NUM:10, WORD_NUM:591">
</head>
<body bgcolor="white">
<a href="#0" id="0">A planning problem {a mathematical formula}P=(D,S0,G) is classical if D is classical and there is just one initial state, i.e., {a mathematical formula}S0={s0} for some {a mathematical formula}s0 ∈ S.</a>
<a href="#1" id="1">NDPR works by calling CP on problems of the form {a mathematical formula}(D¯,s,G), and combining CP's solutions into a solution for P. It is nearly identical to the NDP algorithm in [30], except that it omits NDP's faulty pseudocode for unsolvable states and it specifies exactly how to incorporate a plan into the policy (NDP left it unstated).</a>
<a href="#2" id="2">In Section 4.1 we present ConstrainProblem, a procedure for modifying a classical planning problem {a mathematical formula}P=(D¯,s,G) to make some of the actions inapplicable at the first step of any solution to P. Unlike removing state-action pairs, ConstrainProblem only incurs a quadratic increase in the size of the domain description per constrained action.</a>
<a href="#3" id="3">Algorithm 2 is the ConstrainProblem procedure, which takes a classical planning problem {a mathematical formula}(D¯,s,G) and a set A of actions, and returns a new planning problem {a mathematical formula}(D¯ ′ ,s ′ ,G) for which a solution is any solution to {a mathematical formula}(D¯,s,G) that does not start with an action in A.</a>
<a href="#4" id="4">Find-Acceptable-Plan's parameters consist of a nondeterministic planning domain D, its determinization {a mathematical formula}D¯, an initial state {a mathematical formula}s0, a set of goal states G, a classical planner CP, and a set U of states to avoid.</a>
<a href="#5" id="5">This requires overcoming two potential problems: (1) if the plan p generated by CP contains a cycle, then p cannot be translated into a policy because it will require two different actions at one of its states, and (2) if p goes through a state in U, then it cannot be translated into a policy that solves the nondeterministic problem {a mathematical formula}(D,{s},G), since the states in U are known to be unsolvable.</a>
<a href="#6" id="6">Let CP be a sound and complete classical planner, U be a set of states, D be a nondeterministic planning domain, and{a mathematical formula}D¯=(L,O¯)be the determinization of D. Let S be the set of all states in{a mathematical formula}L(i.e.,{a mathematical formula}S=2F),{a mathematical formula}F={all ground atoms overL}, and{a mathematical formula}Abe the set of all possible actions (i.e., all possible ground instantiations of the planning operators in O).Then{a mathematical formula}Find-Acceptable-Plan(D,D¯,s0,G,CP,U)makes at most{a mathematical formula}|S| ⋅ |A|+1calls to CP, and returns an acyclic plan, if such a plan exists, whose policy image in D avoids the states in U.</a>
<a href="#7" id="7">This means that for a problem with n locations, there are {a mathematical formula}n+1 states, {a mathematical formula}n2+2n − 2 actions, and a single correct policy.</a>
<a href="#8" id="8">Let CP be a sound and complete classical planner, U be a set of states, D be a nondeterministic planning domain, and{a mathematical formula}D¯=(L,O¯)be the determinization of D. Let S be the set of all states in{a mathematical formula}L(i.e.,{a mathematical formula}S=2F),{a mathematical formula}F={all ground atoms overL}, and{a mathematical formula}Abe the set of all possible actions (i.e., all possible ground instantiations of the planning operators in O).Then{a mathematical formula}Find-Acceptable-Plan(D,D¯,s0,G,CP,U)makes at most{a mathematical formula}|S| ⋅ |A|+1calls to CP, and returns an acyclic plan, if such a plan exists, whose policy image in D avoids the states in U.</a>
<a href="#9" id="9">The proof is by induction on the size of U.Let s be the first state added to U, which means Find-Acceptable-Plan returned failure when planning from s. Since U is empty and by Lemma 6 Find-Acceptable-Plan is complete, there is no path to a goal state from s, and so s would not be a Π -descendant of {a mathematical formula}s0 in any valid strong cyclic policy.Induct.</a>
</body>
</html>