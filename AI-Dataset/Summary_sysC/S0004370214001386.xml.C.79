<html>
<head>
<meta name="TextLength" content="SENT_NUM:19, WORD_NUM:722">
</head>
<body bgcolor="white">
<a href="#0" id="0">The original CBS algorithm corresponds to the extreme case where {a mathematical formula}B= ∞ (never merge agents), and the Independence Detection (ID) framework [45] is the other extreme case where {a mathematical formula}B=0 (always merge agents when conflicts occur).</a>
<a href="#1" id="1">For each agent {a mathematical formula}ai we assume that no other agent exists and calculate its optimal individual path cost from all states in the state space to {a mathematical formula}goali; this is usually done by a reverse search from the goal.</a>
<a href="#2" id="2">This continues until a conflict occurs between {a mathematical formula}q ≥ 2 agents at node n. In this case there is a need to locally increase the search dimensionality.</a>
<a href="#3" id="3">The low-level search (described in detail below) returns one shortest path for each agent, {a mathematical formula}ai, that is consistent with all the constraints associated with {a mathematical formula}ai in node N. Once a consistent path has been found for each agent (with respect to its own constraints) these paths are then validated with respect to the other agents.</a>
<a href="#4" id="4">If no two agents plan to be at the same location at the same time, this CT node N is declared as the goal node, and the current solution ({a mathematical formula}N.solution) that contains this set of paths is returned.</a>
<a href="#5" id="5">Given a non-goal CT node N whose solution {a mathematical formula}N.solution includes a conflict{a mathematical formula}Cn=(ai,aj,v,t) we know that in any valid solution, at most one of the conflicting agents ({a mathematical formula}ai and {a mathematical formula}aj) may occupy vertex v at time t. Therefore, at least one of the constraints {a mathematical formula}(ai,v,t) or {a mathematical formula}(aj,v,t) must be added to the set of constraints in {a mathematical formula}N.constraints.</a>
<a href="#6" id="6">We can generate k children, each of which adds a constraint to {a mathematical formula}k − 1 agents (i.e., each child allows only one agent to occupy the conflicting vertex v at time t).</a>
<a href="#7" id="7">The low-level search is given an agent, {a mathematical formula}ai, and the set of constraints associated with {a mathematical formula}ai.</a>
<a href="#8" id="8">It performs a search in the underlying graph to find an optimal path for agent {a mathematical formula}ai that satisfies all its constraints while completely ignoring the other agents.</a>
<a href="#9" id="9">Whenever a state {a mathematical formula}(v,t) is generated where v is a location and t a time step and there exists a constraint ({a mathematical formula}ai,v,t) in the current CT (high-level) node, this state is discarded.</a>
<a href="#10" id="10">Since {a mathematical formula}N.cost is the sum of all the optimal consistent single agent solutions, it has the minimum cost among all consistent solutions.</a>
<a href="#11" id="11">By contrast, {a mathematical formula}minCost(CV(N)) has the minimum cost among all consistent and valid solutions.</a>
<a href="#12" id="12">Since the set of all consistent and valid solutions is a subset of all consistent solutions, it must be that {a mathematical formula}N.cost ≤ minCost(CV(N)).</a>
<a href="#13" id="13">When the ID framework is applied to k agents (whose start and goal locations are randomized) the resulting effective number of agents, {a mathematical formula}k ′ , is noisy and its variance is very large.</a>
<a href="#14" id="14">Note that although CBS generates more nodes than EPEA*, it is still faster in many cases ({a mathematical formula}k ′ >14) due to the fact that the constant time per node of the low-level CBS (single-agent state, small open list) is much smaller than that of EPEA* (multiple agents, large open list).</a>
<a href="#15" id="15">Assume a 3-agent problem where in the optimal solution agent {a mathematical formula}a3 must go through vertex v at time step t. Calling MA-CBS to solve this problem creates the root CT node.</a>
<a href="#16" id="16">Assume that in the path chosen for each agent in the root CT node both agents {a mathematical formula}a1 and {a mathematical formula}a2 are assigned vertex v at time step t. Next, MA-CBS branches according to the conflict {a mathematical formula}(a1,a2,v,t).</a>
<a href="#17" id="17">Next, we describe how MA-CBS can be modified to be an effective optimal solver that requires memory of size {a mathematical formula}O(k ⋅ C ⁎ ⋅ |V|), that is the product of the number of agents, k, the cost of the optimal solution cost, {a mathematical formula}C ⁎ and the size of the input graph, {a mathematical formula}|V|.</a>
<a href="#18" id="18">For the memory efficient variant we define a new constraint {a mathematical formula}(ai,v,t¯) which means that agent {a mathematical formula}aimust be at location v at time step t. Now, when a conflict {a mathematical formula}(a1,a2,v,t) is found three children are generated.</a>
</body>
</html>