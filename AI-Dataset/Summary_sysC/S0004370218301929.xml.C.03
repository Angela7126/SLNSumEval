<html>
<head>
<meta name="TextLength" content="SENT_NUM:29, WORD_NUM:748">
</head>
<body bgcolor="white">
<a href="#0" id="0">Conceptually, the time-based window is only applicable if {a mathematical formula}t ∈ T.</a>
<a href="#1" id="1">To this end, we can use a sliding time-based window function {a mathematical formula} Τ 4.</a>
<a href="#2" id="2">Window {a mathematical formula}S1 is shown in Fig.</a>
<a href="#3" id="3">At {a mathematical formula}t=44 this would result in the window as depicted in Fig.</a>
<a href="#4" id="4">If {a mathematical formula}t ∈ T, the partition-based window of S at time t (relative to {a mathematical formula}idx,n) is defined by{a mathematical formula} If {a mathematical formula}t ∉ T, we define {a mathematical formula}pidx,n(S,t)=S.</a>
<a href="#5" id="5">LARS extends propositional logic for streaming data by employing any window function w (Definition 3) in a window operator {a mathematical formula} ⊞ w.</a>
<a href="#6" id="6">If w is a window function, we call {a mathematical formula} ⊞ w a window operator.</a>
<a href="#7" id="7">Let {a mathematical formula}S=(T, Υ ) be a stream, i.e., the input stream or a window, and {a mathematical formula}t ∈ T be a time point.</a>
<a href="#8" id="8">However, given a (sub)formula {a mathematical formula} ⊞ w Φ , one typically wants to evaluate Φ in the obtained window regardless of the specific evaluation time and its position relative to the window.</a>
<a href="#9" id="9">Let P be a program, D be a data stream and {a mathematical formula}t ∈ N.</a>
<a href="#10" id="10">This allows us to solve the model checking problem for ground {a mathematical formula} Α − formulas in polynomial time by using labeling techniques.</a>
<a href="#11" id="11">For checking satisfiability of LARS programs, we obtain based on the previous theorem also {a mathematical formula}PSpace-completeness.</a>
<a href="#12" id="12">data stream D and a time point t has polynomial size and can be verified in polynomial space; the {a mathematical formula}PSpace-hardness is again inherited from model checking for LARS formulas (see Appendix).</a>
<a href="#13" id="13">The membership in {a mathematical formula} Σ 2p follows from Theorem 9, as a candidate answer stream for P w.r.t.</a>
<a href="#14" id="14">a data stream D and time point t can be guessed and checked in polynomial time with an {a mathematical formula}NP oracle.</a>
<a href="#15" id="15">From Theorem 10 we immediately obtain the {a mathematical formula}P-membership of model checking for LARS formulas with bounded window nesting in Theorem 8.</a>
<a href="#16" id="16">If we apply a further time-based window on {a mathematical formula}S ′ , we obtain another stream of this form.</a>
<a href="#17" id="17">Our translation of LARS formulas to PLTL-formulas for evaluation at a time point t in a stream {a mathematical formula}S=(T, Υ ), where {a mathematical formula}T=[ ℓ ′ ,u ′ ], is shown in Algorithm 1.</a>
<a href="#18" id="18">By this proposition, we can reduce model checking of a LARS formula Φ on an input stream {a mathematical formula}S=(T, Υ ), to model checking an ad-hoc PLTL formula constructed from Φ , M and the specific time point {a mathematical formula}t ∈ T, on a single path {a mathematical formula} Π (M).</a>
<a href="#19" id="19">Since {a mathematical formula}ALogSpace=P, this yields an alternative proof that for LARS formulas with sliding time-based window operators, model checking is feasible in polynomial time.</a>
<a href="#20" id="20">Formally, let {a mathematical formula}PN,N denote the class of propositional LARS programs in which all windows are sliding time-based windows {a mathematical formula} ⊞ i,j.</a>
<a href="#21" id="21">It thus follows that the answer set of {a mathematical formula} Δ D(Q) corresponds to the answer stream of {a mathematical formula} Δ L(Q).</a>
<a href="#22" id="22">By dropping temporal information, any window function w in CQL is captured in LARS by a window operator {a mathematical formula} ⊞ w, followed by ◇ .</a>
<a href="#23" id="23">The push-based mode will infer c whenever any atom holds in window {a mathematical formula} ⊞ 0 that contains only the current time point.</a>
<a href="#24" id="24">LARS assigns atoms to a single timeline by an evaluation function {a mathematical formula} Υ :T → 2A.</a>
<a href="#25" id="25">That is to say, we control at which time T the window {a mathematical formula} ⊞ +5 is selected, where T itself is inferred information.</a>
<a href="#26" id="26">It follows that we can refute nondeterministically in polynomial time that I is an answer stream of P for D at t. Consequently, problem MC is for LARS programs {a mathematical formula}P − in {a mathematical formula}co-NP.</a>
<a href="#27" id="27">As P can be seen as an open LARS formula and no window operators occur in it, the hardness results hold already for {a mathematical formula} Α − respectively {a mathematical formula}P − .Data complexity.</a>
<a href="#28" id="28">The data complexity of LARS formulas and LARS programs (i.e., the formula Α respectively the program P is fixed and just varying the data stream D and the time point t is varied) coincides with the one of ground LARS formulas {a mathematical formula} Α − (respectively programs {a mathematical formula}P − ), as shown in Table 1.</a>
</body>
</html>