<html>
<head>
<meta name="TextLength" content="SENT_NUM:19, WORD_NUM:819">
</head>
<body bgcolor="white">
<a href="#0" id="0">This paper aims to fill in this gap through reviewing 64 solution methods and algorithms according to their application in each operation and by investigating their capabilities in (1) modeling and simplifying MRS problems through Abstraction methods, (2) solving MRS problems through Solution and Control methods, and (3) coordinating actions of modules through Synchronization methods.</a>
<a href="#1" id="1">Moreover, the tightly coupled kinematics of the connected modules within a configuration not only limits the number of possible actions of each module, but also urges development of such controllers that avoid taking actions that may lead to undesirable conditions in the structure of modular robot.</a>
<a href="#2" id="2">[195] studied modular robots merely from the hardware point of view, and categorized reconfiguration methods according to the source of module motion into deterministic and stochastic reconfiguration categories.</a>
<a href="#3" id="3">Self-Reconfiguration is the process of transforming a modular robot from an initial configuration to a desired configuration through a set of primitive and module-level actions while the total number of modules is preserved, and Self-Reconfiguration Planning is the process of planning such sequence of actions.</a>
<a href="#4" id="4">An example of graph representation corresponding to a configuration of eight M-TRAN modules is demonstrated in Fig.</a>
<a href="#5" id="5">In the Control-based approach, the role of Abstraction methods is to describe the goal configuration for the controller, while the role of Solution methods is to develop mechanisms for selecting suitable actions to transform a modular robot into its ultimate goal configuration.</a>
<a href="#6" id="6">In the Gradient-based method, some modules or cells of a lattice grid become a ‘ source ’ module and play the role of a ‘ seed ’ .</a>
<a href="#7" id="7">In order to plan motion of modules in a distributed manner, Butler and Rus [24] developed the PacMan algorithm inspired from a video game with the same name for a system of Crystalline modules, in which ‘ target ’ modules attract ‘ mobile ’ ones via a motion path drawn for each module by means of special marks called pellets.</a>
<a href="#8" id="8">Abstract Module Model:Since Agent-based methods address modules individually, special-purpose abstraction models can be developed for abstracting properties of individual modules (such as motion constraints) and numerous intra-module kinematic couplings of modular robots.</a>
<a href="#9" id="9">[134] utilized this property in solving self-reconfiguration problem because it ensures that modules will remain together during the reconfiguration process and the connectedness of the MRS is preserved while the actions of modules towards the goal configuration are coordinated.</a>
<a href="#10" id="10">In that work, each module tries to connect itself to other modules in such a way that edges corresponding to its connection with other modules in the graph representation match the edges in the graph representation of goal configuration.</a>
<a href="#11" id="11">[1] in which at the higher level a parallel GA search is used for finding the most suitable morphology that a lattice based modular robot (particularly ‘ Crystalline ’ ) must assume during its Flow among obstacles toward a goal position.</a>
<a href="#12" id="12">A challenge in Flow methods is to produce simultaneous motions of modules while it is guaranteed that there is no chance for deadlock conditions, collision between modules, and risk of fragmentation in the modular robot.</a>
<a href="#13" id="13">These two strategies were experimentally employed in learning gait control tables for realizing typical gaits in ATRON and M-TRAN modules such as snake, walker, and crawler, which each module independently learns what action to do at each time interval.Phase Automata:This methods was introduced in [204] as a formal model for programming locomotion gaits in chain-based modular robots.</a>
<a href="#14" id="14">Thus, it is crucial to devise methods that control the interactions between modules (including communication, motion, and connection) according to the state of modules and towards the final configuration so that the likelihood of reaching ‘ assembly yields ’ (the desired assemblies) is maximized.</a>
<a href="#15" id="15">In that work, the paths planned by {a mathematical formula}A ⁎ between vacant lattice positions in the goal configuration and modules located off those positions are automatically rewritten into a rule set Φ in such a way that the modular robot reconfigures into a goal configuration by decentralized execution of the rules.Finite State Machines (FSM):In this method each module is equipped with an internal logic that determines its docking behavior according to the sequence of states.</a>
<a href="#16" id="16">Yu and Nagpal [200] proposed a stepwise algorithm for producing a ‘ pressure-adaptive column ’ system from modular robots in three steps: (i) modules detect the presence of unknown objects on the structure, (ii) each module transmits the value of its pressure sensor to its neighbors, and (iii) each module controls its actuator parameters based on sensor feedbacks received from neighbors.</a>
<a href="#17" id="17">A ‘ modular gripper ’ that can manipulate fragile objects was studied in [200], in which through employing distributed sensing and actuation, chain modules actuate in order to grasp an object in a fixed morphology (see Fig.</a>
<a href="#18" id="18">[36] introduced ‘ ATRON-anatomy ’ which simulates muscle, bone, and joint parts in the configurations of ATRON modules for generating modular robots that are able to scale up their diversity of functionality with the number of modules.</a>
</body>
</html>