<html>
<head>
<meta name="TextLength" content="SENT_NUM:21, WORD_NUM:852">
</head>
<body bgcolor="white">
<a href="#0" id="0">The second algorithm we present, {a mathematical formula}APTS/ANA ⁎ , is an anytime search algorithm, i.e., an algorithm “ whose quality of results improves gradually as computation time increases ” [4].</a>
<a href="#1" id="1">{a mathematical formula}APTS/ANA ⁎ can be viewed as a translation of an anytime search algorithm into a sequence of bounded-cost search problems solved by PTS, or as an intelligent approach to avoid the parameter setting problem of Weighted {a mathematical formula}A ⁎ -based anytime search algorithms.</a>
<a href="#2" id="2">Furthermore, experiments suggest that {a mathematical formula}APTS/ANA ⁎ improves upon previous anytime search algorithms in most cases by (1) finding an initial solution faster, (2) spending less time between solution improvements, (3) decreasing the suboptimality bound of the current-best solution more gradually, and (4) converging faster to an optimal solution when reachable.</a>
<a href="#3" id="3">The potential of a node n is defined with respect to a given value C, and is the probability that a node n is part of a solution of cost lower than C. We prove that the node with the highest {a mathematical formula}u( ⋅ ) is the node with the highest potential, under certain probabilistic relation between the heuristic function and the cost it estimates.</a>
<a href="#4" id="4">We show that expanding the node with the highest {a mathematical formula}u( ⋅ ) has the same effect as setting the parameters of {a mathematical formula}ARA ⁎ dynamically to improve the best solution found so far as fast as possible.</a>
<a href="#5" id="5">As mentioned above, the experimental results suggest that {a mathematical formula}APTS/ANA ⁎ improves upon previous anytime search algorithms in terms of key metrics that determine the quality of an anytime algorithm.</a>
<a href="#6" id="6">The input to PTS, and in general to any bounded-cost search algorithm, is the initial state s from which the search begins, and the cost bound C. In every iteration, the node with the highest {a mathematical formula}u( ⋅ ), denoted as n, is expanded from OPEN (line 3).</a>
<a href="#7" id="7">Effective search algorithms for such domains employ two types of heuristics – one that estimates the cost of reaching a goal, denoted by {a mathematical formula}h( ⋅ ), and one that estimates the number of steps required to reach a goal, denoted by {a mathematical formula}d( ⋅ )[20].</a>
<a href="#8" id="8">Thus, we can use PTS in every call to ImproveSolution (line 4) with cost bound G. The resulting anytime search algorithm does not require parameter tuning (e.g., of w) and is shown empirically to be superior to other anytime search algorithms on a wide range of domains (see Section 5).</a>
<a href="#9" id="9">If an optimal solution has not yet been found, there must be a node {a mathematical formula}n ′ ∈ OPEN that is on an optimal path to a goal and whose g value is optimal, i.e., {a mathematical formula}g(n ′ )=g ⁎ (n ′ ) (see Lemma 1 in [1]).</a>
<a href="#10" id="10">The minimal cost to move from {a mathematical formula}n ′ to the goal is {a mathematical formula}G ⁎ − g ⁎ (n ′ ), since {a mathematical formula}n ′ is on an optimal path to a goal.</a>
<a href="#11" id="11">As the heuristic is admissible, {a mathematical formula}h(n ′ ) ≤ G ⁎ − g ⁎ (n ′ ).</a>
<a href="#12" id="12">Therefore:{a mathematical formula} where the last inequality follows as {a mathematical formula}G>G ⁎ ≥ g ⁎ (n ′ ) ≥ 0.</a>
<a href="#13" id="13">Previous approaches to provide a suboptimality bound to an anytime search algorithm used {a mathematical formula}fmin=minn ∈ OPENg(n)+h(n).</a>
<a href="#14" id="14">In summary, {a mathematical formula}APTS/ANA ⁎ improves on {a mathematical formula}ARA ⁎ in five ways: (1) {a mathematical formula}APTS/ANA ⁎ does not require parameters to be set; (2) {a mathematical formula}APTS/ANA ⁎ is maximally greedy to find an initial solution; (3) {a mathematical formula}APTS/ANA ⁎ is maximally greedy to improve the incumbent solution; (4) {a mathematical formula}APTS/ANA ⁎ only needs to update the keys of the nodes in OPEN when an improved solution is found; and (5) {a mathematical formula}APTS/ANA ⁎ makes an informed effort to gradually decrease the suboptimality bound.</a>
<a href="#15" id="15">Every time a better solution is found, {a mathematical formula}APTS/ANA ⁎ is required to re-sort all the nodes in OPEN (Algorithm 2) to account for the new incumbent solution (the {a mathematical formula}u( ⋅ ) values change).</a>
<a href="#16" id="16">Thus, if there are many solutions, each slightly better than the previous, then {a mathematical formula}APTS/ANA ⁎ would suffer from the overhead of re-sorting OPEN every time a new, better, solution is found.</a>
<a href="#17" id="17">Instead of using {a mathematical formula}APTS/ANA ⁎ to find the first solution, it is possible to use another algorithm (e.g., Speedy search [46]) to find the first solution and provide it to {a mathematical formula}APTS/ANA ⁎ as an initial incumbent solution.</a>
<a href="#18" id="18">In domains where instances could be solved optimally in reasonable time, we chose the range of C values to cover bounds close to the average optimal solution as well as substantially higher bounds.</a>
<a href="#19" id="19">In domains where solving instances optimally was not feasible, we chose the cost bounds that were solvable by the compared algorithms in reasonable time.</a>
<a href="#20" id="20">The number of nodes expanded is given in Table 2 as the percentage of nodes expanded with respect to the number of nodes expanded by {a mathematical formula}A ⁎ until an optimal solution is found.</a>
</body>
</html>