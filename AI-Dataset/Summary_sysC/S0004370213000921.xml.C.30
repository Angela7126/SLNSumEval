<html>
<head>
<meta name="TextLength" content="SENT_NUM:21, WORD_NUM:542">
</head>
<body bgcolor="white">
<a href="#0" id="0">In this section, we propose the configuration checking (CC) strategy for SAT and use it to develop an SLS algorithm called Swcc (Smoothed Weighting with Configuration Checking).</a>
<a href="#1" id="1">Given a SAT local search algorithm solving a CNF formula F, the configuration checking strategy can be described as follows.</a>
<a href="#2" id="2">For a variable {a mathematical formula}x ∈ V(F), if the configuration of x has not been changed (in this work, this means none of its neighboring variables has been flipped) since its last flip, then it is forbidden to be flipped.</a>
<a href="#3" id="3">Typically, the CC strategy is used in the greedy mode, to decrease blind unreasonable greedy search.</a>
<a href="#4" id="4">With the above implementation of the CC strategy, a variable x is a CCD variable if and only if {a mathematical formula}score(x)>0 and {a mathematical formula}confChange(x)=1 hold at the same time.</a>
<a href="#5" id="5">The Swcc algorithm is outlined in Algorithm 1, as described below.</a>
<a href="#6" id="6">In the beginning, the algorithm generates a random complete assignment Α , initializes all clause weights as 1 and computes {a mathematical formula}scores of variables accordingly, and initializes {a mathematical formula}confChange(x) as 1 for each variable x.</a>
<a href="#7" id="7">The two algorithms perform similarly on small instances with {a mathematical formula}n ⩽ 6000.</a>
<a href="#8" id="8">However, for the larger instances, the performance of Swcc is much better than that of Swtabu.</a>
<a href="#9" id="9">Specially, for the instances with {a mathematical formula}n ⩾ 20000, the success rates of Swcc are very close to 100%, while those of Swtabu are always less than 10%.</a>
<a href="#10" id="10">These experimental results suggest that the CC strategy is more promising than the tabu mechanism in solving random 3-SAT instances.</a>
<a href="#11" id="11">First, we replace the SWT scheme in Swcca with PAWS [46], leading to a new algorithm called CCApaws.</a>
<a href="#12" id="12">More importantly, we propose a new variable property called subscore, and utilize it to break ties in CCApaws, resulting in the algorithm CCAsubscore, which proves very efficient for random k-SAT with {a mathematical formula}k>3.</a>
<a href="#13" id="13">Our experiments show that CCAsubscore significantly outperforms other state-of-the-art local search algorithms on random 5-SAT and 7-SAT instances.</a>
<a href="#14" id="14">For a random k-SAT formula {a mathematical formula}Fk(n,m), we calculate the size of each variable ʼ s neighborhood in F as following.</a>
<a href="#15" id="15">In the following, we show that if each variable ʼ s neighborhood is too large, the CC strategy degrades to the tabu method with tabu tenure 1, which forbids to flip the variable that was just flipped in last step.</a>
<a href="#16" id="16">Recall that the CC strategy forbids a variable to be flipped if since its last flip, none of its neighboring variables has been flipped.</a>
<a href="#17" id="17">For a given formula, it is clear that if any two variables are neighboring to each other, then the CC strategy degrades to the tabu method with a tabu tenure of 1.</a>
<a href="#18" id="18">For a given random k-SAT formula {a mathematical formula}Fk(n,m), according to the above proposition, if {a mathematical formula}ln(n − 1)<k(k − 1)rn − 1 ({a mathematical formula}r=mn), then each variable is expected to have all other variables as its neighborhood.</a>
<a href="#19" id="19">We specially remark that the CC strategy degrades to the tabu method with {a mathematical formula}tt=1 for random 7-SAT instances at {a mathematical formula}r=85 with {a mathematical formula}n<564.</a>
<a href="#20" id="20">On the other hand, modern local search solvers for SAT cannot solve such random 7-SAT instances with more than 300 variables (within reasonable time).</a>
</body>
</html>