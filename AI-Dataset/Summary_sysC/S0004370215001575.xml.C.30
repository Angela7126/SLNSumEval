<html>
<head>
<meta name="TextLength" content="SENT_NUM:76, WORD_NUM:1880">
</head>
<body bgcolor="white">
<a href="#0" id="0">Our program makes conjectures about relations of real number invariants of mathematical objects.</a>
<a href="#1" id="1">Conjectures in matrix theory, number theory, and graph theory are reported, together with an experiment in using conjectures to automate game play.</a>
<a href="#2" id="2">The program can be used in a way that, by design, advances mathematical research.</a>
<a href="#3" id="3">These experiments suggest that automated conjecture-making can be a useful ability in the design of machines that can perform a variety of tasks that require intelligence.</a>
<a href="#4" id="4">We have reimplemented Fajtlowicz's useful but little-known Dalmatian heuristic for the automation of mathematical conjecture-making (this heuristic, for instance, has never been referenced in the pages of this journal).</a>
<a href="#5" id="5">The heuristic is general and can be used to conjecture relations between real number invariants of any objects, mathematical or otherwise.</a>
<a href="#6" id="6">We include examples of conjectures in number theory, matrix theory, graph theory and the characterization of game positions.</a>
<a href="#7" id="7">One of the number theory conjectures implies, and is stronger than, Goldbach's Conjecture.</a>
<a href="#8" id="8">Some of the number theory conjectures seem to imply the Riemann Hypothesis.</a>
<a href="#9" id="9">And some of the graph theory conjectures would advance the lower bound theory of the independence number of a graph, a widely-studied NP-hard graph invariant.</a>
<a href="#10" id="10">The program cannot make any more conjectures than the number of objects being considered (stored in the program) — so the number of generated conjectures is fundamentally limited.</a>
<a href="#11" id="11">Each conjecture must be significant with respect to at least one object — each must provide better information about a stored object than any of the other conjectures.</a>
<a href="#12" id="12">When applied to the problem of finding bounds of invariants — in cases where bounds are of pre-existing research interest — and provided with examples (objects) where existing theory does not suffice to predict the value of the invariant for the example, a program implementing the Dalmatian heuristic will produce a conjecture.</a>
<a href="#13" id="13">In the sense that the truth of the conjecture would advance existing theory, the conjecture can be said to be interesting or significant.</a>
<a href="#14" id="14">The utility of the output can be further improved by including existing knowledge in the program.</a>
<a href="#15" id="15">That is, the inequality {a mathematical formula} Α ≤ Α 1+ Α 2 can be interpreted as, “ For every object {a mathematical formula}O, {a mathematical formula} Α (O) ≤ Α 1(O)+ Α 2(O). ” A conjectured upper bound u is only added to the database of conjectures if the bound passes the following two tests.</a>
<a href="#16" id="16">What follows is pseudocode for this main loop of our program for the case where conjectured upper bounds for some invariant is desired.</a>
<a href="#17" id="17">upper_bound, a potential conjectured upper bound for invariant, is an expression constructed from the invariants and operators included in the program.</a>
<a href="#18" id="18">objects is the list of examples known to the program.</a>
<a href="#19" id="19">The value of invariant and upper_bound applied to each {a mathematical formula}O in objects is a real number; similarly, the value of u applied to {a mathematical formula}O, for each u in conjectured_upper_bounds and each {a mathematical formula}O in objects is a real number.</a>
<a href="#20" id="20">In the case where both the truth and significance tests are passed, upper_bound is added to the conjectures store conjectured_upper_bounds.</a>
<a href="#21" id="21">The main loop for the case of lower bound conjectures would parallel this.</a>
<a href="#22" id="22">Expressions formed with the unary “ add 1 ” operator are never formed as the program stops after the ninth iteration, at which point the conjectures in the conjecture store exactly predict the value of {a mathematical formula} Π (x) for all objects x in {a mathematical formula}{5,16}.</a>
<a href="#23" id="23">The next considered conjecture is “ the number of prime factors of any integer x is no more than {a mathematical formula} Π (x) ” .</a>
<a href="#24" id="24">The considered conjecture in Iteration 3 is “ the number of divisors of an integer x is no more than {a mathematical formula} Π (x) ” .</a>
<a href="#25" id="25">This is true for all of the objects and is significant as this lower bound is better than the number_prime_factors lower bound for at least one of the known objects; so number_prime_factors is added to the conjectures store.</a>
<a href="#26" id="26">In fact it is at least as good for all the known objects.</a>
<a href="#27" id="27">Since there is no object x in {a mathematical formula}{5,16} where number_prime_factors(x) > number_of_divisors(x).</a>
<a href="#28" id="28">The number_of_divisors bound is removed from the conjectures store as insignificant.</a>
<a href="#29" id="29">The next change to the conjectures store comes after Iteration 9.</a>
<a href="#30" id="30">The considered conjecture is “ the number of prime factors of an integer x plus the number of its divisors is no more than {a mathematical formula} Π (x) ” .</a>
<a href="#31" id="31">This is true for all known objects, and the bound passes the truth test.</a>
<a href="#32" id="32">The bound gives a larger value than number_of_divisors for at least one known objects and is thus significant and added to the conjecture store.</a>
<a href="#33" id="33">In fact number_of_divisors is no longer a significant bound and it is removed.</a>
<a href="#34" id="34">At this point, for each object x, the maximum of the conjectured bounds equals the actual value of {a mathematical formula} Π (x).</a>
<a href="#35" id="35">No further bounds can be significant and the program stops.</a>
<a href="#36" id="36">Some of Graffiti's best-known conjectures are the following lower bounds for the independence number Α of a graph (the maximum number of pairwise non-adjacent vertices in the graph, an NP-hard-to-compute graph invariant), and were made prior to the addition of the Dalmatian heuristic to that program.</a>
<a href="#37" id="37">Pre-Dalmatian versions of Graffiti were also used to generate some interesting number theory conjectures including, for instance, a formula for {a mathematical formula} Π (x).</a>
<a href="#38" id="38">(Graph theory, WoW #747) If G is a connected graph then {a mathematical formula}d¯ ≤ b2, where b is the bipartite number, the order of a largest induced bipartite subgraph [1].</a>
<a href="#39" id="39">Here the objects are connected graphs, and the average distance and bipartite number are graph invariants.</a>
<a href="#40" id="40">Remove insignificant conjectures.</a>
<a href="#41" id="41">After a conjecture is added to the store of conjectures, it may be the case that another conjecture in the store is no longer significant.</a>
<a href="#42" id="42">If conjectured upper bounds (for example) for an invariant Α are being generated then a conjectured bound {a mathematical formula} Α i in the conjectures store is significant, with respect to the stored objects, if and only if there is an object {a mathematical formula}O such that {a mathematical formula} Α i(O)<min ⁡ { Α j(O):j ≠ i}, that is, if and only if, there is an object {a mathematical formula}O where the bound gives a better predicted value for {a mathematical formula} Α (O) than any other conjectured bound does.</a>
<a href="#43" id="43">Insignificant conjectures are then removed.</a>
<a href="#44" id="44">The program can never make more conjectures than the number of objects it has stored: the reason is exactly because each conjecture in the conjectures store must give a better bound for at least one stored object than any other conjecture does.If there were, for instance, two stored objects and three conjectured bounds, at least one of the conjectured bounds could not possibly be significant: at best one of the conjectures could be the best bound for one of the objects and another for the second object — but the third conjecture would have no possible remaining objects for which it could give the unique best predicted value; this conjecture would have been removed as insignificant.</a>
<a href="#45" id="45">In general, we expect counterexamples of existing conjectures to be the best objects to input to a conjecture-making program.</a>
<a href="#46" id="46">While one use for conjectured bounds for an invariant is as statements for mathematical investigation, another possible use is for the heuristic estimation of an invariant value.</a>
<a href="#47" id="47">An estimate for the value of the determinant of a matrix can be made by using either of the minimum of the values of the conjectured upper bounds for the determinant, or the maximum of the values of the conjectured lower bounds.</a>
<a href="#48" id="48">While the determinant of a matrix is efficiently computable and an estimate may not be of any practical interest, there are other hard-to-compute invariants — for example, the independence number of a graph — where estimates generated from efficiently computable conjectured bounds may be of interest.</a>
<a href="#49" id="49">Another case where conjecture-driven invariant estimates might be of use is in characterizing a class of objects.</a>
<a href="#50" id="50">Conjecture 1 is curious as the bound goes to 0 as x gets large, and the bound is of little predictive use.</a>
<a href="#51" id="51">Nevertheless, the only object initially known to the program was the integer 4, and for this object the lower bound exactly predicts the true value of 1 for Goldbach(4).</a>
<a href="#52" id="52">The second conjecture, which is much stronger in general, fails to predict Goldbach(4) and thus does not supersede the first conjecture (the first conjecture is “ stronger ” for {a mathematical formula}x=4).</a>
<a href="#53" id="53">Both conjectures were tested and were true for values of x up to 1,000,000.</a>
<a href="#54" id="54">No counterexample was found to the second conjecture and, thus, no further conjectures could be added to the list of conjectures.</a>
<a href="#55" id="55">The second conjecture is, in general, stronger than Goldbach's Conjecture and, if true, would imply it.</a>
<a href="#56" id="56">Conjectures from the first run of the program are recorded in Table 8.</a>
<a href="#57" id="57">The invariants used in these are the same as those used in the first run of conjectures for Goldbach(x).</a>
<a href="#58" id="58">By the design of the program, we know that the truth of these conjectures was tested for only 49 integers (all less than 440).</a>
<a href="#59" id="59">Conjectures 2, 13 and 26 from Table 8 seemed of possible interest as they are similar in form to the PNT.</a>
<a href="#60" id="60">We further tested the truth of these three conjectures for all integers no more than {a mathematical formula}x=1,000,000.</a>
<a href="#61" id="61">Conjecture 26 is false for {a mathematical formula}x=467.</a>
<a href="#62" id="62">Conjectures 2 and 13 are true for all tested values of x.</a>
<a href="#63" id="63">We used McKay's program geng[61] to generate all graphs up to some (small) specified order in a loop to automatedly find counterexamples to generated conjectures and, thus, automatedly improve the produced conjectures.</a>
<a href="#64" id="64">In our run generating upper bound conjectures for the domination number, the program ended up with four examples (found by this automated search for counterexamples) and the conjecture that the domination number of a graph is no more than its matching number.</a>
<a href="#65" id="65">The conjecture exactly predicted the true value of the domination number of these four graphs — and, hence, the program stopped.</a>
<a href="#66" id="66">This is a known (and not difficult to prove) fact about the domination number.</a>
<a href="#67" id="67">Again, if existing theory had been included, this conjecture could not have been made.</a>
<a href="#68" id="68">We added Hedetniemi's counterexamples as objects to the program and generated a second round of conjectures for upper bounds for the domination number of a graph; the results are in Table 13.</a>
<a href="#69" id="69">Several of these conjectures reappeared in the second round.</a>
<a href="#70" id="70">All of these conjectures other than the first remain open.</a>
<a href="#71" id="71">The first and third conjectures in Table 16 are interesting because they, in some sense, generalize the radius lower bound for the independence number of a graph (mentioned earlier, following a conjecture of Graffiti).</a>
<a href="#72" id="72">Add existing bounds (ones proved in the literature) and conjectures to the program.</a>
<a href="#73" id="73">In this way, the program could only produce conjectures that for which there is at least one example where the produced conjecture gives a better bound than any known theorem or conjecture.</a>
<a href="#74" id="74">In Fajtlowicz's terms, the produced conjectures would be “ informative ” or “ significant ” compared to existing theory.</a>
<a href="#75" id="75">We did not do this in our initial experiments but did use this idea successfully for our independence number conjectures.</a>
</body>
</html>