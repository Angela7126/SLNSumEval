<html>
<head>
<meta name="TextLength" content="SENT_NUM:23, WORD_NUM:547">
</head>
<body bgcolor="white">
<a href="#0" id="0">The algorithms we give herein generate GAC propagators for arbitrary constraints that run in time {a mathematical formula}O(nd) (where n is the number of variables and d is the maximum domain size), in extreme cases an exponential factor faster than any table constraint propagator [3], [7], [9], [5], [6], [10], [11], [12], [13].</a>
<a href="#1" id="1">Given a CSP {a mathematical formula}P= 〈 V,D,C 〉 , a search state S for P where each variable {a mathematical formula}x ∈ V has a non-empty domain: {a mathematical formula}|S(x)|>0, and a constraint {a mathematical formula}c ∈ C, the GAC propagator for c returns a new search state {a mathematical formula}S ′ which:</a>
<a href="#2" id="2">Suppose we have the constraint {a mathematical formula}x ∨ y with initial domains of {a mathematical formula}{0,1}.</a>
<a href="#3" id="3">An example propagator tree for this constraint is shown in Fig.</a>
<a href="#4" id="4">In such solvers our generated GAC propagator is {a mathematical formula}O(nd).</a>
<a href="#5" id="5">The dominating cost of GenTree for each node is calling the constraint propagator on line 3.</a>
<a href="#6" id="6">We use GAC2001, and its time complexity is {a mathematical formula}O(n2dn)[3].</a>
<a href="#7" id="7">Consider the parity constraint on a list of variables{a mathematical formula} 〈 x1, … ,xn 〉 with domain{a mathematical formula}{0,1}.</a>
<a href="#8" id="8">The constraint is satisfied when the sum of the variables is even.</a>
<a href="#9" id="9">Any propagator tree for this constraint must have at least{a mathematical formula}2n − 1nodes.</a>
<a href="#10" id="10">The propagator trees created by the algorithm GenTree (Algorithm 3) can be executed in {a mathematical formula}O(nd) time, where n is the arity of the constraint, and d is the domain size.</a>
<a href="#11" id="11">However they have the disadvantage that they can have {a mathematical formula}O(2nd) nodes.</a>
<a href="#12" id="12">In this section we show how to generate symmetry-reduced trees, and that they can be much more compact than standard propagator trees.</a>
<a href="#13" id="13">To apply a symmetry {a mathematical formula}g ∈ G to a propagator tree we define an image function in Definition 12.</a>
<a href="#14" id="14">Given a propagator tree T defined on constraint c and a literal permutation {a mathematical formula}g ∈ G, then {a mathematical formula}Tg is defined recursively as follows:{a mathematical formula}{a mathematical formula}The group element g is applied pointwise to Prune and Test, and the image function is applied recursively to the Left and Right subtrees.</a>
<a href="#15" id="15">Consider the symmetry in Example 4.</a>
<a href="#16" id="16">We will create a GAC propagator tree for constraint c. Recall that propagator trees are never invoked on a search state with an empty domain (Definition 4).</a>
<a href="#17" id="17">We construct a propagator tree that first branches for each value of {a mathematical formula}x1.</a>
<a href="#18" id="18">In the case where the domain of {a mathematical formula}x1 is empty, the tree performs no deletions and returns (this case will never be reached).</a>
<a href="#19" id="19">In all other cases the propagator performs GAC.However, if we applied the symmetry in Example 4 to it, it would branch on literals {a mathematical formula}x1 ↦ 1, {a mathematical formula}x2 ↦ 1 and {a mathematical formula}x3 ↦ 1 first.</a>
<a href="#20" id="20">Suppose {a mathematical formula}x1, {a mathematical formula}x2 and {a mathematical formula}x3 were all assigned the value 3, the propagator would perform no deletions and return.</a>
<a href="#21" id="21">While we have shown that using symmetry-reduced trees can, in highly symmetric constraints, produce a polynomial bound in tree size, these polynomials can be extremely large.</a>
<a href="#22" id="22">For example, for a constraint with total variable symmetry and variables of domain size 3 the upper bound is {a mathematical formula}O(n23).</a>
</body>
</html>