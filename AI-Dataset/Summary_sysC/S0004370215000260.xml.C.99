<html>
<head>
<meta name="TextLength" content="SENT_NUM:10, WORD_NUM:837">
</head>
<body bgcolor="white">
<a href="#0" id="0">In other words, we study the algorithms and solution methods that have been developed in the context of modular robotics for tackling problems that emerge when modular robots perform tasks through some fundamental functions such as shape-formation to form a desired configuration from an initial configuration, locomotion for moving from a place to another, manipulation for physical interaction with the objects, supporting and balancing for shoring up unstable objects, etc.</a>
<a href="#1" id="1">It is applicable to regular-shaped modules that inhabit lattice grid positions and abstracts translational steps of modules into discrete motion steps by the constraint that a module can translate into vacant grid cells only when one of its neighboring modules provides support for its motion.Meta-Module:In this model, a set of modules (virtually) unite with each other to perform high-level actions and offer more motion capabilities than single modules [92], [202].</a>
<a href="#2" id="2">Various such metrics have been developed for both lattice- and chain-based modular robots, among which the most popular ones are: (1) ‘ Overlap ’ , which counts the number of modules in {a mathematical formula}A ∩ B in {a mathematical formula}O(n) time [126], (2) ‘ Minimal number of moves ’ , which identifies the minimum number of reconfiguration steps between configurations of A and B, although not practical as it requires that at each iteration reconfiguration between A and B be planned optimally [126], (3) ‘ Optimal assignment ’ , which optimally assigns each element {a mathematical formula}ai in configuration A to an element {a mathematical formula}bj in B in {a mathematical formula}O(n3) time using the Hungarian method such that the total reconfiguration displacements is minimized [125], and (4) ‘ Graph edit distance ’ for counting the least number of edge additions, deletions, and substitutions that transform graph representation of A into graph representation of B [6], [5].Hierarchical Task Network (HTN):As a method of Automated Planning (which is an AI approach that plans for sequences of actions in order to transform the system from an initial state into a goal state), Hierarchical Task Network plans a sequence of primitive actions so that a certain goal task satisfying a condition is realized.</a>
<a href="#3" id="3">not through explicit definition of a specific configuration, but defined to meet a functionality like locomotion) problem specifications do not change much.</a>
<a href="#4" id="4">Thus, self-evolving controllers are mostly adopted to solve problems in which various behaviors (without emphasizing on assuming specific morphologies) must be exhibited by modular robots, such as Supporting and Balancing functions, in which a modular robot acts as a stanchion to support an unstable object [34], or Locomotion through Gait [72], [133].Gradient-based:A control policy could be as simple as following a gradient that guides a module to a position in the goal configuration.</a>
<a href="#5" id="5">The former looks at fixed points in the cell space and measures changes of those points, while the latter treats an MRS as a system of particles, and studies the motion for each particle.Distributed Planning:It is possible to fulfill the Flow operation by parallel execution of locomotion paths planned per each individual module: for instance, the PacMan algorithm by Butler and Rus [24] can be utilized for generating surface-moving systems, and is applicable to unit-compressible systems like the ‘ Crystalline ’ module, in which paths of modules are planned in parallel using the depth-first search strategy and path conflicts are resolved in the actuation phase to let modules flow among obstacles or even climb up them (also see the Gradient-based solution method in Section 2.2.2 for more details on PacMan).</a>
<a href="#6" id="6">Fitch and Butler [48] employed distributed dynamic programming for planning an individual locomotion path for each module, where modules use local constant-time search and a module-locking scheme in order to ensure physical integrity of the robot, while following their paths toward the goal of locomotion which has been specified by a simple bounding box.Hierarchical Planning:Flow can be considered as a two-level planning problem: at the higher level gross locomotion of the modular robot's body is planned, and at the lower level detailed local movements of modules, coordination of their actions and conflict resolution issues are addressed.</a>
<a href="#7" id="7">Furthermore, CPGs have been successfully implemented in developing adaptive gaits of M-TRAN [84], YaMoR [110], [152], and Roombots [133] modular robots.Neuroevolution:The Neuro-Evolution of Augmented Topologies (NEAT) is a Genetic Algorithm for evolving Artificial Neural Networks (ANNs) by altering both weighting parameters and structures of networks [153].</a>
<a href="#8" id="8">As an extension to the NEAT, HyperNEAT evolves a particular type of ANN called Compositional Pattern Producing Network (CPPN) which in contrast to traditional ANNs can employ a mixture of many activation functions in addition to the widely-used sigmoid function.</a>
<a href="#9" id="9">As a generative encoding description, the HyperNEAT was employed in [71] for generating genotypes that give rise to controllers that work appropriately in different positions of a given ‘ organism ’ , and for developing gait controllers for locomotion and obstacle avoidance in a corridor with some bricks randomly placed on the terrain.Brain and Body Coevolution:Throughout implementing conventional gait control methods in modular robots, a subtle presumption is transferred as well; that is, the body of the robot (i.e.</a>
</body>
</html>