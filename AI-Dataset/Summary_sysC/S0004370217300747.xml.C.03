<html>
<head>
<meta name="TextLength" content="SENT_NUM:30, WORD_NUM:618">
</head>
<body bgcolor="white">
<a href="#0" id="0">Consider the problem instance where {a mathematical formula}v=8,k=4, Λ =6.</a>
<a href="#1" id="1">{a mathematical formula}</a>
<a href="#2" id="2">{a mathematical formula}</a>
<a href="#3" id="3">IBM CP Optimizer Presolve also merges overlapping linear constraints on {a mathematical formula}{0,1} variables, and in some cases merges arithmetic constraints with other constraint types.</a>
<a href="#4" id="4">For example, given the product {a mathematical formula}X×(Y+Z) and a target solver that does not allow sums inside products, the flattening process will add a new variable aux, replace the product with the new expression {a mathematical formula}X×aux and add a new constraint {a mathematical formula}aux=Y+Z.</a>
<a href="#5" id="5">For example, most constraint solvers can accept inequality constraints without flattening so Rendl's algorithm would miss the common subexpression {a mathematical formula}x+y+z in the constraints {a mathematical formula}x+y+z ≤ 10 and {a mathematical formula}x+y+z ≥ 11.</a>
<a href="#6" id="6">For example, Active CSE can match {a mathematical formula}A<B with {a mathematical formula}A ≥ B by a simple negation, replacing one with an auxiliary variable a and the other with ¬a.</a>
<a href="#7" id="7">As an example, take the following two constraints over four variables, each with domain {a mathematical formula}{0 … 10}: {a mathematical formula}w+x+y+z=6,z+y+w=5.</a>
<a href="#8" id="8">AC-CSE can extract {a mathematical formula}w+y+z and replace it with an auxiliary variable a to give the following three constraints: {a mathematical formula}x+a=6,a=5,a=w+y+z.</a>
<a href="#9" id="9">If the original expression is size k, we thus find one AC-CS and now have a size {a mathematical formula}k − 1 expression.</a>
<a href="#10" id="10">Iterating shows that at most {a mathematical formula}k − 1 AC-CSs may be extracted from one ⋄ expression by X-CSE.</a>
<a href="#11" id="11">Computing the domain and creating the auxiliary variable and the new constraint can be done in {a mathematical formula}O(k) time.</a>
<a href="#12" id="12">The algorithm then replaces commonset in each ls expression in {a mathematical formula}O(nk) time.</a>
<a href="#13" id="13">Therefore the entire cost of extracting one AC-CS is {a mathematical formula}O(S+nk2+nd), and the total cost of X-CSE is {a mathematical formula}O(nkS+n2k3+n2kd).</a>
<a href="#14" id="14">{a mathematical formula} This result is clearly better than I-CSE-NC that extracted only {a mathematical formula}v+w+x and thus did not connect the third constraint to the other two.</a>
<a href="#15" id="15">On this example, I-CSE misses the AC-CS {a mathematical formula}v+w that connects all three of the original constraints.</a>
<a href="#16" id="16">For example, given constraint {a mathematical formula}allDifferent(x,y,z) where all variables have domain {a mathematical formula}{1,3,5,7}, Savile Row adds constraints {a mathematical formula}x+y+z ≥ 1+3+5 and {a mathematical formula}x+y+z ≤ 3+5+7.</a>
<a href="#17" id="17">Identical CSE would introduce a new decision variable a and new constraint {a mathematical formula}x×y=a.</a>
<a href="#18" id="18">One of the expressions e in the set is used to create a new constraint {a mathematical formula}e=aux.</a>
<a href="#19" id="19">In Car Sequencing the identical expressions are {a mathematical formula}x ∈ S for some variable x and integer set S that are contained in sums.</a>
<a href="#20" id="20">For each ring a we have the sum constraint {a mathematical formula} ∑ b=1nrings[a,b] ≤ r.</a>
<a href="#21" id="21">For IdentCSE with the CP solver, all instances with {a mathematical formula}n ≥ 10, also {a mathematical formula}n=9,r=4 and {a mathematical formula}n=9,r=3 time out.</a>
<a href="#22" id="22">{a mathematical formula}</a>
<a href="#23" id="23">10 (left) plots the speed-up quotient with the CP solver for Molnar's Problem on the twelve instances where {a mathematical formula}k ∈ {2 … 4} and {a mathematical formula}d ∈ {2 … 5}.</a>
<a href="#24" id="24">Instances where {a mathematical formula}k=4 and {a mathematical formula}d ≥ 3 time out with both IdentCSE and X-CSE.</a>
<a href="#25" id="25">Both IdentCSE and X-CSE time out when {a mathematical formula}k=4 and when {a mathematical formula}k=3 and {a mathematical formula}d ≥ 4.</a>
<a href="#26" id="26">The random {a mathematical formula}16×16 instances may be unsatisfiable and may have multiple solutions.</a>
<a href="#27" id="27">In the first tailoring process the implied sums will be {a mathematical formula} ∑ X=136 where X is the set of variables in the row, column or subsquare.</a>
<a href="#28" id="28">These constraints are also sums of {a mathematical formula}(seq[i] ∈ Sopt) expressions.</a>
<a href="#29" id="29">The expressions {a mathematical formula}x ∈ Sopt are extracted by Identical CSE leaving sums of Boolean variables.</a>
</body>
</html>