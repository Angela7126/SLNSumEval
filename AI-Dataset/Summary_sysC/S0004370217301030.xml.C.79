<html>
<head>
<meta name="TextLength" content="SENT_NUM:7, WORD_NUM:334">
</head>
<body bgcolor="white">
<a href="#0" id="0">This process is repeated until a number of desired stable extensions M is reached.C:SccGeneratorThe third graph generator aims at generating graphs which feature many strongly-connected components and are therefore challenging for solvers which do not rely on decomposition techniques [72].After having determined the number of arguments “ A ” as in GroundedGenerator, in a first step these arguments are partitioned (with a uniform distribution) into a given number N of components {a mathematical formula}C1, … ,Cn.</a>
<a href="#1" id="1">Table 3 gives some further information on the solvers, i.e., development country, programming language and paradigm, total number of lines of code, and a reference to contributions describing the solver in more detail.</a>
<a href="#2" id="2">The algorithm is based on the idea of encoding the constraints corresponding to complete labelings of an {a mathematical formula}AF[21] as a SAT problem, and then iteratively producing and solving modified versions of the initial SAT problem according to the needs of the search process.</a>
<a href="#3" id="3">The two key features of ArgTools are i) to enhance the backtracking search for sets of acceptable arguments by a new pruning strategy, called the global looking-ahead strategy, and ii) to set out a backtracking-based approach to decide acceptance under different semantics, i.e., whether an argument is in some/all set(s) of acceptable arguments of a given {a mathematical formula}AF, without necessarily enumerating all such sets.</a>
<a href="#4" id="4">The ASPARTIX-V solver (Answer Set Programming Argumentation Reasoning Tool – Vienna version) [85], [48] supports the computation of skeptical acceptance under preferred semantics, returns a single preferred extension, and enumerates all preferred extensions.</a>
<a href="#5" id="5">ASPARTIX-D is based on reductions of abstract argumentation problems to answer set programming — see also Section 4 — and therefore exploits the equivalence of stable semantics in abstract argumentation to answer set semantics in a direct way.</a>
<a href="#6" id="6">Despite the exception from above, it can be seen that solvers that rely on a reduction to other established formalisms, such as SAT solving, constraint satisfaction problems, or, as mentioned, answer set programming, performed better than solvers implementing a direct algorithm for abstract argumentation.</a>
</body>
</html>