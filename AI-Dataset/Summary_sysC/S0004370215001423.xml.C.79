<html>
<head>
<meta name="TextLength" content="SENT_NUM:6, WORD_NUM:266">
</head>
<body bgcolor="white">
<a href="#0" id="0">Observe that the input to the complete set partitioning problem is a list of {a mathematical formula}2n − 1 real values (where n is the size of the ground set), and every algorithm that is guaranteed to find an optimal solution on every instance of this problem has to inspect all of these values.</a>
<a href="#1" id="1">The coalition structure generation problem is to find an optimal coalition structure {a mathematical formula}CS ⁎ ∈ Π A, i.e., an (arbitrary) element of the set{a mathematical formula}</a>
<a href="#2" id="2">Given a coalition {a mathematical formula}C ⊆ A, we denote by {a mathematical formula}f(C) the value of an optimal partition of C, i.e., {a mathematical formula}f(C)=V(CS), where {a mathematical formula}CS ∈ argmaxCS ∈ Π CV(CS).</a>
<a href="#3" id="3">Knowing {a mathematical formula}UB ⁎ enables us to bound the quality of {a mathematical formula}CS ⁎ ⁎ — the best coalition structure found by the algorithm at a given point in time; we set {a mathematical formula} Β =UB ⁎ /V(CS ⁎ ⁎ ).</a>
<a href="#4" id="4">Consequently, based on Corollary 7, the best coalition structure in those subspaces can easily be identified: simply repeat the process of splitting the coalition(s) in {a mathematical formula}{A} in the best way (out of all the ways that were evaluated by sb-ODP thus far) until no such splitting is beneficial.</a>
<a href="#5" id="5">The authors showed how, using this extra information, every time the algorithm finishes evaluating the splits of all coalitions of a certain size s, it can construct a coalition structure whose value is guaranteed to be within a bound r from optimal, where {a mathematical formula}r=max ⁡ {i:i ∈ Z,s ≤ ⌊ ni ⌋ }.</a>
</body>
</html>