<html>
<head>
<meta name="TextLength" content="SENT_NUM:11, WORD_NUM:302">
</head>
<body bgcolor="white">
<a href="#0" id="0">Designing high-performance solvers for computationally hard problems is a difficult and often time-consuming task.</a>
<a href="#1" id="1">Although such design problems are traditionally solved by the application of human expertise, we argue instead for the use of automatic methods.</a>
<a href="#2" id="2">In this work, we consider the design of stochastic local search (SLS) solvers for the propositional satisfiability problem (SAT).</a>
<a href="#3" id="3">We first introduce a generalized, highly parameterized solver framework, dubbed SATenstein, that includes components drawn from or inspired by existing high-performance SLS algorithms for SAT.</a>
<a href="#4" id="4">The parameters of SATenstein determine which components are selected and how these components behave; they allow SATenstein to instantiate many high-performance solvers previously proposed in the literature, along with trillions of novel solver strategies.</a>
<a href="#5" id="5">We used an automated algorithm configuration procedure to find instantiations of SATenstein that perform well on several well-known, challenging distributions of SAT instances.</a>
<a href="#6" id="6">Our experiments show that SATenstein solvers achieved dramatic performance improvements as compared to the previous state of the art in SLS algorithms; for many benchmark distributions, our new solvers also significantly outperformed all automatically tuned variants of previous state-of-the-art algorithms.</a>
<a href="#7" id="7">Since SATenstein-LS is quite complex, we took great care in validating its implementations of existing SLS-based SAT solvers.</a>
<a href="#8" id="8">We compared our SATenstein-LS implementation with ten well-known algorithms' reference implementations (specifically, every algorithm listed in Table 5 except for Ranov), measuring running times as the number of variable flips.</a>
<a href="#9" id="9">{sup:3} These ten algorithms span G{sup:2}WSAT-based, WalkSAT-based, and dynamic local search procedures, and also make use of all the prominent SLS solver mechanisms discussed earlier.</a>
<a href="#10" id="10">Our validation results showed that in every case, reference solvers and their SATenstein-LS implementations have the same run-length distributions on a small set of 10 validation instances chosen from block world and software verification, based on a Kolmogorov – Smirnov test (5000 runs per solver – instance pair with significance threshold 0.05).</a>
</body>
</html>