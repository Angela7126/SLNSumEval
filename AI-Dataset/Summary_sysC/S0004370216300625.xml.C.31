<html>
<head>
<meta name="TextLength" content="SENT_NUM:15, WORD_NUM:388">
</head>
<body bgcolor="white">
<a href="#0" id="0">To empirically evaluate our methods for solving the ACPP problem, we applied Global and parHydra to two state-of-the-art SAT solvers: clasp and Lingeling.</a>
<a href="#1" id="1">Specifically, we compared our automatically configured parallel portfolios alongside performance-optimized sequential solvers, running on eight processor cores.</a>
<a href="#2" id="2">Furthermore, we investigated the scalability of parHydra by assessing the performance of our portfolio after each iteration, thereby also assessing the slowdown observed for increasing number of component solvers due to hardware bottlenecks.</a>
<a href="#3" id="3">Finally, we integrated our configured portfolio based on clasp into clasp's flexible multithreading architecture and configured the clause sharing policy to investigate the influence of clause sharing on our trained ACPP solvers.</a>
<a href="#4" id="4">We note that there is potential for performance to be improved even further if clause sharing were configured alongside the portfolio itself.</a>
<a href="#5" id="5">For example, clasp's default portfolio contains configurations that are unlikely to solve instances directly, but that generate useful clauses for other clasp instances.</a>
<a href="#6" id="6">{sup:5} Clearly, our methodology for configuring clause sharing will not identify such configurations.</a>
<a href="#7" id="7">Configuration of clause sharing can be directly integrated in Global and parHydra by adding the corresponding parameters to the configuration space, because the solvers actually run in parallel.</a>
<a href="#8" id="8">However, since clasp with clause sharing is highly non-deterministic, the configuration process would require a larger time budget for constructing the portfolio.</a>
<a href="#9" id="9">In a similar vein, some results in the literature indicate that the collaboration of SAT solvers via clause sharing performs better if the solvers use similar strategies, e.g., the same solver with a fixed configuration runs several times in parallel but with different seed (cf.</a>
<a href="#10" id="10">Plingeling).</a>
<a href="#11" id="11">If the configuration of the portfolio is performed alongside the configuration of the clause sharing policy, such homogeneous portfolios would also belong to the configuration space of our ACPP methods.</a>
<a href="#12" id="12">Given a solver with a rich design space (such as Lingeling and clasp), all our ACPP methods were able to generate 8-core parallel solvers that significantly outperformed their sequential counterparts.</a>
<a href="#13" id="13">We have thus demonstrated that our ACPP methods are able to automatically build parallel portfolio solvers, without the need for costly, hand-crafted parallel implementations.</a>
<a href="#14" id="14">However, our scalability analysis indicates that hardware restrictions lead to substantial overhead as more processor cores are used, and the scalability of our ACPP methods depends on the richness of the given sequential solver's design spaces and the existence of complementary designs within these spaces.</a>
</body>
</html>