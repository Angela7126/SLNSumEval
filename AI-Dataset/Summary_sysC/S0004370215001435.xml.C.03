<html>
<head>
<meta name="TextLength" content="SENT_NUM:18, WORD_NUM:426">
</head>
<body bgcolor="white">
<a href="#0" id="0">It is solver independent and supports both standard constraint solvers and specialized data mining systems.</a>
<a href="#1" id="1">Rewrite rules are then used to add redundant constraints or solve subproblems using specialized data mining algorithms or generic constraint programming solvers.</a>
<a href="#2" id="2">Thus, the MiningZinc language allows one to model constraint-based itemset mining problems in a solver independent way, and its execution mechanism can automatically chain different algorithms and solvers.</a>
<a href="#3" id="3">a novel library of functions and constraints in the MiniZinc language, to support modeling itemset mining tasks in terms of set operations and constraints;</a>
<a href="#4" id="4">a finite set of constraints {a mathematical formula}C.</a>
<a href="#5" id="5">A MiniZinc model of the frequent itemset mining problem is shown in Listing 2.</a>
<a href="#6" id="6">Modeling a mining problem in MiningZinc follows the same methodology as modeling a constraint program: one has to express a problem in terms of variables with a domain, and constraints over these variables; for example, a set variable with a minimum frequency constraint over data.</a>
<a href="#7" id="7">Listing 8 contains some examples of constraint-based mining constraints that can be added to the frequent itemset mining model in Listing 2.</a>
<a href="#8" id="8">the set of FlatZinc constraints over {a mathematical formula}V1, … ,Vn that specify the problem this algorithm can solve (multiple sets can be given in case of multiple equivalent formulations);</a>
<a href="#9" id="9">Specifically, we describe a state of the rewrite process with a tuple{a mathematical formula} where L is an execution plan, and C is a set of constraints and annotations.</a>
<a href="#10" id="10">Past work showed that the execution of the frequent itemset mining task is more efficient in some CP systems if a look-ahead constraint is added.</a>
<a href="#11" id="11">This constraint set is entailed by the set of constraints {a mathematical formula}C1={A=cover(I,D),B=card(A),V ≤ B}.</a>
<a href="#12" id="12">a set of constraints {a mathematical formula}C1;</a>
<a href="#13" id="13">Recall that all specialized algorithms are registered with a predicate definition {a mathematical formula}p(±1V1, … ,±nVn) and a set of constraints C that define the problem being solved by this algorithm.</a>
<a href="#14" id="14">Let {a mathematical formula}calcfreq(+I, − F,+D) be a specialized algorithm that calculates the frequency F of an itemset I in a database D. The constraint set corresponding to this algorithm is {a mathematical formula}{T=cover(I,D),F=card(T)}.</a>
<a href="#15" id="15">The constraint set corresponding to this algorithm is {a mathematical formula}{T=cover(I,D),F=card(T),F ≤ V}.</a>
<a href="#16" id="16">If at that point the set of constraints C in the state {a mathematical formula}(L,C) is empty (modulo annotations), then L is a valid execution plan.</a>
<a href="#17" id="17">Assume we wish to solve the earlier model{a mathematical formula} where the available algorithms are the LCM and FPGrowth specialized itemset mining algorithms, the maxsup and frequency specialized algorithms and the Gecode generic CP system (in that order).</a>
</body>
</html>