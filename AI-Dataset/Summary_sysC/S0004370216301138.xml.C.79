<html>
<head>
<meta name="TextLength" content="SENT_NUM:5, WORD_NUM:334">
</head>
<body bgcolor="white">
<a href="#0" id="0">In practical applications of SAT, solvers can typically be adjusted to perform well for the specific type of instances at hand, such as software verification instances generated by a particular static checker on a particular software system [3], or a particular family of bounded model checking instances [85].</a>
<a href="#1" id="1">Given a benchmark set Π and a performance metric {a mathematical formula}m( Θ , Π ) capturing the performance of configuration {a mathematical formula} Θ ∈ Θ on problem instance {a mathematical formula} Π ∈ Π , the algorithm configuration problem then aims to find a configuration {a mathematical formula} Θ ∈ Θ that minimizes m over Π , i.e., that minimizes{sup:2}{a mathematical formula} In the CSSC, the specific metric m we optimized was penalized average runtime (PAR-10), which counts runs that exceed a maximal cutoff time {a mathematical formula} Κ max without solving the given instance as {a mathematical formula}10 ⋅ Κ max.</a>
<a href="#2" id="2">More specifically, it uses previously observed 〈 configuration, performance 〉 pairs {a mathematical formula} 〈 Θ ,f( Θ ) 〉 to learn a random forest of regression trees (see, e.g., [22]) that express a function {a mathematical formula}f ˆ : Θ → R predicting the performance of arbitrary parameter configurations (including those not yet evaluated) and then uses this function to guide its search.</a>
<a href="#3" id="3">When instance characteristics {a mathematical formula}x Π ∈ F are available for each problem instance Π , SMAC uses observed 〈 configuration, instance characteristic, performance 〉 triplets {a mathematical formula} 〈 Θ ,x Π ,f( Θ , Π ) 〉 to learn a function {a mathematical formula}g ˆ : Θ ×F → R that predicts the performance of arbitrary parameter configurations on instances with arbitrary characteristics.</a>
<a href="#4" id="4">These so-called empirical performance models[49] are then marginalized over the instance characteristics of all training benchmark instances in order to derive the function {a mathematical formula}f ˆ that predicts average performance for each parameter configuration: {a mathematical formula}f ˆ ( Θ )=E Π ∼ Π train[g ˆ ( Θ , Π )].</a>
</body>
</html>