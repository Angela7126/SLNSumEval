<html>
<head>
<meta name="TextLength" content="SENT_NUM:7, WORD_NUM:583">
</head>
<body bgcolor="white">
<a href="#0" id="0">On the other hand, we have some good news as well: assuming that every data instance contains two fixed distinct individual constants, we construct polynomial-size impure PE- and NDL-rewritings of any CQ and any ontology with the polynomial witness property (in particular, any ontology in OWL 2 QL, linear {a mathematical formula}Datalog± of bounded arity or sticky {a mathematical formula}Datalog± of bounded arity).</a>
<a href="#1" id="1">Then, using the fact that the {a mathematical formula}D Α have a single domain element, we show that if we have, say, PE-rewritings of the {a mathematical formula}qfn and {a mathematical formula} Σ fn, then those rewritings are in essence monotone Boolean formulas (that is, propositional PE-formulas), and so, by the known results on circuit complexity, cannot be polynomial, for example, in the case of the family of Boolean functions that check whether a given graph (encoded by arguments of the functions) contains a clique of the specified size.</a>
<a href="#2" id="2">{a mathematical formula}q ′ can be constructed in polynomial time, {a mathematical formula}|q ′ |=O(|q| ⋅ | Σ | ⋅ N2 ⋅ L) and that {a mathematical formula}( Σ ,D) ⊨ q if and only if {a mathematical formula}q ′ is true in the model of D extended with the constants in Q, which are distinct and do not belong to the interpretation of any predicate but =.We can replace the natural numbers in Q with two distinct constants, say, 0 and 1 (provided that they are present in every data instance), thus obtaining a polynomial {a mathematical formula}PE{0,1}-rewriting of q and Σ .</a>
<a href="#3" id="3">Recall that each of the variables {a mathematical formula}uij ranges over the domain {a mathematical formula} Δ D and numbers from Q (more precisely, labelled nulls {a mathematical formula}null1, … ,nullN).</a>
<a href="#4" id="4">Thus, such a variable {a mathematical formula}uij can be modelled by means a tuple {a mathematical formula}(u ˆ ij,uijp, … ,uij0) of variables, where {a mathematical formula}u ˆ ij ranges over the domain {a mathematical formula} Δ D, while {a mathematical formula}uijp, … ,uij0, for {a mathematical formula}p= ⌈ log|Q| ⌉ , range over {a mathematical formula}{0,1} and represent a natural number from 0 to Μ in binary.</a>
<a href="#5" id="5">More precisely, if {a mathematical formula}uij has a value {a mathematical formula}d ∈ Δ D then {a mathematical formula}u ˆ ij is interpreted by d and {a mathematical formula}uijp, … ,uij0 are all zeros; otherwise, {a mathematical formula}uij is a labelled null, say {a mathematical formula}nullk, and so {a mathematical formula}u ˆ ij is a fixed value, say 0, and {a mathematical formula}uijp, … ,uij0 represent k in binary (note that 0 is not a labelled null).</a>
<a href="#6" id="6">The CNF {a mathematical formula} Ψ n, which contains {a mathematical formula}d ≤ 3|Cn|+1 clauses with {a mathematical formula}m=|Cn| Boolean variables, was then transformed into a set {a mathematical formula} Σ fn of OWL 2 QL-tgds and a Boolean CQ {a mathematical formula}qfn such that{a mathematical formula} Consider now the OWL 2 QL-ontology {a mathematical formula} Σ fn ⁎ that extends {a mathematical formula} Σ fn with the negative constraints{a mathematical formula} where Θ is the set comprising the following formulas:{a mathematical formula} We observe that {a mathematical formula}| Σ fn ⁎ |=O(|Cn|2) and the claims of Lemma 8 are equally applicable to {a mathematical formula} Σ fn ⁎ (the proof requires that the query {a mathematical formula}qfn and the ontology {a mathematical formula} Σ fn/ Σ fn ⁎ give ‘ correct ’ answers only for data {a mathematical formula}D Α which, by definition, are consistent with the negative constraints above).</a>
</body>
</html>