<html>
<head>
<meta name="TextLength" content="SENT_NUM:24, WORD_NUM:548">
</head>
<body bgcolor="white">
<a href="#0" id="0">The aim of the MoD scheme is to maximize either the number of tasks that are completed (a.k.a.</a>
<a href="#1" id="1">customer satisfaction) (Equation (6)) or the total number of time points that EVs are travelling (a.k.a.</a>
<a href="#2" id="2">EV utilization) (Equation (7)) (i.e., the objective functions can be used alternately).</a>
<a href="#3" id="3">To achieve this, we present an optimal solution based on Mixed Integer Programming (MIP){sup:8} (solved using IBM ILOG CPLEX 12.6.2), where we use battery swapping to cope with the EVs' limited range.</a>
<a href="#4" id="4">MIP techniques have been particularly useful to solve such large combinatorial problems (e.g., combinatorial auctions [42], [3], travelling salesman problem [19]).</a>
<a href="#5" id="5">Also, such a solution can be used as a benchmark for more customized algorithms (as we do in this paper in Section 5.6 and Section 6).</a>
<a href="#6" id="6">We will refer to this algorithm as Off-Opt-Swap.</a>
<a href="#7" id="7">Note that in case the max flow algorithm returns the optimal set of tasks to be executed, this algorithm simply calculates the EV to task execution schedule.</a>
<a href="#8" id="8">However, if the max flow returns the upper limit in terms of executed tasks, this algorithm also decides which of these tasks can actually be executed.</a>
<a href="#9" id="9">In more detail, we define three binary decision variables: 1) {a mathematical formula} Λ i ∈ {0,1} denoting whether a task i is accomplished or not, 2) {a mathematical formula} Ε j,i,t ∈ {0,1} denoting whether EV j is executing task i at time t or not, and 3) {a mathematical formula}prkj,t,k ∈ {0,1} denoting whether j is parked at time point t at location k or not.</a>
<a href="#10" id="10">Moreover, a set of constraints is used:</a>
<a href="#11" id="11">Algorithm 6 presents the local search procedure for the MoD scheme.</a>
<a href="#12" id="12">This algorithm takes as input the task-to-EV assignment as this is calculated by the Greedy algorithm.</a>
<a href="#13" id="13">Then all tasks that have been assigned to an EV are added to set {a mathematical formula}EVsTasksMapj.</a>
<a href="#14" id="14">All tasks that were not assigned to any EV are added to set TasksUnexecuted (lines 2 – 12).</a>
<a href="#15" id="15">Then, Off-Opt-Swap or Off-Opt-Charge is called for each EV and for all tasks that were initially assigned to that EV plus the ones that were not assigned to any EV.</a>
<a href="#16" id="16">{sup:14} The completed tasks for each EV, as calculated by the optimal algorithm, are added to {a mathematical formula}currentSolution variable.</a>
<a href="#17" id="17">After all EVs have been examined, the one that leads to higher increase in the number of executed tasks and is not in the tabu list, is selected and the current solution is updated based on the assignment of that EV.</a>
<a href="#18" id="18">Here, we evaluate our proposed battery swap optimization algorithm against a setting where no such optimization takes place, based on the tasks assigned by the scheduling algorithms to each EV.</a>
<a href="#19" id="19">In doing so, we assume all EVs to carry the same battery type, which has a discharge rate {a mathematical formula}conj=10 (i.e., at each time point, 10% of the battery is discharged) and the average trip duration to be 2 time points.</a>
<a href="#20" id="20">The battery swap minimization algorithm is shown to achieve a reduction of up to 87.5% (see Fig.</a>
<a href="#21" id="21">22) in the number of necessary battery swaps.</a>
<a href="#22" id="22">Its execution time is well under half second even for large settings.</a>
<a href="#23" id="23">Overall, the minimization of the battery swaps is an important task in order to reduce the cost of battery swapping in a real world deployment.</a>
</body>
</html>