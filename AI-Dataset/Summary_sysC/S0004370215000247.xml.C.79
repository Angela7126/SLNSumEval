<html>
<head>
<meta name="TextLength" content="SENT_NUM:20, WORD_NUM:797">
</head>
<body bgcolor="white">
<a href="#0" id="0">Furthermore, we select Web service composition as a real-world and current application, and classify and compare the approaches that employ HTN planning to solve the problem of service composition.</a>
<a href="#1" id="1">The basic idea behind this technique includes an initial state description, a task network as an objective to be achieved, and domain knowledge consisting of networks of primitive and compound tasks.</a>
<a href="#2" id="2">The application framework concerns the application domain we choose to observe, and it helps us to analyse different studies in an organised and unified way, and possibly to identify points where HTN planning behaves as expected or can be further improved.</a>
<a href="#3" id="3">The criterion is based on the coverage a study gives, which may include information that ranges from a general discussion of techniques and approaches, peculiar matters, such as task interactions and condition types, relevant to our conceptual framework, to properties, such as domain authoring, expressiveness and competence, that may be a part of the analytical framework.</a>
<a href="#4" id="4">Definition 2 suggests that constraints are found in a task network, but constraints can be also added during the planning process in order to resolve inconsistencies.</a>
<a href="#5" id="5">Phantomisation of a task t with an effect e is accomplished by treating e as achieved, and finding an existing task {a mathematical formula}t ′ in the task network that achieves the same effect e. If task {a mathematical formula}t ′ is found, a constraint {a mathematical formula}(t ′ ,e,t) is added to the task network to record the causal relation.</a>
<a href="#6" id="6">The condition may be satisfied either by an intentional insertion of a relevant effect earlier in the processing of the task network, or by an explicit introduction of a primitive task that will achieve the required effect.</a>
<a href="#7" id="7">In the first type of search space, the initial task network is reduced to a primitive task network that constitutes a solution to the planning problem.</a>
<a href="#8" id="8">At each point in the space, the task network can be seen as a partially specified plan until the search reaches the point where the task network is primitive and represents a solution plan.</a>
<a href="#9" id="9">Although it is not always clear what is the purpose of the respective structure or how exactly the task decomposition is accomplished, we try to make high-level statements on the main idea behind the task decomposition at each planner.</a>
<a href="#10" id="10">The constraint-related concepts, namely the commitment strategy and constraint management in the case of task interactions are shown in the upper part of Table 2.</a>
<a href="#11" id="11">In addition to explicitly typing them into the domain knowledge, the planner is extended to reason about implicit external conditions by examining the domain knowledge [53].</a>
<a href="#12" id="12">HTN planning assumes an initial task network {a mathematical formula}tn0 to be accomplished as an objective for {a mathematical formula}P. In its simplest form, {a mathematical formula}tn0 does not allow to specify conditions to be satisfied in some intermediate state during or in the final state of the execution of the solution to {a mathematical formula}P. Extended goals enable to express a planning objective in a way that its satisfaction could be on a part, on the whole trajectory of the solution, or in the final state.</a>
<a href="#13" id="13">The problem of finding a process instance suitable to a given context can be seen as a planning problem – finding a plan whose execution depends on the given context.</a>
<a href="#14" id="14">The most simple problem that planners have to solve is how to accomplish a specific behaviour, for example, a user request, given the information about the environment's current state and spectrum of properties.</a>
<a href="#15" id="15">In the lower part, we observe approaches that combine HTN planning with another technique, such as description logic and constraint satisfaction, to compose services.</a>
<a href="#16" id="16">While planning, sensing and possibly executing Web services, several approaches make some of the restricting assumptions, at least those that we were able to identify from the descriptions provided.</a>
<a href="#17" id="17">There is a number of systems that use different approaches to learn domain knowledge from examples: one approach learns preconditions of SHOP-like methods given the method structure as input to the system [18], another one learns incrementally approximate preconditions [148], an approach learns very general HTNs by learning from expert traces [149], or another one that learns HTNs with a better balance between generality and specificity [150].</a>
<a href="#18" id="18">Some approaches acquire methods by analysing a set of planning problems together with their solutions and a set of annotated tasks in a given deterministic domain [19], and others may learn knowledge for domains that include primitive tasks with multiple possible outcomes [151].</a>
<a href="#19" id="19">We acknowledge that learning domain knowledge is a relevant and crucial aspect for HTN planning, but this research area has its own specific aspects, such as learning algorithms and annotations, that are independent of HTN planning, thus we believe it would be more meaningful and useful to be analysed in a separate study.</a>
</body>
</html>