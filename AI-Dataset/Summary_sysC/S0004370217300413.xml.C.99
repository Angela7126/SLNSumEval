<html>
<head>
<meta name="TextLength" content="SENT_NUM:26, WORD_NUM:1428">
</head>
<body bgcolor="white">
<a href="#0" id="0">If we apply game-theoretic analysis to such systems, then the main questions to be answered about such systems are not just “ what computations might the system produce? ” , but rather, “ what computations might the system produce if the constituent programs act rationally? ” If we interpret acting rationally to mean choosing strategies (for resolving non-determinism) that are in Nash equilibrium, then this question amounts to asking “ which of the possible computations of the system will be produced in equilibrium? ” Further, if we use temporal logic as the language for expressing properties of our multi-agent and concurrent system (as is standard in the computer aided verification community [20]), then we can also interpret this question as “ which temporal logic formulae are satisfied by computations arising from the selection of strategies in equilibrium? ” We refer to this general problem as equilibrium checking[75].</a>
<a href="#1" id="1">This idea is captured in the following decision problem: E-Nash:Given: Multi-agent system M; temporal formula Φ .Question: Is it the case that Φ holds on some computation of M that could arise through the agents in M choosing strategies that form a Nash equilibrium?</a>
<a href="#2" id="2">The obvious counterpart of this decision problem is A-Nash, which asks whether a temporal formula Φ is satisfied on all computations that could arise as a result of agents choosing strategies that form a Nash equilibrium.</a>
<a href="#3" id="3">We interpret formulae of LTL with respect to pairs {a mathematical formula}( Ρ ,t) where {a mathematical formula} Ρ ∈ V Ω is a run and {a mathematical formula}t ∈ N is a temporal index into Ρ .</a>
<a href="#4" id="4">Any given LTL formula may be true at none or multiple time points on a run; for example, a formula {a mathematical formula}Xp will be true at a time point {a mathematical formula}t ∈ N on a run Ρ if p is true on run Ρ at time {a mathematical formula}t+1.</a>
<a href="#5" id="5">We will write {a mathematical formula}( Ρ ,t) ⊨ Φ to mean that {a mathematical formula} Φ ∈ Ltl is true at time {a mathematical formula}t ∈ N on run Ρ .</a>
<a href="#6" id="6">The rules defining when formulae are true (i.e., the semantics of LTL) are defined as follows, where {a mathematical formula}x ∈ Φ :{a mathematical formula}</a>
<a href="#7" id="7">If {a mathematical formula}( Ρ ,0) ⊨ Φ , we write {a mathematical formula} Ρ ⊨ Φ and say that Ρ satisfies Φ .</a>
<a href="#8" id="8">We say that Φ and Ψ are equivalent if for all Ρ we have {a mathematical formula} Ρ ⊨ Φ if and only if {a mathematical formula} Ρ ⊨ Ψ .</a>
<a href="#9" id="9">A formula {a mathematical formula} Φ ∈ Ltl is satisfiable if there is some run satisfying Φ ; moreover, it is satisfied by a Kripke structure K if it is satisfied by all its initial runs, that is, if, and only if, it is satisfied by all {a mathematical formula} Ρ ∈ runs(K).</a>
<a href="#10" id="10">As usual, we say that the size of an LTL formula Φ , denoted by {a mathematical formula}| Φ |, is its number of subformulae.</a>
<a href="#11" id="11">The intended interpretation of g is that if the propositional formula Φ evaluates to true against the valuation v corresponding to the current state of the system, then the statement is enabled for execution; executing the statement means evaluating each {a mathematical formula} Ψ i against the current state v of the system, and setting the corresponding variable {a mathematical formula}xi to the truth value obtained from evaluating {a mathematical formula} Ψ i in this way.</a>
<a href="#12" id="12">At this point, it is useful to remind ourselves that one of the reasons for using srml specifications is that they allow a succinct representation of models that capture the possible (infinite) computations of a distributed, concurrent, and multi-agent (computer) system.</a>
<a href="#13" id="13">For technical reasons, however, in some cases it is useful to explicitly refer to the Kripke structure – i.e., transition system – that is induced by an arena {a mathematical formula}A=(N, Φ ,m1, … ,mn); such a structure we denote by {a mathematical formula}KA, which may in general be exponential in the size of A.</a>
<a href="#14" id="14">Note that {a mathematical formula}m( Σ i) has one initialisation rule and one rule for each transition in {a mathematical formula} Δ i.</a>
<a href="#15" id="15">Then, {a mathematical formula}m( Σ i) is of size linear in {a mathematical formula}| Σ i|.</a>
<a href="#16" id="16">That the behaviour of {a mathematical formula}m( Σ i) is exactly as the behaviour of {a mathematical formula} Σ i is obvious from the construction.</a>
<a href="#17" id="17">Moreover, using Lemma 2, Lemma 3, and the fact that the size of {a mathematical formula}m( Σ i) is linear in {a mathematical formula}| Σ i|, analogous results with respect to strategies and strategy profiles are obtained.</a>
<a href="#18" id="18">In particular, given an arena {a mathematical formula}A=(N, Φ ,m1, … ,mn) and a strategy {a mathematical formula} Σ i, we can define the Kripke structure and runs induced by {a mathematical formula} Σ i on A by replacing {a mathematical formula}mi with {a mathematical formula}m( Σ i), that is, induced by the semantics of the srml arena {a mathematical formula}A Σ i=(N, Φ ∪ Qi,m1, … ,m( Σ i), … ,mn).</a>
<a href="#19" id="19">The outcome with respect to some {a mathematical formula} Σ → , then, is given by the Kripke structure or runs associated with the srml arena {a mathematical formula}A Σ → =(N, Φ ∪ ⋃ i ∈ NQi,m( Σ 1), … ,m( Σ n)).</a>
<a href="#20" id="20">Since we are interested only in the computation runs and trees with respect to Φ associated with both {a mathematical formula}K Σ → and {a mathematical formula}A Σ → , let us write {a mathematical formula}runs(K Σ → )| Φ for the restriction with respect to Φ , that is for the set {a mathematical formula}{ Ρ | Φ : Ρ ∈ runs(K Σ → )}, and similarly for the set of computation trees.</a>
<a href="#21" id="21">Then, it should be easy to see that the LTL formula Φ is realizable in the context of LTL srml games if, and only if, the following LTL formula can be synthesised with respect to any reactive environment:{a mathematical formula} provided that the environment (the coalition of players in {a mathematical formula}N ∖ {i}) controls the variables in {a mathematical formula} Φ ∖ Φ i and the system (player i) controls the variables in {a mathematical formula} Φ i.Note that since in order to solve the Realizability problem we checked whether the LTL formula {a mathematical formula}Th(mi) ∧ (Th(m − i) → Φ ) can be synthesised, and the size of such a formula is polynomial in the sizes of both the LTL formula Φ and the game G, then it follows that Realizability is 2EXPTIME in the sizes of both the game G and the input formula Φ .For hardness, we first reduce LTL games (also called control games for LTL [5]) to an instance of Realizability with 3 players/modules (for the sake of simplicity in the presentation), and then such an instance to a game with only 2 modules.</a>
<a href="#22" id="22">Next, we ask whether a strategy profile is a Nash equilibrium: {a mathematical formula} Note that the strategies {a mathematical formula} Σ → =( Σ 1, … , Σ n) given in the input to this problem are represented as finite state machines.</a>
<a href="#23" id="23">We then have an srml module, which we call {a mathematical formula}move, the purpose of which is to control {a mathematical formula}turn, toggling its value in each successive round, starting from the initial case of it being agent 1's move.</a>
<a href="#24" id="24">Note that because of the definition of the module move, it has only one possible legal strategy up to equality with respect to its observable behaviour, namely {a mathematical formula} ⊤ , ⊥ , ⊤ , ⊥ , … .</a>
<a href="#25" id="25">For every action Α we define a propositional formula {a mathematical formula}pre Α , such that this formula is satisfied by a valuation whenever the pre-condition of Α is met:{a mathematical formula} The effect of executing an action Α when the world is as described by the valuation v is denoted {a mathematical formula}eff( Α ,v), where this partial function is defined as follows:{a mathematical formula} We can then naturally define a multi-agent STRIPS arena:{a mathematical formula} where {a mathematical formula}N={1, … ,n} is the set of players, Φ is the vocabulary of propositional variables used to represent the state of the system, {a mathematical formula}v0 ∈ V is the initial state of the game, and for each player {a mathematical formula}i ∈ N, {a mathematical formula}Aci={ Α i1, … , Α ik} is set of action descriptors, representing the actions that i can perform.</a>
</body>
</html>