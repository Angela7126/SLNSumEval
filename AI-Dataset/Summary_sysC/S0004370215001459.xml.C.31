<html>
<head>
<meta name="TextLength" content="SENT_NUM:23, WORD_NUM:561">
</head>
<body bgcolor="white">
<a href="#0" id="0">In this paper, we present a new case-base editing technique which takes both competence enhancement and competence preservation into consideration.</a>
<a href="#1" id="1">For competence enhancement, we develop a Noise-Enhanced Fast Context Switch (NEFCS) algorithm to prevent noise from being included during case retention and to speed the context switch process in the face of concept drift.</a>
<a href="#2" id="2">By taking advantage of our previous research on concept drift detection [28], our NEFCS algorithm minimizes the risk of discarding novel concepts.</a>
<a href="#3" id="3">For competence preservation, we invent a Stepwise Redundancy Removal (SRR) algorithm that uniformly removes superfluous cases without loss of case-base competence.</a>
<a href="#4" id="4">Experimental evaluations based on public real-world datasets show that our case-base editing technique demonstrates significant improvements in time-varying tasks and exhibits good performance on static tasks compared with the most common case-base editing methods.</a>
<a href="#5" id="5">Delany et al.</a>
<a href="#6" id="6">[55] suggested a two-level learning for handling concept drift.</a>
<a href="#7" id="7">In level-1, they used a Competence-Based Editing (CBE) method [5], which is a hybrid of Blame Based Noise Removal (BBNR) and Conservative Redundancy Reduction (CRR) to manage the case-base periodically.</a>
<a href="#8" id="8">Specifically, BBNR analyzes all cases that have contributed to misclassification and removes cases if their deletion results in no coverage loss; CRR repeatedly selects a case with the smallest coverage set that cannot be correctly solved.</a>
<a href="#9" id="9">The authors compared their method with full case-base without management, as well as window-based updating, and demonstrated several improvements.</a>
<a href="#10" id="10">However, a hybrid of two CBM methods designed for a static environment does not guarantee effective learning under concept drift.</a>
<a href="#11" id="11">In the worst case, novel concepts can be consistently discarded, especially with gradual concept drift.</a>
<a href="#12" id="12">In addition, the BBNR algorithm has difficulties in removing small groups of noisy cases.</a>
<a href="#13" id="13">For example, two noisy cases that have each other in their coverage sets can correctly classify each other but can cause the misclassification of all other nearby cases; these small groups of noisy cases can never be removed by the BBNR, even though they continue to provide incorrect classification results.</a>
<a href="#14" id="14">This phenomenon can be caused by outdated cases when concept drift occurs.</a>
<a href="#15" id="15">Last but not least, BBNR neglects the competence model maintenance issue.</a>
<a href="#16" id="16">Referring to an ill-matched competence model may lead to the mistaken preservation of noisy cases, i.e., if we have previously removed a noisy case {a mathematical formula}c ′ that happens to be a member of the coverage set c that we are currently considering.</a>
<a href="#17" id="17">If we do not keep the competence model up-to-date, {a mathematical formula}c ′ will still be considered even though we know it is a noisy case.</a>
<a href="#18" id="18">Definition 11</a>
<a href="#19" id="19">The conditional BBNR rule imposes an additional condition on BBNR rule [5], i.e., any new case c will only be considered as noise and removed by the BBNR rule if c lies outside an identified concept drift competence area (does not represent a new concept).</a>
<a href="#20" id="20">It is one of the reported strengths of the competence-based change detection method that it is able to identify small competence regions where concepts drift most severely.</a>
<a href="#21" id="21">When working with other change detection methods which have no capacity to locate concept drifts, all new cases will be exempt from removal, which is also the case when {a mathematical formula}p=0 in Definition 8.</a>
<a href="#22" id="22">Case {a mathematical formula}c ′ ∈ CB is defined as a conflicting case by a new case c which is not in ℵ , if {a mathematical formula}c ∈ LiabilitySet(c ′ ).</a>
</body>
</html>