<html>
<head>
<meta name="TextLength" content="SENT_NUM:21, WORD_NUM:808">
</head>
<body bgcolor="white">
<a href="#0" id="0">Given an assignment Φ , for each agent i we refer to alternative {a mathematical formula} Φ (i) as the representative of i.</a>
<a href="#1" id="1">Given a normal IPSF (DPSF) Α , we consider the following three functions, each assigning a positive integer to a given assignment Φ :{a mathematical formula} These functions aggregate individual dissatisfaction (satisfaction) values of the agents to measure the overall quality of the assignment.</a>
<a href="#2" id="2">We will show that {a mathematical formula} ℓ sum Α ( Φ ) ≤ n ⋅ Α (3) ⋅ r if and only if I is a yes-instance of X3C.</a>
<a href="#3" id="3">( ⇐ ) If there exists a solution for I (i.e., an exact cover of U with {a mathematical formula}n3 sets from {a mathematical formula}F), then we can easily show an assignment in which each agent j is assigned to an alternative from the top {a mathematical formula}mf(j) positions of her preference order (namely, one that assigns each agent j to the alternative {a mathematical formula}ai ∈ A1 that corresponds to the set {a mathematical formula}Fi, from the exact cover of U, that contains j).</a>
<a href="#4" id="4">Thus, for the optimal assignment {a mathematical formula} Φ OPT it holds that {a mathematical formula} ℓ sum Α ( Φ OPT) ≤ Α (3) ⋅ n.</a>
<a href="#5" id="5">In consequence, since {a mathematical formula}A is an r-approximation algorithm, it must return an assignment with the total dissatisfaction at most {a mathematical formula}nr ⋅ Α (3).</a>
<a href="#6" id="6">Given a preference profile and a set S of up to K alternatives, using the standard network-flow argument, it is easy to find a (possibly partial) optimal assignment {a mathematical formula} Φ Α S of the agents to the alternatives from S.</a>
<a href="#7" id="7">It is easy to see that each solution that assigns the K universally top-ranked alternatives to the agents is optimal.</a>
<a href="#8" id="8">Thus the total dissatisfaction of the agents in the optimal solution is:{a mathematical formula} By taking large enough m and K (even for a fixed value of {a mathematical formula}mK), the fraction {a mathematical formula}1 − K − 12(m − 1) can be arbitrarily close to the approximation ratio of our algorithm (the reasoning here is somewhat in the spirit of the idea of identifying maximally robust elections, as studied by Shiryaev, Yu, and Elkind [53]).</a>
<a href="#9" id="9">[9], who showed that for each fixed constant K, {a mathematical formula} Α B,dec-Monroe-SatWinner can be solved in polynomial time.</a>
<a href="#10" id="10">Thus, for the finite number of cases, where {a mathematical formula}HKK is too large, we can solve the problem optimally using their algorithm.</a>
<a href="#11" id="11">In consequence, the quality of the solution produced by Algorithm A most strongly depends on the ratio {a mathematical formula}K − 12(m − 1).</a>
<a href="#12" id="12">In the next theorem we show that to have a high chance of obtaining a high quality assignment, we need to repeat the sampling step many times.</a>
<a href="#13" id="13">Thus, for practical purposes, by Algorithm R we mean an algorithm that repeats the sampling process a given number of times (this parameter is given as input) and returns the best solution found (the assignment is created using Proposition 3).</a>
<a href="#14" id="14">For example, for ({a mathematical formula}m=10, {a mathematical formula}K=3) Algorithm C under data set S2 for the Monroe system for {a mathematical formula}n=5000 gave {a mathematical formula}C/Cideal=0.88, while for {a mathematical formula}n=100 (in the previous section) we got {a mathematical formula}C/Cideal=0.89.</a>
<a href="#15" id="15">Thus we conclude that in practice the number of agents has almost no influence on the quality of the results provided by our algorithms.</a>
<a href="#16" id="16">If all the agents in {a mathematical formula}Ni were assigned to alternatives from {a mathematical formula}A2, then, by the construction of R, at least one of them would have been assigned to an alternative that she ranks at a position greater than {a mathematical formula} ‖ A2 ‖ − ⌈ m(1+r)K ⌉ K= ⌈ 2r ⌉ ⌈ m(1+r)K ⌉ K − ⌈ m(1+r)K ⌉ K.</a>
<a href="#17" id="17">For {a mathematical formula}x= ⌈ m(1+r)K ⌉ K we have:{a mathematical formula} (we skip the straightforward calculation) and, thus, this agent would have been assigned to an alternative that she ranks at a position greater than {a mathematical formula}m ′ − m ′ r+mr.</a>
<a href="#18" id="18">As a consequence, this agent's satisfaction would be lower than {a mathematical formula}(m ′ − m)r. Similarly, no agent from {a mathematical formula}Ni can be assigned to an alternative from {a mathematical formula}A1 − Mf(i).</a>
<a href="#19" id="19">Thus, for each i, {a mathematical formula}1 ≤ i ≤ n, there exists at least one agent {a mathematical formula}j ∈ Ni that is assigned to an alternative from {a mathematical formula}Mf(i).</a>
<a href="#20" id="20">In consequence, the covering subfamily of {a mathematical formula}F consists simply of those sets {a mathematical formula}Ft, for which some agent is assigned to alternative {a mathematical formula}at ∈ A1.The presented construction gives the exact algorithm for Set-Cover problem running in time {a mathematical formula}f(K)(n+m)O(1), where {a mathematical formula}f(K) is polynomial in {a mathematical formula}( ⌈ 2r ⌉ K).</a>
</body>
</html>