<html>
<head>
<meta name="TextLength" content="SENT_NUM:21, WORD_NUM:613">
</head>
<body bgcolor="white">
<a href="#0" id="0">In this work, we use the notion of modularity to define a new model of generation of random SAT instances with community structure, called Community Attachment.</a>
<a href="#1" id="1">This model also generates SAT instances very similar to classical random formulas using a low value of modularity.</a>
<a href="#2" id="2">On the contrary, with a low modularity we can generate SAT instances very similar to classical random ones.</a>
<a href="#3" id="3">In Algorithm 1, there is an implementation of the Community Attachment random formulas generator from {a mathematical formula}Fk(n,m,c,p).</a>
<a href="#4" id="4">Using {a mathematical formula}p=Q+1/c these formulas will have an expected modularity close to Q.</a>
<a href="#5" id="5">In order to analyze the community structure of the SAT instances obtained with our model, we have generated some sets of random formulas for different values of {a mathematical formula}Q ∈ {0.9,0.8,0.7,0.5,0.3} (hence {a mathematical formula}p=Q+1/c), and for different values of number of communities {a mathematical formula}c ∈ {10,20,40,80}.</a>
<a href="#6" id="6">Notice that the main goal of this experiment is to show that our model generates instances with modularity {a mathematical formula}Q ′ and number of communities {a mathematical formula}c ′ similar to the input parameters Q and c, for any number of variables n and clauses m. We use the algorithm described in [9] to compute an approximation of {a mathematical formula}Q ′ and {a mathematical formula}c ′ .</a>
<a href="#7" id="7">We observe that the modularity {a mathematical formula}Q ′ and the number of communities {a mathematical formula}c ′ are almost unaffected by these variations of n and {a mathematical formula}m/n.</a>
<a href="#8" id="8">For small values of the clause/variable ratio {a mathematical formula}m/n and the probability p, the number of clauses relating variables of the same expected community is very small.</a>
<a href="#9" id="9">In a second experiment, we generate families of instances with the same number of variables n and the same clause/variable ratios {a mathematical formula}m/n than in the previous experiment, and varying the number of communities c with a fixed modularity {a mathematical formula}Q=0.8.</a>
<a href="#10" id="10">We observe that the expected modularity {a mathematical formula}Q ′ as well as the expected number of communities {a mathematical formula}c ′ is almost unaffected in these families, except, as expected, for small values of n and {a mathematical formula}m/n.</a>
<a href="#11" id="11">In this section we check if this phenomenon also exists in the random SAT instances generated with our model, and if the new transition point, noted {a mathematical formula}r ′ , differs from the classical {a mathematical formula}r ′ ≠ r.</a>
<a href="#12" id="12">Therefore, for small (big) values of {a mathematical formula}m/n, nearly all formulas are SAT (UNSAT).</a>
<a href="#13" id="13">We observe that the phase transition point {a mathematical formula}r ′ decreases as the modularity Q increases.</a>
<a href="#14" id="14">In Table 2, we report the phase transition point {a mathematical formula}r ′ of some families of instances with {a mathematical formula}k=4.</a>
<a href="#15" id="15">Again, the phase transition point {a mathematical formula}r ′ of these families tends to decrease as the modularity Q increases.</a>
<a href="#16" id="16">We use sets of instances from {a mathematical formula}Fk(n,m,c,p) with a clause/variable ratio {a mathematical formula}m/n in the phase transition point, a number of communities {a mathematical formula}c=40 and a clause length {a mathematical formula}k=3.</a>
<a href="#17" id="17">Also, we use a random SAT instance of the family from our model with {a mathematical formula}n=1000 variables, {a mathematical formula}m=4200 clauses, clause length {a mathematical formula}k=3, modularity {a mathematical formula}Q=0.8 and {a mathematical formula}c=10 communities.</a>
<a href="#18" id="18">For instance, community {a mathematical formula}c1 contains variables with indexes from 1 to 100 (both communities and variables are 1-based numbered).</a>
<a href="#19" id="19">Before this restart, the solver was focused on community {a mathematical formula}c9, but all variables of communities {a mathematical formula}c3 and {a mathematical formula}c5 were also assigned (because the solver had also been focusing on these communities before {a mathematical formula}c9).</a>
<a href="#20" id="20">After the restart, only variables of {a mathematical formula}c9 are assigned again.</a>
</body>
</html>