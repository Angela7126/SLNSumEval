<html>
<head>
<meta name="TextLength" content="SENT_NUM:77, WORD_NUM:1885">
</head>
<body bgcolor="white">
<a href="#0" id="0">We discuss a new implementation of, and new experiments with, Fajtlowicz's Dalmatian conjecture-making heuristic.</a>
<a href="#1" id="1">We have reimplemented Fajtlowicz's useful but little-known Dalmatian heuristic for the automation of mathematical conjecture-making (this heuristic, for instance, has never been referenced in the pages of this journal).</a>
<a href="#2" id="2">The heuristic is general and can be used to conjecture relations between real number invariants of any objects, mathematical or otherwise.</a>
<a href="#3" id="3">We include examples of conjectures in number theory, matrix theory, graph theory and the characterization of game positions.</a>
<a href="#4" id="4">One of the number theory conjectures implies, and is stronger than, Goldbach's Conjecture.</a>
<a href="#5" id="5">Some of the number theory conjectures seem to imply the Riemann Hypothesis.</a>
<a href="#6" id="6">And some of the graph theory conjectures would advance the lower bound theory of the independence number of a graph, a widely-studied NP-hard graph invariant.</a>
<a href="#7" id="7">We have also implemented an idea, suggested to us by Barry Mazur, to include existing theorems in the program; when used in this way the program is guaranteed to produce statements that are not implied by existing mathematical knowledge.</a>
<a href="#8" id="8">This problem was remedied by Fajtlowicz's invention of his Dalmatian heuristic, implemented in early-1990s versions of Graffiti[12].</a>
<a href="#9" id="9">The Dalmatian heuristic, by design, limits both the quantity of output statements and guarantees the quality of the output statements.</a>
<a href="#10" id="10">The program cannot make any more conjectures than the number of objects being considered (stored in the program) — so the number of generated conjectures is fundamentally limited.</a>
<a href="#11" id="11">Each conjecture must be significant with respect to at least one object — each must provide better information about a stored object than any of the other conjectures.</a>
<a href="#12" id="12">When applied to the problem of finding bounds of invariants — in cases where bounds are of pre-existing research interest — and provided with examples (objects) where existing theory does not suffice to predict the value of the invariant for the example, a program implementing the Dalmatian heuristic will produce a conjecture.</a>
<a href="#13" id="13">In the sense that the truth of the conjecture would advance existing theory, the conjecture can be said to be interesting or significant.</a>
<a href="#14" id="14">The utility of the output can be further improved by including existing knowledge in the program.</a>
<a href="#15" id="15">We will discuss one experiment implementing this new idea.</a>
<a href="#16" id="16">These inequalities can be interpreted as being true for all the objects of the given type.</a>
<a href="#17" id="17">That is, the inequality {a mathematical formula} Α ≤ Α 1+ Α 2 can be interpreted as, “ For every object {a mathematical formula}O, {a mathematical formula} Α (O) ≤ Α 1(O)+ Α 2(O). ” A conjectured upper bound u is only added to the database of conjectures if the bound passes the following two tests.</a>
<a href="#18" id="18">What follows is pseudocode for this main loop of our program for the case where conjectured upper bounds for some invariant is desired.</a>
<a href="#19" id="19">upper_bound, a potential conjectured upper bound for invariant, is an expression constructed from the invariants and operators included in the program.</a>
<a href="#20" id="20">objects is the list of examples known to the program.</a>
<a href="#21" id="21">The value of invariant and upper_bound applied to each {a mathematical formula}O in objects is a real number; similarly, the value of u applied to {a mathematical formula}O, for each u in conjectured_upper_bounds and each {a mathematical formula}O in objects is a real number.</a>
<a href="#22" id="22">In the case where both the truth and significance tests are passed, upper_bound is added to the conjectures store conjectured_upper_bounds.</a>
<a href="#23" id="23">The main loop for the case of lower bound conjectures would parallel this.</a>
<a href="#24" id="24">The initial objects are 5 and 16, the invariants used to form potential lower bounds are sum_of_digits, number_prime_factors, and number_of_divisors, while the operators are ^2, +, and +1.</a>
<a href="#25" id="25">Here we also assume that, after a significant conjecture is added to the conjectures store, that insignificant conjectures are removed.</a>
<a href="#26" id="26">The order that potential lower bounds are considered corresponds to the iteration number in Table 1.</a>
<a href="#27" id="27">First all of the invariants themselves (each represented by a tree with a root and no other nodes) are considered, followed by the application of the unary squaring operator to these invariants, followed by application of the binary sum operator applied to each distinct pair of invariants.</a>
<a href="#28" id="28">Expressions formed with the unary “ add 1 ” operator are never formed as the program stops after the ninth iteration, at which point the conjectures in the conjecture store exactly predict the value of {a mathematical formula} Π (x) for all objects x in {a mathematical formula}{5,16}.</a>
<a href="#29" id="29">The considered conjecture in Iteration 1 in Table 1 is “ the sum of the digits of an integer x is no more than {a mathematical formula} Π (x) ” .</a>
<a href="#30" id="30">This is not true of all objects known to the program, does not pass the truth test, and the conjecture store remains empty.</a>
<a href="#31" id="31">The next considered conjecture is “ the number of prime factors of any integer x is no more than {a mathematical formula} Π (x) ” .</a>
<a href="#32" id="32">This conjecture passes the truth test, as it is true for all known objects, and trivially passes the significance test.</a>
<a href="#33" id="33">The conjectures store is updated to include this lower bound.</a>
<a href="#34" id="34">The considered conjecture in Iteration 3 is “ the number of divisors of an integer x is no more than {a mathematical formula} Π (x) ” .</a>
<a href="#35" id="35">This is true for all of the objects and is significant as this lower bound is better than the number_prime_factors lower bound for at least one of the known objects; so number_prime_factors is added to the conjectures store.</a>
<a href="#36" id="36">In fact it is at least as good for all the known objects.</a>
<a href="#37" id="37">Since there is no object x in {a mathematical formula}{5,16} where number_prime_factors(x) > number_of_divisors(x).</a>
<a href="#38" id="38">The number_of_divisors bound is removed from the conjectures store as insignificant.</a>
<a href="#39" id="39">The next change to the conjectures store comes after Iteration 9.</a>
<a href="#40" id="40">The considered conjecture is “ the number of prime factors of an integer x plus the number of its divisors is no more than {a mathematical formula} Π (x) ” .</a>
<a href="#41" id="41">This is true for all known objects, and the bound passes the truth test.</a>
<a href="#42" id="42">The bound gives a larger value than number_of_divisors for at least one known objects and is thus significant and added to the conjecture store.</a>
<a href="#43" id="43">In fact number_of_divisors is no longer a significant bound and it is removed.</a>
<a href="#44" id="44">At this point, for each object x, the maximum of the conjectured bounds equals the actual value of {a mathematical formula} Π (x).</a>
<a href="#45" id="45">No further bounds can be significant and the program stops.</a>
<a href="#46" id="46">4.</a>
<a href="#47" id="47">Remove insignificant conjectures.</a>
<a href="#48" id="48">After a conjecture is added to the store of conjectures, it may be the case that another conjecture in the store is no longer significant.</a>
<a href="#49" id="49">If conjectured upper bounds (for example) for an invariant Α are being generated then a conjectured bound {a mathematical formula} Α i in the conjectures store is significant, with respect to the stored objects, if and only if there is an object {a mathematical formula}O such that {a mathematical formula} Α i(O)<min ⁡ { Α j(O):j ≠ i}, that is, if and only if, there is an object {a mathematical formula}O where the bound gives a better predicted value for {a mathematical formula} Α (O) than any other conjectured bound does.</a>
<a href="#50" id="50">Insignificant conjectures are then removed.</a>
<a href="#51" id="51">6.</a>
<a href="#52" id="52">Add the counterexample, and repeat the conjecture generating and testing process.</a>
<a href="#53" id="53">The program can never make more conjectures than the number of objects it has stored: the reason is exactly because each conjecture in the conjectures store must give a better bound for at least one stored object than any other conjecture does.If there were, for instance, two stored objects and three conjectured bounds, at least one of the conjectured bounds could not possibly be significant: at best one of the conjectures could be the best bound for one of the objects and another for the second object — but the third conjecture would have no possible remaining objects for which it could give the unique best predicted value; this conjecture would have been removed as insignificant.</a>
<a href="#54" id="54">We used McKay's program geng[61] to generate all graphs up to some (small) specified order in a loop to automatedly find counterexamples to generated conjectures and, thus, automatedly improve the produced conjectures.</a>
<a href="#55" id="55">In our run generating upper bound conjectures for the domination number, the program ended up with four examples (found by this automated search for counterexamples) and the conjecture that the domination number of a graph is no more than its matching number.</a>
<a href="#56" id="56">The conjecture exactly predicted the true value of the domination number of these four graphs — and, hence, the program stopped.</a>
<a href="#57" id="57">This is a known (and not difficult to prove) fact about the domination number.</a>
<a href="#58" id="58">Again, if existing theory had been included, this conjecture could not have been made.</a>
<a href="#59" id="59">The objects that we used were 26 mostly simple winning game positions derived from Gale's original paper.</a>
<a href="#60" id="60">We then generated conjectured upper and lower bounds for each of the 12 invariants.</a>
<a href="#61" id="61">A possible game position would either satisfy these “ winning position conjectures ” or it would not: if every conjecture were true then any winning position would satisfy all of the conjectures.</a>
<a href="#62" id="62">At any moment in the game N will have a number of possible moves.</a>
<a href="#63" id="63">The move heuristic that we used was to choose the move yielding a board position that satisfied the fewest number of the conjectures — on the theory that this move would yield a position that was least likely to be a winning position for P. We did not implement any look-ahead in our move heuristic.</a>
<a href="#64" id="64">3.</a>
<a href="#65" id="65">Add existing bounds (ones proved in the literature) and conjectures to the program.</a>
<a href="#66" id="66">In this way, the program could only produce conjectures that for which there is at least one example where the produced conjecture gives a better bound than any known theorem or conjecture.</a>
<a href="#67" id="67">In Fajtlowicz's terms, the produced conjectures would be “ informative ” or “ significant ” compared to existing theory.</a>
<a href="#68" id="68">We did not do this in our initial experiments but did use this idea successfully for our independence number conjectures.</a>
<a href="#69" id="69">What follows is a short example of how the conjecture method can be used in Sage.</a>
<a href="#70" id="70">{a mathematical formula} The first two lines of this example define a new (that is, not existing in Sage) graph theoretic invariant max_degree.</a>
<a href="#71" id="71">The next line specifies invariants to be a list of built-in and user-defined invariants; these will potentially appear in the conjectured expressions; and the user can remove any of these and add as many others as she likes.</a>
<a href="#72" id="72">The fourth line specifies objects to be a list of graphs that will be used by the program when making conjectures — in this case the list is initialized with three complete graphs.</a>
<a href="#73" id="73">Again, the user can remove any of these and add arbitrarily many others.</a>
<a href="#74" id="74">The conjecture function takes the lists of invariants and objects, together with a number specifying which of the invariants in the invariants list should be used as the main invariant; in this case, 0 is input, indicating that invariants[0] — namely, Graph.size — should be used as the main invariant.</a>
<a href="#75" id="75">The last three lines are the output of the program, three conjectured upper bounds for the size of a graph.</a>
<a href="#76" id="76">All three conjectures happen to be false: they are all necessarily true for the complete graphs on 3, 4 and 5 vertices — but are false for other graphs not in the input list.</a>
</body>
</html>