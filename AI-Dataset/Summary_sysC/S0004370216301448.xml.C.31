<html>
<head>
<meta name="TextLength" content="SENT_NUM:28, WORD_NUM:643">
</head>
<body bgcolor="white">
<a href="#0" id="0">Given this, a naïve means to identify all known conflicts is to evaluate, after every state expansion and for every {a mathematical formula}s ∈ Closed, whether {a mathematical formula}R[s] ⊆ Closed.</a>
<a href="#1" id="1">But one can do much better than this, by a dead-end labeling procedure.</a>
<a href="#2" id="2">We now tackle the refinement step in Algorithm 1, Algorithm 2, for the dead-end detector {a mathematical formula}uC.</a>
<a href="#3" id="3">Given {a mathematical formula}R[s] where all {a mathematical formula}t ∈ R[s] are dead-ends, how to refine {a mathematical formula}uC on {a mathematical formula}R[s] to recognize all these dead-ends?</a>
<a href="#4" id="4">Naturally, the refinement will add a set X of conjunctions into C. A suitable refinement is always possible, i.e., there exists X s.t.</a>
<a href="#5" id="5">{a mathematical formula}uC ∪ X(s)= ∞ for all {a mathematical formula}t ∈ R[s].</a>
<a href="#6" id="6">But how to find such X?</a>
<a href="#7" id="7">Neighbors refinement assumes as input a set {a mathematical formula}S ˆ of dead-end states that satisfies the {a mathematical formula}uC-recognized neighbors property.</a>
<a href="#8" id="8">Namely, we denote by {a mathematical formula}T ˆ the neighbors of {a mathematical formula}S ˆ , i.e., the set of states {a mathematical formula}t ∉ S ˆ where there exists {a mathematical formula}s ∈ S ˆ s.t.</a>
<a href="#9" id="9">{a mathematical formula}s → t.</a>
<a href="#10" id="10">The {a mathematical formula}uC-recognized neighbors property requires that {a mathematical formula}uC(t)= ∞ for all {a mathematical formula}t ∈ T ˆ .</a>
<a href="#11" id="11">In the context of Algorithm 1, Algorithm 2, we set {a mathematical formula}S ˆ :={s ′ |s ′ ∈ R[s],uC(s ′ )=0}.</a>
<a href="#12" id="12">Provided that {a mathematical formula}uC is the only dead-end detector used, it is easy to see that the {a mathematical formula}uC-recognized neighbors property always holds at the refinement step on {a mathematical formula}R[s]: {a mathematical formula}R[s] contains only closed states, so it contains all states {a mathematical formula}s ′ reachable from s, up to the neighbor states {a mathematical formula}t ∈ R[s] ∖ S ˆ where {a mathematical formula}uC(t)= ∞ .</a>
<a href="#13" id="13">For illustration, consider again our running example, specifically the search space in Fig.</a>
<a href="#14" id="14">2.</a>
<a href="#15" id="15">At the refinement step on {a mathematical formula}s3, we have {a mathematical formula}S ˆ ={s ′ |s ′ ∈ R[s3],uC(s ′ )=0}={s3,s1}.</a>
<a href="#16" id="16">The neighbor states are {a mathematical formula}T ˆ ={s4,s5}.</a>
<a href="#17" id="17">The {a mathematical formula}uC-recognized neighbors property is satisfied: each of the neighbor states is already recognized by {a mathematical formula}uC, using the singleton conjunctions only, as there is no more fuel left.</a>
<a href="#18" id="18">We also run offline learning variants, for proving unsolvability and for dead-end detection.</a>
<a href="#19" id="19">In either case, we use path-cut refinement and conflict refinement, as neighbors refinement is not applicable in the offline context.</a>
<a href="#20" id="20">For proving unsolvability, we simply refine {a mathematical formula}uC on the initial state until {a mathematical formula}uC(I)= ∞ .</a>
<a href="#21" id="21">For dead-end detection, we refine {a mathematical formula}uC on the initial state until a size bound N is reached.</a>
<a href="#22" id="22">Then we use the same set C for {a mathematical formula}uC dead-end detection throughout the search.</a>
<a href="#23" id="23">This is inspired by previous work on partial delete relaxation heuristics [69], [67], [68], and like that work the size bound N is multiplicative: we stop when the number of “ counters ” – atomic entities in the implementation of {a mathematical formula}uC – reaches N times that when C contains the singleton conjunctions only.</a>
<a href="#24" id="24">Consider first the different refinement variants within DFS {a mathematical formula}hFF, i.e., our neighbors refinement ( “ Nei ” ) and path-cut refinement ( “ Pat ” ) methods vs. the conflict refinement ( “ Con ” ) from prior work.</a>
<a href="#25" id="25">There are large performance differences in many domains, showing that the way we learn conjunctions is important.</a>
<a href="#26" id="26">In particular, conflict refinement has the lead, and a marginal one at that, in only one case (IPC Trucks), showing that it is important to target the conjunction learning to dead-end detection.</a>
<a href="#27" id="27">Path-cut refinement is best overall on the IPC, but neighbors refinement has a huge advantage in the resource-constrained benchmarks so has best overall coverage.</a>
</body>
</html>