<html>
<head>
<meta name="TextLength" content="SENT_NUM:18, WORD_NUM:624">
</head>
<body bgcolor="white">
<a href="#0" id="0">CP provides a richer language of discrete variables with domains either given in extension or expressed in terms of upper and lower bounds, arithmetic and logical operators over these variables, and a library of ‘ global ’ constraints that capture common reasoning patterns.</a>
<a href="#1" id="1">These languages provide facilities to model parameterised classes of problems (where an individual problem instance is specified by giving values for the class parameters), such as arrays and iteration or comprehension, and to abstract away from the specific details of the many available individual constraint solvers.</a>
<a href="#2" id="2">The fourth step is to extract common subsets of terms between row constraints and (simplified) scalar product constraints.</a>
<a href="#3" id="3">We have previously [47], [50] filtered the user-defined decision variables using a strong consistency related to Singleton Arc Consistency (SAC) [7]: SACBounds applies the SAC test to prune the upper and lower bound of each variable to exhaustion.</a>
<a href="#4" id="4">For example, given the product {a mathematical formula}X×(Y+Z) and a target solver that does not allow sums inside products, the flattening process will add a new variable aux, replace the product with the new expression {a mathematical formula}X×aux and add a new constraint {a mathematical formula}aux=Y+Z.</a>
<a href="#5" id="5">Importantly, Identical CSE can reduce the search space dramatically [60], [59] by linking different constraints together thus strengthening constraint propagation in a conventional CP solver.</a>
<a href="#6" id="6">They first solve small instances of the class and use machine learning to generate hypothetical implied constraints, and then use a theorem prover to test each hypothesis and those proven correct are added to the model.</a>
<a href="#7" id="7">For the following we assume that an AC expression is represented by a set data structure with {a mathematical formula}O(1) lookup, insertion and removal.</a>
<a href="#8" id="8">X-CSE differs from the existing algorithms I-CSE(-NC) in that it can extract AC-CSs that are intersections of more than two expressions and AC-CSs containing auxiliary variables (from earlier steps).</a>
<a href="#9" id="9">To find the value of ub (lb) for a given allDifferent or GCC constraint, we find an assignment to all the relevant variables such that each variable takes a value from its domain, the sum of the assignment is maximized (minimized), and the number of occurrences of each value is within the interval permitted for the value (for AllDifferent, the interval is {a mathematical formula}{0 … 1} for every value).</a>
<a href="#10" id="10">In Savile Row domain filtering is implemented by tailoring the problem instance for output to Minion and using Minion's standard propagation combined with singleton consistency [7] applied to the upper and lower bounds only (SACBounds).</a>
<a href="#11" id="11">In summary, variable unification and standard domain filtering are beneficial on average for harder instances (taking over 10 seconds) or when targeting SAT.</a>
<a href="#12" id="12">However, when a set of identical unary constraints must be extracted by general flattening (Section 3.4), Identical CSE will reduce the number of auxiliary variables and constraints.</a>
<a href="#13" id="13">X-CSE is able to solve to optimality one additional instance {a mathematical formula}n=10,r=5, which solved just within the time limit and appears on the right edge of the plot with a speed-up of 1.23.</a>
<a href="#14" id="14">In the first tailoring process the implied sums will be {a mathematical formula} ∑ X=136 where X is the set of variables in the row, column or subsquare.</a>
<a href="#15" id="15">In the second tailoring process some variables may be assigned and deleted, with the assigned value removed from other variables in the same row, column or subsquare.</a>
<a href="#16" id="16">It is likely that an aggregation approach (producing a set of global sequence constraints [58] or a pre-defined encoding [33], [11]) would perform better than X-CSE on this problem class, however aggregation would also be less general than X-CSE.</a>
<a href="#17" id="17">Applying X-CSE to Peg Solitaire Action adds a considerable overhead to Savile Row (owing to a large number of long conjunctions nested within constraints) and when targeting the CP solver does not change the search tree.</a>
</body>
</html>