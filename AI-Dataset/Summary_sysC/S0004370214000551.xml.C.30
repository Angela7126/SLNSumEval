<html>
<head>
<meta name="TextLength" content="SENT_NUM:35, WORD_NUM:890">
</head>
<body bgcolor="white">
<a href="#0" id="0">In this paper we propose two algorithms: Potential Search (PTS) and Anytime Potential Search/Anytime Non-Parametric {a mathematical formula}A ⁎ ({a mathematical formula}APTS/ANA ⁎ ).</a>
<a href="#1" id="1">Most existing {a mathematical formula}WA ⁎ -based anytime search algorithms require users to set parameters, for example the w factor used to inflate the heuristic.</a>
<a href="#2" id="2">{a mathematical formula}ARA ⁎ [6], for instance, has two parameters: the initial value of w and the amount by which w is decreased in each iteration.</a>
<a href="#3" id="3">Next, we describe {a mathematical formula}APTS/ANA ⁎ , which is a non-parametric anytime search algorithm using the PTS evaluation function {a mathematical formula}u( ⋅ ).</a>
<a href="#4" id="4">However, as C approaches infinity, the node in OPEN with the highest {a mathematical formula}u(n)=C − g(n)h(n) is actually the node with the lowest {a mathematical formula}h(n).</a>
<a href="#5" id="5">Thus, as C approaches infinity, PTS converges to pure heuristic search.</a>
<a href="#6" id="6">Therefore, we define the first ImproveSolution call of {a mathematical formula}APTS/ANA ⁎ to run pure heuristic search until the first solution is found.</a>
<a href="#7" id="7">Next, we give a different derivation of {a mathematical formula}APTS/ANA ⁎ , as a non-parametric improvement of the {a mathematical formula}ARA ⁎ anytime search algorithm.</a>
<a href="#8" id="8">Instead of using {a mathematical formula}APTS/ANA ⁎ to find the first solution, it is possible to use another algorithm (e.g., Speedy search [46]) to find the first solution and provide it to {a mathematical formula}APTS/ANA ⁎ as an initial incumbent solution.</a>
<a href="#9" id="9">Additionally, the bound of the next PTS can be set to be lower than the incumbent solution by some Δ , to avoid finding too many solutions.</a>
<a href="#10" id="10">Such a Δ , however, would be a parameter of the algorithm and setting it raises the parameter tuning problem we aim to avoid.</a>
<a href="#11" id="11">In this section we empirically evaluate the performance of PTS as a bounded-cost search algorithm, and {a mathematical formula}APTS/ANA ⁎ as an anytime search algorithm.</a>
<a href="#12" id="12">We compared PTS against a range of existing anytime search algorithms: {a mathematical formula}AWA ⁎ [22], {a mathematical formula}ARA ⁎ [6] and DFBnB [23].</a>
<a href="#13" id="13">To make the comparison to PTS fair, we also modified these anytime algorithms to prune every node n with {a mathematical formula}g(n)+h(n) larger than the cost bound, as is done for PTS (line 12 in Algorithm 1).</a>
<a href="#14" id="14">For example, in the {a mathematical formula}100×1200 gridworld planning domain, PTS is two orders of magnitude faster than {a mathematical formula}ARA ⁎ for a cost bound of 1050.</a>
<a href="#15" id="15">Following all the bounded-cost results shown above, we conclude that PTS outperforms the best performing anytime search algorithm for almost all cost bounds and across the entire range of domains we used.</a>
<a href="#16" id="16">Next, we present experimental results to evaluate the performance of {a mathematical formula}APTS/ANA ⁎ on the same range of domains described in Section 5.1.</a>
<a href="#17" id="17">In every experiment, we ran {a mathematical formula}APTS/ANA ⁎ and the best-performing anytime search algorithms (different for each domain), and recorded the suboptimality of the incumbent solution as a function of the runtime.</a>
<a href="#18" id="18">In the following figures, {a mathematical formula}ARA ⁎ (X) will denote {a mathematical formula}ARA ⁎ using {a mathematical formula}w0=X ({a mathematical formula}w0 is the initial value of w used by {a mathematical formula}ARA ⁎ ; see Section 2.3).</a>
<a href="#19" id="19">The benefits of {a mathematical formula}APTS/ANA ⁎ in this domain are very clear.</a>
<a href="#20" id="20">{a mathematical formula}APTS/ANA ⁎ dominates all other algorithms throughout the search.</a>
<a href="#21" id="21">Although not visible in the figure, we also report that {a mathematical formula}APTS/ANA ⁎ found an initial solution faster than {a mathematical formula}ARA ⁎ .</a>
<a href="#22" id="22">In this domain {a mathematical formula}APTS/ANA ⁎ is not always the best performing algorithm.</a>
<a href="#23" id="23">For some weights and time ranges, {a mathematical formula}ARA ⁎ is able to find solutions of better quality.</a>
<a href="#24" id="24">However, the rapid convergence of {a mathematical formula}APTS/ANA ⁎ towards an optimal solution and consistent decrease in suboptimality are very clear in this domain, demonstrating the anytime behavior of {a mathematical formula}APTS/ANA ⁎ .</a>
<a href="#25" id="25">As in the 6 DoF experiments, in this domain too {a mathematical formula}APTS/ANA ⁎ found an initial solution faster than all other algorithms.</a>
<a href="#26" id="26">As an aggregated view showing the relative anytime performance of {a mathematical formula}APTS/ANA ⁎ with respect to the other algorithms, we also analyzed which was the most effective algorithm throughout the search.</a>
<a href="#27" id="27">This was measured by counting for every algorithm A and every millisecond t, the number of problem instance where the incumbent solution found by A after running t milliseconds is smaller than or equal to the incumbent solution found by all other algorithms after running t milliseconds.</a>
<a href="#28" id="28">This measures the number of instances where algorithm A was the best algorithm if halted after t milliseconds.</a>
<a href="#29" id="29">11(a) clearly show that in this domain as well, {a mathematical formula}APTS/ANA ⁎ performs consistently no worse and often better than the other algorithms.</a>
<a href="#30" id="30">Negative results for {a mathematical formula}APTS/ANA ⁎ were obtained for the 15-puzzle domain, shown in Fig.</a>
<a href="#31" id="31">Running {a mathematical formula}APTS/ANA ⁎ yielded worse results than {a mathematical formula}AWA ⁎ with a tuned w value ({a mathematical formula}w=2).</a>
<a href="#32" id="32">This is because, as explained in Section 4, {a mathematical formula}APTS/ANA ⁎ runs pure heuristic search until it finds the initial solution.</a>
<a href="#33" id="33">In many domains, including all those described above, this results in finding an initial solution very fast.</a>
<a href="#34" id="34">As a partial remedy for this problem, we tried first running {a mathematical formula}WA ⁎ with different weights and then giving {a mathematical formula}APTS/ANA ⁎ the initial solution, after which it continues to run as usual.</a>
</body>
</html>