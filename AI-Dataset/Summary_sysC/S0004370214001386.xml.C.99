<html>
<head>
<meta name="TextLength" content="SENT_NUM:21, WORD_NUM:697">
</head>
<body bgcolor="white">
<a href="#0" id="0">The original CBS algorithm corresponds to the extreme case where {a mathematical formula}B= ∞ (never merge agents), and the Independence Detection (ID) framework [45] is the other extreme case where {a mathematical formula}B=0 (always merge agents when conflicts occur).</a>
<a href="#1" id="1">For each agent {a mathematical formula}ai we assume that no other agent exists and calculate its optimal individual path cost from all states in the state space to {a mathematical formula}goali; this is usually done by a reverse search from the goal.</a>
<a href="#2" id="2">If, however, while performing the validation, a conflict {a mathematical formula}C=(ai,aj,v,t) is found for two or more agents {a mathematical formula}ai and {a mathematical formula}aj, the validation halts and the node is declared a non-goal node.</a>
<a href="#3" id="3">Given a non-goal CT node N whose solution {a mathematical formula}N.solution includes a conflict{a mathematical formula}Cn=(ai,aj,v,t) we know that in any valid solution, at most one of the conflicting agents ({a mathematical formula}ai and {a mathematical formula}aj) may occupy vertex v at time t. Therefore, at least one of the constraints {a mathematical formula}(ai,v,t) or {a mathematical formula}(aj,v,t) must be added to the set of constraints in {a mathematical formula}N.constraints.</a>
<a href="#4" id="4">The low-level search is given an agent, {a mathematical formula}ai, and the set of constraints associated with {a mathematical formula}ai.</a>
<a href="#5" id="5">It performs a search in the underlying graph to find an optimal path for agent {a mathematical formula}ai that satisfies all its constraints while completely ignoring the other agents.</a>
<a href="#6" id="6">When the ID framework is applied to k agents (whose start and goal locations are randomized) the resulting effective number of agents, {a mathematical formula}k ′ , is noisy and its variance is very large.</a>
<a href="#7" id="7">Therefore, for this experiment we followed [42] and created problem instances where all agents are dependent, according to the ID framework.</a>
<a href="#8" id="8">Note that although CBS generates more nodes than EPEA*, it is still faster in many cases ({a mathematical formula}k ′ >14) due to the fact that the constant time per node of the low-level CBS (single-agent state, small open list) is much smaller than that of EPEA* (multiple agents, large open list).</a>
<a href="#9" id="9">Since {a mathematical formula}ai and {a mathematical formula}aj are now going to be merged, internal conflicts should not be considered as {a mathematical formula}ai and {a mathematical formula}aj will be solved in a coupled manner by the low level.</a>
<a href="#10" id="10">Thus, we only consider external constraints from that point on.</a>
<a href="#11" id="11">Assume that agents {a mathematical formula}ai and {a mathematical formula}aj are to be merged into a new meta agent {a mathematical formula}a{i,j} and that {a mathematical formula}ai has the external constraint {a mathematical formula}(ai,v,t).</a>
<a href="#12" id="12">This constraint means that further up in the CT, {a mathematical formula}ai had a conflict with some other agent {a mathematical formula}ar at location v at time t and therefore {a mathematical formula}ai is not allowed to be located at location v at time t.</a>
<a href="#13" id="13">The new meta agent must include all external constraints.</a>
<a href="#14" id="14">Assume an external constraint {a mathematical formula}(ai,v,t).</a>
<a href="#15" id="15">After merging {a mathematical formula}ai and {a mathematical formula}aj this constraint should apply only to the original agent, {a mathematical formula}ai, and not apply to the entire meta-agent, i.e., {a mathematical formula}{ai} ∪ {aj}.</a>
<a href="#16" id="16">Therefore, the merged constraint is in the form of {a mathematical formula}(a{i,j},ai,v,t).</a>
<a href="#17" id="17">When merging {a mathematical formula}ai and {a mathematical formula}aj one would be tempted to introduce a meta constraint {a mathematical formula}(a{i,j},{ai} ∪ {aj},v,t) where both agents {a mathematical formula}ai and {a mathematical formula}aj are prohibited from location v at time t. However, this might break the optimality of the algorithm because of the following scenario.</a>
<a href="#18" id="18">Assume a 3-agent problem where in the optimal solution agent {a mathematical formula}a3 must go through vertex v at time step t. Calling MA-CBS to solve this problem creates the root CT node.</a>
<a href="#19" id="19">Assume that in the path chosen for each agent in the root CT node both agents {a mathematical formula}a1 and {a mathematical formula}a2 are assigned vertex v at time step t. Next, MA-CBS branches according to the conflict {a mathematical formula}(a1,a2,v,t).</a>
<a href="#20" id="20">In CBS, when a conflict {a mathematical formula}(a1,a2,v,t) is found the node is split into two children while adding constraint {a mathematical formula}(a1,v,t) in one child and {a mathematical formula}(a2,v,t) in the other child.</a>
</body>
</html>