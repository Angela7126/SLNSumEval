<html>
<head>
<meta name="TextLength" content="SENT_NUM:39, WORD_NUM:625">
</head>
<body bgcolor="white">
<a href="#0" id="0">Each decision variable has a set of possible values that it may take, called its domain.</a>
<a href="#1" id="1">The first reformulation step is to filter the domains of the decision variables, as described in Section 5.4.</a>
<a href="#2" id="2">Domain filtering removes values from the variable domains that cannot take part in any solution.</a>
<a href="#3" id="3">Consider the problem instance where {a mathematical formula}v=8,k=4, Λ =6.</a>
<a href="#4" id="4">Domain filtering assigns 70 of the original 224 decision variables in the matrix m, as shown in Fig.</a>
<a href="#5" id="5">1.</a>
<a href="#6" id="6">The second step is variable unification, as described in Section 5.4.</a>
<a href="#7" id="7">Variable unification removes decision variables in a number of cases.</a>
<a href="#8" id="8">In this case each of the deleted variables is equal to a constant.</a>
<a href="#9" id="9">For example, {a mathematical formula}m[1,1] is replaced by 0 throughout.</a>
<a href="#10" id="10">After variable unification many of the constraints contain constants.</a>
<a href="#11" id="11">Each expression type in Savile Row has a simplifier (described in Section 3.3).</a>
<a href="#12" id="12">Simplifiers will at least evaluate constant expressions, but can in some cases do significantly more than that.</a>
<a href="#13" id="13">In this case, a sum expression (representing a scalar product constraint between the first and fifth rows) may be simplified.</a>
<a href="#14" id="14">{a mathematical formula}</a>
<a href="#15" id="15">The picture is different when using the SAT solver.</a>
<a href="#16" id="16">For Graph Colouring (most instances) and Golomb Ruler, aggregation reduces the performance of the SAT solver.</a>
<a href="#17" id="17">This indicates that the encoding of the set of allDifferent constraints can be worse than the encoding of the original set of not-equal constraints.</a>
<a href="#18" id="18">AllDifferent is decomposed into a sum ( ≤ 1) constraint for each value, then a generic sum encoding is used as described in Section 3.5.</a>
<a href="#19" id="19">For Golomb Ruler the decomposition re-introduces duplication of the expressions ruler[j]-ruler[i] for all {a mathematical formula}i<j, hence aggregation is complemented by Identical CSE (as shown in the following experiment).</a>
<a href="#20" id="20">Fig.</a>
<a href="#21" id="21">8 (upper right) plots speed-up of total time with X-CSE.</a>
<a href="#22" id="22">For the easiest instances, the reduction in node count does not cause a measurable difference in the run time of the constraint solver.</a>
<a href="#23" id="23">The slight increase in total time is caused by the up-front cost of X-CSE.</a>
<a href="#24" id="24">On the harder instances, Minion search takes up most of the total time and X-CSE speeds up search substantially by reducing the number of search nodes.</a>
<a href="#25" id="25">Fig.</a>
<a href="#26" id="26">8 (upper right) peaks with instance {a mathematical formula}(12,3,4), which has a 78-fold reduction in nodes and speed up of 43.2 times.</a>
<a href="#27" id="27">The time taken by Savile Row increased from 1.7 s to 2.6 s. X-CSE typically increases the number of constraints and auxiliary variables, reducing the node rate of the CP solver.</a>
<a href="#28" id="28">AC-CSE alone does nothing because the sums in the clues are the only AC expressions and they do not overlap.</a>
<a href="#29" id="29">However the sums overlap with allDifferent constraints.</a>
<a href="#30" id="30">Each allDifferent constraint on a row, column or subsquare represents a permutation of {a mathematical formula}{1 … 16} which sum to 136.</a>
<a href="#31" id="31">Savile Row automatically adds implied sum constraints as described in Section 4.4.</a>
<a href="#32" id="32">In the first tailoring process the implied sums will be {a mathematical formula} ∑ X=136 where X is the set of variables in the row, column or subsquare.</a>
<a href="#33" id="33">In the second tailoring process some variables may be assigned and deleted, with the assigned value removed from other variables in the same row, column or subsquare.</a>
<a href="#34" id="34">The implied sums for rows, columns and subsquares will be of the form {a mathematical formula} ∑ X=c but the constant c may differ.</a>
<a href="#35" id="35">X-CSE then finds AC-CSs among rows, columns, subsquares and clues.</a>
<a href="#36" id="36">The expressions {a mathematical formula}x ∈ Sopt are extracted by Identical CSE leaving sums of Boolean variables.</a>
<a href="#37" id="37">For each option, the station capacity constraints overlap with each other and also with the implied constraint for the option.</a>
<a href="#38" id="38">X-CSE connects together all the constraints related to a single option, but is not able to exploit every AC-CS since some pairs conflict.</a>
</body>
</html>