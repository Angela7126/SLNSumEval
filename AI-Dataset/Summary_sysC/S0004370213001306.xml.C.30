<html>
<head>
<meta name="TextLength" content="SENT_NUM:29, WORD_NUM:748">
</head>
<body bgcolor="white">
<a href="#0" id="0">A novel model of multi-agent team performance, the weighted synergy graph model, where agents are vertices in a connected weighted graph, edges represent how well agents work together, and agent capabilities are Normally-distributed variables;</a>
<a href="#1" id="1">The definition of the synergy of a multi-robot team as a function of the weighted synergy graph model;</a>
<a href="#2" id="2">A learning algorithm that learns a weighted synergy graph using only observations of agent teams comprising two and three agents;</a>
<a href="#3" id="3">The task-based graph and compatibility function described above model how well agents work together at a task.</a>
<a href="#4" id="4">However, heterogeneous agents have different capabilities that affect their performance at a task.</a>
<a href="#5" id="5">The performance of a team of agents then depends on the capabilities of the agents and their task-based relationship.</a>
<a href="#6" id="6">In this section, we formally define the weighted synergy graph and how it is used to compute the performance of a team of agents at a task.</a>
<a href="#7" id="7">The weighted synergy graph is a tuple {a mathematical formula}(G,C), where:</a>
<a href="#8" id="8">We assume that {a mathematical formula}Ci and {a mathematical formula}Cj are independent for all {a mathematical formula}i,j, and so the summation {a mathematical formula}Ci+Cj in the pairwise synergy function can be performed easily.</a>
<a href="#9" id="9">This assumption is reasonable as the effect of agents working in a team is captured by the compatibility function and their distance in the weighted synergy graph, so the variables representing their individual capabilities ({a mathematical formula}Ci,Cj) are independent.</a>
<a href="#10" id="10">We use the graph structure to model the synergy among agents, specifically using the edges (that connect two agents) to compute the shortest distance between pairs of agents, and hence the pairwise synergy is the building block for the synergy of a team of agents.</a>
<a href="#11" id="11">Using the pairwise synergy function, we now define the performance of a team of agents: The synergy{a mathematical formula}S(A) of a set of agents {a mathematical formula}A ⊆ A in a weighted synergy graph is the average of the pairwise synergy of its components, i.e., {a mathematical formula}1(|A|2) ⋅ ∑ {ai,aj} ∈ AS2(ai,aj).</a>
<a href="#12" id="12">4 shows an example of a weighted synergy graph with five agents in a rescue task.</a>
<a href="#13" id="13">The weighted synergy graph model defined above captures the task-based relationships among agents and is used to compute the synergy of agent teams using the distances in the weighted graph and the agent capabilities.</a>
<a href="#14" id="14">We defer how a weighted synergy graph is learned from observations of performance to the next section.</a>
<a href="#15" id="15">In this section, we explain how to use a weighted synergy graph to form the Δ -optimal team for the task, i.e., the team {a mathematical formula}A Δ ⁎ such that {a mathematical formula}P(PA Δ ⁎ ⩾ u)= Δ and {a mathematical formula}P(PA ⩾ u) ⩽ Δ ∀ A ⊆ A.</a>
<a href="#16" id="16">Using the weighted synergy graph model and the synergy equations, we can compute the synergy of a team of agents {a mathematical formula}A ⊆ A.</a>
<a href="#17" id="17">However, the synergy computed is a Normally-distributed variable, and we need to rank such variables to choose one possible team over another.</a>
<a href="#18" id="18">To compute the bounds of a team given a synergy graph, CalculateBounds uses the following heuristic.</a>
<a href="#19" id="19">The minimum and maximum pairwise distance between vertices in the weighted synergy graph (excluding pairs of the selected team {a mathematical formula}Anext) are computed, as well as the maximum and minimum agent capabilities (excluding the agents in {a mathematical formula}Anext).</a>
<a href="#20" id="20">The maximum bound is computed by using the synergy function {a mathematical formula}S and assuming that all distances with undetermined agents are the minimum distance, and agent capabilities are maximum.</a>
<a href="#21" id="21">Similarly, the minimum bound is computed using the maximum distances and minimum agent capabilities.</a>
<a href="#22" id="22">We have formally defined the weighted synergy graph and our team formation algorithm to approximate the Δ -optimal team.</a>
<a href="#23" id="23">However, the team formation algorithm assumes the existence of a weighted synergy graph.</a>
<a href="#24" id="24">In this section, we contribute our learning algorithm that learns a weighted synergy graph using only observations of the performance of teams of agents in {a mathematical formula}A.</a>
<a href="#25" id="25">The algorithm first generates a random weighted graph structure with {a mathematical formula}N=|A| vertices, and the function LearnCapabilities estimates the capabilities of the agents using the weighted graph structure and observation set O.</a>
<a href="#26" id="26">LearnCapabilities uses the generated weighted synergy graph structure and the observation set O to learn the capabilities of the agents.</a>
<a href="#27" id="27">Algorithm 4 shows how the capabilities are learned.</a>
<a href="#28" id="28">On average, the learning algorithm took {a mathematical formula}20.6±0.3 seconds to perform 1000 iterations of simulated annealing to learn the weighted synergy graph with 10 agents, and was consistent across the structure types.</a>
</body>
</html>