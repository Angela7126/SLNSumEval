<html>
<head>
<meta name="TextLength" content="SENT_NUM:24, WORD_NUM:484">
</head>
<body bgcolor="white">
<a href="#0" id="0">Such subformula {a mathematical formula}E will be referred to as a Minimal Equivalent Subformula (MES) of {a mathematical formula}F. Intuitively, an MES of {a mathematical formula}F constitutes the result of removal of all redundant clauses from {a mathematical formula}F — these are the clauses whose removal does not change the set of models of {a mathematical formula}F.</a>
<a href="#1" id="1">A truth assignment Μ is a model of F if it satisfies all clauses in {a mathematical formula}F, i.e.</a>
<a href="#2" id="2">{a mathematical formula}¬F.</a>
<a href="#3" id="3">Otherwise, c is said to be irredundant in {a mathematical formula}F. A formula {a mathematical formula}F is redundant if it has at least one redundant clause; otherwise it is irredundant.</a>
<a href="#4" id="4">Clearly, an MES of any formula {a mathematical formula}F is irredundant.</a>
<a href="#5" id="5">Moreover, deciding whether a CNF formula is an MES is {a mathematical formula}DP-complete [2].</a>
<a href="#6" id="6">For an unsatisfiable formula {a mathematical formula}F an unsatisfiable core is a formula {a mathematical formula}C that is unsatisfiable and such that {a mathematical formula}C ⊆ F.</a>
<a href="#7" id="7">In MUS computation a clause c is necessary for unsatisfiability of {a mathematical formula}F if removing c from {a mathematical formula}F yields satisfiability.</a>
<a href="#8" id="8">When this is detected by a SAT solver, the solver provides us with a model Μ of {a mathematical formula}F ∖ {c}.</a>
<a href="#9" id="9">This section develops several new approaches for computing one MES of a CNF formula {a mathematical formula}F. The first solution consists of adapting any MUS extraction algorithm based on identification of so-called transition clauses, for MES extraction.</a>
<a href="#10" id="10">Let {a mathematical formula}F be a CNF formula partitioned as follows, {a mathematical formula}F=E ∪ R ∪ S.</a>
<a href="#11" id="11">At each step, the algorithm uses an MES under-approximation {a mathematical formula}E, a set of (remaining) clauses {a mathematical formula}S, and a target clause c, to check whether {a mathematical formula}E ∪ S ⊨ c.</a>
<a href="#12" id="12">{a mathematical formula}E ∪ S.</a>
<a href="#13" id="13">{a mathematical formula}E0 ∪ S0.</a>
<a href="#14" id="14">Both algorithms iteratively add clauses to set {a mathematical formula}S while {a mathematical formula}E ∪ S ⊭ W.</a>
<a href="#15" id="15">The last clause included in {a mathematical formula}S such that {a mathematical formula}E ∪ S ⊨ W is the witness of equivalence.</a>
<a href="#16" id="16">{a mathematical formula}E ∪ W.</a>
<a href="#17" id="17">This is done by removing the clause in {a mathematical formula}G11 from the formula.</a>
<a href="#18" id="18">{a mathematical formula}G12.</a>
<a href="#19" id="19">As noted earlier, MES algorithms based on adapting existing MUS algorithms are unable to implement clause set refinement, and so cannot drop {a mathematical formula}k(k − 1)/2 clauses after the second SAT solver call.</a>
<a href="#20" id="20">Then, an MES of {a mathematical formula}F can be computed by applying the group-MUS approach of Proposition 3 to each chunk.</a>
<a href="#21" id="21">{a mathematical formula}F ⊨ l.</a>
<a href="#22" id="22">{a mathematical formula}F ⊨ l.</a>
<a href="#23" id="23">Proposition 5 enables us to remove as redundant all the clauses in {a mathematical formula}S. This is because once any clause {a mathematical formula}c ∈ S is a removed from {a mathematical formula}F, the same proposition applies to the formula {a mathematical formula}F ∖ {c} and the same {a mathematical formula}R.</a>
</body>
</html>