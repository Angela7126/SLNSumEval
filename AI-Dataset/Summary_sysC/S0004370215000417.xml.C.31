<html>
<head>
<meta name="TextLength" content="SENT_NUM:19, WORD_NUM:477">
</head>
<body bgcolor="white">
<a href="#0" id="0">Encoding the constraint that there is only one parent set for each node is straightforward.</a>
<a href="#1" id="1">However, the constraint that there must be no cycles in the network is relatively complex to encode as a linear inequality and can either be enforced through the introduction of auxiliary variables and constraints [4] or through an exponential number of cluster constraints[2].</a>
<a href="#2" id="2">Previous work has revealed that these cluster constraints perform better in practice and so the current paper focuses on this encoding.</a>
<a href="#3" id="3">As there are so many of these cluster constraints, we do not add them all initially, but rather add them to the problem as additional constraints as needed.</a>
<a href="#4" id="4">That is to say, we first solve a relaxed version of the problem in which most of the acyclicity constraints are not present.</a>
<a href="#5" id="5">We then identify some acyclicity constraints violated by this solution and add them to the problem before resolving.</a>
<a href="#6" id="6">This process is called separation, as the added constraints separate the relaxed solution from the space of valid solutions, and the added constraints are known as cuts or cutting planes as they cut off a portion of the search space containing the relaxed solution.</a>
<a href="#7" id="7">This process repeats until the solution found does not violate any additional acyclicity constraints.</a>
<a href="#8" id="8">By so doing, we typically eliminate the need for most constraints which rule out cycles to ever be explicitly represented in the problem and so increase the solving speed of the problem and simultaneously reduce the memory needed.</a>
<a href="#9" id="9">There are well-known cuts that can be added in any domain based on deducing implied constraints from the problem and the current relaxed solution, for example Gomory cuts [18] or Chvátal – Gomory cuts [19].</a>
<a href="#10" id="10">Alternatively (or additionally), one can choose to hold back some necessary known domain-specific constraints from the problem, adding them as cutting planes only if a proposed solution violates them.</a>
<a href="#11" id="11">This paper introduces cutting plane extensions to the method for learning Bayesian networks using Integer Linear Programming presented in Section 2.2.</a>
<a href="#12" id="12">A major issue identified there was of identifying and adding cutting planes in an effective manner.</a>
<a href="#13" id="13">As with many other aspects of ILP solving, SCIP features a number of built-in general purpose cutting plane finding algorithms some of which are examined in Section 5.</a>
<a href="#14" id="14">In addition to these, the cluster constraints for ruling out cycles in the network are added as cutting planes.</a>
<a href="#15" id="15">Second, new classes of constraints are introduced which any valid integer solution must obey.</a>
<a href="#16" id="16">These form the complete set of tightest possible constraints for the problem with 3 or 4 nodes, but as with the original acyclicity constraints, the issue of which to add and when proves critical to their success in assisting with solving larger problems.</a>
<a href="#17" id="17">Finally, the use of close cuts[22], [23] is assessed.</a>
<a href="#18" id="18">These attempt to find cuts that separate more of the search space from the relaxed solution than usual methods.</a>
</body>
</html>