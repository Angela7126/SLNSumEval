<html>
<head>
<meta name="TextLength" content="SENT_NUM:29, WORD_NUM:979">
</head>
<body bgcolor="white">
<a href="#0" id="0">Planning, on the other hand, implements a mapping of its input, a predictive model and a problem, into an output plan expressed in some representation.</a>
<a href="#1" id="1">Because of the limitation of predictive models and complexity constraints, planning has to admit several simplifying assumptions.</a>
<a href="#2" id="2">As a result, a synthesized plan provides a projected course of action in some abstract representation.</a>
<a href="#3" id="3">Planning: combines prediction and search to synthesize a trajectory in some abstract action space based on predictive models of the environment and feasible actions in order to achieve some purpose.</a>
<a href="#4" id="4">We can analyze the deliberation requirements of a robotics application through eight main features: (i) how variable is the environment, (ii) how diverse is the set of tasks, (iii) how rich are the semantics, (iv) how fast are the dynamics of the environments and tasks, (v) how partially observable is the environment (vi) how high is the cost or criticality of the system, (vii) how important are interaction and cooperation with people and/or other robots, and (viii) how autonomous is the robot in carrying out its mission, e.g., choosing and committing to goals.</a>
<a href="#5" id="5">For example, monitoring depends on the environment variability; goal reasoning is desirable for generic missions and high degree of autonomy; safety critical applications demand formal methods and tools for the specification and verification of some of the functions to be implemented.</a>
<a href="#6" id="6">It requires a planner that takes as input these global predictive models together with the specifications of the mission, and provides as output a plan or a policy, mapping perceived states (or beliefs) into lower level commands, possibly with some guarantee of achieving the mission or meeting some optimality criteria.</a>
<a href="#7" id="7">A major design option is how to better decompose the complex deliberation problem between planning and acting, how to balance the process of choosing and undertaking actions between different levels of abstraction and granularity, from the mission level to the sensing and command level.</a>
<a href="#8" id="8">These approaches may use either (i) a uniform knowledge representation for specifying planning and acting problems at different levels of granularity, e.g., formal action languages, or (ii) heterogeneous knowledge representations at various levels, e.g., precondition – effect operators for planning, procedures or rules for acting.</a>
<a href="#9" id="9">They propose an integrated paradigm based on planning – acting components distributed at different levels, using different horizons and time quanta.</a>
<a href="#10" id="10">In addition to the integration of motion and manipulation planning to task planning, robotics stresses particular issues such as handling time and resources, uncertainty, partial knowledge and open domains.</a>
<a href="#11" id="11">However, temporal planners that rely on timelines, i.e., partially specified evolution of state variables over time, are more flexible in the integration of planning and acting and, in most cases, more expressive, e.g., allowing the reference to instants beyond starting and ending time of actions.</a>
<a href="#12" id="12">For very large implicit search spaces with sparse models (few applicable actions per state, few nondeterministic effects per action, including deterministic actions), a significant scaling up with respect to classical dynamic programming methods can be achieved with heuristics and sampling techniques [146].</a>
<a href="#13" id="13">This mixed planning/acting approach is well adapted to dynamic environments where planning for subgoals that depend of yet unknown states can be delayed until the required information is available (through properly planned information gathering actions).</a>
<a href="#14" id="14">To our knowledge, none of these systems exploits the logic representation for performing consistency verification of planning and acting models; their benefit in terms of easier engineering specifications has not been documented.</a>
<a href="#15" id="15">As seen in Section 3.2 temporal planning often produces partially instantiated plans with a least commitment approach allowing acting to adapt to the contingencies of the execution context.</a>
<a href="#16" id="16">This has led to several developments of these approaches for acting.</a>
<a href="#17" id="17">IDEA [155] relies on a distributed approach where planning and acting use the same representation and differ only in their prediction horizon and allocated computing time to find a solution.</a>
<a href="#18" id="18">Another important point is that all CSP approaches rely on common models to produce plans, skills and commands (often the separation between planning and acting is not sharp).</a>
<a href="#19" id="19">Finally, the performance of CSP approaches is not always up to real-time acting requirements, and some rely on another computational framework to implement the lower level components (e.g., [142]).</a>
<a href="#20" id="20">As seen in Section 3.3, a policy Π provides an acting procedure robust to nondeterminism and execution failures.</a>
<a href="#21" id="21">This is probably due to the fact that the MDP-based approaches do not yet address the various types of processing needed for acting (action refinement, instantiation and constraint propagation, time management, etc.</a>
<a href="#22" id="22">However, it is very specific to robots where reliability is a highly critical design issue addressed through a number of redundant components (to the sacrifice of cost) permitting complex diagnosis and allowing sophisticated recovery actions.</a>
<a href="#23" id="23">The anchoring problem provides an excellent illustration of the complexity of integrating pattern recognition methods with deliberate action.</a>
<a href="#24" id="24">As defined in [53], anchoring is the problem of creating and maintaining over time a correspondence between symbols and sensor data that refer to the same physical object.</a>
<a href="#25" id="25">The simpler and more efficient state space task planning approaches are very relevant in many applications; it is unclear whether they can replace temporal planning altogether.</a>
<a href="#26" id="26">This issue of an integrated representation between planning and acting is clearly a weak point in analyzed systems (except for IDEA and T-REX with their state variables hierarchy and the continuum between acting and planning).</a>
<a href="#27" id="27">Such a representation should clarify the various refinement levels (at least two, possibly more) in terms of different state spaces and actions spaces and the relation between these spaces, e.g., the state space at a level i being a refinement of the more abstract level {a mathematical formula}i − 1, with a clear mapping from i to {a mathematical formula}i − 1 spaces.</a>
<a href="#28" id="28">As seen in Section 3, abstraction in planning has been extensively studied, mostly to reduce complexity; it remains to be extended at the architecture level and for different forms of plans and skills.</a>
</body>
</html>