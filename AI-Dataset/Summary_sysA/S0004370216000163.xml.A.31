<html>
<head>
<meta name="TextLength" content="SENT_NUM:9, WORD_NUM:212">
</head>
<body bgcolor="white">
<a href="#0" id="0">TruncationRule 2 Rule 2 is applicable for both underconsistent and overconsistent states.</a>
<a href="#1" id="1">The underlying principle of this rule is very simple.</a>
<a href="#2" id="2">We observe that LPA* expands inconsistent states in an increasing order of their Key values, until the goal state has the lowest Key value in OPEN.</a>
<a href="#3" id="3">Therefore, for any state s selected for expansion, {a mathematical formula}Key1(s)=min(g(s),v(s))+h(s) provides a lower bound on the minimum-cost solution, i.e., {a mathematical formula}Key1(s) ≤ g ⁎ (sgoal).</a>
<a href="#4" id="4">Now, if {a mathematical formula}g Π (sgoal) ≤ Ε ⋅ Key1(s), i.e., the cost of the solution obtained by following the back-pointers from {a mathematical formula}sgoal to {a mathematical formula}sstart is not more than {a mathematical formula} Ε ⋅ Key1(s), we have {a mathematical formula}g Π (sgoal) ≤ Ε ⋅ Key1(s) ⇒ g Π (sgoal) ≤ Ε ⋅ g ⁎ (sgoal).</a>
<a href="#5" id="5">In other words, the current solution is already within the Ε bound of the optimal cost solution.</a>
<a href="#6" id="6">Therefore, we can truncate s without violating the bound.</a>
<a href="#7" id="7">Moreover, as the Key values of expanded states in LPA* are monotonically non-decreasing during the execution of ComputePath, the same condition ensures that expansion of any other state {a mathematical formula}s ′ in OPEN cannot improve the current bound, i.e., we may terminate the current replanning iteration at this point.</a>
<a href="#8" id="8">Proof</a>
</body>
</html>