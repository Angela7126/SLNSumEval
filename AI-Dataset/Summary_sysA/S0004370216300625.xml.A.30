<html>
<head>
<meta name="TextLength" content="SENT_NUM:6, WORD_NUM:201">
</head>
<body bgcolor="white">
<a href="#0" id="0">Overall, parHydra-MP(8) was the only ACPP solver that matched the performance of Default-MP(8)+CS on both domains.</a>
<a href="#1" id="1">We have demonstrated that by exploiting the configuration spaces of a set of complementary solvers, even-better-performing ACPP solvers can be obtained, compared to those constructed from a single parametric SAT solver such as Lingeling (compare Table 2 and Table 6).</a>
<a href="#2" id="2">To produce such an ACPP solver, we did not need to modify our ACPP methods, but instead used conditionals in our configuration space to distinguish between the design spaces of the individual solvers.</a>
<a href="#3" id="3">Although we did not use parallel solvers with clause sharing (such as Plingeling) in our portfolio, our parHydra method was able to generate a parallel solver without clause sharing that nevertheless performed as well as pfolioUZK.</a>
<a href="#4" id="4">The first part of Table 7 summarizes the performance results for these solvers: first the sequential solvers in their default configurations (Default-SP), then the parallel solvers using clause sharing in their default configurations (Default-MP(8)+CS), and finally our ACPP solvers based on the component solvers of pfolioUZK.</a>
<a href="#5" id="5">As already discussed, the performance of the sequential pfolioUZK did not achieve state-of-the-art performance; this distinction goes to glucose for a single solver, and SATzilla for a portfolio-based algorithm selector.</a>
</body>
</html>