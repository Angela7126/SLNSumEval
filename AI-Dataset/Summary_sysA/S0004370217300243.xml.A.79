<html>
<head>
<meta name="TextLength" content="SENT_NUM:3, WORD_NUM:266">
</head>
<body bgcolor="white">
<a href="#0" id="0">The computational complexity of Equation (3) is due to the size of its search space, formed by all the valid paths for S, i.e., all the paths in the graph M that contain the starting points and destinations of the members of S in an order that satisfies Constraints 3 and 4.</a>
<a href="#1" id="1">We define the optimal path {a mathematical formula}LS ⁎ and the optimal departure time {a mathematical formula} Τ S ⁎ as follows:{a mathematical formula} We reduce the search space for {a mathematical formula}LS ⁎ in Equation (14) by applying the same techniques discussed in Section 3.2 (i.e., by considering Assumption 1) and obtaining{a mathematical formula} In Equation (15), the computation of {a mathematical formula} Τ S ⁎ is still carried out in a naïve way, going through every possible timestep in the time windows specified by the drivers in S. In the following section, we explain a better approach to compute {a mathematical formula} Τ S ⁎ .</a>
<a href="#2" id="2">In this section we address the problem of computing the optimal departure time {a mathematical formula} Τ S ⁎ for a given coalition S. Specifically, we now propose an algorithm to compute the best departure time for a car S (given a tuple {a mathematical formula}L ∈ VT(S) and a driver {a mathematical formula}aj ∈ S ∩ D), so to avoid trying every possible departure time for the trip of S. Algorithm 3 achieves this by considering the ideal departure time of the driver, i.e., {a mathematical formula} Τ j Σ , and by applying a sequence of shifts so to obtain the optimal Τ .</a>
</body>
</html>