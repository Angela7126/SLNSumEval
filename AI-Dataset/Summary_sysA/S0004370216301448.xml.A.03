<html>
<head>
<meta name="TextLength" content="SENT_NUM:21, WORD_NUM:268">
</head>
<body bgcolor="white">
<a href="#0" id="0">Nevertheless, as C becomes larger, recomputing {a mathematical formula}uC on every search state may cause substantial runtime overhead.</a>
<a href="#1" id="1">{a mathematical formula}S=2F is the set of all possible states.</a>
<a href="#2" id="2">all those {a mathematical formula}s ∈ S where {a mathematical formula}G ⊆ s.</a>
<a href="#3" id="3">The initial state is {a mathematical formula}I={t(l2),p1(l1),p2(l3),f(5)}.</a>
<a href="#4" id="4">The goal is {a mathematical formula}G={p1(l3),p2(l1)}.</a>
<a href="#5" id="5">The interpretation of {a mathematical formula}u(s)= ∞ will be “ dead-end ” , that of {a mathematical formula}u(s)=0 will be “ don't know ” .</a>
<a href="#6" id="6">That will be recognized by {a mathematical formula}uC of course.</a>
<a href="#7" id="7">Having finished the {a mathematical formula}uC refinement on {a mathematical formula}s3, we call the clause learning on {a mathematical formula}s3.</a>
<a href="#8" id="8">At the end of the refinement on a dead-end state s, we will have {a mathematical formula}hC(s)=uC(s)= ∞ .</a>
<a href="#9" id="9">We initialize {a mathematical formula}x:=c.</a>
<a href="#10" id="10">Neighbors refinement assumes as input a set {a mathematical formula}S ˆ of dead-end states that satisfies the {a mathematical formula}uC-recognized neighbors property.</a>
<a href="#11" id="11">{a mathematical formula}s → t.</a>
<a href="#12" id="12">Say now that s is any state in {a mathematical formula}S ˆ .</a>
<a href="#13" id="13">Now, we already know that the states {a mathematical formula}s ∈ S ˆ are dead-ends.</a>
<a href="#14" id="14">But then, in particular we have that {a mathematical formula}uC(t,x)= ∞ .</a>
<a href="#15" id="15">So we return {a mathematical formula}x={p1(l3)}.</a>
<a href="#16" id="16">Consider any state s where {a mathematical formula}uC(s)= ∞ .</a>
<a href="#17" id="17">We start with {a mathematical formula}s ′ :=s.</a>
<a href="#18" id="18">Consider again our running example, and the clause learning on state {a mathematical formula}s4 from Fig.</a>
<a href="#19" id="19">Then we use the same set C for {a mathematical formula}uC dead-end detection throughout the search.</a>
<a href="#20" id="20">We run search with {a mathematical formula}h1 as a canonical dead-end detector.</a>
</body>
</html>