<html>
<head>
<meta name="TextLength" content="SENT_NUM:10, WORD_NUM:241">
</head>
<body bgcolor="white">
<a href="#0" id="0">The results in this section suggest that Baldwin's rule is arguably harder to manipulate because Nanson's rule is polynomial to manipulate with three candidates, and requires at least four candidates to be NP-hard, but Baldwin's is NP-hard already with three candidates.</a>
<a href="#1" id="1">It follows that computing a manipulation is NP-hard for both rules when votes are unweighted, the number of candidates is small, and there is uncertainty about how agents have voted in the form of a probability distribution [12].</a>
<a href="#2" id="2">Note that the coalitional manipulation problem for Borda with weighted votes is NP-hard for three or more candidates [12].</a>
<a href="#3" id="3">Thus, somewhat surprisingly, adding an elimination round to Borda, which gives us Nanson's rule, decreases the computational complexity of computing a manipulation with three manipulators from NP-hard to polynomial-time.</a>
<a href="#4" id="4">Proof</a>
<a href="#5" id="5">This manipulation provides an upper bound on the size of an optimal manipulation for Nanson's rule.Reverse will construct the vote {a mathematical formula}p ≻ c ≻ a ≻ b.</a>
<a href="#6" id="6">After 5n such manipulating votes, the scores of a and b will become level.</a>
<a href="#7" id="7">Reverse will then alternate between {a mathematical formula}p ≻ c ≻ b ≻ a and {a mathematical formula}p ≻ c ≻ a ≻ b.</a>
<a href="#8" id="8">In total, Reverse will construct 25n such manipulating votes, 15n for {a mathematical formula}p ≻ c ≻ a ≻ b and 10n for {a mathematical formula}p ≻ c ≻ b ≻ a.</a>
<a href="#9" id="9">At this point, p wins under Nanson's rule as demonstrated in the following table.</a>
</body>
</html>