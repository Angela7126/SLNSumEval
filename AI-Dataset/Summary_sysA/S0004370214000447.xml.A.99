<html>
<head>
<meta name="TextLength" content="SENT_NUM:6, WORD_NUM:200">
</head>
<body bgcolor="white">
<a href="#0" id="0">To generate a method {a mathematical formula}mk for a method structure in STR, we set {a mathematical formula}mk's parameters to be all the different parameters of the tasks in the method structure.</a>
<a href="#1" id="1">We also need to build constraints for generating {a mathematical formula}mk's preconditions.</a>
<a href="#2" id="2">We exploit a straightforward way to generate the preconditions by assuming that, if a predicate {a mathematical formula}p ∈ P frequently appears in the state where the method {a mathematical formula}mk is executed and its parameters are included in {a mathematical formula}mk, then p is one of {a mathematical formula}mk's preconditions.</a>
<a href="#3" id="3">We denote the method structure's corresponding primitive hierarchy by {a mathematical formula} 〈 t,a[i, … ,j] 〉 .</a>
<a href="#4" id="4">In this setting, our learning problem is reduced to learning action models and method preconditions simultaneously, with no need to learn method structures (since method structures can be directly extracted from decomposition trees), as is done by our previous work [70].</a>
<a href="#5" id="5">To the best of our knowledge, HTNLearn is the first algorithm capable of learning all parts of an HTN model, namely, (1) the collection of methods, each indicating the task, subtasks, and preconditions and (2) the collection of action models, each indicating the preconditions and effects.</a>
</body>
</html>