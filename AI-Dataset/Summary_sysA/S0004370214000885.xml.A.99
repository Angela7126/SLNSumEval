<html>
<head>
<meta name="TextLength" content="SENT_NUM:5, WORD_NUM:238">
</head>
<body bgcolor="white">
<a href="#0" id="0">Given such an instance of Permutation Sum, we create a manipulation problem with {a mathematical formula}m=q+3 candidates {a mathematical formula}p,a1 … ,aq+2 where the preferred candidate of the two manipulators is p. By Lemma 1, we can construct an election in which the non-manipulators cast votes to give the score vector for {a mathematical formula} 〈 p,a1, … aq+2 〉 of:{a mathematical formula} for some {a mathematical formula}C ≥ 0 and {a mathematical formula}y ≤ C.</a>
<a href="#1" id="1">However, in a successful manipulation in the proof of Theorem 4, the manipulators are split between {a mathematical formula}p ≻ a ≻ b and {a mathematical formula}a ≻ p ≻ b, and switching the votes of the latter group into {a mathematical formula}p ≻ a ≻ b spoils the manipulation.</a>
<a href="#2" id="2">The results in this section suggest that Baldwin's rule is arguably harder to manipulate because Nanson's rule is polynomial to manipulate with three candidates, and requires at least four candidates to be NP-hard, but Baldwin's is NP-hard already with three candidates.</a>
<a href="#3" id="3">More precisely, it first assigns n instances of {a mathematical formula}m − 1 to column p of the matrix (since it is best for the manipulators to put p in first place in their votes).</a>
<a href="#4" id="4">It then allocates the remaining {a mathematical formula}(n − 1)m numbers in reverse order to the columns corresponding to the candidate with the currently smallest score who has not yet received n votes from the manipulators.</a>
</body>
</html>