<html>
<head>
<meta name="TextLength" content="SENT_NUM:4, WORD_NUM:202">
</head>
<body bgcolor="white">
<a href="#0" id="0">HTN-Learner can learn method preconditions and action models simultaneously, but requires that method structures be given as input; while HTNLearn, which extends from HTN-Learner, can learn method structures, method preconditions, and action models simultaneously from partially observed plan traces which are annotated with partial decomposition trees.</a>
<a href="#1" id="1">[27] presented an algorithm, called HTN-MAKER, to learn structures by assuming that annotated tasks are given in the form of preconditions and effects (we made the same assumption in our work).</a>
<a href="#2" id="2">A Hierarchical Task Network (HTN) planning problem can be defined as a quadruple {a mathematical formula}(s0,T,M,A), where {a mathematical formula}s0 is an initial state, which is a conjunction of propositions, T is a list of tasks that need to be accomplished, M is a set of HTN methods, which specify how a high-level task can be decomposed into a totally ordered set of lower-level subtasks, and A is a set of actions, which correspond to primitive subtasks that can be directly executed [67], [20].</a>
<a href="#3" id="3">We do this by simply scanning each partial decomposition tree in {a mathematical formula} Î  part and each annotated task in {a mathematical formula}T and exploiting their relations between states and task preconditions and task effects to build {a mathematical formula}Hcand.</a>
</body>
</html>