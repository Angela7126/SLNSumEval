<html>
<head>
<meta name="TextLength" content="SENT_NUM:12, WORD_NUM:315">
</head>
<body bgcolor="white">
<a href="#0" id="0">In this paper, we propose a number of new ideas for local search for PMS, which mainly rely on the distinction between hard and soft clauses.</a>
<a href="#1" id="1">Based on these ideas, we develop two local search algorithms for PMS called Dist and DistUP, the latter of which is an improved version of the former for industrial PMS instances.</a>
<a href="#2" id="2">The three ideas mentioned above are used in developing a local search algorithm for PMS dubbed Dist, as it makes effective use of Distinctions between hard and soft clauses.</a>
<a href="#3" id="3">Results of the MaxSAT Evaluation 2014 as well as our experiments show that Dist significantly outperforms previous local search solvers on all benchmarks from the MaxSAT Evaluation 2014, with a remarkable improvement in terms of the number of “ winning ” instances on structured PMS benchmarks.</a>
<a href="#4" id="4">We also compare Dist with latest state-of-the-art complete solvers and a state-of-the-art portfolio solver on PMS benchmarks from the MaxSAT Evaluation 2014.</a>
<a href="#5" id="5">Experimental results show that Dist outperforms the complete solvers on random and crafted benchmarks, while its performance on industrial instances is still considerably worse than complete solvers.</a>
<a href="#6" id="6">In this work, we proposed a number of novel ideas for local search for Partial MaxSAT, which exploit the distinction between hard and soft clauses.</a>
<a href="#7" id="7">Specifically, we proposed a clause weighting scheme that works only for hard clauses, the idea of separating hard and soft score, and a variable selection heuristic based on hard score and soft score.</a>
<a href="#8" id="8">We then used these ideas to develop a local search algorithm for PMS called Dist.</a>
<a href="#9" id="9">Experimental results show that Dist dramatically outperforms previous local search algorithms.</a>
<a href="#10" id="10">Also, Dist outperforms complete algorithms on random and crafted benchmarks, but is still worse on industrial instances.</a>
<a href="#11" id="11">Further, we proposed an initialization procedure that makes use of unit propagation and puts priority on hard unit clauses, and applied it to improve Dist on industrial instances, resulting in the DistUP solver.</a>
</body>
</html>