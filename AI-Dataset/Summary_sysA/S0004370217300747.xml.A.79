<html>
<head>
<meta name="TextLength" content="SENT_NUM:5, WORD_NUM:177">
</head>
<body bgcolor="white">
<a href="#0" id="0">CP provides a richer language of discrete variables with domains either given in extension or expressed in terms of upper and lower bounds, arithmetic and logical operators over these variables, and a library of ‘ global ’ constraints that capture common reasoning patterns.</a>
<a href="#1" id="1">These languages provide facilities to model parameterised classes of problems (where an individual problem instance is specified by giving values for the class parameters), such as arrays and iteration or comprehension, and to abstract away from the specific details of the many available individual constraint solvers.</a>
<a href="#2" id="2">The fourth step is to extract common subsets of terms between row constraints and (simplified) scalar product constraints.</a>
<a href="#3" id="3">For example, given the product {a mathematical formula}X×(Y+Z) and a target solver that does not allow sums inside products, the flattening process will add a new variable aux, replace the product with the new expression {a mathematical formula}X×aux and add a new constraint {a mathematical formula}aux=Y+Z.</a>
<a href="#4" id="4">For the following we assume that an AC expression is represented by a set data structure with {a mathematical formula}O(1) lookup, insertion and removal.</a>
</body>
</html>