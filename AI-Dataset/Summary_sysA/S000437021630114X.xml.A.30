<html>
<head>
<meta name="TextLength" content="SENT_NUM:11, WORD_NUM:223">
</head>
<body bgcolor="white">
<a href="#0" id="0">In symbolic search the operators are not applied over a single state but rather over sets of states.</a>
<a href="#1" id="1">Nevertheless, operators only need to be applied over states that satisfy the corresponding conditions.</a>
<a href="#2" id="2">We take advantage of this by precomputing the subset of states relevant to a given TR prior to the image operation.</a>
<a href="#3" id="3">This is done by splitting the original set of states into subsets as the successor tree is traversed.</a>
<a href="#4" id="4">This way, the subset on which a TR, {a mathematical formula}To is applied once a leaf node is reached is the subset of states that satisfy {a mathematical formula}pre(o).</a>
<a href="#5" id="5">Therefore, unlike the case of search in the original state space, {a mathematical formula}MBDD does not perform all the pruning possible.</a>
<a href="#6" id="6">Originally, Gamer used unidirectional uniform-cost search and {a mathematical formula}BDDA ⁎ with symbolic Pattern Databases.</a>
<a href="#7" id="7">On top of that, we implemented the symbolic bidirectional uniform-cost search as described in Section 3.2.</a>
<a href="#8" id="8">We also implemented the image computation refinements and state-invariant pruning techniques.</a>
<a href="#9" id="9">Further experiments on {a mathematical formula}SymBA ⁎ have shown that, while abstraction heuristics may improve the performance of bidirectional search on particular domains, symbolic bidirectional uniform-cost search is yet a state-of-the-art planner [66].</a>
<a href="#10" id="10">{a mathematical formula}CT: Apply the preconditions of operators at the same time using the conjunction tree, an approach similar to the one used in explicit-state search planning.</a>
</body>
</html>