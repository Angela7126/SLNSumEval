<html>
<head>
<meta name="TextLength" content="SENT_NUM:7, WORD_NUM:255">
</head>
<body bgcolor="white">
<a href="#0" id="0">The solution methods for achieving the abovementioned nine operations must address some domain-specific issues that make development of planners/controllers for modular robots very challenging.</a>
<a href="#1" id="1">For example, planning for self-reconfiguration of a modular robot is proved to be NP-complete as it has been reduced to known NP-complete problems like PSAT [65] or 3-PARTITION [78].</a>
<a href="#2" id="2">Thus, employment of search-based methods, which are conventional in Artificial Intelligence, is not straightforward in modular robotics as they need to explicitly represent the state-space and then search it for a solution.</a>
<a href="#3" id="3">In fact, search-based methods usually suffer from intractable configuration-space sizes due to exponential growth of the branching factor in the graph representation of the state-space with the increase of the number of modules.</a>
<a href="#4" id="4">Moreover, the tightly coupled kinematics of the connected modules within a configuration not only limits the number of possible actions of each module, but also urges development of such controllers that avoid taking actions that may lead to undesirable conditions in the structure of modular robot.</a>
<a href="#5" id="5">Examples of undesirable states are fragmentation of modular robots into multiple parts, overcrowding the structure of modular robot by several modules which intend to enter the same lattice position [196], hollow configurations in which modules are trapped in a hole or tunnel within the body, and solid configuration in which outer modules cannot find a path toward interior of the robot's body [158].</a>
<a href="#6" id="6">Such problems can be alleviated to some extent through using control-based and agent-based approaches that plan for reconfiguration in distributed manner based on local information available in modules.</a>
</body>
</html>