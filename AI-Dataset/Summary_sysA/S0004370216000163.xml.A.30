<html>
<head>
<meta name="TextLength" content="SENT_NUM:9, WORD_NUM:246">
</head>
<body bgcolor="white">
<a href="#0" id="0">ComputePath in TLPA* uses the {a mathematical formula}g Π values to apply the truncation rules.</a>
<a href="#1" id="1">Before each expansion, {a mathematical formula}g Π (sgoal) is computed to check whether Rule 2 can be applied.</a>
<a href="#2" id="2">If the check at line 21 (Algorithm 3) is satisfied, ComputePath terminates with solution cost equal to {a mathematical formula}g Π (sgoal).</a>
<a href="#3" id="3">When an underconsistent state s is selected for expansion, its {a mathematical formula}g Π (s) is used to check whether Rule 1 can be applied.</a>
<a href="#4" id="4">If the check at line 30 is satisfied, s is truncated, otherwise it expanded in the same manner as LPA*.</a>
<a href="#5" id="5">Unfortunately, this only works for the truncation of overconsistent states, and not for underconsistent states.</a>
<a href="#6" id="6">This is due to the fact that in AD*, heuristic values for overconsistent states are inflated, whereas an underconsistent state uses an uninflated heuristic.</a>
<a href="#7" id="7">Therefore, when an overconsistent {a mathematical formula}s1 is selected for expansion (in AD*), we have {a mathematical formula}g(s1) ≤ Ε 1 ⋅ g ⁎ (s1), but when an underconsistent state ({a mathematical formula}s2) is selected for expansion, there is no guarantee that {a mathematical formula}v(s2) ≤ Ε 1 ⋅ g ⁎ (s2).</a>
<a href="#8" id="8">Now, if we apply the truncation rule (say Truncation Rule 1) to a state s having {a mathematical formula}v(s) ≥ Ε 1 ⋅ g ⁎ (s), the total path cost {a mathematical formula}C ≤ Ε 2 ⋅ (v(s)+h(s)) does not ensure that {a mathematical formula}C ≤ Ε 1 ⋅ Ε 2 ⋅ (g ⁎ (s)+h(s)).</a>
</body>
</html>