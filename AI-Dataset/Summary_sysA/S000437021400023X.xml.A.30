<html>
<head>
<meta name="TextLength" content="SENT_NUM:12, WORD_NUM:253">
</head>
<body bgcolor="white">
<a href="#0" id="0">The algorithms we give herein generate GAC propagators for arbitrary constraints that run in time {a mathematical formula}O(nd) (where n is the number of variables and d is the maximum domain size), in extreme cases an exponential factor faster than any table constraint propagator [3], [7], [9], [5], [6], [10], [11], [12], [13].</a>
<a href="#1" id="1">Suppose we have the constraint {a mathematical formula}x ∨ y with initial domains of {a mathematical formula}{0,1}.</a>
<a href="#2" id="2">An example propagator tree for this constraint is shown in Fig.</a>
<a href="#3" id="3">The dominating cost of GenTree for each node is calling the constraint propagator on line 3.</a>
<a href="#4" id="4">We use GAC2001, and its time complexity is {a mathematical formula}O(n2dn)[3].</a>
<a href="#5" id="5">The propagator trees created by the algorithm GenTree (Algorithm 3) can be executed in {a mathematical formula}O(nd) time, where n is the arity of the constraint, and d is the domain size.</a>
<a href="#6" id="6">However they have the disadvantage that they can have {a mathematical formula}O(2nd) nodes.</a>
<a href="#7" id="7">In this section we show how to generate symmetry-reduced trees, and that they can be much more compact than standard propagator trees.</a>
<a href="#8" id="8">To apply a symmetry {a mathematical formula}g ∈ G to a propagator tree we define an image function in Definition 12.</a>
<a href="#9" id="9">While we have shown that using symmetry-reduced trees can, in highly symmetric constraints, produce a polynomial bound in tree size, these polynomials can be extremely large.</a>
<a href="#10" id="10">For example, for a constraint with total variable symmetry and variables of domain size 3 the upper bound is {a mathematical formula}O(n23).</a>
<a href="#11" id="11">In this section we will substantially tighten this bound.</a>
</body>
</html>