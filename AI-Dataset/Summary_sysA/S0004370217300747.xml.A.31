<html>
<head>
<meta name="TextLength" content="SENT_NUM:16, WORD_NUM:204">
</head>
<body bgcolor="white">
<a href="#0" id="0">Each decision variable has a set of possible values that it may take, called its domain.</a>
<a href="#1" id="1">The first reformulation step is to filter the domains of the decision variables, as described in Section 5.4.</a>
<a href="#2" id="2">Domain filtering removes values from the variable domains that cannot take part in any solution.</a>
<a href="#3" id="3">Consider the problem instance where {a mathematical formula}v=8,k=4, Î› =6.</a>
<a href="#4" id="4">Domain filtering assigns 70 of the original 224 decision variables in the matrix m, as shown in Fig.</a>
<a href="#5" id="5">1.</a>
<a href="#6" id="6">The second step is variable unification, as described in Section 5.4.</a>
<a href="#7" id="7">Variable unification removes decision variables in a number of cases.</a>
<a href="#8" id="8">In this case each of the deleted variables is equal to a constant.</a>
<a href="#9" id="9">For example, {a mathematical formula}m[1,1] is replaced by 0 throughout.</a>
<a href="#10" id="10">After variable unification many of the constraints contain constants.</a>
<a href="#11" id="11">Each expression type in Savile Row has a simplifier (described in Section 3.3).</a>
<a href="#12" id="12">Simplifiers will at least evaluate constant expressions, but can in some cases do significantly more than that.</a>
<a href="#13" id="13">In this case, a sum expression (representing a scalar product constraint between the first and fifth rows) may be simplified.</a>
<a href="#14" id="14">{a mathematical formula}</a>
<a href="#15" id="15">AC-CSE alone does nothing because the sums in the clues are the only AC expressions and they do not overlap.</a>
</body>
</html>