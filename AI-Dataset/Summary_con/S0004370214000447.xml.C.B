<html>
<head>
<meta name="TextLength" content="SENT_NUM:24, WORD_NUM:590">
</head>
<body bgcolor="white">
<a href="#0" id="0">In this paper, we presented a novel algorithm, HTNLearn, to learn the action models and method preconditions of an HTN model.</a>
<a href="#1" id="1">Given a set of plan traces annotated with partial state information and possibly annotated with partial decomposition trees, HTNLearn builds a set of state, decomposition, and action weighted constraints, and solves them with a MAX-SAT solver.</a>
<a href="#2" id="2">The solution obtained is the HTN model that best explains the observed input information.</a>
<a href="#3" id="3">To the best of our knowledge, HTNLearn is the first algorithm capable of learning all parts of an HTN model, namely, (1) the collection of methods, each indicating the task, subtasks, and preconditions and (2) the collection of action models, each indicating the preconditions and effects.</a>
<a href="#4" id="4">From the experimental results, we conclude that our HTNLearn algorithm can learn initial HTN models that are fairly accurate and that this accuracy increases with the number of plan traces given.</a>
<a href="#5" id="5">These initial models can be given to humans which need to perform some, comparatively, minor editing effort to attain a complete HTN domain.</a>
<a href="#6" id="6">There are a number of potential future directions that can be pursued.</a>
<a href="#7" id="7">First, we note from the experimental results, that when given complete decomposition trees, HTNLearn is able to learn a completely accurate model of the HTN structure.</a>
<a href="#8" id="8">However, this is not the case for the applicability conditions; even when completely observable states and complete decomposition trees are provided, HTNLearn is unable to learn completely accurate applicability conditions.</a>
<a href="#9" id="9">This is a consequence of two factors: (1) the constraints represent likely explanations for situations observed in the traces.</a>
<a href="#10" id="10">(2) The MAX-SAT solver we use will yield a solution that covers most of the constraints but will not guarantee that it will solve all of them.</a>
<a href="#11" id="11">These two factors are what enables HTNLearn to elicit highly accurate HTN models under partial state observability.</a>
<a href="#12" id="12">Other HTN learning algorithms such as HTN-MAKER guarantee that correct conditions are learned but assume complete state observability.</a>
<a href="#13" id="13">An interesting research direction is to automatically identify when complete traces are given or when the HTN model is converging towards a complete domain, in which case a different learning mechanism can be triggered.</a>
<a href="#14" id="14">Another interesting direction is to make HTNLearn incremental; HTNLearn elicits the model from a set of traces.</a>
<a href="#15" id="15">If new traces are provided, HTNLearn will need to be ran again with the old and new traces.</a>
<a href="#16" id="16">It will be interesting to refine the HTN model elicited so far rather than constructing a new one from scratch.</a>
<a href="#17" id="17">It could also be interesting to explore more constraints to improve the learning quality, e.g., exploring constraints on the likelihood of a predicate in a state being a precondition of all subsequent actions after that state.</a>
<a href="#18" id="18">Furthermore, it is also interesting to study the feasibility of refining automatically the initial HTN model produced by HTNLearn, by executing plans generated by our initial model in a simulator and refine the model based on the feedback we observe from the simulation.</a>
<a href="#19" id="19">Perhaps the most important and more difficult future research direction is the learning of HTN models that can reason with more complex representations.</a>
<a href="#20" id="20">This is an important requirement for real-world applicability of this line of research.</a>
<a href="#21" id="21">One possibility will be learning HTN models that reason with numerical information.</a>
<a href="#22" id="22">For example, in the web service composition accessing some information sources might have associated costs and plans are to be built under budgetary constraints.</a>
<a href="#23" id="23">Another possibility is learning complex applicability conditions such as atoms inferred from Horn clauses, which is a staple capability in SHOP and SHOP2 that enables to manually create complex domains.</a>
</body>
</html>