<html>
<head>
<meta name="TextLength" content="SENT_NUM:86, WORD_NUM:1814">
</head>
<body bgcolor="white">
<a href="#0" id="0">Finally we discuss some observations from our use of the program.</a>
<a href="#1" id="1">1.Successful conjecture-making programs do not require domain-specific heuristics.</a>
<a href="#2" id="2">The description of the Dalmatian heuristic does not refer to any particular branch of mathematics, or even to mathematical object-types.</a>
<a href="#3" id="3">We have demonstrated its general utility in graph theory, number theory and matrix theory, and in characterizing game positions.</a>
<a href="#4" id="4">Graffiti's post-Dalmatian conjectures in geometry, chemistry, and graph theory provided evidence of domain-independence; we have provided further evidence.</a>
<a href="#5" id="5">It has been claimed that different domains require different heuristics.</a>
<a href="#6" id="6">The authors specifically generated conjectures for mathematical areas in which we had no expert knowledge.</a>
<a href="#7" id="7">We paged through relevant books looking for invariants and to try to determine invariants for which experts would be interested in conjectured bounds.</a>
<a href="#8" id="8">Knowledge of existing theorems can improve the conjectures produced by a conjecture-making program.</a>
<a href="#9" id="9">This is knowledge that experts would have—but not “expert knowledge”—anyone can page through the relevant texts and papers to find these theorems.</a>
<a href="#10" id="10">Knowledge of all examples of objects that have appeared in the literature of a domain would also improve the conjectures.</a>
<a href="#11" id="11">For the program described here, it would guarantee the truth of any produced conjecture with respect to at least these objects.</a>
<a href="#12" id="12">It would also be useful to have an “intelligent” counterexample-finder.</a>
<a href="#13" id="13">We do not know of one—or whether these would require domain-specific heuristics.</a>
<a href="#14" id="14">The object generators used in our research all have the same underlying idea.</a>
<a href="#15" id="15">These are finite structures and they can be systematically generated for all objects of a desired “size”.</a>
<a href="#16" id="16">No expert knowledge is required here.</a>
<a href="#17" id="17">Generators like geng, the one used here for generating graphs, are simply more efficient than ones non-experts can write.</a>
<a href="#18" id="18">A graph of order n, for instance, is simply a symmetric 0-1 matrix.</a>
<a href="#19" id="19">A non-expert can easily write a program that generates all symmetric 0-1 matrices up to any order.</a>
<a href="#20" id="20">There is some sense in which domain-specific knowledge can be of use in improving conjecture-making programs: experts do not need to consult the literature to find invariants and examples, and they can write more efficient object-generators.</a>
<a href="#21" id="21">Nevertheless we know of no example of a successful conjecture-making program that uses domain-specific heuristics.</a>
<a href="#22" id="22">And we only claim here that domain-specific heuristics are not necessary.</a>
<a href="#23" id="23">2.Success of conjecturing programs is by design.</a>
<a href="#24" id="24">Scientific discovery, in general, is the result of effort directed at specific questions of interest; we are not aware of any case of discovery which cannot to traced back to work on specific problems.</a>
<a href="#25" id="25">Even the famous example of Fleming's discovery of penicillin is no counterexample: Fleming had been investigating anti-bacterial agents.</a>
<a href="#26" id="26">The success of mathematical discovery programs that have contributed to mathematical discovery can largely be explained by the fact that they were designed to advance specific mathematical problems.</a>
<a href="#27" id="27">Fajtlowicz's Graffiti, DeLaVina's Graffiti.pc and the program Conjecturing discussed here contribute to advancing research on existing mathematical problems insofar as they produce bounds for mathematical invariants where bounds are of existing interest.</a>
<a href="#28" id="28">Borwein and Bailey's programs contribute to advancing existing mathematical problems insofar as they produce closed form expressions for hypergeometric series.</a>
<a href="#29" id="29">AGX contributes to advancing existing mathematical problems insofar as it finds characterizations of families of extremal graphs, McCune's theorem prover contributes to advancing research on existing mathematical problems insofar as it proved open conjectures.</a>
<a href="#30" id="30">Part of the reason that these programs contribute to scientific discovery is that they were designed to contribute to scientific discovery, designed to do things of existing interest to mathematicians.</a>
<a href="#31" id="31">Many mathematical discovery programs that were less successful than these were not designed to address specific problems of interest.</a>
<a href="#32" id="32">Development of a program that contributes to scientific discoveries requires knowing what counts as a contribution to scientific discovery; a successful discovery program must make such a contribution.</a>
<a href="#33" id="33">Scientists and mathematicians must address this issue in their own work: to make a scientific discovery you must first know what the open questions are and which ones are the most central.</a>
<a href="#34" id="34">And not all scientific and mathematical research is of equal value.</a>
<a href="#35" id="35">Discovery of an efficient algorithm for computing the independence number of a graph, for instance, would have explosive theoretical and practical consequences (as it would yield an efficient algorithm for every other NP-hard invariant).</a>
<a href="#36" id="36">The discovery of an odd perfect number—whose existence has been an open question since at least the time of Euclid—would have far fewer mathematical consequences, and maybe no practical consequences.</a>
<a href="#37" id="37">The only way to determine the value of mathematical research is to engage the community of mathematical researchers and users of mathematics about how the research is connected to existing mathematical questions and what potential consequences of the research are; there is no external criteria for judging the value of mathematical research.</a>
<a href="#38" id="38">Many mathematical papers explicitly address an existing mathematical problem—they intend to make a contribution either by answering an outstanding question, by helping to better understand the problem or its difficulties, or by developing tools that might be used in attacking the problem.</a>
<a href="#39" id="39">In contrast, many mathematical papers do not explicitly or implicitly address any existing mathematical problem; the contribution, if any, to scientific discovery is considerably more tenuous.</a>
<a href="#40" id="40">Some address a curious observation—perhaps that all small integers can be written as a sum of two primes—and attempt to explain that observation.</a>
<a href="#41" id="41">Some results in the mathematical literature are recorded in textbooks, passed down, reproved, extended, and generalized; others are never used—and forgotten.</a>
<a href="#42" id="42">The utility of mathematics in the natural sciences and computer science is its raison d'etre, and primary source of value to society.</a>
<a href="#43" id="43">Of course, mathematicians like Hardy have famously proclaimed their own desire to pursue mathematical truths that are completely without practical utility [80].</a>
<a href="#44" id="44">He specifically mentions that he did not want his research to be of any use in weapons design; it is worth noting that Hardy did not claim that he hoped his research was without mathematical utility—of course he was interested in advancing existing mathematical problems.</a>
<a href="#45" id="45">The two examples he gives of “serious” but “useless” mathematics are the theorems that there are infinitely many prime numbers, and that the square root of two is irrational.</a>
<a href="#46" id="46">But this mathematics addressed existing mathematical questions and was, thus, of (mathematical) utility: mathematicians were already interested in prime numbers, and they had speculated that all lengths are commensurable (the proof that {a mathematical formula}2 is irrational shows that they are not).</a>
<a href="#47" id="47">A researcher may attempt to design a conjecture-making program to produce statements that are “interesting” or “surprising” [81]—but if the produced statements do not advance any existing problem then they cannot be expected to make a scientific contribution regardless of how interesting or surprising they are.</a>
<a href="#48" id="48">Colton, for instance, set his program HR to find relations between the integer invariants sigma (the sum of the divisors), tau (the number of divisors), and the integer property isprime.</a>
<a href="#49" id="49">Among the conjectures his program produced was:</a>
<a href="#50" id="50">for all a (isprime (sigma(a)) ⇒ isprime(tau(a)))</a>
<a href="#51" id="51">Unless there is existing interest in necessary conditions for the primality of the sum of the divisors of an integer, or sufficient conditions for the primality of the number of divisors of an integer, this statement will not advance existing mathematical research.</a>
<a href="#52" id="52">Some limitations on the statements produced by a conjecture-making program may be required in order for the produced statements to be of use to researchers—they may, for instance, need to be relatively simple in form.</a>
<a href="#53" id="53">Human researchers often do not have any feeling for the meaning, much less the truth, of very complicated statements.</a>
<a href="#54" id="54">What Hardy calls the “depth” of a statement could partly be measured by its (syntactic) complexity.</a>
<a href="#55" id="55">It is often beyond human mathematicians abilities to wrestle with complex statements involving multiple invariants.</a>
<a href="#56" id="56">Computers may be able to investigate deeper statements than humans are able to.</a>
<a href="#57" id="57">As automated theorem-proving programs improve, complicated conjectures would be of use—they could be proved, and applied, by machines; complexity aside, true statements can be used in making predictions and guiding behavior.</a>
<a href="#58" id="58">3.Intelligent conjecture-making programs do not require sophisticated data-mining techniques.</a>
<a href="#59" id="59">An interesting feature of programs implementing the Dalmatian heuristic is that they can make conjectures based on only a few examples.</a>
<a href="#60" id="60">In this way they are similar to human conjecture-makers.</a>
<a href="#61" id="61">If added examples are counterexamples to previously made conjectures, then each of the examples is “significant” to the program: no useless examples are stored or required.</a>
<a href="#62" id="62">Again this is similar to what humans do.</a>
<a href="#63" id="63">We don't remember every example—only significant ones.</a>
<a href="#64" id="64">4.Developers of programs that contribute to scientific discovery should not try to simulate human scientific discovery.</a>
<a href="#65" id="65">If you could design a program that does whatever it is that humans do when they make scientific discoveries then, of course, you have solved the problem of automating scientific discovery.</a>
<a href="#66" id="66">But a program may be counted as intelligent while doing things in distinctly non-human ways.</a>
<a href="#67" id="67">The chess computer Deep Blue can certainly be said to play intelligent chess.</a>
<a href="#68" id="68">Since the success of the program is, at least in part, due to its ability to evaluate hundreds of millions of positions per second—far beyond human capabilities—Deep Blue is not said to simulate human chess playing.</a>
<a href="#69" id="69">Some researchers have aimed to simulate human scientific discovery [82].</a>
<a href="#70" id="70">Others have aimed to produce programs that contributed to new scientific discoveries.</a>
<a href="#71" id="71">Some hoped to do both.</a>
<a href="#72" id="72">These differences and tensions date to the earliest days of this research.</a>
<a href="#73" id="73">Wang's criticism of Simon and Newell's Logic Theorist was that their program wasn't actually very good at proving theorems.</a>
<a href="#74" id="74">Wang produced a program that did a much better job at proving the same body of test theorems [6].</a>
<a href="#75" id="75">Simon and Newell's response was that their goal was not to develop a program whose primary aim was to prove theorems but, rather, to develop a program that proves theorems in the way that humans do, to “simulate” human theorem-proving abilities.</a>
<a href="#76" id="76">Wang made no claim that his program simulated human theorem proving.</a>
<a href="#77" id="77">Lenat's work on AM is often cited as a contribution to research on the automation of mathematical discovery [81].</a>
<a href="#78" id="78">But AM was not designed to make mathematical discoveries: that is, it was not designed to produce statements that addressed any existing mathematical problems.</a>
<a href="#79" id="79">And it did not make any mathematical discoveries.</a>
<a href="#80" id="80">It was designed to do something else entirely—to simulate human mathematical discovery—and should be evaluated by the standards of simulation research.</a>
<a href="#81" id="81">Research on automated scientific discovery must look to, and build on, the successful ideas in discovery research.</a>
<a href="#82" id="82">Confusion on the issue of simulation versus discovery dates to the earliest days of this research.</a>
<a href="#83" id="83">Wang reports that he read Lenat's dissertation (about the development of his AM program), and writes that he “could not see how one might further build on such a baffling foundation” [83].</a>
<a href="#84" id="84">What Wang failed to understand is that Lenat's program was a contribution to simulation research and not designed to contribute to mathematical research.</a>
<a href="#85" id="85">And the confusion continues to the present day—which, if not corrected, can hinder research on programs meant to make contributions to mathematical discovery.</a>
</body>
</html>