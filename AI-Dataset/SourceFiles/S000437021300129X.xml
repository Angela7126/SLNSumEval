<?xml version="1.0" encoding="UTF-8"?><root><url>https://www.sciencedirect.com/science/article/pii//S000437021300129X</url><title>Hidden protocols: Modifying our expectations in an evolving world</title><authors>Hans van Ditmarsch,Sujata Ghosh,Rineke Verbrugge,Yanjing Wang</authors><abstract>When agents know a protocol, this leads them to have expectations about future observations. Agents can update their knowledge by matching their actual observations with the expected ones. They eliminate states where they do not match. In this paper, we study how agents perceive protocols that are not commonly known, and propose a semantics-driven logical framework to reason about knowledge in such scenarios. In particular, we introduce the notion of epistemic expectation models and a propositional dynamic logic-style epistemic logic for reasoning about knowledge via matching agentsʼ expectations to their observations. It is shown how epistemic expectation models can be obtained from epistemic protocols. Furthermore, a characterization is presented of the effective equivalence of epistemic protocols. We introduce a new logic that incorporates updates of protocols and that can model reasoning about knowledge and observations. Finally, the framework is extended to incorporate fact-changing actions, and a worked-out example is given.</abstract><keywords>Protocols;Dynamic epistemic logic;Guarded automata</keywords><content><section label="1"><section-title>Introduction</section-title><paragraph>Talking about knowledge and protocols, some questions come to our minds: What do we mean by knowing a protocol? How does this protocol knowledge affect our knowledge of facts about the world? The literature abounds with various formal models answering these questions from different angles [1], [2], [3], [4], [5], and the proper representation and formalization of knowledge and knowledge dynamics is a core interest in the area of artificial intelligence [6], [7], [8], [9]. In some situations, agents have partial knowledge of the underlying protocols that guide the behaviors of other agents. Based on their incomplete knowledge of protocols and their observations, the agents try to reason about other agentsʼ epistemic attitudes as well as about hard facts. Protocols play a role, for example, when agents communicate using full-blown secret codes (see [10] for many intriguing historical examples). Our daily communications provide more mundane protocols that may help to hide information from part of the participants.</paragraph><paragraph label="Example 2">Coming back to the present day, consider a similar café scenario with Carl, Ben and Alice. Carl and Ben are childhood friends and know each other like the back of their hands. Carl says to Ben: ‘On Valentineʼs day I went to the pub with Mike and Sara. It was a crazy night!’ This immediately catches the attention of Alice, who is in love with Mike. She asks: ‘What happened?’ Carl winks to Ben and says: ‘Nothing’. Knowing Carl very well, Ben immediately realizes that indeed nothing has happened, whereas Alice becomes unsure of that, as she saw the wink that Carl has given to Ben.</paragraph><paragraph>This paper presents a dynamic epistemic logic (DEL, [12], [13]) that can suitably describe such scenarios. Knowing a protocol can mean ‘knowing what to do according to the protocol’ [1]. It can also correspond to ‘understanding the underlying meaning of the actions induced by the protocol’ [2]. Here, we follow the latter interpretation, which appears to capture the notion of a protocol in the types of situations we want to model. Kateʼs making a statement like ‘I am musical, I like Kathleen Ferrierʼs voice’ corresponds to the fact that ‘Kate is gay’. In the second situation, ‘Nothing’ (even if accompanied by a wink) corresponds to the fact that ‘Nothing has happened’.</paragraph><paragraph>Our work is inspired by two lines of research: the work relating dynamic epistemic logic (DEL) and epistemic temporal logic (ETL) [3], [5], [14] and the work on protocol changes [4], [15]. In [14], Pacuit and Simon model protocols as tree compositions, basically equating protocols with plans. Hoshi et al. [3], [5] propose the notion of ‘state-dependent’ DEL-protocols (sets of sequences of event models[13]) in order to handle protocols that are not common knowledge. Consider an epistemic scenario wherein the agents are not only uncertain about the factual state of the world but also about the protocol that can be executed given some factual state, depicted as the model:{a mathematical formula}</paragraph><paragraph>In this model, s, t are possible worlds, p is a proposition, and {a mathematical formula}a,b are expected actions. The uncertainty of the agents about the protocol is denoted by a state-dependent protocol assigning singleton action sets {a mathematical formula}{a} to s and {a mathematical formula}{b} to t. Note that we have omitted the reflexive arrows for agents 1 and 2 for the sake of compact representation, and we will follow this convention throughout this paper. A system wherein the protocol can be different in any state is clearly more complex than a system wherein the protocol is a background parameter, and thus can be assumed common knowledge to all agents. But in the example model above, we can still reclaim some form of common knowledge of the protocol, namely by describing it intuitively as follows: ifpthena and if ¬pthenb. In order to discuss the knowledge of protocols formally, we need to first fix a protocol specification language, which will then enable us to represent such protocol models in a more informative way.</paragraph><paragraph>Given a protocol language, how do we obtain such epistemic models with protocol information from specifications of conditional protocols, and vice versa? Similar questions are addressed in [4], [15], in which Wang presents a logical framework that incorporates protocol specifications in epistemic models and introduces the idea of matching observations to expectations. However, there, protocols are assumed to be common knowledge. We do not assume that here.</paragraph><paragraph>Our work is based on the logic developed in [4] but in the current article we use epistemic models with procedural information as in [3], [5] to deal with uncertainties about protocols, an agentʼs knowledge of underlying protocols, and her current observations affecting factual uncertainty. In our framework, the protocols can be viewed as ‘given by nature’, so the framework does not cover interesting aspects such as how and by whom the protocols have been designed and how agents have come to agree to use them.</paragraph><paragraph>The ingredients of our work are:</paragraph><list><list-item label="1.">epistemic models encoding state-dependent expected observations;</list-item><list-item label="2.">an update mechanism for eliminating impossible worlds according to the observation of agents and their expectations;</list-item><list-item label="3.">a formal language for specifying observations and protocols;</list-item><list-item label="4.">protocol models that represent agentsʼ incomplete information about the ‘real’ protocols;</list-item><list-item label="5.">an update mechanism for incorporating protocol information (as protocol models) in epistemic (observation) models;</list-item><list-item label="6.">a notion of equivalence between protocol models;</list-item><list-item label="7.">a logic for reasoning about knowledge based on protocols;</list-item><list-item label="8.">fact-changing actions and factual change systems, in order to investigate how we modify our expectations in an evolving world.</list-item></list><paragraph>The paper is organized as follows. Section 2 introduces epistemic expectation models and a simple propositional dynamic logic (PDL)-style epistemic logic for reasoning about knowledge via matching agentsʼ expectations to their observations. Section 3 discusses how we obtain epistemic expectation models from protocol models (i.e., epistemic protocols). We characterize three classes of epistemic expectation models that can be generated from various epistemic models. Furthermore we give a characterization of the effective equivalence of epistemic protocols. A logic is then given to incorporate the updates of protocols and to model reasoning about knowledge and observations. In Section 4 we address incorporation of fact-changing actions. Section 5 discusses the application of the full framework, including factual changes, to a well-known logic puzzle. Finally, we point out relations to other research and future work in Sections 6 and 7.</paragraph><paragraph>This article is the extended version of [16]. The main differences are: the introduction of the concept of observational saturation and a theorem about its relation to protocol models (Theorem 29); results about systems with fact-changing actions (Section 4); an extended application, namely about a protocol in the ‘One hundred prisoners and a lightbulb’ puzzle (Section 5); and a more extensive discussion of related work and ideas for future research (Sections 6 and 7).</paragraph></section><section label="2"><section-title>Reasoning via expectation and observation</section-title><paragraph>In this section, we introduce epistemic expectation models, which are Kripke models with expected observations. We propose a dynamic logic style epistemic logic that is interpreted on such models for reasoning about knowledge via matching observations with expectations.</paragraph><section label="2.1"><section-title>Epistemic expectation models</section-title><paragraph>Let I be a finite set of agents, and let P be a finite set of propositions describing the facts about the world. Let {a mathematical formula}Bool(P) denote the set of all Boolean formulas over P. To set up the semantics, we first define a Kripke model in the usual sense, which models agentsʼ epistemic uncertainties regarding the actual state of the world.</paragraph><paragraph label="Definition 3">Epistemic modelAn epistemic model{a mathematical formula}Me is a triple {a mathematical formula}〈S,∼,V〉, where S is a non-empty domain of states, ∼ stands for a set of accessibility (equivalence) relations {a mathematical formula}{∼i|i∈I}, and {a mathematical formula}V:S→P(P) is a valuation assigning to each state a set of propositional variables (those that are ‘true in that state’).</paragraph><paragraph>We will introduce the concept of epistemic expectation models based on Kripke models, which captures the expected observations of agents. Agents observe what is happening around them and reason based on these observations. Examples of such observations are ‘making an announcement’, ‘going to the right’, and ‘nodding your head’. One can distinguish such observations of actions from observations of facts, such as ‘the chair is red’. Factual observations are not ruled out in our framework but we typically have observations of actions in mind. To this end, we introduce a finite set of actions, named Σ. An observation is a finite string of actions, for example, {a mathematical formula}abcd. Note that an agent may expect different (even infinitely many) potential observations to happen at a given state, for example, she may expect {a mathematical formula}a…ab to happen for any finite sequence of as preceding the terminating action b. As human beings and computers are essentially finite, we need to denote such expectations in a finitary way. To this end, we introduce the observation expressions (as regular expressions over Σ):</paragraph><paragraph label="Definition 4">Observation expressionsGiven a finite set of action symbols Σ, the language {a mathematical formula}Lobs of observation expressions is defined by the following BNF:{a mathematical formula} where δ stands for the empty set ∅ of observations, the constant ε represents the empty string, and {a mathematical formula}a∈Σ.</paragraph><paragraph>The semantics for the observation expressions are given by sets of observations (strings over Σ), similar to those for regular expressions.</paragraph><paragraph label="Definition 5">ObservationsGiven an observation expression π, the corresponding set of observations, denoted by {a mathematical formula}L(π), is the set of finite strings over Σ defined as follows:{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}</paragraph><paragraph>Now we are ready to define epistemic observation models, which can be seen as epistemic models together with, for each world, a set of potential or expected observations.</paragraph><paragraph label="Definition 6">Epistemic expectation modelAn epistemic expectation model{a mathematical formula}Mexp is a quadruple{a mathematical formula} where {a mathematical formula}〈S,∼,V〉 is an epistemic model (the epistemic skeleton of {a mathematical formula}Mexp) and {a mathematical formula}Exp:S→Lobs is an expected observation function assigning to each state an observation expression π such that {a mathematical formula}L(π)≠∅ (non-empty set of finite sequences of observations). An epistemic expectation state is a pointed epistemic expectation model {a mathematical formula}〈S,∼,V,Exp,s〉. Intuitively, Exp assigns to each state a set of potential or expected observations.</paragraph><paragraph>Given an epistemic expectation model {a mathematical formula}Mexp=〈S,∼,V, Exp〉, note that {a mathematical formula}〈S,∼,V〉 is an epistemic model in the usual sense. Hence, sometimes, we also denote an epistemic expectation model as {a mathematical formula}(Me,Exp), where {a mathematical formula}Me is the corresponding epistemic model. An epistemic model {a mathematical formula}Me can be considered as an epistemic expectation model {a mathematical formula}Mexp where for all {a mathematical formula}s∈S, {a mathematical formula}Exp(s)=Σ⁎ (where {a mathematical formula}Σ⁎ is shorthand for {a mathematical formula}(a0+a1+⋯+ak)⁎, given that {a mathematical formula}Σ={a0,…,ak}). Thus, in an epistemic model, the observations possible at each state are not specified; one can expect to observe anything. In this sense, {a mathematical formula}Me lacks in providing procedural information about the world, and {a mathematical formula}Mexp fills that gap. In what follows we often leave out the subscripts, whenever the respective models are clear from the context.</paragraph><paragraph label="Example 7">Dutch or not DutchIn the Netherlands, people often greet each other by kissing three times on the cheek (left–right–left) while in the rest of Europe, people usually kiss each other only twice. We can reason whether a person is ‘Dutch-related’ by observing his behavior. Let {a mathematical formula}pD be the proposition meaning ‘Simon is Dutch-related’; a and b are two actions denoting kissing the left cheek and kissing the right cheek, respectively. The following model is what we expect (reflexive arrows are omitted again):{a mathematical formula}</paragraph><paragraph>The indistinguishability relation above depicts that agent 1 does not know whether {a mathematical formula}pD. The associated observations are those that the agents might expect in each state. Intuitively, if agent 1 observes Simon kissing three times (observation aba), then he or she can infer that Simon is Dutch-related. In the next subsection, a simple logic is defined to handle such reasoning based on actual observations.</paragraph></section><section label="2.2"><section-title>Public observation logic</section-title><paragraph>In this subsection we define a simple dynamic logic with knowledge operators to reason about knowledge via the matching of observations and expectations. The idea is similar to the one behind public announcement logic, where people update their information by deleting impossible scenarios according to what is publicly announced. Here we relax the link between meaning and public actions (like an announcement). We assume that when observing an action, people delete some impossible scenarios where they wouldnʼt expect that observation to happen. To make such reasoning formal, we first define the update of epistemic expectation models according to some observation {a mathematical formula}w∈Σ⁎. The idea behind an updated expectation model is that we delete the states where the observation w could not have been happened.</paragraph><paragraph label="Definition 8">Update by observationLet w be an observation over Σ and let {a mathematical formula}M=(S,∼,V,Exp) be an epistemic expectation model. The updated model {a mathematical formula}M|w=(S′,∼′,V′,Exp′). Here, {a mathematical formula}S′={s|L(Exp(s)\w)≠∅}, {a mathematical formula}∼i′=∼i|S′×I×S′, {a mathematical formula}V′=V|S′, and {a mathematical formula}Exp′(s)=Exp(s)\w, where {a mathematical formula}π\w is defined as the regular expression denoting the set {a mathematical formula}{v|wv∈L(π)} ({a mathematical formula}π\w corresponds to right residuation with respect to the monoid {a mathematical formula}(Σ⁎,⋅,ε)).</paragraph><paragraph>A regular expression {a mathematical formula}π\w is defined with an auxiliary output function o from the set of regular expressions over Σ to {a mathematical formula}{δ,ε}. If {a mathematical formula}ε∈L(π), the output function o maps a regular expression π to ε; otherwise, it maps π to δ[17], [18]:{a mathematical formula} The above construction of the output function helps to compute the residual of compositions. Reading from left to right the above equations can be viewed as rewriting rules which push the \a operation to the ‘inner’ part of the expression and finally eliminate them. Thus by using these equations we can compute residuals of observations syntactically.</paragraph><paragraph label="Definition 9">We design the Public observation logic (POL) to reason about observations: Public observation logicThe formulas φ of POL are given by:{a mathematical formula} where {a mathematical formula}p∈P, {a mathematical formula}i∈I, and {a mathematical formula}π∈Lobs. The other propositional connectives are defined in the usual manner.</paragraph><paragraph label="Definition 10">Intuitively, {a mathematical formula}[π]φ says that ‘after any observation in π, φ holds’. Truth definition for POLGiven an epistemic expectation model {a mathematical formula}M=(S,∼,V,Exp), a state {a mathematical formula}s∈S, and a POL-formula φ, the truth of φ at s, denoted by {a mathematical formula}M,s⊨φ, is defined as follows:{a mathematical formula} where {a mathematical formula}w∈init(π) iff {a mathematical formula}∃v∈Σ⁎ such that {a mathematical formula}wv∈L(π) (namely {a mathematical formula}L(π\w)≠∅).</paragraph><paragraph>Consider the model {a mathematical formula}M in Example 7. If we observe one or two kisses, first on the left and then on the right cheek ({a mathematical formula}a⋅b), agent 1 still cannot tell that Simon is Dutch-related ({a mathematical formula}¬K1pD), but if there is one more kiss on the left cheek to follow (a), then agent 1 knows. Formally, it can be verified that {a mathematical formula}M,s⊨[a⋅b](¬K1pD∧[a]K1pD) (cf. Example 7). More complicated observation expressions π can be used to express (infinite) sets of observations, for example, {a mathematical formula}[Σ⁎⋅a⋅Σ⁎]Kiφ says ‘as long as a is observed at some point, i knows φ’ (recall that {a mathematical formula}Σ⁎ denotes the expression corresponding to the set all observations).</paragraph><paragraph label="Definition 11">Clearly, the standard bisimulation between epistemic models is not an invariance of the above logic: POL can reason about what may happen at each state. We now define bisimulation between epistemic expectation models, which facilitates characterization results in later sections. Observation bisimulationA binary relation R between the domains of two epistemic expectation models {a mathematical formula}M=(S,∼,V,Exp) and {a mathematical formula}N=(S′,∼′,V′,Exp′) is called a bisimulation if for any {a mathematical formula}s∈S,s′∈S′, we have that if {a mathematical formula}(s,s′)∈R, then the following conditions hold:</paragraph><list><list-item>{a mathematical formula}V(s)=V′(s′);</list-item><list-item>{a mathematical formula}L(Exp(s))=L(Exp′(s′));</list-item><list-item>if {a mathematical formula}s∼it in {a mathematical formula}M then there exists a {a mathematical formula}t′ in {a mathematical formula}N such that {a mathematical formula}s′∼i′t′ and {a mathematical formula}tRt′;</list-item><list-item>if {a mathematical formula}s′∼i′t′ in {a mathematical formula}N then there exists a t in {a mathematical formula}M such that {a mathematical formula}s∼it and {a mathematical formula}tRt′.</list-item></list><paragraph label="Proposition 12">Note that the standard bisimilarity (notation {a mathematical formula}↔̲) is defined as {a mathematical formula}↔̲o without the condition for the invariance for observations. It is not hard to show that {a mathematical formula}↔̲o and logical equivalence {a mathematical formula}≡POL coincide on finite models: Bisimulation invarianceFor any two finite epistemic expectation states{a mathematical formula}M,sand{a mathematical formula}N,s′, the following statements are equivalent:</paragraph><list><list-item label="•">{a mathematical formula}M,s↔̲oN,s′.</list-item><list-item label="•">For any formula{a mathematical formula}φ∈POL: {a mathematical formula}M,s⊨φ⇔N,s′⊨φ.</list-item></list><paragraph label="Proof">{a mathematical formula}[↔̲o⇒≡POL]: We prove this by induction on φ. The Boolean and {a mathematical formula}Kiψ cases are trivial. Now consider {a mathematical formula}φ=[π]ψ; so suppose that {a mathematical formula}M,s↔̲oN,s′ but {a mathematical formula}M,s⊨[π]ψ and {a mathematical formula}N,s′⊭[π]ψ. Then there exists a {a mathematical formula}w∈L(π) such that {a mathematical formula}w∈init(Exp(s′)) and {a mathematical formula}N|w,s′⊨¬ψ.By the definition of {a mathematical formula}↔̲o, we have {a mathematical formula}L(Exp(s))=L(Exp(s′)), therefore {a mathematical formula}w∈init(Exp(s)). Thus {a mathematical formula}M|w,s exists. We now show that {a mathematical formula}M|w,s↔̲oN|w,s′. Let R be {a mathematical formula}{(t,t′)∈SM|w×SN|w|M,t↔̲oN,t′}. Clearly {a mathematical formula}(s,s′)∈R. Note that if {a mathematical formula}L(Exp(t))=L(Exp(t′)) then {a mathematical formula}L(Exp(t)\w)=L(Exp(t′)\w); this proves the invariance for observations. Based on this invariance, it is not hard to verify that R is indeed an observation bisimulation between {a mathematical formula}M|w and {a mathematical formula}N|w.Since {a mathematical formula}M|w,s↔̲oN|w,s′, by induction hypothesis we conclude that{a mathematical formula} Clearly, this contradicts the assumption that {a mathematical formula}M,s⊨[π]ψ.{a mathematical formula}[≡POL⇒↔̲o]: Let {a mathematical formula}R={(t,t′)∈SM×SN|M,t≡POLN,t′}. We can show that R is an observation bisimulation. All the conditions are standard and thus can be handled by standard techniques except the new clause about the invariance for observations: we need to show that {a mathematical formula}tRt′ implies {a mathematical formula}L(Exp(t))=L(Exp(t′)). However, this is trivial, since in the language of POL we can express {a mathematical formula}〈w〉⊤, so that {a mathematical formula}M,t⊨〈w〉⊤⇔w∈L(Exp(t)).  □</paragraph><paragraph label="Definition 13">Intuitively, these epistemic expectation models can be seen as compact representations of certain epistemic temporal models [2], [3]. An epistemic temporal model is a Kripke model with both epistemic and temporal binary relations between possible worlds. To make the link more precise, we can relate POL on epistemic expectation models to the same language on epistemic temporal models with the usual PDL-style interpretation of {a mathematical formula}[π]φ formulas, as we now proceed to show. First let us define the epistemic temporal models that are generated from epistemic expectation models. Let {a mathematical formula}M be an epistemic expectation model {a mathematical formula}〈S,∼i,V,Exp〉. The {a mathematical formula}M-generated epistemic temporal model (notation: {a mathematical formula}ET(M)) is defined as {a mathematical formula}〈H,→a,∼i′,V′〉 where:</paragraph><list><list-item label="•">{a mathematical formula}H={(s,w)|s∈S,w=ϵ or w∈L(Exp(s))};</list-item><list-item label="•">{a mathematical formula}(s,w)→a(t,v)⇔s=t and v=wa,a∈Σ;</list-item><list-item label="•">{a mathematical formula}(s,w)∼i(t,v)⇔s∼it and w=v;</list-item><list-item label="•">{a mathematical formula}p∈V′(s,w)⇔p∈V(s).</list-item></list><paragraph>From this definition, it is not hard to see that all the agents can observe all the actions. We can define the semantics of POL formulas on generated epistemic temporal models {a mathematical formula}N (we only show the non-trivial part):{a mathematical formula} We call the above semantically defined logic Epistemic-PDL (EPDL): the language of POL interpreted on epistemic temporal models with respect to {a mathematical formula}⊨EPDL. To establish the precise link between epistemic expectation models and epistemic temporal models, we can prove the following.</paragraph><paragraph label="Proof">Given a pointed POL model{a mathematical formula}M,s, and a POL formula φ, it can be shown that:{a mathematical formula}We need to show for any epistemic expectation model {a mathematical formula}M,s and any POL formula φ:{a mathematical formula} We prove this by induction on φ. The Boolean case and the {a mathematical formula}Kiψ case are trivial. Now consider the case {a mathematical formula}[π]ψ. Suppose without loss of generality that there is an epistemic expectation model {a mathematical formula}M,s⊨[π]ψ and {a mathematical formula}ET(M),(s,ϵ)⊭EPDL[π]ψ. Then there exists a {a mathematical formula}w∈L(π) such that {a mathematical formula}ET(M),(s,w)⊭ψ. By the definition of {a mathematical formula}ET(M), we conclude that {a mathematical formula}w∈Exp(s), thus {a mathematical formula}M|w exists. Based on the definition of {a mathematical formula}ET(M), it is not hard to show that {a mathematical formula}ET(M|w),(s,ϵ) is bisimilar (with respect to both ∼ and {a mathematical formula}→) to {a mathematical formula}ET(M),(s,w). Since EPDL is clearly invariant under bisimulation, we have:{a mathematical formula} By induction hypothesis, {a mathematical formula}M|w,s⊨¬ψ, which contradicts the assumption that {a mathematical formula}M,s⊨[π]ψ.  □</paragraph><paragraph>Note that the generated epistemic temporal models can be infinite, and thus the above result does not give a straightforward model checking procedure for POL. According to the semantics of {a mathematical formula}[π]φ we need to check infinitely many {a mathematical formula}w∈L(π). Fortunately, this can be handled by partitioning {a mathematical formula}L(π) into a finite number of regular expressions {a mathematical formula}π0…πk such that for any {a mathematical formula}0⩽i⩽k and any {a mathematical formula}w,v∈L(πi), we have {a mathematical formula}M|w=M|v, providing decidability of model checking after all (see [15] for details in a similar setting).</paragraph></section></section><section label="3"><section-title>Expectation comes from protocols</section-title><paragraph>Epistemic expectation models describe the agentsʼ expected observations, which in turn influence their reasoning. We investigate how agents acquire and change their expectations, by looking at protocols and protocol models as sources for the expected observations.</paragraph><section label="3.1"><section-title>Protocol expressions</section-title><paragraph>Informally, a protocol is a rule telling us what we should do under what conditions. Protocols are ubiquitous in our daily life. A formal way of expressing such protocols or rules is to use a specification language. We specify protocols in the following language of protocol expressions{a mathematical formula}Lprot:</paragraph><paragraph label="Definition 15">Protocol expressionThe language {a mathematical formula}Lprot of protocols is defined by the following BNF:{a mathematical formula} where δ stands for the empty language ∅, the constant ε represents the empty string, and {a mathematical formula}φ∈Bool(P).</paragraph><paragraph>The above language of protocol expressions is obtained by adding Boolean tests to observation expressions. For example, {a mathematical formula}(?love⋅stay)⁎⋅(?¬love⋅separate) expresses ‘we should stay together as long as we are in love’. For a discussion on more complicated test scenarios (for example, considering agentsʼ knowledge), see Section 7. We use test conditions in protocol expressions to describe the conditions under which certain observations can happen. A protocol without tests corresponds to observations without any conditions. This is the difference between protocols and the observations that arise out of such protocols, and we maintain this difference by adding tests to the observation expressions in order to express protocols. In the latter part of this section we will talk about public and private protocols. To this end, we will use dynamic epistemic logic (DEL)-like models to discuss knowledge and ignorance about protocols.</paragraph><paragraph>In the story of Example 7, there seems to be an underlying protocol: if you are Dutch-related, then you kiss three times and if you are non-Dutch-related, then you kiss two times. This is the reason for the agent to have the corresponding expectations of the observations. This protocol (call it {a mathematical formula}πK) can be expressed as {a mathematical formula}?pD⋅a⋅b⋅a+?¬pD⋅a⋅b. We would like to generate the epistemic expectation model in Example 7 (see p. 21) from the protocol {a mathematical formula}πK and the following epistemic model:{a mathematical formula}</paragraph><paragraph>Intuitively, the information of the protocol {a mathematical formula}πK can be incorporated by adding to each state the possible observations allowed by the protocol. We now move on to the technical details.</paragraph><paragraph>To compute the expected observations corresponding to a given protocol, we first define the semantics of protocol expressions. Intuitively, we associate to each protocol η a set {a mathematical formula}Lg(η) of guarded observations in the form of{a mathematical formula} where each {a mathematical formula}ρi⊆P denotes a state of affairs (the atomic propositions {a mathematical formula}p∈ρ are true while the others are false), encoding the conditions for the later observations to happen. For Boolean formulas φ, we write {a mathematical formula}ρ⊨φ if φ is true under ρ (viewed as a valuation: p is true iff {a mathematical formula}p∈ρ).</paragraph><paragraph label="Definition 16">The set of guarded observations corresponding to a protocol expression is defined by induction, as follows:{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula} where ⋄ is the fusion product: {a mathematical formula}w⋄v=w′ρv′ when {a mathematical formula}w=w′ρ and {a mathematical formula}v=ρv′, and not defined otherwise.</paragraph><paragraph>Note that the {a mathematical formula}ρiʼs in a guarded observation remain unchanged since no factual change is introduced by the execution of the actions (see Section 6 for a detailed discussion of fact-changing actions, such as toggling a light switch). We derive the set of observations to be expected under the same condition ρ according to η by a conversion function {a mathematical formula}fρ:Lprot→Lobs:{a mathematical formula}</paragraph><paragraph label="Definition 17">Characteristic formulaLet {a mathematical formula}ρ⊆P. Then we denote by {a mathematical formula}φρ the characteristic formula for ρ: {a mathematical formula}⋀p∈ρp∧⋀p∉ρ¬p. For example, suppose that {a mathematical formula}P={p,q}, then {a mathematical formula}φ{p}=p∧¬q.</paragraph><paragraph label="Proposition 18"><list><list-item label="(a)">For any{a mathematical formula}η∈Lprot, it holds that{a mathematical formula}Therefore:</list-item><list-item label="(b)">Every η has a normal form{a mathematical formula}η∘as follows:{a mathematical formula}such that{a mathematical formula}Lg(η)=Lg(η∘). Here{a mathematical formula}φρis the characteristic formula for ρ as defined inDefinition 17.</list-item></list></paragraph><paragraph label="Proof">We first show (a) by induction on {a mathematical formula}η∈Lprot. The atomic cases are straightforward. Now we check the complex cases:{a mathematical formula}η=η1+η2:{a mathematical formula}{a mathematical formula}η=η1⋅η2:{a mathematical formula}{a mathematical formula}η=η1⁎:{a mathematical formula} This completes the proof for (a). From (a) and the definition of {a mathematical formula}Lg, it follows that:{a mathematical formula} Let {a mathematical formula}Gρη={ρa0ρa1…akρ|ρa0ρa1…akρ∈Lg(η)}, the set of all ρ-guarded expressions in {a mathematical formula}Lg(η). Then, by fusion product, it follows that {a mathematical formula}Lg(?φρ⋅fρ(η))=Gρη. Thus,{a mathematical formula} This proves (b).  □</paragraph><paragraph>From Proposition 18, according to the protocol η, the expected observations on a state s in an epistemic model {a mathematical formula}M can be computed by {a mathematical formula}fVM(s)(η). For example, {a mathematical formula}f{p}(?p⋅a+?¬p⋅b)=a. However, not every epistemic expectation model can be generated by a single protocol. We will investigate this issue in the next subsection.</paragraph></section><section label="3.2"><section-title>Protocol models</section-title><paragraph>We introduce epistemic protocol models to represent uncertainty about protocols:</paragraph><paragraph label="Definition 19">Epistemic protocol modelAn epistemic protocol model{a mathematical formula}A is a triple {a mathematical formula}〈T,∼,Prot〉, where T is a domain of abstract objects, ∼ stands for a set of accessibility (equivalence) relations {a mathematical formula}{∼i|i∈I}, and {a mathematical formula}Prot:T→Lprot assigns to each domain object a protocol. We call a pointed epistemic protocol model an epistemic protocol and a singleton epistemic protocol model (T is singleton) a public protocol.</paragraph><paragraph>Note that public protocols are (implicitly) commonly known by all the agents.</paragraph><paragraph label="Example 20">Consider the epistemic expectation model:{a mathematical formula} We cannot associate a protocol η to the epistemic skeleton of the above model in such a way that {a mathematical formula}fVM(s)(η)=a and {a mathematical formula}fVM(t)(η)=b, since {a mathematical formula}VM(s)=VM(t). Note that taking {a mathematical formula}?p(a+b) for η does not work. This model represents the uncertainty of the agents about the protocol:{a mathematical formula}</paragraph><paragraph>We will now proceed towards our main result in this section, namely that an epistemic observation state uniquely determines an epistemic protocol, and that an epistemic protocol and an epistemic state together uniquely determine an epistemic observation state. To show the correspondence, we need one more semantic operation, that is a modal product operation of an epistemic expectation model and a protocol model. It formalizes the change in possible observations induced by a protocol. We should see this definition as installing a new protocol, by means of novel observations, into the epistemic expectation model, and thus completely obliterating the current expected observations.</paragraph><paragraph label="Definition 21">Protocol updateGiven an epistemic expectation model {a mathematical formula}Mexp=〈S,∼,V,Exp〉 and an epistemic protocol model {a mathematical formula}A=〈T,∼,Prot〉, we define the product {a mathematical formula}(Mexp⊗A)=(S′,∼′,V′,Exp′) as follows:</paragraph><list><list-item label="•">{a mathematical formula}S′={(s,t)∈S×T:L(fVM(s)(Prot(t)))≠∅};</list-item><list-item label="•">{a mathematical formula}(s,t)∼i′(s′,t′) iff {a mathematical formula}s∼is′ in {a mathematical formula}Mexp and {a mathematical formula}t∼it′ in {a mathematical formula}A;</list-item><list-item label="•">{a mathematical formula}V′(s,t)=V(s);</list-item><list-item label="•">{a mathematical formula}Exp′((s,t))=fVM(s)(Prot(t)).</list-item></list><paragraph>We mentioned that epistemic models can be seen as special cases of epistemic expectation models, namely with the ‘anything goes’ protocol. Therefore, also in that case the product operation between an epistemic model and a protocol model corresponds to the installation of a protocol.</paragraph><paragraph label="Example 22">We now illustrate the definition of protocol update by the scenarios presented in Example 1, Example 2 of the introduction. In the pictures below, we assume reflexivity, symmetry, and transitivity of the accessibility relations. In the scenario of Example 1, at the beginning neither Jane nor Ann knows the basic proposition g (Kate is gay). However, one of them, Jane, is aware of the protocol that: if Kate is gay then she will make the statement ‘I am musical, I like Kathleen Ferrierʼs voice’ (action a); and if she is not gay, then she will talk about something else (action b). However, Ann has no idea whether a and b can carry such information. The scenario is modeled as follows, where the last model is the epistemic expectation model resulting from the update of the protocol on the first epistemic model:{a mathematical formula} Here, g denotes the fact that ‘Kate is gay’, a denotes the observation of Kate making the ‘musical statement’ and b stands for Kate saying something else.</paragraph><paragraph label="Example 23">We now consider the scenario of Example 2. After Carlʼs first description of the night of Valentineʼs day, Ben and Alice still do not know what has happened. Now, the wink from Carl ‘installs’ the epistemic protocol which creates uncertainty in Alice about the meaning of Benʼs later statements. In contrast, because Ben knows Carl so well, he immediately gets the protocol Carl is using. The modeling is as follows:{a mathematical formula} Here, p denotes the fact that ‘Something has happened involving Mike and Sara on Valentineʼs night’, while ‘Y’ corresponds to Carl answering affirmatively to Aliceʼs question, and ‘N’ to Carl answering negatively.</paragraph><paragraph>We assume that Aliceʼs confusion would lead her to consider the possibility of a protocol where Carl would say “Yes” if indeed nothing has actually happened. Because of Carlʼs wink, however, Alice becomes very distrustful towards him.</paragraph><paragraph>According to our definition, an epistemic protocol model acts on an epistemic model, thereby determining a unique epistemic expectation model. In the rest of this section we will investigate the converse question: Can an arbitrary epistemic expectation model be generated by updating an epistemic model by an epistemic protocol model? This is indeed the case, as we will now show.</paragraph><paragraph label="Proposition 24">Given an epistemic expectation model{a mathematical formula}M=(N,Exp), there is an epistemic model{a mathematical formula}N′and an epistemic protocol model{a mathematical formula}Asuch that{a mathematical formula}M↔̲oN′⊗A.</paragraph><paragraph label="Proof">Let {a mathematical formula}N′=(S′,∼′,V′) be the universal ignorance model, i.e., {a mathematical formula}S′=P(P), for each {a mathematical formula}i,∼i′=S′×S′, and {a mathematical formula}V′(ρ)=ρ⊆P. Given {a mathematical formula}M=(S,∼,V,Exp), let {a mathematical formula}A=(S,∼,Prot) such that {a mathematical formula}Prot(s)=?φV(s)⋅Exp(s). (Remember that {a mathematical formula}φV(s) is the characteristic formula of {a mathematical formula}V(s)⊆P, see Definition 17.) Now we show that {a mathematical formula}M↔̲oN′⊗A by proving that {a mathematical formula}R={(s,(ρ,s))|V(s)=ρ} is a bisimulation relation.The invariance conditions are immediate. Now suppose {a mathematical formula}s∼it in {a mathematical formula}M, then {a mathematical formula}(ρ,s)∼i(V(t),t) in {a mathematical formula}N′⊗A by the definition of the product. Obviously, {a mathematical formula}tR(ρ′,t), where {a mathematical formula}ρ′=V(t).Suppose {a mathematical formula}(ρ,s)∼i(ρ′,t). Then {a mathematical formula}V(t)=ρ′. Therefore {a mathematical formula}s∼it and {a mathematical formula}tR(ρ′,t).  □</paragraph><paragraph>This result shows that every epistemic expectation model is reasonable in the sense that it can be generated from an epistemic model by some epistemic protocol model. However, it is more intuitive to consider the particular epistemic model {a mathematical formula}N in {a mathematical formula}M=(N,Exp), and ask if there is a protocol model {a mathematical formula}A such that {a mathematical formula}N⊗A↔̲oM. For singleton protocol models, we have a characterization result. First we need a definition.</paragraph><paragraph label="Definition 25">An epistemic expectation model {a mathematical formula}M is said to be Boolean normal if for any two worlds {a mathematical formula}s,t in it, {a mathematical formula}VM(s)=VM(t)⇒L(Exp(s))=L(Exp(t)).</paragraph><paragraph label="Theorem 26">Given an epistemic expectation model{a mathematical formula}M=(N,Exp),{a mathematical formula}Mis Boolean normal iff there exists a singleton protocol model{a mathematical formula}Asuch that{a mathematical formula}N⊗A↔̲oM, where{a mathematical formula}↔̲ois total.</paragraph><paragraph label="Proof">⇒: Let {a mathematical formula}φs be the Boolean characterization formula corresponding to {a mathematical formula}VN(s). Let{a mathematical formula} Because of the finiteness of P and Boolean normality, {a mathematical formula}ηM has a finite representation. Let {a mathematical formula}AηM be the singleton pointed protocol model with Prot assigning {a mathematical formula}ηM to the single point. We can verify that {a mathematical formula}N⊗AηM↔̲oM.⇐: Suppose {a mathematical formula}M is not Boolean normal, then there are {a mathematical formula}s,t in {a mathematical formula}M such that {a mathematical formula}V(s)=V(t) and {a mathematical formula}Exp(s)≠Exp(t). Due to the normal form of protocols, updating with a public protocol on s, t will result in the same observations. So there cannot be any single pointed protocol model to do the job.  □</paragraph><paragraph>Not every epistemic expectation model is Boolean normal, therefore, by Theorem 26, not every epistemic expectation model can be generated by a public protocol on its epistemic skeleton. In fact, as demonstrated by the following example, there are epistemic expectation models which cannot be generated by any protocol model on its epistemic skeleton.</paragraph><paragraph label="Example 27">Consider the following epistemic expectation model {a mathematical formula}M; we will show that {a mathematical formula}M cannot be generated by any epistemic protocol on its epistemic skeleton:{a mathematical formula}Suppose towards contradiction that there is a protocol model {a mathematical formula}A such that the execution of {a mathematical formula}A on the epistemic skeleton of {a mathematical formula}M gives an epistemic expectation model that is bisimilar to {a mathematical formula}M. To compose {a mathematical formula}s′ in the epistemic expectation model, we need a state t in the protocol model such that {a mathematical formula}Prot(t) allows a to happen if p is true. Then t can be composed with the leftmost p-world above as well, since the left world and middle world are Boolean indistinguishable. Therefore there will be a {a mathematical formula}p(a)-world in the resulting model which cannot reach any ¬p-world in one step, due to the definition of ⊗ (the leftmost state above cannot reach any ¬p-world in one step).</paragraph><paragraph>This leads us to consider a subclass of the epistemic expectation models given as follows.</paragraph><paragraph label="Definition 28">Observational saturationAn epistemic expectation model {a mathematical formula}M is said to be observationally saturated iff the following holds: For all states {a mathematical formula}v,s,t in {a mathematical formula}M, for all {a mathematical formula}i∈I: If {a mathematical formula}v∼is and {a mathematical formula}V(s)=V(t), then there exists u in {a mathematical formula}M such that {a mathematical formula}v∼iu, {a mathematical formula}s↔̲u and {a mathematical formula}ExpM(t)=ExpM(u).</paragraph><paragraph>Note that every Boolean normal epistemic expectation model {a mathematical formula}M is observationally saturated: suppose {a mathematical formula}w∼is and {a mathematical formula}V(s)=V(t) then clearly {a mathematical formula}s↔̲s and {a mathematical formula}ExpM(s)=ExpM(t) since {a mathematical formula}M is Boolean normal. Note that the model in Example 27 is not observationally saturated: the leftmost world and the middle world share the same valuation but different observations, however, there is no 1-successor of the leftmost world that is (standard) bisimilar to the leftmost world and has the same expectation as the middle world.</paragraph><paragraph>In the following, we show that observational saturation is a sufficient condition for an epistemic expectation model to be generatable from its epistemic skeleton.</paragraph><paragraph label="Proof">Given an epistemic expectation model{a mathematical formula}M=(N,Exp), if{a mathematical formula}Nis observationally saturated then there is a protocol model{a mathematical formula}Asuch that{a mathematical formula}N⊗A↔̲oM.Suppose {a mathematical formula}N=(S,∼,V). For any {a mathematical formula}s∈S, let {a mathematical formula}φsN be the Boolean characteristic formula of s. Let {a mathematical formula}A=(S,∼′,Prot) where {a mathematical formula}Prot(s)=?φsN⋅ExpM(s) and {a mathematical formula}∼i′=S×S for each {a mathematical formula}i∈I.Let {a mathematical formula}R⊆S×SN⊗A be the binary relation{a mathematical formula}It is easy to see that {a mathematical formula}(w,(w,w))∈R for all {a mathematical formula}w∈S. We need to show that R is indeed a total observation bisimulation (see Definition 11).To this end, suppose {a mathematical formula}wR(v,t). Since {a mathematical formula}Prot(t)=?φtN⋅ExpM(t) and {a mathematical formula}(v,t) is in {a mathematical formula}N⊗A, we have {a mathematical formula}N,v⊨φtN. From the definition of R, we have {a mathematical formula}ExpM(w)=ExpM(t) and {a mathematical formula}w↔̲v thus w and {a mathematical formula}(v,t) should have the same valuation according to the definition of ⊗. Moreover, it holds that {a mathematical formula}ExpM(w)=ExpN⊗A((v,t)) since {a mathematical formula}ExpM(w)=ExpM(t) and {a mathematical formula}Prot(t)=?φtN⋅ExpM(t). Now we only need to check the Zig–Zag conditions.So, suppose {a mathematical formula}w∼iw′ in {a mathematical formula}M. Since {a mathematical formula}w↔̲v there is a {a mathematical formula}v′ in {a mathematical formula}M such that {a mathematical formula}v∼iv′ and {a mathematical formula}w′↔̲v′ in {a mathematical formula}M. Therefore {a mathematical formula}VM(w′)=VM(v′), thus {a mathematical formula}(v′,w′) exists in {a mathematical formula}N⊗A. Now due to the fact that the relations in {a mathematical formula}A are universal, we have {a mathematical formula}(v,t)∼i(v′,w′). It is clear that {a mathematical formula}(w′,(v′,w′))∈R.Suppose {a mathematical formula}(v,t)∼i(v′,t′) in {a mathematical formula}N⊗A; then {a mathematical formula}v∼iv′ in {a mathematical formula}M and {a mathematical formula}VM(v′)=VM(t′). Since {a mathematical formula}w↔̲v, there is a {a mathematical formula}w′ in {a mathematical formula}M such that {a mathematical formula}w∼iw′ and {a mathematical formula}w′↔̲v′ in {a mathematical formula}M. Therefore {a mathematical formula}VM(w′)=VM(v′)=VM(t′). Now consider {a mathematical formula}w′ and {a mathematical formula}t′: since {a mathematical formula}M is observationally saturated, there is a {a mathematical formula}w″ in {a mathematical formula}M such that {a mathematical formula}w∼iw″, {a mathematical formula}w′↔̲w″ and {a mathematical formula}ExpM(w″)=ExpM(t′). Since {a mathematical formula}w″↔̲w′, we have {a mathematical formula}w″↔̲v′. Therefore {a mathematical formula}(w″,(v′,t′))∈R.To complete the proof, we need to show that the bisimulation is total. It is clear that for each w: {a mathematical formula}(w,(w,w))∈R. Now for any {a mathematical formula}(v,t) in {a mathematical formula}N⊗A, we need to show that {a mathematical formula}(v,t) is linked to some world in {a mathematical formula}M by R. Suppose {a mathematical formula}(v,t) exists in {a mathematical formula}M then {a mathematical formula}VM(v)=VM(t). Note that {a mathematical formula}v∼iv for any {a mathematical formula}i∈I since {a mathematical formula}∼i is reflexive. By observational saturation, there is a w in {a mathematical formula}M such that {a mathematical formula}v∼iw, {a mathematical formula}v↔̲w and {a mathematical formula}ExpM(w)=ExpM(t). Therefore {a mathematical formula}(w,(v,t))∈R.  □</paragraph></section><section label="3.3"><section-title>Equivalence of protocols</section-title><paragraph>In the introduction, we stated that one epistemic expectation model might be generated in different ways, even based on the same epistemic model. For example, consider the following expectation model:{a mathematical formula}</paragraph><paragraph>It can be generated from its epistemic skeleton by updating with the public protocol {a mathematical formula}?p⋅b+?¬p⋅a or with the epistemic protocol model:{a mathematical formula}</paragraph><paragraph>Actually, on arbitrary epistemic models, the announcement of {a mathematical formula}?p⋅b+?¬p⋅a will always yield the same result as the above epistemic protocol model. On the other hand, the announcement {a mathematical formula}?p⋅(a+b) gives a different update result on the same epistemic model compared to the update with the following epistemic protocol:{a mathematical formula} Such examples suggest a notion of equivalence between protocol models.</paragraph><paragraph label="Definition 30">Effective equivalenceTwo protocol models {a mathematical formula}A and {a mathematical formula}B are said to be effectively equivalent (notation: {a mathematical formula}A≡efB) if for any epistemic expectation model {a mathematical formula}M:M⊗A↔̲oM⊗B.</paragraph><paragraph label="Definition 31">Inspired by the idea of action emulation introduced by Van Eijck, Ruan and Sadzik in [19] and further explored in [20], we characterize the notion of effective equivalence by the following structural equivalence. To simplify the notation, let {a mathematical formula}Lρ(η) be {a mathematical formula}L(fρ(η)) (cf. Proposition 18). Protocol emulationTwo protocol models {a mathematical formula}A=(S,Prot) and {a mathematical formula}B=(T,Prot) are said to be emulated (notation: {a mathematical formula}A≈B) if there is a binary relation {a mathematical formula}E⊆S×T such that for every {a mathematical formula}s∈A, there exists a {a mathematical formula}t∈B with sEt, and for every {a mathematical formula}t∈B, there exists an {a mathematical formula}s∈A with sEt, and whenever sEt we have that:</paragraph><list><list-item label="•">there exists {a mathematical formula}ρ⊆P such that {a mathematical formula}Lρ(Prot(t))=Lρ(Prot(s));</list-item><list-item label="•">if {a mathematical formula}s∼is′ in {a mathematical formula}A then there is a set {a mathematical formula}T′⊆T such that:</list-item><list-item label="•">if {a mathematical formula}t∼it′ in {a mathematical formula}B then there is a set {a mathematical formula}S′⊆S such that:</list-item></list><paragraph>When restricted to public protocols, it is not hard to see that {a mathematical formula}η≈η′⇔Lg(η)=Lg(η′). In general, we have the following result.</paragraph><paragraph label="Theorem 32">For all finite protocol models{a mathematical formula}Aand{a mathematical formula}B: {a mathematical formula}A≡efB⇔A≈B.</paragraph><paragraph label="Proof">⇐: Suppose {a mathematical formula}A≈B. We need to show for any epistemic expectation model {a mathematical formula}M that: {a mathematical formula}M⊗A↔̲oM⊗B. We define a binary relation between {a mathematical formula}M⊗A and {a mathematical formula}M⊗B as {a mathematical formula}(w,s)R(v,t)⇔w=v,sEt and {a mathematical formula}Exp((w,s))=Exp((v,t)). Whenever {a mathematical formula}(w,s)∈M⊗A, {a mathematical formula}(w,t)∈M⊗B for some {a mathematical formula}t∈B. This happens due to the fact that {a mathematical formula}A≈B, and the epistemic relations in each model are reflexive. Thus we have that the definition of R is both sound and total. Now we verify the condition Zig of Definition 11 (the invariance condition is trivial by definition of R). Suppose {a mathematical formula}(w,s)∼i(w′,s′), then {a mathematical formula}w∼iw′ in {a mathematical formula}M and {a mathematical formula}s∼is′ in {a mathematical formula}A. Since sEt, there is a {a mathematical formula}t′ in {a mathematical formula}B such that {a mathematical formula}t∼it′, {a mathematical formula}s′Et′, and {a mathematical formula}Lρ0(Prot(s′))=Lρ0(Prot(t′)), where {a mathematical formula}ρ0=V(w′). Clearly {a mathematical formula}(w′,t′) is in {a mathematical formula}M⊗B and {a mathematical formula}Exp((w′,t′))=Exp((w,s′)). Thus we have that {a mathematical formula}(w,t)∼i(w′,t′) and {a mathematical formula}(w′,s′)R(w′,t′). The condition Zag can be proved in a similar way.⇒: Suppose {a mathematical formula}A≡efB. It is clear that for a universal ignorance model {a mathematical formula}M (cf. the proof of Proposition 24), we have {a mathematical formula}M⊗A↔̲oM⊗B. We define a relation E between the state spaces of {a mathematical formula}A and {a mathematical formula}B as: sEt iff {a mathematical formula}(w,s)↔̲o(w,t) for some w. We can verify that E is a protocol emulation relation. The first (consistency) condition of protocol emulation is immediate according to the invariance condition of observation bisimulation. Now we show the second one. Suppose {a mathematical formula}s∼is′ and sEt. Now consider an arbitrary {a mathematical formula}ρ⊆P such that {a mathematical formula}Lρ(Prot(s′))≠∅. Since {a mathematical formula}M is a universal ignorance model, there is a state {a mathematical formula}w′ in {a mathematical formula}M such that {a mathematical formula}V(w′)=ρ and {a mathematical formula}(w,s)∼i(w′,s′). Since sEt then by definition of E, {a mathematical formula}(w,s)↔̲o(w,t). Thus there is a {a mathematical formula}(v′,t′) in {a mathematical formula}M⊗B such that {a mathematical formula}(w,t)∼i(v′,t′) and {a mathematical formula}(w′,s′)↔̲o(v′,t′); clearly {a mathematical formula}w′ and {a mathematical formula}v′ share the same valuation, thus {a mathematical formula}w′=v′ since {a mathematical formula}M is a universal ignorance model. It follows that {a mathematical formula}t∼it′ and {a mathematical formula}Lρ(Prot(s′))=Lρ(Prot(t′)). Thus for all {a mathematical formula}ρ⊆P such that {a mathematical formula}Lρ(Prot(s′))≠∅ there is a state {a mathematical formula}t′ with {a mathematical formula}t∼it′ in {a mathematical formula}B, such that {a mathematical formula}s′Et′ and {a mathematical formula}Lρ(Prot(s′))=Lρ(Prot(t′)). The third condition can be shown similarly. The emulation relation is total, as we are considering total bisimulation here.  □</paragraph><paragraph>We now extend the framework of POL to provide a DEL-style logical language that can describe the ‘installation’ or ‘change’ of protocols, together with the effect of the observations of agents, based on the current protocol. Note that installing a protocol is different from executing a protocol: Installing a protocol gives the knowledge of the protocol before its execution.</paragraph></section><section label="3.4"><section-title>Epistemic protocol logic</section-title><paragraph>In the language of epistemic protocol logic (EPL), we consider protocol models as primitives in the language, giving a DEL-like language.</paragraph><paragraph label="Definition 33">Language of EPLThe formulas φ of EPL are given by:{a mathematical formula} where {a mathematical formula}p∈P, {a mathematical formula}i∈I, {a mathematical formula}π∈Lobs, and {a mathematical formula}Ae is an epistemic protocol with the designated state e.</paragraph><paragraph>In defining the language we restrict ourselves to finite protocol models. The models for the logic EPL are taken to be the epistemic expectation models {a mathematical formula}M=〈S,∼,V,Exp〉. The truth definition is given as follows:</paragraph><paragraph label="Definition 34">Truth definition for EPLGiven an epistemic expectation model {a mathematical formula}M = {a mathematical formula}〈S,∼,V,Exp〉, a state {a mathematical formula}s∈S, and an EPL-formula φ, the truth conditions of φ at s coincide with POL for the formulas that they have in common. The truth condition for the new formula in EPL is defined as follows:{a mathematical formula}</paragraph><paragraph>Recalling the meaning of the modal product operation, the expression ‘{a mathematical formula}[!Ae]φ’ therefore stands for ‘after installing the new epistemic protocol {a mathematical formula}Ae, the formula φ is true’. As an example, let us give the model of Example 1 from the introduction, the epistemic expectation model induced by the epistemic protocol (modelled on p. 27, call it {a mathematical formula}Ae), and the updated model according to observation a (in the picture, visualized by {a mathematical formula}|a):{a mathematical formula} Recall the original model {a mathematical formula}M:{a mathematical formula} Now we can verify for the actual state s:{a mathematical formula}{a mathematical formula}</paragraph><paragraph>The picture corresponding to Example 2 from the introduction is as follows. Here, {a mathematical formula}Ae′′ is the corresponding epistemic protocol modelled on p. 27:{a mathematical formula}</paragraph><paragraph>Recall the initial model {a mathematical formula}N:{a mathematical formula} Now we can verify for the actual state t:{a mathematical formula}{a mathematical formula}</paragraph></section></section><section label="4"><section-title>Incorporating factual changes</section-title><paragraph label="Definition 35">So far, we have only presented information changing actions, not fact-changing actions: recall that {a mathematical formula}Lg(η) consists of guarded strings with uniform guards only. This may not be so realistic in practice, since many actions used in protocols also change the facts, for example, ‘turn on the light if you see that the light is off’. Factual change can be modelled by assigning to each action a function that changes the valuation of basic propositions (as in [21], [22]). Let us now show how protocols based on fact-changing actions can be incorporated in our setting. Following [21], we first introduce fact-changing actions. Fact-changing actionsA set of fact-changing actions (fc-actions) is a tuple {a mathematical formula}(Σ,ι) such that {a mathematical formula}ι:Σ×P→Bool(P).</paragraph><paragraph>Intuitively, ι captures the post-condition of actions: after executing action {a mathematical formula}a∈Σ, the propositional atom p is assigned the truth value of the proposition {a mathematical formula}ι(a,p). Thus, the new truth value of p is the truth value of {a mathematical formula}ι(a,p) evaluated before executing a. Note that in this paper we restrict {a mathematical formula}ι(a,p) to be Boolean. For example, let p be the proposition denoting ‘the door is closed’ and let a be the action ‘slam the door’. Then slamming the door (a) has a post-condition given by {a mathematical formula}ι(a,p)=⊤. On the other hand, toggling the switch (b) has the post-condition modelled by {a mathematical formula}ι(b,q)=¬q if q expresses that ‘the switch is on’. Clearly, non-fact-changing actions can be seen as {a mathematical formula}(Σ,ι0), where for any {a mathematical formula}a∈Σ, {a mathematical formula}ι0(a) is the identity function.</paragraph><paragraph label="Definition 36">For the ease of reading in proofs, we introduce factual change systems as an alternative way of representing fact-changing actions. In the following, {a mathematical formula}ρ⊨φ means that the valuation represented by ρ, a subset of P, makes the Boolean formula φ true. Factual change systemA Σ-factual change system (fc-system) {a mathematical formula}F is a tuple {a mathematical formula}(Q,r) where {a mathematical formula}Q=P(P) and {a mathematical formula}r:Q×Σ→Q is a function.</paragraph><paragraph>Because r is a deterministic transition function, it can be extended to the domain of {a mathematical formula}Q×Σ⁎ in such a way that {a mathematical formula}r(ρ,a0⋯ak) is the unique state {a mathematical formula}ρ′⊆P of the fc-system that is reachable from {a mathematical formula}ρ⊆P via transitions sequentially labelled by actions {a mathematical formula}a0,…,ak.</paragraph><paragraph>Intuitively, a factual change system explicitly represents the post-conditions of actions that can change the facts on states. We say that a set of fact-changing actions {a mathematical formula}(Σ,ι) is equivalent to a Σ-factual change system {a mathematical formula}(Q,r) if for any {a mathematical formula}a∈Σ and any {a mathematical formula}ρ,ρ′⊆P the following holds:{a mathematical formula}</paragraph><paragraph>As a reminder, for each {a mathematical formula}ρ⊆P, we write {a mathematical formula}φρ as the abbreviation of the characteristic formula (see Definition 17). Now we show that sets of fact-changing actions can be seen as factual change systems and vice versa.</paragraph><paragraph label="Proposition 37"><list><list-item label="(a)">For each set of fc-actions{a mathematical formula}(Σ,ι)there is an equivalent Σ-fc-system.</list-item><list-item label="(b)">For each Σ-fc-system there is an equivalent set of fc-actions{a mathematical formula}(Σ,ι).</list-item></list><paragraph label="Proof">(a) To define the corresponding transition function r in the factual change system, we do the following. For every {a mathematical formula}ρ⊆P and {a mathematical formula}a∈Σ, we define {a mathematical formula}r(ρ,a)=ρ′ if and only if {a mathematical formula}ρ⊨⋀p∈ρ′ι(a,p)∧⋀p∉ρ′¬ι(a,p).(b) For the second part, we can define a set of fact-changing actions {a mathematical formula}(Σ,ι) by letting {a mathematical formula}ι(a,p)=⋁ρ⊆P{φρ|p∈r(ρ,a)}. We need to verify the equivalence condition. Suppose {a mathematical formula}r(ρ1,a)=ρ2, then by the definition of ι, it is clear that {a mathematical formula}ρ1⊨⋀p∈ρ2ι(a,p). Since fc-systems are deterministic, for each {a mathematical formula}p∉ρ2: {a mathematical formula}ρ1∉{ρ|p∈r(ρ,a)}. Therefore for each {a mathematical formula}p∉ρ2: {a mathematical formula}ρ1⊨¬⋁ρ⊆P{φρ|p∈r(ρ,a)}. Thus {a mathematical formula}ρ1⊨⋀p∉ρ2¬ι(a,p).On the other hand, if {a mathematical formula}r(ρ1,a)=ρ3≠ρ2 then there is a proposition {a mathematical formula}p∈P on which {a mathematical formula}ρ2 and {a mathematical formula}ρ3 do not agree. Suppose that {a mathematical formula}p∈ρ3 but {a mathematical formula}p∉ρ2. Since {a mathematical formula}ι(a,p)=⋁ρ⊆P{φρ|p∈r(ρ,a)} then {a mathematical formula}ρ1⊭ι(a,p). Thus {a mathematical formula}ρ1⊭⋀p∈ρ2ι(a,p). Similarly, we can show that if {a mathematical formula}p∈ρ2 but {a mathematical formula}p∉ρ3 then {a mathematical formula}ρ1⊭⋀p∉ρ2¬ι(a,p). Therefore {a mathematical formula}ρ1⊭⋀p∈ρ2ι(a,p)∧⋀p∉ρ2¬ι(a,p).  □</paragraph></paragraph><paragraph>In the sequel, we only work with fc-systems in the proofs. To interpret observation expressions with respect to an fc-system {a mathematical formula}F, we only need to revise Definition 16 of {a mathematical formula}Lg as follows:{a mathematical formula}</paragraph><paragraph>To install protocols with factual change on an epistemic model, we need to compute the state-dependent expectations according to those protocols. However, it is not immediately clear how we can rewrite a protocol into a normal form as in Proposition 18, where the tests only happen at the beginning. To model the updates of protocols with factual change, we first need to prove an analogue of Proposition 18. This will be Proposition 41. To prove this proposition we need techniques for guarded automata developed in [23].</paragraph><paragraph label="Definition 38">Given P, let T be the set {a mathematical formula}22P. Intuitively, {a mathematical formula}X∈T represents a Boolean formula over P. Automata on guarded strings(See [23].) A finite automaton on guarded strings (or a guarded automaton) over a finite set of actions Σ and a finite set of atomic propositions P is a tuple {a mathematical formula}A=(Q,Σ,P,q0,↦,F), where Q is a set of states with the designated start state {a mathematical formula}q0; ↦ is a set of transitions labelled by actions in Σ (action transitions) and sets {a mathematical formula}X∈T (test transitions); F is the set of final states. Aaccepts a finite string w over {a mathematical formula}Σ∪T (notation: {a mathematical formula}w∈LΣ∪T(A)), if it accepts w as a standard finite automaton over label set {a mathematical formula}Σ∪T. The acceptance for guarded strings is defined based on the acceptance of normal strings and the following transformation function G which takes a string over {a mathematical formula}Σ∪T and outputs a set of guarded strings, as follows:{a mathematical formula}{a mathematical formula}{a mathematical formula} We say that Aaccepts a finite guarded string {a mathematical formula}v:ρ0a0ρ1…ak−1ρk over Σ and P, if {a mathematical formula}v∈G(w) for some string {a mathematical formula}w∈LΣ∪T(A). Let {a mathematical formula}Lg(A) be the language of guarded strings accepted by A.</paragraph><paragraph>A guarded automaton is said to be deterministic if it satisfies the following properties (cf. [23]):</paragraph><list><list-item label="•">Each state is either a state that only has outgoing action transitions (action state) or a state that only has outgoing test transitions (test state).</list-item><list-item label="•">The outgoing action transitions are deterministic: for each action state q and each {a mathematical formula}a∈Σ, state q has one and only one a-successor.</list-item><list-item label="•">The outgoing test transitions are deterministic: they are labelled by {a mathematical formula}{{ρ}|ρ⊆P} and for each test state q and each ρ, state q has one and only one {a mathematical formula}{ρ}-successor. Clearly these tests ρ at a test state are logically pairwise exclusive and altogether exhaustive (viewing ρ as the characteristic Boolean formula {a mathematical formula}φρ, see Definition 17).</list-item><list-item label="•">The start state {a mathematical formula}q0 is a test state and all accept states are action states.</list-item><list-item label="•">Each cycle contains at least one action transition.</list-item></list><paragraph label="Theorem 39">A Kleene-like theorem about the relation between guarded automata and guarded regular expressions has been proved in [23]. Here follows a reminder. (See[23].) For each guarded regular expression η overPand Σ there is a deterministic guarded automaton A overPand Σ such that{a mathematical formula}Lg(η)=Lg(A), and vice versa.</paragraph><paragraph label="Proof">Given an fc-system {a mathematical formula}F, we define a translation {a mathematical formula}tF:Lprot→Lprot by replacing each a with {a mathematical formula}∑ρ⊆P{?φρ⋅a⋅?φρ′|ρ→aρ′in F}. It is not hard to see that for each guarded expression η: {a mathematical formula}LgF(η)=Lg(tF(η)). From Theorem 39, we have the following corollary. Given an fc-system{a mathematical formula}F, for each guarded expression η, there is a deterministic guarded automaton A and a deterministic finite automaton{a mathematical formula}A′over the alphabet{a mathematical formula}Σ∪2Psuch that:{a mathematical formula}Consider {a mathematical formula}tF(η). The existence of the deterministic guarded automaton A follows from Theorem 39 directly. By the definition of determinism, {a mathematical formula}L(A) is a set of guarded strings in the shape of {a mathematical formula}{ρ0}a0{ρ1}⋯{ρn−1}an−1{ρn}. Clearly{a mathematical formula} Now we can build the desired deterministic finite automaton {a mathematical formula}A′ over the symbol set {a mathematical formula}Σ∪2P by simply replacing the transition labels {a mathematical formula}{ρ} in A by ρ.  □</paragraph><paragraph>Finally, we are ready to prove an analogue of Proposition 18: there is a normal form of guarded regular expressions with respect to an fc-system {a mathematical formula}F in which tests only appear at the beginning. This is stated formally in the following proposition.</paragraph><paragraph label="Proof">Normal form with respect to {a mathematical formula}FGiven an fc-system{a mathematical formula}F, every η has a normal form{a mathematical formula}for some{a mathematical formula}πρ∈Lobssuch that{a mathematical formula}LgF(η)=LgF(ηF).From Corollary 40, for a given fc-system {a mathematical formula}F and a guarded expression η we have a deterministic automaton A over {a mathematical formula}Σ∪2P such that {a mathematical formula}L(A)=LgF(η). Due to the construction of A, the start state has only outgoing ρ transitions for each {a mathematical formula}ρ⊆P, thus we can separate the automaton that corresponds to the guarded regular expression into {a mathematical formula}|2P| zones. Let {a mathematical formula}qρ be the state that is the ρ-successor of the start state in A; by determinism there is only one such state. Let {a mathematical formula}Aρ be the ϵ-non-deterministic automaton over Σ just like A, but setting {a mathematical formula}qρ as the start state and replacing any label {a mathematical formula}ρ⊆P by ϵ. By Kleeneʼs theorem, there is a regular expression {a mathematical formula}πρ over Σ such that {a mathematical formula}L(πρ)=L(Aρ). We claim the following:</paragraph><paragraph label="Claim">{a mathematical formula}</paragraph><paragraph label="Proof">First suppose that {a mathematical formula}ρa0ρ1⋯ρn−1an−1ρn∈LgF(ρ⋅πρ), then {a mathematical formula}a0…an−1∈L(Aρ). Therefore {a mathematical formula}ρa0ρ1′⋯ρn−1′an−1ρn′∈LgF(η) for some {a mathematical formula}ρ1′…ρn′. Since the fc-system is deterministic, {a mathematical formula}ρi′=ρi for {a mathematical formula}1⩽i⩽n. Thus {a mathematical formula}ρa0ρ1⋯ρn−1an−1ρn∈LgF(η). For the other direction, suppose that {a mathematical formula}ρa0ρ1⋯ρn−1an−1ρn∈LgF(η), then {a mathematical formula}a0…an−1∈L(Aρ)=L(πρ). By determinism of {a mathematical formula}F it is clear that {a mathematical formula}ρa0ρ1⋯ρn−1an−1ρn∈LgF(ρ⋅πρ).From the claim, we can generate the desired normal form for η with respect to a given fc-system {a mathematical formula}F.  □</paragraph><paragraph>Based on Proposition 41, we can define the ‘installation’ of protocols with fact-changing actions on epistemic expectation models, similar to Definition 21. Before we proceed to the definition, note that given {a mathematical formula}ηF=∑ρ⊆P(?φρ⋅πρ), we have that {a mathematical formula}fρ(ηF)=πρ for any {a mathematical formula}ρ⊆P (cf. the definition of {a mathematical formula}fρ before Definition 17). Let us now see how the fact-changing actions affect our knowledge state in this evolving world. To this end we first introduce fact-changing epistemic expectation models and protocol models, {a mathematical formula}MexpF and {a mathematical formula}AF, given by {a mathematical formula}〈Mexp,F〉 and {a mathematical formula}〈A,F〉, where {a mathematical formula}Mexp is an epistemic expectation model, {a mathematical formula}A is a protocol model and {a mathematical formula}F is a factual change system.</paragraph><paragraph label="Definition 42">Protocol update with factual changesGiven a fact-changing epistemic expectation model {a mathematical formula}MexpF=〈S,∼,V,Exp,F〉, and a fact-changing epistemic protocol model {a mathematical formula}AG=〈T,∼,Prot,G〉, we define the product {a mathematical formula}(MexpF⊗AG)=(S′,∼′,V′,Exp′,F′) as follows:</paragraph><list><list-item label="•">{a mathematical formula}S′={(s,t)∈S×T:L(fVM(s)(ProtG(t)))≠∅};</list-item><list-item label="•">{a mathematical formula}(s,t)∼i′(s′,t′) iff {a mathematical formula}s∼is′ in {a mathematical formula}Mexp and {a mathematical formula}t∼it′ in {a mathematical formula}A;</list-item><list-item label="•">{a mathematical formula}V′(s,t)=V(s);</list-item><list-item label="•">{a mathematical formula}Exp′((s,t))=fVM(s)(ProtG(t));</list-item><list-item label="•">{a mathematical formula}F′=G,</list-item></list><paragraph>Accordingly, the truth condition of the new formulas of EPL with respect to these models is changed to the following:{a mathematical formula} where {a mathematical formula}MexpF|w=(S′,∼′,V′,Exp′,F) with {a mathematical formula}S′,∼′,Exp′ defined as before in {a mathematical formula}M|w (cf. Definition 8) and {a mathematical formula}V′(s)=r(V(s),w) where r is the (extended) transition function in {a mathematical formula}F (cf. Definition 36).</paragraph><paragraph label="Example 43">Consider a room where a child is playing with a small plastic seat, and Dora standing outside the room. Before Dora enters, she does not have any idea whether the seat is in an upright position. This is modelled by considering the epistemic model {a mathematical formula}M:{a mathematical formula} Here, p stands for ‘the seat is in an upright position’. Suppose a denotes the action ‘pulling the seat down’ and b denotes the action ‘pulling the seat up’. Then what the child is doing can be described by the protocol model {a mathematical formula}AF:{a mathematical formula} Here, both a and b are fact-changing actions: {a mathematical formula}ι(a,p)=¬p, and {a mathematical formula}ι(b,p)=¬p. We note that any epistemic model is an epistemic expectation model which in turn can be considered as a fact-changing epistemic expectation model where ι is the identity mapping in the second argument. The updated product model will be of the form:{a mathematical formula} At the actual state s of the epistemic model {a mathematical formula}M, we have:{a mathematical formula} That is, after entering the room, upon observing action a, Dora will come to know that the seat is not in an upright position.</paragraph><paragraph>In the following section, we describe a more detailed application of factual change systems.</paragraph></section><section label="5"><section-title>Application: one hundred prisoners and a lightbulb</section-title><paragraph>In this section we model within our framework the ‘100 prisoners and a lightbulb’ puzzle [24], [25] from the novel perspective of the guard in the puzzle. The following description is based on [24]. A group of 100 prisoners, all together in the prison dining area, are told that they will be all put in isolation cells and then will be interrogated one by one in a room containing a light with an on/off switch. The prisoners may communicate with one another by toggling the light-switch (and that is the only way in which they can communicate). All the prisoners know that the light is initially switched off. There is no fixed order of interrogation, or fixed interval between interrogations, and at any stage every prisoner will be interrogated again sometime in the future. When interrogated, a prisoner can either do nothing, or toggle the light-switch, or announce that all prisoners have been interrogated. If that announcement is true, the prisoners will (all) be set free, but if it is false, they will all be executed. While still in the dining room, and before the prisoners go to their isolation cells, can the prisoners agree on a protocol that will set them free?</paragraph><paragraph>Two protocols to solve the puzzle are as follows [24]. We move to the perspective of {a mathematical formula}n+1 prisoners, where {a mathematical formula}n⩾2. (The case {a mathematical formula}n=1 is a tricky boundary case which requires special treatment. For simplicity we leave it out in this paper.) Protocol 1 The {a mathematical formula}n+1 prisoners appoint one amongst them as the leader. The remaining n prisoners are the followers. All n followers turn the light on (i.e., toggle the switch) the first time they enter the room when the light is off; on other occasions, they do not toggle the switch. The leader turns off the light (toggles the switch) the first n times that the light is on when he enters the interrogation room; on other occasions, he does not toggle the switch. After turning the light off for the {a mathematical formula}nth time, the leader announces that all prisoners have been interrogated.Protocol 2 The leader does exactly as in Protocol 1. The followers do all they do in Protocol 1, but also do more. Each follower counts the number of times the state of the light has changed from off to on according to his own observation (see the explanation below). If a follower has observed n such changes, he announces that all prisoners have been interrogated.</paragraph><paragraph>We say that a follower observes a change of the state of light from off to on, if the light was off in his last interrogation but the light is on in his current interrogation. Moreover, there are also two special cases in the counting of such changes:</paragraph><list><list-item label="1.">Since initially the light is switched off, when a follower enters the room for the first time and observes that the light is on, it counts as an off-on change;</list-item><list-item label="2.">When a follower is about to toggle the light from off to on according to the protocol, it also counts as an off-on change.</list-item></list><paragraph> The above explanation will be made more precise in the formalization of Protocol 2 below.</paragraph><paragraph>Note that the interest of Protocol 2 is that followers may indeed announce that all prisoners have been interrogated before the leader does. However, for more than a few prisoners the likelihood of this is very low (see [24]).</paragraph><section label="5.1"><section-title>A formalization of the puzzle</section-title><paragraph>We first formalize the protocols in our framework. The leader is a prisoner that we name 0, and the followers are prisoners named {a mathematical formula}1,…,n (with {a mathematical formula}n⩾2). The set {a mathematical formula}ΣLB of possible actions for the {a mathematical formula}n+1 agents/prisoners {a mathematical formula}i=0,…,n is as follows:{a mathematical formula} The set {a mathematical formula}PLB of relevant atomic propositions is as follows:{a mathematical formula} The post-conditions are given by the following table (where the remaining post-conditions are the identity).{a mathematical formula} Post-condition (2) expresses that when i leaves the room he memorizes the situation of the light; post-condition (5) allows leader 0 to count the number of times that he toggled the switch; post-condition (6) lets i count the number of off-on changes. By Proposition 37, the above fact-changing actions {a mathematical formula}(ΣLB,ι) can be turned into an equivalent factual change system {a mathematical formula}FLB.</paragraph><paragraph>We are now ready to express the protocols in our protocol language.</paragraph><list><list-item>{a mathematical formula}η1=(?¬fin⋅∑i=0n(ei⋅θi⋅xi))⁎, where:</list-item><list-item>{a mathematical formula}η2=(?¬fin⋅∑i=0n(ei⋅θi′⋅xi))⁎, where:</list-item></list><paragraph>It is not hard to see that the formulas {a mathematical formula}θi are almost the literal translations of the specifications of Protocol 1. For {a mathematical formula}i&gt;0, {a mathematical formula}θi′ only adds the extra announcement action based on {a mathematical formula}θi. Note that {a mathematical formula}θi,θi′ are deterministic in the sense that there is always a unique way to proceed, due to the mutually exclusive preconditions of the actions.</paragraph></section><section label="5.2"><section-title>Some example runs of the protocols</section-title><paragraph>The initial situation can be represented as a singleton expectation model {a mathematical formula}M,s with the universal protocol {a mathematical formula}ΣLB⁎ and the valuation assigning ⊤ only to {a mathematical formula}pi0 for all {a mathematical formula}i⩾0.</paragraph><paragraph label="Example 44">Assume that there is a set of three prisoners {a mathematical formula}{0,1,2} and that the sequence of interrogations is 1020. We show an execution of Protocol 1 (formalized as {a mathematical formula}η1) on {a mathematical formula}M. Note that the followers do not need to count in Protocol 1, thus we omit all the {a mathematical formula}pij, {a mathematical formula}mi for {a mathematical formula}i&gt;0:{a mathematical formula} In the above table, we combine several actions into a sequence if after the first action, the valuation of the relevant propositions stays the same throughout the whole sequence; for example, after {a mathematical formula}t1, the valuation of the propositions in concern is not changed by {a mathematical formula}x1 and {a mathematical formula}e0. As the above table shows, 1 first turns the light on, 0 turns the light off, 2 turns the light on again, and finally 0 turns the light off and announces that everybody has been interrogated. Let {a mathematical formula}η1FLB be the singleton protocol model with respect to {a mathematical formula}η1 and {a mathematical formula}FLB. Now we can verify the following:{a mathematical formula} Formally, one needs first to convert {a mathematical formula}η1 with respect to {a mathematical formula}FLB into the corresponding normal form using the guarded automata construction of Proposition 41, and then construct the epistemic expectation model {a mathematical formula}M⊗η1FLB according to Definition 42, and finally check the truth value of the remaining {a mathematical formula}[!η1FLB]-free formula on this model. For details of similar, rather involved, computations in the setting of other examples, see [4, p. 47].</paragraph><paragraph label="Example 45">Still assuming that there are three prisoners, we now look at the interrogation sequence 1202 under Protocol 2. In the following table, the irrelevant propositions are omitted:{a mathematical formula}Follower 1 turns the light on; then follower 2 finds the light on and does not toggle the switch but counts 1; subsequently, leader 0 turns the light off; and finally follower 2 finds the light off, counts to 2 since he is ready to toggle the light, and then announces that everybody has been interrogated. Note that in the above table, {a mathematical formula}m2 plays an important role. We can verify:{a mathematical formula}</paragraph></section><section label="5.3"><section-title>Correctness of the two protocols</section-title><paragraph>To check the correctness of the protocols, we need to show that if someone makes an announcement then each of the prisoners has been interrogated in the room at least once. Instead of this condition, we will actually check a stronger one, namely: If someone, say agent i, makes an announcement ({a mathematical formula}ai), then all the other prisoners {a mathematical formula}j≠i have toggled the switch ({a mathematical formula}qj). Note that an agent can only make an announcement if he is in the room ({a mathematical formula}ei always precedes {a mathematical formula}ai in {a mathematical formula}η1 and {a mathematical formula}η2), thus it suffices to check {a mathematical formula}qj for all {a mathematical formula}j≠i. The correctness of Protocol 2 relies on the assumption that {a mathematical formula}n⩾2 ensures that the leader has toggled the light at least once before any follower can make the announcement. Formally, we can verify the following:{a mathematical formula}</paragraph></section><section label="5.4"><section-title>What does the guard know?</section-title><paragraph>We can verify that the guard will always know when the prisoners will make the announcements, given that the protocol is public (recall that g is the guard). Let {a mathematical formula}φi=(〈ai〉⊤→Kg〈ai〉⊤)∧(¬〈ai〉⊤→Kg¬〈ai〉⊤). Now the following is straightforward, since there is only one world in the model throughout the evaluation:{a mathematical formula}</paragraph><paragraph>To confuse the guard, the prisoners may truthfully declare that they have agreed to use one of the two protocols, without telling the guard which one. Here we only model the uncertainty of the guard, not of the prisoners, by the following protocol model {a mathematical formula}AFLB:{a mathematical formula}</paragraph><paragraph>After updating {a mathematical formula}AFLB on {a mathematical formula}M, the new model {a mathematical formula}M′=M⊗AFLB will have two g-indistinguishable states {a mathematical formula}(s,u) and {a mathematical formula}(s,v) with different expectations but the same valuation. For any {a mathematical formula}w∈ΣLB⁎, it is clear that the states in {a mathematical formula}M′|w, if such states exist, have the same valuation, since the effect of executing w is deterministic. Therefore, the guard does not have any uncertainty about atomic propositions in {a mathematical formula}PLB:{a mathematical formula}</paragraph><paragraph>On the other hand, an observation may be consistent with one state but not with the other. In particular, a sequence of actions ending by an announcement {a mathematical formula}ai may be possible on {a mathematical formula}(s,v) but not possible on {a mathematical formula}(s,u) since Protocol 2 (formalized as {a mathematical formula}η2) allows more prisoners to make the announcement, as was seen, for example, in the interrogation sequence 1202 in Example 45:{a mathematical formula}</paragraph><paragraph>The above shows that the guard cannot always predict the announcements. On the other hand, he might find out which protocol the prisoners are running through his observations. The following formula says: If a follower does not announce that all prisoners have been interrogated in a situation in which he could do so according to Protocol 2, then the guard can eliminate the possibility that the prisoners are using Protocol 2 and make correct predictions of the future announcement:{a mathematical formula}</paragraph><paragraph>Our language is very handy in verifying such complicated properties.</paragraph></section></section><section label="6"><section-title>Related work</section-title><paragraph>There are important differences between our work and the standard DEL approach with action models [13]. This summarizes those differences:</paragraph><list><list-item label="•">In our setting the meaning of an action is not fixed. It is given by the expectations that come from protocols. For example, the way you interpret a fire depends on the protocol. It can be a warning or a welcome. There is no fixed precondition attached to the actions as in DEL.</list-item><list-item label="•">The π in the {a mathematical formula}[π] modalities in the language of POL are regular sets of action sequences. In DEL, in contrast, arbitrary finite action sequences (the Kleene ⁎ operator) are not commonly considered.</list-item><list-item label="•">Our protocol models look like action models in DEL but instead of preconditions we have protocols on each state, and the update with such a model on an expectation model computes the expectations according to the protocols on each possible world of the expectation model, in contrast to the precondition matching in the standard DEL updates. Moreover, we introduce a notion of equivalence between protocol models based on the ideas of action emulation [20].</list-item><list-item label="•">Protocols in our setting are syntactic objects that are part of the logical language. In DEL, protocols are typically sets of sequences of DEL-actions.</list-item></list><paragraph>We now continue with a more detailed comparison between our approach and DEL. In [4], [15], Wang introduces a logical framework for the dynamics of protocols and knowledge. In his framework, public protocols can be installed and changed, and the knowledge of agents is updated by matching expectations from protocols with observations. A similar update mechanism in the context of message passing can be found in the recent work [26] inspired by [2]. We also follow this type of ‘matching updates’ in this work, but deviate from [4], [15] by using epistemic models with explicit expectations, which we call epistemic expectation models, instead of standard epistemic models. Moreover, we use ‘hidden protocols’ on top of public ones.</paragraph><paragraph>Our epistemic expectation models may look similar to the models used in the work by Hoshi and colleagues [5], [3], where each epistemic state is equipped with an extensional DEL-protocol, namely a set of sequences of pointed action models. However, in the current article, a protocol is simply a syntactic expression based on tests and atomic actions that have neither inner structures nor fixed meanings. By using the protocol specification language, we can separate the protocols from epistemic models, and discuss the ‘installation’ of possibly uncertain protocol information on the epistemic models. In particular, we can formally discuss which kinds of expectations come from which kinds of protocols. Such a formal account of protocols also facilitates the study of the equivalence between protocols. We incorporate potentially iterative program-like observations, which also distinguishes us from the single-step updates in DEL-based protocol logics [26], [5], [3], where the iteration of updates often introduces undecidability, as observed in [27].</paragraph><paragraph>In [14], Pacuit and Simon present a PDL-style logic for reasoning about protocols under imperfect information. Their focus is on the executability and achievable outcomes of branching protocols under the uncertainties of the game states. In contrast, uncertainties may have two sources in the current paper: uncertainties about the real world and uncertainties about the protocols. The latter kind of uncertainty creates novel issues not covered by [14]. Executability of protocols also plays a role in our work but in a simpler way because of the linear interpretation of protocols, compared to the much more refined tree interpretation of protocols in [14]. Instead of executability, we focus more on the update effects of observations based on protocol information. In fact, the executors and the observers of the protocol can well be different. The protocol may be executed by external agents which are not modeled in the framework.</paragraph></section><section label="7"><section-title>Conclusion and future work</section-title><paragraph>The information that actions carry may depend on agentsʼ knowledge of protocols. In this paper we studied cases where protocols are not commonly known and proposed a semantics-driven logical framework for updating knowledge by observations based on epistemic protocols. We have left a complexity analysis, for example, in line of [4], for the future. Although our semantics-driven logics POL and EPL are ‘dynamic epistemic’ in spirit, the usual reduction-based completeness proof for DEL-like logics does not apply, since the dynamic operators {a mathematical formula}[π] in POL cannot be eliminated. Complete axiomatizations of POL and EPL demand new techniques, pioneered in [28], [29]. We have partial results but we leave a systematic study to a future occasion. Let us consider various other extensions of our work.</paragraph><paragraph>We only used Boolean tests in the language {a mathematical formula}Lprot. A more expressive protocol language includes epistemic tests. An example of such a protocol would be {a mathematical formula}(?¬Kp⋅(a+b))⁎⋅(?Kp⋅c): as long as you do not know p, keep choosing an a or b action, until you get to know p, and then do c. As observed in [30], knowledge-based protocols are much more involved than fact-based protocols. Defining the interpretation and executability of such protocols is a challenge, because checking epistemic formulas is non-local. Also, the introduction of knowledge tests may make the satisfiability problem of the logic undecidable. For example, the observations may easily encode iterated public announcement, which is known as a source of undecidability in such logics [27]. On the positive side, by including more expressive tests we expect better matching between epistemic expectation models and epistemic protocols (cf. Theorem 29).</paragraph><paragraph>Another extension is to consider less radical update mechanisms for installing new protocols. In our current approach, when installing a new protocol, we simply ignore and overwrite the old expected observations completely. Consider a singleton observation epistemic model with observation {a mathematical formula}a+c. Now, when updating with the protocol {a mathematical formula}a+b we simply replace {a mathematical formula}a+c by {a mathematical formula}a+b. Instead, we could integrate {a mathematical formula}a+c with {a mathematical formula}a+b, somehow. For example, such a ‘non-radical’ protocol update with {a mathematical formula}a+b could result in b (intersected refinement), or in {a mathematical formula}(b+c)⋅(a+b) (concatenation), or in {a mathematical formula}(b+c)+(a+b) (choice), and so on. See [15] for a discussion. Finally, we could relax the assumption of public observation, for example, some actions might not be observable to certain agents.</paragraph><paragraph>It would also be interesting to relax the underlying logic and to use KD45, modeling belief, instead of S5, modeling knowledge. For example, in the models of protocol updates for the story of Example 1 of the introduction (see p. 27), it would fit more naturally with the story if the link for Ann between the alternatives in the epistemic protocol model were uni-directional only, namely from {a mathematical formula}?g⋅a+?¬g⋅b to {a mathematical formula}a+b, plus a Jane-loop from {a mathematical formula}?g⋅a+?¬g⋅b to itself and Jane- and Ann-loops from {a mathematical formula}a+b to itself, as follows.{a mathematical formula}</paragraph><paragraph>This would model installing the protocol wherein Anne is unaware of the gay interpretation.</paragraph><paragraph>Currently, the model on p. 27 installs the possibly later observed information that Ann is uncertain whether the statement is to be interpreted as ‘Kate is gay’ or not, but she considers the option. By contrast, in the actual story, Jane will only interpret a as a sure sign of ‘Kate is gay’ and b as a sign of ‘Kate is not gay’. We would rather be able to model that Jane considers both the ‘Kate is gay’ and the ‘no double meaning’ interpretation of a and b, corresponding to Annʼs stance in the current model, whereas Ann only considers the ‘no double meaning’ interpretation and believes that Jane does so too.</paragraph><paragraph>The subject of hidden protocols is also interesting from the point of view of language pragmatics. Speakers who intend to convey information to only some of their listeners in such a way that others will not understand what is going on, are deliberately acting against some of Griceʼs maxims of cooperative conversation [31]. Forms of indirect or uncooperative communication, such as veiled bribes and threats, have already been investigated from the perspective of pragmatics and cognitive science, relating them also to aspects like lack of common knowledge [32], [33], [34], [35]. Our analysis of hidden protocols in this paper, by distinguishing between expected observations and actions, is more fine-grained than the changes in ‘standard’ dynamic epistemic logic, but could benefit from taking such Gricean aspects into account. Thus, in addition to observational powers of the agents, also their assertive powers may be modeled. Finally, it would be interesting to investigate the role of the interlocutorsʼ goals and intentions when they utter a veiled speech act that is part of a hidden protocol (cf. [36], [37], [38], [39]).</paragraph><section-title>Acknowledgements</section-title></section></content><acknowledgements><paragraph>Hans van Ditmarsch is also affiliated to IMSc (Institute of Mathematical Sciences, Chennai, India), as associated researcher. Part of this research was carried out by Hans van Ditmarsch and Yanjing Wang during their joint stays at the IMSc. Hans van Ditmarsch thanks the Netherlands Organization for Scientific Research (NWO) for a visiting grant 040.11.177 to Rineke Verbrugge, University of Groningen, of which the conference precursor [16] of this publication can be seen as an outcome. Hans van Ditmarsch also acknowledges support from ERC starting grant EPS 313360; this work has also been partially supported by the European Union Seventh Framework Programme under grant agreement no. 295261 (MEALS). Sujata Ghosh acknowledges NWO research grant 600.065.120.08N-201 and Rineke Verbrugge acknowledges NWO research grants 600.065.120.08N-201 and Vici grant NWO 227-80-001, both for her own research and for being able to invite Hans van Ditmarsch, Sujata Ghosh and Yanjing Wang as visitors to Groningen to cooperate on this extended article. Yanjing Wang thanks the National Social Science Foundation of China for the research grant 11CZX054 which also supports this work. He also acknowledges INSA-JRD TATA Fellowship which enabled him to visit Indian Statistical Institute (ISI), Chennai and helped in preparing the final version. The authors would like to thank the anonymous reviewers and the editor for their helpful comments.</paragraph></acknowledgements><references><reference label="[1]"><authors>R. Fagin,J.Y. Halpern,M.Y. Vardi,Y. Moses</authors><title>Reasoning about Knowledge</title><host>(1995)MIT PressCambridge, MA</host></reference><reference label="[2]"><authors>R. Parikh,R. Ramanujam</authors><title>A knowledge based semantics of messages</title><host>J. Log. Lang. Inf.12 (2003) pp.453-467</host></reference><reference label="[3]"><authors>J. van Benthem,J. Gerbrandy,T. Hoshi,E. Pacuit</authors><title>Merging frameworks for interaction</title><host>J. Philos. Log.38 (2009) pp.491-526</host></reference><reference label="[4]">Y. WangEpistemic modelling and protocol dynamicsPh.D. thesis<host>(2010)University of Amsterdam</host></reference><reference label="[5]">T. HoshiEpistemic dynamics and protocol informationPh.D. thesis<host>(2009)Stanford University</host></reference><reference label="[6]"><authors>Y. Zhang,Y. Zhou</authors><title>Knowledge forgetting: Properties and applications</title><host>Artif. Intell.173 (2009) pp.1525-1537</host></reference><reference label="[7]"><authors>F. Belardinelli,A. Lomuscio</authors><title>Quantified epistemic logics for reasoning about knowledge in multi-agent systems</title><host>Artif. Intell.173 (2009) pp.982-1013</host></reference><reference label="[8]"><authors>J. Halpern,Y. Moses</authors><title>A guide to completeness and complexity for modal logics of knowledge and belief</title><host>Artif. Intell.54 (1992) pp.319-379</host></reference><reference label="[9]"><authors>E. Davis</authors><title>Knowledge and communication: A first-order theory</title><host>Artif. Intell.166 (2005) pp.81-139</host></reference><reference label="[10]"><authors>S. Singh</authors><title>The Code Book: The Evolution of Secrecy from Mary, Queen of Scots, to Quantum Cryptography</title><host>(1999)DoubledayNew York, NY, USA</host></reference><reference label="[11]">A. van Kooten Niekerk, S. Wijmer, Verkeerde Vriendschap: Lesbisch Leven in de Jaren 1920–1960, Sara, Amsterdam, 1985.</reference><reference label="[12]"><authors>A. Baltag</authors><title>A logic for suspicious players: Epistemic actions and belief-updates in games</title><host>Bull. Econ. Res.54 (2002) pp.1-45</host></reference><reference label="[13]"><authors>H. van Ditmarsch,W. van der Hoek,B. Kooi</authors><title>Dynamic Epistemic Logic</title><host>Synthese Libraryvol. 337 (2007)SpringerBerlin</host></reference><reference label="[14]"><authors>E. Pacuit,S. Simon</authors><title>Reasoning with protocols under imperfect information</title><host>Rev. Symb. Log.4 (2011) pp.412-444</host></reference><reference label="[15]"><authors>Y. Wang</authors><title>Reasoning about protocol change and knowledge</title><host>Proceedings of the 4th Indian Conference on Logic and its Applications (ICLA 2011)LNAIvol. 6521 (2010)SpringerBerlin pp.189-203</host></reference><reference label="[16]"><authors>H. van Ditmarsch,S. Ghosh,R. Verbrugge,Y. Wang</authors><title>Hidden protocols</title><host>K.R. AptProceedings of the 13th Conference on Theoretical Aspects of Rationality and Knowledge (TARK-2011)(2011)ACM pp.65-74</host></reference><reference label="[17]"><authors>J.A. Brzozowski</authors><title>Derivatives of regular expressions</title><host>J. ACM11 (1964) pp.481-494</host></reference><reference label="[18]"><authors>J.H. Conway</authors><title>Regular Algebra and Finite Machines</title><host>(1971)Chapman and HallLondon</host></reference><reference label="[19]"><authors>J. van Eijck,J. Ruan,T. Sadzik</authors><title>Action emulation</title><host>Synthese185 (2012) pp.131-151</host></reference><reference label="[20]"><authors>J. van Eijck,F. Sietsma</authors><title>Action emulation between canonical models</title><host>Proceedings of Conference on Logic and the Foundations of Game and Decision Theory(2012)</host></reference><reference label="[21]"><authors>J. van Benthem,J. van Eijck,B. Kooi</authors><title>Logics of communication and change</title><host>Inf. Comput.204 (2006) pp.1620-1662</host></reference><reference label="[22]"><authors>J. van Eijck</authors><title>Perception and change in update logic</title><host>J. van EijckR. VerbruggeGames, Actions and Social SoftwareTexts in Logic and Games (FOLLI Subseries of LNCS)vol. 7010 (2011)Springer-VerlagBerlin pp.119-140</host></reference><reference label="[23]">D. KozenAutomata on guarded strings and applicationsTechnical Report<host>(2001)Cornell UniversityIthaca, NY, USA</host></reference><reference label="[24]"><authors>H. van Ditmarsch,J. van Eijck,W. Wu</authors><title>Verifying one hundred prisoners and a lightbulb</title><host>J. Appl. Non-Class. Log.20 (2010) pp.173-191</host></reference><reference label="[25]"><authors>H. van Ditmarsch,J. van Eijck,W. Wu</authors><title>One hundred prisoners and a lightbulb – logic and computation</title><host>F. LinU. SattlerM. TruszczynskiKR(2010)AAAI Press pp.90-100</host></reference><reference label="[26]"><authors>B. Rodenhäuser</authors><title>A logic for extensional protocols</title><host>J. Appl. Non-Class. Log.21 (2011) pp.477-502</host></reference><reference label="[27]"><authors>J.S. Miller,L.S. Moss</authors><title>The undecidability of iterated modal relativization</title><host>Stud. Log.79 (2005) pp.373-407</host></reference><reference label="[28]">Y. Wang,Q. CaoOn axiomatizations of public announcement logicSynthese (2013)Online first<host>http://dx.doi.org/10.1007/s11229-012-0233-5</host></reference><reference label="[29]"><authors>Y. Wang,G. Aucher</authors><title>An alternative axiomatization of DEL and its applications</title><host>Proc. IJCAI(2013) pp.1147-1154</host></reference><reference label="[30]"><authors>R. Fagin,J.Y. Halpern,Y. Moses,M.Y. Vardi</authors><title>Knowledge-based programs</title><host>Distrib. Comput.10 (1997) pp.199-225</host></reference><reference label="[31]"><authors>H.P. Grice</authors><title>Logic and conversation</title><host>P. ColeJ.L. MorganSyntax and Semanticsvol. 3 (1975)Academic PressNew York pp.41-59</host></reference><reference label="[32]"><authors>H. Clark</authors><title>Using Language</title><host>(1996)Cambridge University PressCambridge</host></reference><reference label="[33]">R. Verbrugge,L. MolLearning to apply theory of mindJ. Log. Lang. Inf.17 (2008) pp.489-511Special issue on formal models for real people, edited by M. Counihan</reference><reference label="[34]"><authors>S. Pinker,M. Nowak,J. Lee</authors><title>The logic of indirect speech</title><host>Bull. Econ. Res.54 (2002) pp.1-45</host></reference><reference label="[35]"><authors>H. van Ditmarsch,J. van Eijck,R. Verbrugge</authors><title>Common knowledge and common belief</title><host>J. van EijckR. VerbruggeDiscourses on Social SoftwareTexts in Games and Logicvol. 5 (2009)Amsterdam University PressAmsterdam pp.99-122</host></reference><reference label="[36]"><authors>M. Bratman</authors><title>Intention, Plans, and Practical Reason</title><host>(1987)Harvard University PressCambridge, MA</host></reference><reference label="[37]"><authors>A. Rao,M. Georgeff</authors><title>Modeling rational agents within a BDI-architecture</title><host>R. FikesE. SandewallProceedings of the Second Conference on Knowledge Representation and Reasoning(1991)Morgan Kaufman pp.473-484</host></reference><reference label="[38]"><authors>B. Grosz,C. Sidner</authors><title>Plans for discourse</title><host>P. CohenJ. MorganM. PollackIntentions in Communication(1990)MIT PressCambridge, MA pp.417-444</host></reference><reference label="[39]"><authors>F. Dignum,B. Dunin-Kȩplicz,R. Verbrugge</authors><title>Creating collective intention through dialogue</title><host>Log. J. IGPL9 (2001) pp.145-158</host></reference></references><footnote><note-para label="1">This example has been inspired by the interviews in [11], from which it appears that in 1950s Amsterdam, ‘musical’ was indeed a code term for ‘gay’, known almost exclusively by gay people. The additional mention of singer Kathleen Ferrier strengthened this ‘gay’ hint. Among gay women, Ferrierʼs low contralto voice, for example in her performance as Orfeo in Gluckʼs Orfeo ed Euridice, was widely popular.</note-para></footnote></root>