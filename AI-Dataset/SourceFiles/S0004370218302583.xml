<?xml version="1.0" encoding="UTF-8"?><root><url>https://www.sciencedirect.com/science/article/pii//S0004370218302583</url><title>Fixing balanced knockout and double elimination tournaments</title><authors>Haris Aziz,Serge Gaspers,Simon Mackenzie,Nicholas Mattei,Paul Stursberg,Toby Walsh</authors><abstract>Balanced knockout tournaments are one of the most common formats for sports competitions, and are also used in elections and decision-making. We consider the computational problem of finding the optimal draw for a particular player in such a tournament. The problem has generated considerable research within AI in recent years. We prove that checking whether there exists a draw in which a player wins is NP-complete, thereby settling an outstanding open problem. Our main result has a number of interesting implications on related counting and approximation problems. We present a memoization-based algorithm for the problem that is faster than previous approaches. Moreover, we highlight two natural cases that can be solved in polynomial time. All of our results also hold for the more general problem of counting the number of draws in which a given player is the winner. Finally, we show that our main NP-completeness result extends to a variant of balanced knockout tournaments called double-elimination tournaments.</abstract><keywords>Knockout tournaments;Seedings of a tournament;Computational complexity</keywords><content><section label="1"><section-title>Introduction</section-title><paragraph>Balanced knockout tournaments are one of the most widely-used formats for sports competitions [7], [10], [13]. A prominent example is the Wimbledon Men's Singles tennis tournament in which 128 players enter the tournament and the player who wins seven consecutive matches right from the first round to the final wins the tournament. The format is also used in certain elimination style election and decision making schemes and has received considerable interest in the field of artificial intelligence [12], [16], [17], [23], [34], [36], [37], [27], [1] as well as social sciences [5], [21], [22], [25], [33]. Knockout tournaments which are balanced are of particular interest, as they are considered to be fair [20] and allow a large number of matches to be played in parallel.</paragraph><paragraph>Consider the setting in which there is a set of players {a mathematical formula}N=[n] (we use the notation {a mathematical formula}[n]:={1,…,n}) where {a mathematical formula}n=2c for some integer c.{sup:1} Given N, an ordered balanced knockout tournament{a mathematical formula}T(N,π) is defined as a balanced binary tree with n leaf nodes where the seedingπ specifies the labeling of the leaf nodes with respect to N. All ordered balanced knockout tournaments that are isomorphic to each other (with respect to the labeling of the leaf nodes) are said to have the same draw. They are represented by a single (unordered) balanced knockout tournament (BKT ){a mathematical formula}T(N,σ) where σ denotes the draw. The set of all draws is denoted by Σ. Whereas the total number of seedings is n!, the number of draws is {a mathematical formula}n!2n−1 as all pairwise matchups in the leaf nodes are the same if adjacent elements of the seeding are swapped, but even this grows very rapidly. For a tournament like Wimbledon, {a mathematical formula}n=128 and the number of distinct draws is {a mathematical formula}≈2.2665⋅10177. This is significantly more than the number of atoms in the universe, or even a googol.</paragraph><paragraph>A BKT {a mathematical formula}T(N,σ) is conducted in the following fashion. Players that correspond to sibling leaf nodes play a match against each other. The winner of the match proceeds up the tree to the next round. The winner of{a mathematical formula}T(N,σ) is the player who reaches the root node. We are given a pairwise comparison matrixP such that {a mathematical formula}Pij∈[0,1] denotes the probability of player i beating player j in a pairwise elimination match and {a mathematical formula}0≤Pij=1−Pji≤1. We call Pdeterministic if {a mathematical formula}Pij∈{0,1} for all players {a mathematical formula}i,j∈N. In this case, we say that player ibeats player j if {a mathematical formula}Pij=1. Given N, P and a draw σ, each player {a mathematical formula}i∈N has a certain probability {a mathematical formula}wp(i,N,P,σ) of being the winner of {a mathematical formula}T(N,σ). This probability can be computed in time {a mathematical formula}O(n2) via a recursive formulation [36]. We denote by {a mathematical formula}mwp(i,N,P):=maxσ∈Σ⁡(wp(i,N,P,σ)) the maximum possible winning probability of i in {a mathematical formula}T(N,σ) taken over all draws {a mathematical formula}σ∈Σ.</paragraph><paragraph>We can now define the Probabilistic Tournament Fixing Problem (PTFP) in which the probability of each player beating another player is known and the goal is to find a draw that maximizes the probability of a certain player winning the BKT.</paragraph><paragraph>Probabilistic Tournament Fixing Problem (PTFP)</paragraph><paragraph>Instance: Player set N, pairwise comparison matrix P, a distinguished player {a mathematical formula}i⁎∈N, and target probability {a mathematical formula}q∈[0,1].</paragraph><paragraph>Question: Does there exist a draw σ for the player set N for which the probability of {a mathematical formula}i⁎ winning {a mathematical formula}T(N,σ) is at least q?</paragraph><paragraph>PTFP was proposed by Vu et al. [36] and has been studied in numerous papers (see e.g., [29], [30], [31]). It is a well-motivated problem in sports analytics [28]. PTFP has been shown to be NP-hard for various restrictions, including the case where the entries of P are restricted to {a mathematical formula}{0,12,1}[36] and the case where the matrix P is deterministic and certain matches are not allowed [34].</paragraph><paragraph>Nevertheless, the computational complexity of a particularly natural and interesting special case, the Tournament Fixing Problem (TFP), has remained a major open question. In the TFP, the matrix P is deterministic and all matches are allowed. The winner of each match is deterministically known beforehand and the question is whether there exists a draw for which a given player wins in the corresponding BKT.</paragraph><paragraph>Tournament Fixing Problem (TFP)</paragraph><paragraph>Instance: Player set N, deterministic pairwise comparison matrix P, and a distinguished player {a mathematical formula}i⁎∈N.</paragraph><paragraph>Question: Does there exist a draw σ for the player set N for which {a mathematical formula}i⁎ is the winner of {a mathematical formula}T(N,σ)?</paragraph><paragraph>TFP is equivalent to checking whether there exists a seeding π for which {a mathematical formula}i⁎ is the winner of {a mathematical formula}T(N,π). We note that TFP is a special case of the problem with the same name as defined in Vassilevska Williams [34], where there can be additional constraints by which certain matches are disallowed. TFP is also a special case of #TFP — the problem of counting the number of draws for which a given player is the winner. This count can be used to compute the probability of a player winning in a draw chosen uniformly at random. It can also be interpreted as the relative strength of the player.</paragraph><paragraph>Contributions  We first settle the computational complexity of TFP by showing that it is NP-complete. The question was explicitly stated as an open problem a number of times [12], [19], [35], [26], [29], [30], [31], [34], [36], [37]. As a corollary, we show that unless {a mathematical formula}P=NP, there exists no polynomial-time approximation algorithm for computing the maximal winning probability of a player. This inapproximability result provides additional motivation for the line of work in which heuristic algorithms have been proposed for PTFP [37]. Another corollary is that there exists no fully polynomial time randomized approximation scheme (FPRAS) for counting the number of draws for which a player is the winner.</paragraph><paragraph>In view of these intractability results, we identify two natural cases for which even #TFP (and hence also TFP) can be solved in polynomial time. In the first case, the players can be divided into a constant number of player types. This setting appeals to the scenario where players can be divided into groups based on similar intrinsic ability. In the second case, there is a linear ordering on the ability of players with a constant number of exceptions where a player with lower ability beats a player with higher ability.{sup:2} Finally, we provide an exact memoization-based algorithm to solve #TFP that is faster than known exact approaches to solve the problem: it runs in time {a mathematical formula}O(2.8285n) and uses space {a mathematical formula}O(1.7548n). If only polynomial space is available, the running time becomes {a mathematical formula}4n+o(n), and we give a range of possible time-space trade-offs.</paragraph><paragraph>Finally, we consider double-elimination tournaments which are a variant of knockout tournaments in which the losers get a second chance to win the overall tournament. We show that TFP is NP-complete for this problem as well thereby answering another open problem [32].</paragraph><paragraph>Related work  After the work of Vu et al. [36], PTFP and TFP have been studied in a number of research papers. Vassilevska Williams [34] identified various sufficient conditions for a player to be a winner of a BKT, e.g. if he is a king who beats half of all players. In a followup paper, Stanton and Vassilevska Williams [31] focused on when weak players can possibly win a BKT.</paragraph><paragraph>The authors of this paper proved Theorem 1 in a conference paper [3] and provided two additional tractable cases as well as an exponential-time algorithm. Subsequently, Kim and Vassilevska Williams [17] showed that TFP remains NP-hard if the distinguished player is a king that beats {a mathematical formula}n/4 players. They also prove that TFP remains NP-hard for 3-kings who can beat {a mathematical formula}n/2 players. These structural results about kings are enclosed in one general theorem in Kim et al. [16]. Furthermore, Kim and Vassilevska Williams [17] present an algorithm that improves the (exponential) running time of that in Aziz et al. [3], albeit at the expense of requiring exponential space.</paragraph><paragraph>Stanton and Vassilevska Williams [29], [30] identified conditions in a probabilistic model under which the tournament organizer can fix the tournament with high probability. In Vu and Shoham [38], the problem of designing ‘fair’ draws was considered. Lang et al. [20] and Lang et al. [19] examined winner determination in voting trees that need not be balanced. In more recent work, Chatterjee et al. [6] examine the robustness of winning probability with respect to small errors in the pairwise winning probabilities.</paragraph><paragraph>TFP can also be considered as the problem of checking whether a player is a possible winner in a deterministic BKT. Computing possible winners for other voting rules where the information on the preferences is not complete has been studied extensively [2], [40]. Another related problem is checking whether a sports team can still win a round-robin competition when all the matches have not yet been completed [11], [15].</paragraph></section><section label="2"><section-title>TFP is NP-complete</section-title><paragraph>In this section, we settle the complexity of TFP. For convenience, we will represent the pairwise comparison matrix P as a directed graph where an edge from i to j exists iff i beats j.</paragraph><paragraph label="Proof">TFP is NP-complete.We reduce from the NP-hard variant of the 3SAT problem in which every literal appears at most twice [4]. Given such a 3SAT instance {a mathematical formula}F=(X,C) where {a mathematical formula}X={x1,…,x|X|} is the set of variables and C the set of clauses, we build an instance of TFP with a distinguished player who can win the tournament by some draw if and only if F is satisfiable.The TFP instance consists of a set of players {a mathematical formula}N={1,…,n} where n is the smallest power of 2 greater than or equal to {a mathematical formula}32⋅|X|. The resulting knock-out tournament will thus consist of {a mathematical formula}R:=log⁡(n)=⌈log⁡(32⋅|X|)⌉≥5 rounds where the first (lowest) four rounds will be used to store the gadgets while the later rounds will enforce certain outcomes for the gadgets.In the following, we use the notation {a mathematical formula}A∪˙B for the union of two sets A and B which are disjoint, i.e. {a mathematical formula}A∩B=∅. We can decompose the set of players N as follows{a mathematical formula} where players in {a mathematical formula}GX are used in the choice gadgets that will model the variable assignment, players in {a mathematical formula}GCG are used in the clause/garbage gadgets that will model the behavior of the clauses, and players in {a mathematical formula}GF are used in filler gadgets that will be used to balance the BKT. Players in S are special players that will ensure the connection between choice and clause gadgets.There will be a total of {a mathematical formula}k:=n16 gadgets, each associated with one of the players from the set {a mathematical formula}M={m1,m2,…,mk}. The player {a mathematical formula}m1 will be our distinguished player. We will show that for {a mathematical formula}m1 to win the BKT, all players from M will have to proceed to the fifth round. The structure of the gadgets will make sure that this can happen if and only if the 3SAT instance F is satisfiable.More precisely, we use {a mathematical formula}|X| choice gadgets numbered from 1 to {a mathematical formula}|X|, {a mathematical formula}|X| clause/garbage gadgets (that may each model up to two clauses) numbered from {a mathematical formula}|X|+1 to {a mathematical formula}2|X| and {a mathematical formula}(k−2|X|) filler gadgets numbered from {a mathematical formula}(2|X|+1) to k. As every literal may appear at most twice, note that the number of clauses is bounded by {a mathematical formula}|C|≤4|X|3≤2|X| and hence the {a mathematical formula}|X| clause/garbage gadgets provide enough space to model all clauses in C.Using this numbering, we can further partition the above sets as follows:{a mathematical formula} Note that the sets {a mathematical formula}Gj have 10, 13 or 15 elements, depending on whether they are a subset of {a mathematical formula}GX, {a mathematical formula}GCG or {a mathematical formula}GF, respectively.SetM, the spawning process  The relation between elements of the set of winners M is recursively defined via a linear ordering of players as follows: We start with player {a mathematical formula}m1. At each iteration, every player spawns a new player placed directly to his right. In the pairwise comparison graph, each player beats all players to his left in this construction except for the one that spawned him. This recursive construction is repeated until a total of k players are present. We denote by {a mathematical formula}Mℓ the set of {a mathematical formula}2ℓ players from M that are present after the ℓ-th iteration of the spawning process. Furthermore, for any {a mathematical formula}j∈[k], let {a mathematical formula}ℓj be the smallest ℓ such that {a mathematical formula}mj∈Mℓ (see Fig. 1).There is a draw σ such that{a mathematical formula}m1wins the BKT{a mathematical formula}T(M,σ).Seeding all players in M from left to right according to the spawning process makes {a mathematical formula}m1 win the tournament (see Fig. 1): Whenever two players meet, the left player in the match has spawned the right player, thus the left player wins. As the leftmost player, {a mathematical formula}m1 wins the tournament.  □We will show later that this is the only way for {a mathematical formula}m1 to win the tournament. In other words, {a mathematical formula}m1 can win the tournament if and only if all players from M can reach the fifth round simultaneously.Global structure  We now describe how the sets from (1) and (2) relate to each other. In general it is true that players from S beat all other players and players from {a mathematical formula}GX∪˙GCG∪˙GF beat players from M. There are a few exceptions to this rule, which will be detailed below.In many places, we will use the right–left-rule, that is elements from sets with a higher index will beat elements from sets with a lower index. For instance, for all {a mathematical formula}j,j′∈[k] with {a mathematical formula}j&gt;j′ and elements {a mathematical formula}i∈Gj, {a mathematical formula}i′∈Gj′ we have that i beats {a mathematical formula}i′.The set S can be partitioned into subsets {a mathematical formula}Sj corresponding to each variable of the SAT instance, such that {a mathematical formula}∀j∈[|X|]:Sj=Sxj∪˙Sx¯j∪˙{sj⁎} where {a mathematical formula}|Sxj|=|Sx¯j|=3. We further define the set of particles (these will move between the choice and clause/garbage gadgets) by {a mathematical formula}Sp:=⋃˙j∈[|X|](Sxj∪˙Sx¯j). The members of {a mathematical formula}Sp follow the right–left-rule between each other, i.e., for {a mathematical formula}j&gt;j′, elements from {a mathematical formula}Sxj and {a mathematical formula}Sx¯j beat elements from {a mathematical formula}Sxj′ and {a mathematical formula}Sx¯j′. The players in {a mathematical formula}{sj⁎|j∈[|X|]} follow the right–left-rule amongst themselves. For each {a mathematical formula}j∈[|X|], {a mathematical formula}sj⁎ is beaten by all other members of {a mathematical formula}Sj and beats all members of {a mathematical formula}Sp∖Sj. The structure is visualized in Fig. 2.The relation of the members of M among themselves is given by the spawning process (see Fig. 1).The only exceptions to the general rule of S beating all other players and {a mathematical formula}GX∪˙GCG∪˙GF beating players from M are listed below, they will be detailed in the description of the individual gadgets.<list label="Proof">Some sets {a mathematical formula}Gi contain elements that beat some elements from {a mathematical formula}Sp.Every element {a mathematical formula}mi beats exactly four of the elements from {a mathematical formula}Gi.For{a mathematical formula}m1to win the tournament, all players{a mathematical formula}mj∈Mmust reach the fifth round.We use induction over the set M. The induction will proceed from left to right according to the order specified in the description of the spawning process. First, recall that {a mathematical formula}ℓj denotes the smallest ℓ such that {a mathematical formula}mj is present after the ℓ-th iteration of the spawning process. Further note that for all {a mathematical formula}j∈[k], player {a mathematical formula}mj beats exactly {a mathematical formula}(R−4−ℓj)=(log⁡k−ℓj) players from M that are to his right. The induction hypothesis is as follows. In order for{a mathematical formula}m1to win the tournament, the following must hold for all{a mathematical formula}j∈[k]:If{a mathematical formula}mjwas spawned by some player{a mathematical formula}mj⁎, then{a mathematical formula}mjneeds to play against{a mathematical formula}mj⁎in round{a mathematical formula}(R+1−ℓj).For the base case, consider {a mathematical formula}m1. Player {a mathematical formula}m1 was spawned by no other player, hence there is nothing to show.We now show that for a player {a mathematical formula}mj∈M, the induction hypothesis holds, provided that it holds for all players {a mathematical formula}mj′∈M with {a mathematical formula}j′&lt;j. Denote by {a mathematical formula}mj⁎ the player that spawned {a mathematical formula}mj and note that {a mathematical formula}j⁎&lt;j and hence the induction hypothesis holds for {a mathematical formula}j⁎.First, note that {a mathematical formula}mj⁎ beats all players {a mathematical formula}mj′ with {a mathematical formula}j′&lt;j⁎ except the one that spawned him. However, by the induction hypothesis they all have to play (and lose) against the player that spawned them, therefore they cannot play against {a mathematical formula}mj⁎ (as they would lose). Thus, the only players that {a mathematical formula}mj⁎ can and is allowed to beat are players from {a mathematical formula}Gj⁎ and players {a mathematical formula}mr from M with {a mathematical formula}r&gt;j⁎. He beats exactly four players in {a mathematical formula}Gj⁎ and {a mathematical formula}(R−4−ℓj⁎) (including {a mathematical formula}mj) from M to his right. By the induction hypothesis, {a mathematical formula}mj⁎ needs to reach round {a mathematical formula}(R+1−ℓj⁎), he thus has to play against all of these players (including {a mathematical formula}mj). This proves that {a mathematical formula}mj must play against the player that spawned him.To see why this has to happen in round {a mathematical formula}(R+1−ℓj), note that to the left of {a mathematical formula}mj there are {a mathematical formula}(R−4−ℓj) other players that are spawned by {a mathematical formula}mj⁎. Denote them by {a mathematical formula}mj1⁎,mj2⁎,…,mjR−4−ℓj⁎ and note that {a mathematical formula}R+1−ℓji⁎=i+4. Thus, {a mathematical formula}mj cannot face {a mathematical formula}mj⁎ in round {a mathematical formula}5,6,…,R−ℓj (as other players need to play against {a mathematical formula}mj⁎ in these rounds) and has to proceed at least until round {a mathematical formula}(R+1−ℓj).The original claim now follows from the induction hypothesis because {a mathematical formula}ℓj≤log2⁡(k)=log2⁡(n16)=log2⁡(n)−4=R−4 and hence {a mathematical formula}R+1−ℓj≥R+1−(R−4)=5.  □We now describe the design of the gadgets. These will allow us to conclude that all players from </list><paragraph>M can reach the fifth round if and only if the 3SAT instance F is satisfiable. Note that all choice gadgets consist of 18 players ({a mathematical formula}{mj}∪˙Gj∪˙Sj), clause/garbage gadgets consist of 14 players ({a mathematical formula}{mj}∪˙Gj) and filler gadgets consist of 16 players ({a mathematical formula}{mj}∪˙Gj). In the first four rounds of a BKT, some players from the choice gadgets thus have to compete in a subtournament against the players from clause/garbage gadgets. The exact way in which this is possible while making sure that {a mathematical formula}m1 wins the tournament will be used to encode the 3SAT instance.Choice gadget  For each {a mathematical formula}j∈[|X|], the j-th choice gadget consists of player {a mathematical formula}mj, all ten elements of {a mathematical formula}Gj and all of {a mathematical formula}Sj. Note that some elements of {a mathematical formula}Sj will appear again in the clause/garbage gadgets. The pairwise comparison graph for these elements (for fixed j) is shown in Fig. 3. The choice gadget is structured in such a way that it is possible for {a mathematical formula}mj to win a subtournament composed of all elements in the gadget except two elements of either {a mathematical formula}Sxj or {a mathematical formula}Sx¯j, as illustrated in Fig. 6. We will also show that this is the only way in which {a mathematical formula}mj can reach the fifth round in a tournament won by {a mathematical formula}m1.Clause/garbage gadget  We now describe the internal structure of the clause/garbage gadgets. For each {a mathematical formula}j∈{|X|+1,|X|+2,…2|X|}, the j-th gadget consists of {a mathematical formula}mj and the 13 elements of {a mathematical formula}Gj, two of these are denoted {a mathematical formula}c/g. The pairwise comparison graph for these players is shown in Fig. 4. For each clause {a mathematical formula}ci∈C we will call one of the players denoted {a mathematical formula}c/gassociated with clause{a mathematical formula}ci, all remaining players {a mathematical formula}c/g are garbage players. All players shown in the figure are beaten by all players in S with the following exceptions:</paragraph><list><list-item label="(i)">garbage players beat all players from {a mathematical formula}Sp,</list-item><list-item label="(ii)">players associated with clause {a mathematical formula}ci beat all players from the set {a mathematical formula}Sxj or {a mathematical formula}Sx¯j if {a mathematical formula}xj or {a mathematical formula}x¯j occurs in clause {a mathematical formula}ci, respectively.</list-item></list><paragraph label="Lemma 3">The clause gadget is structured in such a way that it is possible for {a mathematical formula}mj to win a subtournament composed of all elements in the gadget with the addition of a compatible element from {a mathematical formula}Sp for both {a mathematical formula}c/g-players included. We will also show that if we want {a mathematical formula}m1 to win the tournament, this is the only way in which {a mathematical formula}mj can reach the fifth round.Filler gadget  Finally, for each {a mathematical formula}j∈{2|X|+1,2|X|+2,…,k}, the j-th filler gadget consists of {a mathematical formula}mj and 15 players in set {a mathematical formula}Gj. The pairwise comparison graph relating them to one another is shown in Fig. 5, the structure is the same as among the players from M.We note that for all {a mathematical formula}j∈[k], player {a mathematical formula}mj beats exactly four players from outside of the set M. This allows us to prove the following lemma.For all{a mathematical formula}j∈[k]the following hold:</paragraph><list><list-item>If all players from M reach the fifth round, then the 16-player subtournament taking{a mathematical formula}mjto the fifth round consists exactly of:</list-item><list-item>If the 16-player subtournament for the first four rounds in which{a mathematical formula}mjis placed consists exactly of (i)a, (i)b, or (i)c for the respective type of the j-th gadget, then a draw for the subtournament exists by which{a mathematical formula}mjreaches the fifth round.</list-item></list><paragraph label="Proof">We prove the lemma by induction over j. Assume that the statement holds for all {a mathematical formula}i&lt;j (this also takes care of the case {a mathematical formula}j=1 were we do not assume anything).Note that by induction, all players from {a mathematical formula}Gi,i&lt;j have to be seeded in the i-th subtournament and are hence no longer available for the j-th subtournament. Also, no other player from M may be seeded in the subtournament of {a mathematical formula}mj, as otherwise not all players from M can reach the fifth round.In our analysis we consider positions in the subtournament one after another. We say that a player is no longer available when in order for {a mathematical formula}mj to advance we need that he be placed in one of the positions already considered.We first consider the case where the j-th gadget is a choice gadget. In order to proceed to the fifth round, player {a mathematical formula}mj has to be matched against all four of the players in {a mathematical formula}Gj that he can beat. In Fig. 3 these are players {a mathematical formula}{dj,cj,xj,x¯j}. Of those four players, {a mathematical formula}dj beats no player that is still available. Therefore, {a mathematical formula}dj cannot proceed to the second round and must face {a mathematical formula}mj in the first round. It is therefore no longer available elsewhere. In rounds two to four, {a mathematical formula}mj thus has to be matched against {a mathematical formula}cj, {a mathematical formula}xj, and {a mathematical formula}x¯j. Of these, {a mathematical formula}cj beats only one player that is still available ({a mathematical formula}ej) and can therefore only proceed to the second round. By the same argument as before, {a mathematical formula}mj must be matched against {a mathematical formula}cj in the second round, thus {a mathematical formula}cj and {a mathematical formula}ej are no longer available for consideration in later positions. For the third and fourth round we can either match {a mathematical formula}mj first against {a mathematical formula}xj and then against {a mathematical formula}x¯j or the other way around since both those players are capable of reaching the fourth round. Since both {a mathematical formula}xj and {a mathematical formula}x¯j beat exactly three of the available players and {a mathematical formula}uj is among them for both {a mathematical formula}xj and {a mathematical formula}x¯j, the player who will be matched against {a mathematical formula}mj in the fourth round must beat {a mathematical formula}uj. This match must happen in the first round, as {a mathematical formula}uj beats none of the available players. No matter whether we match {a mathematical formula}mj against {a mathematical formula}xj or {a mathematical formula}x¯j first, {a mathematical formula}xj must beat {a mathematical formula}aj1 and {a mathematical formula}aj2 whilst {a mathematical formula}x¯j must beat {a mathematical formula}bj1 and {a mathematical formula}bj2. Depending on which option we chose, {a mathematical formula}aj1 and {a mathematical formula}aj2 will have to lose either in the second and third round and {a mathematical formula}bj1 and {a mathematical formula}bj2 in the first and second round or vice versa. Note that, among the players still available, {a mathematical formula}aj1 and {a mathematical formula}aj2 only beat members of {a mathematical formula}Sxj whereas {a mathematical formula}bj1 and {a mathematical formula}bj2 only beat members of {a mathematical formula}Sx¯j. This means that if we select {a mathematical formula}aj1 and {a mathematical formula}aj2 to reach the second and third round, their first- and second-round matches must all be against players from {a mathematical formula}Sxj by which all three members of {a mathematical formula}Sxj lose against either {a mathematical formula}aj1 or {a mathematical formula}aj2 in the first or second round. On the other hand, if {a mathematical formula}aj1 and {a mathematical formula}aj2 only had to get to first and second round, they would only have to play against one member of {a mathematical formula}Sxj and the other two could be removed from the subtournament. The same holds for {a mathematical formula}bj1, {a mathematical formula}bj2 and {a mathematical formula}Sx¯j, respectively. This situation is shown in Fig. 6. This proves (i), (ii) is easily verified if one observes that one of the players in {a mathematical formula}Sjp that has to make it to the second round can do so by being matched against {a mathematical formula}sj⁎ or a player from {a mathematical formula}Sip with {a mathematical formula}i&lt;j.Now let us consider the case where the j-th gadget is a clause gadget, the argument is very similar. Again, player {a mathematical formula}mj has to be matched against all four of the players in {a mathematical formula}Gj that he can beat. In Fig. 4 these are the players {a mathematical formula}{aj,bj,dj,mj′}. Of those four players, {a mathematical formula}aj beats no player that is still available. Therefore, {a mathematical formula}aj cannot proceed to the second round and must face {a mathematical formula}mj in the first round. This makes {a mathematical formula}aj unavailable to be used in other positions. In rounds two to four, {a mathematical formula}mj thus has to be matched against {a mathematical formula}bj, {a mathematical formula}dj, and {a mathematical formula}mj′. Of these, {a mathematical formula}bj beats only one player that is still available ({a mathematical formula}cj) and can therefore only proceed to the second round. The same argument as before forces {a mathematical formula}mj to be matched against {a mathematical formula}bj in the second round removing {a mathematical formula}bj and {a mathematical formula}cj from availability. Player {a mathematical formula}mj now beats {a mathematical formula}dj and {a mathematical formula}mj′ amongst the available players. Player {a mathematical formula}dj only beats two other players, therefore {a mathematical formula}mj will beat him in the third round. Player {a mathematical formula}dj beats {a mathematical formula}ej and a {a mathematical formula}c/g player. Player {a mathematical formula}ej beats none of the available players, therefore {a mathematical formula}dj must beat him in the first round. This makes {a mathematical formula}ej unavailable. The {a mathematical formula}c/g player beats compatible players from {a mathematical formula}Sp and can therefore go to the second round if one of those is available. Player {a mathematical formula}mj is left with only one player to beat to get to the fifth round which is {a mathematical formula}mj′. Player {a mathematical formula}mj′ can and needs to reach the fourth round. The sub-tournament enabling {a mathematical formula}mj′ to reach the fourth round is structured exactly the same way as the one just described. Therefore {a mathematical formula}mj can go to the fifth round if and only if we can add to the subtournament consisting of {a mathematical formula}mj and {a mathematical formula}Gj one compatible (beatable) player from {a mathematical formula}Sp for each {a mathematical formula}c/g player, which proves both (i) and (ii).The filler gadget is built by the spawning process. If the j-th gadget is a filler gadget, this guarantees that {a mathematical formula}mj beats only four players, one of which beats no one in the gadget. {a mathematical formula}mj therefore needs to beat him to get to the second round and therefore that player is no longer available. The spawning process also guarantees there is a second player that beats only one other available player in the gadget and can only get to the second round. {a mathematical formula}mj must beat him in the second round. We can continue using the same argument until the fifth round to show that {a mathematical formula}mj can go to the fifth round if and only if all players from {a mathematical formula}Gj are placed in the subtournament together with him, which proves both (i) and (ii).  □Note that in light of Lemma 2, it follows by induction from Lemma 3 that {a mathematical formula}m1 can win the tournament if and only if the composition of all 16-player subtournaments covering the first four rounds is exactly as prescribed. We can now finally prove the following lemma.Let{a mathematical formula}F=(X,C)be a 3SAT instance where each literal appears at most twice. There exists a set of players N with pairwise comparison matrix P and a distinguished player{a mathematical formula}m1∈Nsuch that F is satisfiable if and only if we can find a draw σ such that{a mathematical formula}m1wins the tournament{a mathematical formula}T(N,σ).Let N, {a mathematical formula}m1 and P be as specified above. First, note that by Lemma 1 and Lemma 2, {a mathematical formula}m1 can win the tournament if and only if all players from the set M reach the fifth round. This is possible if and only if each player {a mathematical formula}mj∈M can win a 16-player subtournament that consists exactly of the players stated in Lemma 3. We thus have to show that a draw in which each player {a mathematical formula}mj∈M wins a 16-player subtournament with exactly the players stated in Lemma 3 exists if and only if the 3SAT instance is satisfiable.(⇐) Let the formula F be satisfied by a truth assignment A. We construct a BKT over N in which {a mathematical formula}m1 wins. For all j where the j-th gadget is a choice gadget, we place all players from {a mathematical formula}{mj}∪˙Gj∪˙Sj with the exception of two players from {a mathematical formula}Sxj (if {a mathematical formula}A(xj)=true) or {a mathematical formula}Sx¯j (if {a mathematical formula}A(xj)=false) in one subtournament for the first four rounds. These are exactly 16 players and by Lemma 3(ii), we can choose the draw in such a way that {a mathematical formula}mj wins the subtournament.Note that the choice gadgets use all players from S except for two players of each set {a mathematical formula}Sxj (or {a mathematical formula}Sx¯j) where {a mathematical formula}xj (or {a mathematical formula}x¯j) is a literal that evaluates to true. In other words, for every literal that evaluates to true, two players remain that can be beaten by every player associated with a clause in which the literal players appear.For the clause/garbage gadgets, to use Lemma 3b) we need for each {a mathematical formula}c/g player one additional player that he beats. If {a mathematical formula}c/g is associated with a clause {a mathematical formula}ci∈C, pick one of the literals in {a mathematical formula}ci that evaluates to true, say {a mathematical formula}x¯j, and assign one of the two players from {a mathematical formula}Sx¯j mentioned above to this {a mathematical formula}c/g player. Note that at most two such players are required for any literal, as every literal only appears twice. To all garbage players, assign an arbitrary remaining player from set S. Note that, after composing the subtournaments for all choice gadgets, {a mathematical formula}2|X| players from the set S were left. As there are {a mathematical formula}2|X|{a mathematical formula}c/g players, we can assign a player from S to each of these.For all j where the j-th gadget is a clause/garbage gadget, we now place all players from {a mathematical formula}{mj}∪˙Gj in one subtournament for the first four rounds, together with the two players that are assigned to the {a mathematical formula}c/g players in {a mathematical formula}Gj. By Lemma 3(ii), we can choose a draw such that {a mathematical formula}mj wins this subtournament.For all j where the j-th gadget is a filler gadget, we place all players from {a mathematical formula}{mj}∪˙Gj in one tournament for which, by Lemma 3(ii), we can find a draw where {a mathematical formula}mj wins.(⇒) Let a draw be given such that all players in M win a 16-player subtournament consisting exactly of the players stated in Lemma 3. First, note that whenever a player {a mathematical formula}sj⁎ is not placed in the j-th choice gadget, we get a contradiction as by Lemma 3, this player cannot be placed anywhere else while all players from M still reach the fifth round. The following truth assignment is thus well-defined: {a mathematical formula}A(xj)=true if {a mathematical formula}mj's subtournament includes all players from {a mathematical formula}Sj except two players from {a mathematical formula}Sxj, {a mathematical formula}A(xj)=false if {a mathematical formula}mj's subtournament includes all players from {a mathematical formula}Sj except two players from {a mathematical formula}Sx¯j.We now show that A satisfies all clauses. Let {a mathematical formula}ci∈C be a clause and {a mathematical formula}c/g the player associated with the corresponding clause gadget. Let {a mathematical formula}j⁎ be the index of that gadget. By the assumption, {a mathematical formula}mj⁎ wins the corresponding subtournament, thus Lemma 3 implies that it contains a player that {a mathematical formula}c/g beats, i.e. a player from set {a mathematical formula}Sxj (or {a mathematical formula}Sx¯j) where {a mathematical formula}xj (or {a mathematical formula}x¯j) occurs in clause {a mathematical formula}Ci. By the definition of A, that player can only be used in the subtournament if the corresponding literal evaluates to true (as otherwise, the player is used in {a mathematical formula}mj's subtournament).  □ This concludes the proof of Theorem 1.  □</paragraph></paragraph><paragraph>The following Lemma will be required for Theorem 6. We prove it here, as it can be used to show that it remains computationally hard to decide whether a particular player can win a BKT, even if we already know that this player is a particularly strong player: A player a is called a king if for every player b that a does not beat, there exists a third player c such that a beats c and c beats b. Using the next lemma, we will show that TFP remains NP-hard if restricted to instances where {a mathematical formula}m1 is a king.</paragraph><paragraph>A related theorem has previously been proved by Kim and Vassilevska Williams [17] using our Theorem 1. The result from [17] is slightly more general in that it requires {a mathematical formula}m1 to be a particularly strong king (one that directly beats {a mathematical formula}14 of all players). Leaving out this additional requirement, we can make a simpler argument and only require an instance half the size.</paragraph><paragraph label="Lemma 5">Let{a mathematical formula}k∈Nand{a mathematical formula}N′a set of players with{a mathematical formula}|N′|=2kand a distinguished player{a mathematical formula}m1∈N′.</paragraph><list><list-item>Let Z be another (disjoint) player set with{a mathematical formula}|Z|=|N′|and{a mathematical formula}z1∈Za player from Z. Let P be a pairwise comparison matrix on{a mathematical formula}N=N′∪˙Zsuch that</list-item><list-item>Let{a mathematical formula}P′be a pairwise comparison matrix on{a mathematical formula}N′. There exists a set of players Z and pairwise comparison matrix P on{a mathematical formula}N′∪˙Zsatisfying the conditions from (i) such that P coincides with{a mathematical formula}P′on{a mathematical formula}N′.</list-item></list><paragraph label="Proof">For part (i), we prove both directions separately.(⇒) Assume that there exists a draw {a mathematical formula}σ′ such that {a mathematical formula}m1 wins the tournament {a mathematical formula}T(N′,σ′). Construct σ in such a way that the final is a match between the winners of two sub-tournaments A and B where in A, all players from {a mathematical formula}N′ are seeded according to {a mathematical formula}σ′ and in B all players from Z are seeded in an arbitrary way. The sub-tournament B is won by {a mathematical formula}z1 (as it beats all other players that compete in B) and sub-tournament A is won by {a mathematical formula}m1 (by Lemma 4 as A is exactly the tournament {a mathematical formula}T(N,σ′)). In the final, {a mathematical formula}m1 wins against {a mathematical formula}z1 and hence {a mathematical formula}m1 wins the tournament {a mathematical formula}T(N,σ). (⇐) Assume that there is no draw {a mathematical formula}σ′ such that {a mathematical formula}m1 wins the tournament {a mathematical formula}T(N′,σ′). Again, let σ be a draw for N such that the final is a match between the winners of two sub-tournaments A and B and assume w.l.o.g. that {a mathematical formula}m1 is seeded in A. We differentiate three cases:<list>If {a mathematical formula}z1 is also seeded in A, then there is at least one player from {a mathematical formula}Z∖{z1} that is seeded in B (because only {a mathematical formula}|N′|=|Z| players can compete in A). Hence a player {a mathematical formula}z∈Z∖{z1} will win the sub-tournament B and even if {a mathematical formula}m1 wins A, he will be beaten by z in the final.If {a mathematical formula}z1 is not seeded in A but some other players from Z are, then one of them will win the tournament A and hence {a mathematical formula}m1 cannot win.If no player from Z is seeded in A, then by the assumption there is no draw such that {a mathematical formula}m1 can win the sub-tournament A.For part (ii) of </list><paragraph>Lemma 5, a suitable instance can easily be constructed, as no assumptions are made on the structure of P restricted to {a mathematical formula}N′.  □</paragraph></paragraph><paragraph label="Proof">TFP is NP-complete even if the distinguished player is a king.First, note that in any instance satisfying the conditions of Lemma 5, {a mathematical formula}m1 is a king (by beating {a mathematical formula}z1 who in turn beats every other player).Let {a mathematical formula}F=(X,C) be a 3SAT instance where each literal appears at most twice. By Lemma 4, we can find a player set {a mathematical formula}N′, pairwise comparison matrix {a mathematical formula}P′ and distinguished player {a mathematical formula}m1 such that F is satisfiable if and only if there is a draw σ such that {a mathematical formula}m1 can win {a mathematical formula}T(N′,σ).By Lemma 5(ii), we can obtain a suitable instance such that {a mathematical formula}m1 is a king and the statement follows from Lemma 5(i).  □</paragraph><section label="2.1">Implications of Theorem 1<paragraph>Theorem 1 simultaneously implies a number of results from the literature, in particular Theorem 1, 2, and 3 in Vu et al. [36] and Theorem 1 in Vassilevska Williams [34]. It also yields some further corollaries. For PTFP and {a mathematical formula}α≥1, an algorithm is called an α-approximation algorithm for the maximum winning probability if it can find a draw in which the winning probability of the given player i is at least {a mathematical formula}mwp(i,N,P)/α.</paragraph><paragraph label="Proof">The approximation algorithm can be used to check in polynomial time whether the maximum winning probability is zero or non-zero. If the algorithm is deterministic, it can hence solve TFP in polynomial time.  □</paragraph><paragraph>It immediately follows from Theorem 1 that #TFP is NP-hard. We next highlight that even randomization is not very helpful for #TFP. Let Γ be a finite alphabet in which we agree to describe our problem instances and solutions. A fully polynomial time randomized approximation scheme (FPRAS) for a function {a mathematical formula}f:Γ⁎→Q is an algorithm that takes input {a mathematical formula}x∈Γ⁎ and a parameter {a mathematical formula}ϵ∈Q&gt;0, and returns with probability at least {a mathematical formula}34 a number between {a mathematical formula}f(x)/(1+ϵ) and {a mathematical formula}(1+ϵ)f(x). Moreover, an FPRAS runs in time polynomial in the size of x and {a mathematical formula}1ϵ. RP is the complexity class consisting of problems that can be solved in randomized polynomial time. The statement below follows from Proposition 8 in Welsh and Merino [39] and Theorem 1.</paragraph><paragraph label="Proof">Unless{a mathematical formula}NP=RP, there is no FPRAS for #TFP.The statement follows from Theorem 1 and the well-known fact (see for e.g., Proposition 8 in [39]) that if {a mathematical formula}f:Γ⁎⟶N is such that deciding whether f is non-zero or not is NP-hard, then there is no FPRAS for f unless {a mathematical formula}NP=RP.  □</paragraph><paragraph>Hence, unless {a mathematical formula}NP=RP, there also does not exist an FPRAS for computing the probability of a player winning a BKT for a draw chosen uniformly at random.</paragraph></section></section><section label="3"><section-title>Tractable cases</section-title><paragraph>We first examine a natural case in which players are divided into player types: the outcome of any match is determined only by the type of the respective players. In other words, given two types i and j, it is either the case that all players from i win against all players from j or the other way round. This is an interesting case as in sports tournaments it may be that many players are of the same or similar quality, i.e., of the same type. The result of matches between players of the same type is irrelevant as we do not care which player in each type wins. In this variant that we call #TFP-types, the objective is to count the number of draws for which a player of a given type wins. We first adapt the concept of the pairwise comparison matrix. For two player types i and j, define {a mathematical formula}Pij=1 if an i-player wins a match between i and j and {a mathematical formula}Pij=0 otherwise. Note that this definition is chosen such that {a mathematical formula}Pii=1 for all player types i.</paragraph><paragraph label="Proof">#TFP-types is polynomial-time solvable if there are a constant number of player types.We will use a dynamic programming scheme. All vectorial inequalities assume equal dimensions and are meant component-wise. Let k be the number of different player types. We denote the number of players of type i by {a mathematical formula}ηi. Let {a mathematical formula}Nx:={η=(η1,…,ηk)≥0|η1+…+ηk=2x} and denote by {a mathematical formula}#TFP(i,x,η∈Nx) the number of draws for an x-round tournament involving {a mathematical formula}ηj players of type j for all {a mathematical formula}j∈[k] in which a player of type i wins the tournament. We will assume that the players of one type are not distinguishable. For fixed i and x, there are {a mathematical formula}(k+2x−1k−1) such problems that potentially need to be considered. This is because for positive integers {a mathematical formula}p,q there are {a mathematical formula}(p+q−1q−1) weak compositions of p into q parts, i.e., there are {a mathematical formula}(p+q−1q−1) distinct ways to write a sum of q non-negative integers that evaluates to p. The number {a mathematical formula}#TFP(i,x,η) is computed via the following recursion.{a mathematical formula} The recursion considers all possible opponents of a player of type i at round x, as well as all possibilities for the {a mathematical formula}(x−1)-round seedings of the subtournaments that the players of type i and j need to win in order to reach the final round.The base cases are given by{a mathematical formula} for all {a mathematical formula}i∈[k]. Eq. (3) only uses values of {a mathematical formula}#TFP(j,y,η′) with {a mathematical formula}y&lt;x, thus every problem only needs to be solved once. For constant k, solving a problem requires {a mathematical formula}O(nk) operations and for constant k it holds that {a mathematical formula}(k+2x−1k−1)∈O(nk). Thus, {a mathematical formula}O(log⁡(n)n2k) operations are necessary to compute {a mathematical formula}#TFP(i,log⁡(n),(n1,…,nk)).  □</paragraph><paragraph label="Proof">The second tractable case that we identify is the case when the players can be linearly ordered by strength. This is a common rule of thumb used when guessing who will win a tournament and is supported by empirical results in the literature [26]. #TFP is polynomial-time solvable if there is a linear ordering of strengths of the players with at most a constant number of pairwise relations flipped.Let b be the number of backwards arcs that do not respect the linear ordering. We can show by induction that the problem can be reduced to #TFP-types with at most {a mathematical formula}4b+3 player types. For {a mathematical formula}b=0, we simply divide the players into the 3 types {a mathematical formula}N−(i⁎), {a mathematical formula}{i⁎}, and {a mathematical formula}N+(i⁎), where {a mathematical formula}N−(i⁎) and {a mathematical formula}N+(i⁎) are the set of players that beat {a mathematical formula}i⁎ and are beaten by {a mathematical formula}i⁎, respectively. By induction, assume the statement holds for all {a mathematical formula}b′&lt;b. To show that it holds for b backwards arcs, select an arbitrary backwards arc {a mathematical formula}a=(u,v), reverse it, and group the players into {a mathematical formula}4(b−1)+3 player types. We partition the players of u's type into three new types: {a mathematical formula}{u}, those players that beat u, and those that are beaten by u. We do the same for v, and now we can reverse the arc a again, as it originally was. Thus we have {a mathematical formula}4(b−1)+3+4 player types for the instance. Since the number of player types is constant, the theorem follows from Theorem 3.  □</paragraph></section><section label="4"><section-title>An exponential time algorithm for #TFP</section-title><paragraph>#TFP can be trivially solved in time {a mathematical formula}2O(nlog⁡n) via a brute-force enumeration of all possible draws. In exponential time algorithmics [9], the aim is to design algorithms solving the problem exactly with worst-case running times outperforming the brute-force solution. In this section we give an algorithm for #TFP running in time {a mathematical formula}O(2.8285n) using space {a mathematical formula}O(1.7548n). If only polynomial space is available, the running time becomes {a mathematical formula}4n+o(n), and we give a range of possible time-space trade-offs. After the publication of our conference paper, Kim and Vassilevska Williams [17] improved our running time to {a mathematical formula}O(2npoly(n)) using {a mathematical formula}O(2npoly(n)) space. However, our algorithm also works if less space is available. The algorithm is based on the recursion formula (3) and memoization used at various levels of the recursion. We use {a mathematical formula}poly(n) to stand for a polynomial function in n.</paragraph><paragraph label="Theorem 5">For every y,{a mathematical formula}2≤y≤log⁡n, there is an algorithm solving #TFP in time{a mathematical formula}T(n)=poly(n)⋅∏p=0y−1n2p⋅2n/2pand space{a mathematical formula}S(n)=poly(n)⋅(2y)n/2y⋅(2y2y−1)n−n/2y.</paragraph><paragraph label="Proof">We start with the polynomial space algorithm. The algorithm recursively evaluates the formula (3) for the special case where each player type consists of one player. We say that player i corresponds to player type {a mathematical formula}ηi. The evaluation is top-down, i.e., to evaluate {a mathematical formula}#TFP(i,x,η) the algorithm performs {a mathematical formula}O(|Nx|⋅2|Nx|) recursive calls to itself solving for each {a mathematical formula}η′∈Nx−1 where {a mathematical formula}η′≤η the subinstance {a mathematical formula}#TFP(i,x−1,η′) and the subinstances {a mathematical formula}#TFP(j,x−1,η−η′) for all {a mathematical formula}j∈[n] such that {a mathematical formula}Pij=1 and {a mathematical formula}ηj−ηj′=1. The base cases are as in the proof of Theorem 3, and the algorithm returns {a mathematical formula}#TFP(i,log⁡n,(1,…,1)).For n players, the number of recursive calls of the algorithm is upper bounded by {a mathematical formula}R(n)≤n⋅2n⋅R(n2), which evaluates to {a mathematical formula}R(n)=Πp=0log⁡nn2p⋅2n/2p=4n+o(n). The running time {a mathematical formula}T(n) of the algorithm is within a polynomial factor of n of the number of recursive calls.Using memoization, we can avoid repeating calculations at the expense of exponential space usage. The algorithm uses a table indexed by players, level, and player type vector. We say that we use memoization at level x if, when evaluating {a mathematical formula}#TFP(j,x′,η) with {a mathematical formula}x′≤x, the algorithms first checks in this table whether this recursive call has already been evaluated. Only if the value has not yet been computed, it computes the result recursively, and stores it in the table. Then, it returns the result that is stored in the table. To evaluate {a mathematical formula}#TFP(j,x′,η) with {a mathematical formula}x′&gt;x, it does not use the table, and computes it recursively as in the polynomial space algorithm.At level {a mathematical formula}log⁡n, only one evaluation is made. At level {a mathematical formula}(log⁡n)−1, {a mathematical formula}O(n2n) evaluations are made, but none of them is evaluated more than once. Therefore, we will use memoization at level {a mathematical formula}(log⁡n)−y, where y varies from 2 to {a mathematical formula}log⁡n. The number of table entries used by memoization is upper bounded by n times the number of subsets of size at most {a mathematical formula}n/2y. Using Stirling's approximation for factorials, and a binary representation of integers from 0 to n! using {a mathematical formula}O(nlog⁡n) bits [18], the space usage of the algorithm is upper bounded by {a mathematical formula}S(n)=poly(n)⋅(2y)n/2y⋅(2y2y−1)n−n/2y. The running time of the algorithm is the time used for the recursion without memoization, {a mathematical formula}poly(n)⋅∏p=0y−1n2p⋅2n/2p, plus the time for the part with memoization, which is upper bounded by {a mathematical formula}S(n)⋅n⋅2n/4=O(2.0868n), since at most {a mathematical formula}S(n)=O(1.7548n) entries are computed and each computation retrieves {a mathematical formula}O(n⋅2n/4) table values. Thus, for any y, {a mathematical formula}2≤y≤log⁡n, we obtain an algorithm with running time {a mathematical formula}T(n)=poly(n)⋅∏p=0y−1n2p⋅2n/2p using space {a mathematical formula}S(n)=poly(n)⋅(2y)n/2y⋅(2y2y−1)n−n/2y  □</paragraph><paragraph>Various time and space requirements of the algorithm are reported in Table 1. Using the rule of thumb that for current computing architectures, the space requirements of an algorithm become a bottleneck if they exceed the square root of the time requirements, the analyses for {a mathematical formula}y=2 and {a mathematical formula}y=3 currently seem the most relevant.</paragraph></section><section label="5"><section-title>Double-elimination tournaments</section-title><paragraph>In double-elimination tournaments there are two brackets: the winners bracket where the competition proceeds exactly as in a BKT and the losers bracket where the losers from the BKT are mapped into a new knockout tournament. After (or concurrently) with the conclusion of the winners bracket, the losers bracket tournament is run. The champion of the losers bracket plays (possibly again) the champion of the winners bracket (the BKT winner); in a deterministic setting the winner of this final match is the winner of the overall tournament. Just like BKTs, we can define TFP for double-elimination tournaments. Stanton and Vassilevska Williams [32] state the complexity of the TFP for double-elimination tournaments as an open problem. We show that the problem is NP-complete.</paragraph><paragraph>Double elimination tournaments [8], [14] have been present in sports for decades, and were mathematically defined by Stanton and Vassilevska Williams [32]. In the definition by Stanton and Vassilevska Williams [32] a double elimination tournament is defined by the shape of the losers bracket and a link function that maps losers from the BKT into the losers bracket. This function maps matches in the BKT to leaves of the losers bracket. Stanton and Vassilevska Williams [32] also develop several desiderata by which the losers bracket can be evaluated including: balance, that the losers bracket should be a balanced tournament; round-fairness, that losers should compete against other losers who lost in (nearly) the same round; and repeat-avoidance, link functions should minimize the possibility of two teams meeting both in the winners and losers bracket.</paragraph><paragraph>Consider the 16 entrant example of a winners bracket, (implicit) link function, and corresponding losers bracket illustrated in Fig. 8. Our winners bracket consists of two maximal sub-tournaments, one starting below the circled {a mathematical formula}m1 node and one below the circled {a mathematical formula}z1 node which we will call {a mathematical formula}N′ and Z following the convention from Lemma 5. The depicted losers bracket is both round-fair and balanced according to the definitions given by Stanton and Vassilevska Williams [32].</paragraph><paragraph>Imagine that the tournament graph of the players {a mathematical formula}{m1,…,m8,z1,…,z8} is generated using the pairwise relation in Lemma 5 with the additional constraint that lower number elements of Z defeat higher number elements of Z. Hence, in the winners bracket the left hand player of every leaf pairing would advance, as illustrated in Fig. 8. To construct our losers bracket, we use the fair, balanced bracket described by Stanton and Vassilevska Williams [32].</paragraph><paragraph>We can extend the construction depicted in Fig. 8 to BKTs with any number of players. Note also that we can use any conceivable loser bracket setup and link function, in particular the following theorem also holds for double elimination tournaments with balanced losers brackets and round-fair link functions.</paragraph><paragraph label="Theorem 6">The tournament fixing problem is NP-complete for double elimination tournaments, regardless of any restrictions on losers bracket setup and link function.</paragraph><paragraph label="Proof">In Lemma 5 we define the conditions on two sub-tournaments of equal size, {a mathematical formula}N′ and Z, where {a mathematical formula}N′ corresponds to a TFP instance. By Lemma 5, within the Z bracket {a mathematical formula}z1 beats everyone and everyone in Z beats everyone in {a mathematical formula}N′ with the exception that {a mathematical formula}m1 defeats {a mathematical formula}z1. We will show that {a mathematical formula}m1 can win the double elimination tournament if and only if we can find a solution to the TFP instance defined on {a mathematical formula}N′.Formally, let {a mathematical formula}F=(X,C) be a 3SAT instance where each literal appears at most twice. By Lemma 4 we can find a player set {a mathematical formula}N′, pairwise comparison matrix {a mathematical formula}P′ and distinguished player {a mathematical formula}m1 such that F is satisfiable if and only if there is a draw {a mathematical formula}σ′ such that {a mathematical formula}m1 can win {a mathematical formula}T(N′,σ′). Using Lemma 5(ii), we can extend the instance to the set of players {a mathematical formula}N:=N′∪˙Z with pairwise comparison matrix P that satisfies the properties defined in Lemma 5 part (i). By Lemma 5(i), F is satisfiable if and only if there is a draw σ such that {a mathematical formula}m1 can win {a mathematical formula}T(N,σ). It remains to show that there is a draw σ such that {a mathematical formula}m1 can win {a mathematical formula}T(N,σ) if and only if there is a draw {a mathematical formula}σ⁎ such that {a mathematical formula}m1 wins the double elimination tournament.(⇒) We show that if {a mathematical formula}m1 wins {a mathematical formula}T(N,σ) then he wins the double elimination tournament by the same draw {a mathematical formula}σ⁎=σ.By Lemma 5, the winners' bracket is won by {a mathematical formula}m1. This means that at some point, player {a mathematical formula}z1 is eliminated from the winners' bracket and enters the losers' bracket. As {a mathematical formula}z1 beats all players except {a mathematical formula}m1 (and hence in particular all players in the losers' bracket), {a mathematical formula}z1 wins the losers' bracket and faces {a mathematical formula}m1 in the final, where he loses and {a mathematical formula}m1 wins the double elimination tournament.(⇐) Suppose that {a mathematical formula}m1 wins the double elimination tournament by some draw {a mathematical formula}σ⁎. If {a mathematical formula}m1 proceeds to the final as winner of the winner's bracket (which is a BKT of N), then he also wins {a mathematical formula}T(N,σ⁎).Suppose therefore that by the draw {a mathematical formula}σ⁎, player {a mathematical formula}m1 is at some point eliminated from the winners' bracket. This means that the winners' bracket will be won by some player from Z. We show that {a mathematical formula}m1 cannot win the double elimination tournament in this case.If {a mathematical formula}m1 does not win the winners' bracket, then {a mathematical formula}z1 must win the winners' bracket for {a mathematical formula}m1 to win the tournament, since {a mathematical formula}m1 is beaten by all other players from Z. Therefore, {a mathematical formula}z1 will never enter the losers' bracket. This means that some player from {a mathematical formula}Z∖z1 will win the losers' bracket, as every player from {a mathematical formula}Z∖z1 beats all other players (those from {a mathematical formula}N′, including {a mathematical formula}m1) that enter the losers' bracket at some point. Hence, {a mathematical formula}m1 cannot win the losers' bracket and therefore cannot win the tournament.This proves that {a mathematical formula}m1 cannot win the double elimination tournament as winner of the losers' bracket. Therefore, {a mathematical formula}m1 can only win the double elimination tournament resulting from the draw {a mathematical formula}σ⁎ by advancing through the winner's bracket. This means that he wins {a mathematical formula}T(N,σ⁎) which concludes the only-if part of the proof.  □</paragraph><paragraph>As noted before Lemma 5, a similar argument can be constructed using the result from [17]. It follows from Theorem 6, that the probabilistic generalization of the problem is NP-hard as well. Similarly, we get similar corollaries as Corollary 1, Corollary 2 for double elimination tournaments.</paragraph></section><section label="6"><section-title>Conclusions</section-title><paragraph>In this paper we considered problems related to tournament fixing. Although being able to change draws is not always realistic, the computational problems that are considered have been analyzed in post analysis of tournament draws and also shed light on the relative strengths of players. Our main result is that TFP is NP-complete. We discussed a number of implications of the result. We complement the computational hardness result in the paper by presenting algorithms for #TFP — both for the general case as well as restricted cases. A possible future direction is to propose parameterized algorithms for TFP.</paragraph><section-title>Acknowledgements</section-title></section></content><acknowledgements><paragraph>Haris Aziz is supported by a CSIRO Julius Career Award. Serge Gaspers is the recipient of an Australian Research Council (ARC) Future Fellowship (FT140100048) and acknowledges support under the ARC's Discovery Projects funding scheme (DP150101134).</paragraph></acknowledgements><references><reference label="[1]"><authors>L. Aronshtam,H. Cohen,T. Shrot</authors><title>Tennis manipulation: can we help Serena Williams win another tournament?</title><host>Ann. Math. Artif. Intell.80 (2)(2017) pp.153-169</host></reference><reference label="[2]"><authors>H. Aziz,M. Brill,F. Fischer,P. Harrenstein,J. Lang,H.G. Seedig</authors><title>Possible and necessary winners of partial tournaments</title><host>Proceedings of the 11th International Conference on Autonomous Agents and Multiagent Systems (AAMAS)IFAAMAS(2012) pp.585-592</host></reference><reference label="[3]"><authors>H. Aziz,S. Gaspers,S. Mackenzie,N. Mattei,P. Stursberg,T. Walsh</authors><title>Fixing a balanced knockout tournament</title><host>Proceedings of the 28th AAAI Conference on Artificial Intelligence (AAAI)(2014) pp.552-558</host></reference><reference label="[4]"><authors>P. Berman,M. Karpinski,A.D. Scott</authors><title>Approximation hardness of short symmetric instances of MAX-3SAT</title><host>Electron. Colloq. Comput. Complex.049 (2003)</host></reference><reference label="[5]"><authors>J. Brown,D.B. Minor</authors><title>Selecting the best? Spillover and shadows in elimination tournaments</title><host>Manag. Sci. (2014) pp.3087-3102</host></reference><reference label="[6]"><authors>K. Chatterjee,R. Ibsen-Jensen,J. Tkadlec</authors><title>Robust draws in balanced knockout tournaments</title><host>Proceedings of the 24th International Joint Conference on Artificial Intelligence (IJCAI)(2016)AAAI Press pp.172-179</host></reference><reference label="[7]">R.A. Connolly,R.J. RendlemanTournament Qualification, Seeding and Selection EfficiencyTech. Rep. 2011-96<host>(2011)Tuck School of Business</host></reference><reference label="[8]"><authors>C.T. Edwards</authors><title>Double-elimination tournaments: counting and calculating</title><host>Am. Stat.50 (1)(1996) pp.27-33</host></reference><reference label="[9]"><authors>F.V. Fomin,D. Kratsch</authors><title>Exact Exponential Algorithms</title><host>(2010)Springer</host></reference><reference label="[10]"><authors>C. Groh,B. Moldovanu,A. Sela,U. Sunde</authors><title>Optimal seedings in elimination tournaments</title><host>Econ. Theory49 (1)(2012) pp.59-80</host></reference><reference label="[11]"><authors>D. Gusfield,C. Martel</authors><title>The structure and complexity of sports elimination numbers</title><host>Algorithmica32 (1)(2002) pp.73-86</host></reference><reference label="[12]"><authors>N. Hazon,Y. Aumann,S. Kraus,M. Wooldridge</authors><title>Evaluation of election outcomes under uncertainty</title><host>Proceedings of the 7th International Conference on Autonomous Agents and Multiagent Systems (AAMAS)(2008) pp.959-966</host></reference><reference label="[13]"><authors>J. Horen,R. Riezman</authors><title>Comparing draws for single elimination tournaments</title><host>Oper. Res.33 (2)(1985) pp.249-262</host></reference><reference label="[14]"><authors>L. Huang</authors><title>Prize and incentives in double-elimination tournaments</title><host>Econ. Lett.147 (2016) pp.116-120</host></reference><reference label="[15]"><authors>W. Kern,D. Paulusma</authors><title>The computational complexity of the elimination problem in generalized sports competitions</title><host>Discrete Optim.1 (2)(2004) pp.205-214</host></reference><reference label="[16]"><authors>M.P. Kim,W. Suksompong,V. Vassilevska Williams</authors><title>Who can win a single-elimination tournament?</title><host>Proceedings of the 30th AAAI Conference on Artificial Intelligence (AAAI)(2016) pp.516-522</host></reference><reference label="[17]"><authors>M.P. Kim,V. Vassilevska Williams</authors><title>Fixing tournaments for kings, chokers, and more</title><host>Proceedings of the 24th International Joint Conference on Artificial Intelligence (IJCAI)(2015) pp.561-567</host></reference><reference label="[18]"><authors>D.E. Knuth</authors><title>Fascicle 1: bitwise tricks &amp; techniques; binary decision diagrams</title><host>The Art of Computer Programmingvol. 4 (2009)Addison–Wesley Professional</host></reference><reference label="[19]"><authors>J. Lang,M.S. Pini,F. Rossi,D. Salvagnin,K.B. Venable,T. Walsh</authors><title>Winner determination in voting trees with incomplete preferences and weighted votes</title><host>Auton. Agents Multi-Agent Syst.25 (1)(2012) pp.130-157</host></reference><reference label="[20]"><authors>J. Lang,M.S. Pini,F. Rossi,K.B. Venable,T. Walsh</authors><title>Winner determination in sequential majority voting</title><host>Proceedings of the 20th International Joint Conference on Artificial Intelligence (IJCAI)(2007) pp.1372-1377</host></reference><reference label="[21]"><authors>J.-F. Laslier</authors><title>Tournament Solutions and Majority Voting</title><host>(1997)Springer-Verlag</host></reference><reference label="[22]"><authors>E. Marchand</authors><title>On the comparison between standard and random knockout tournaments</title><host>J. R. Stat. Soc.51 (2)(2002) pp.169-178</host></reference><reference label="[23]"><authors>N. Mattei,J. Goldsmith,A. Klapper,M. Mundhenk</authors><title>On the complexity of bribery and manipulation in tournaments with uncertain information</title><host>J. Appl. Log.13 (4)(2015) pp.557-581</host></reference><reference label="[24]">N. Mattei,T. WalshEmpirical evaluation of real world tournamentsCoRR<host>arXiv:1608.01039</host><host>http://arxiv.org/abs/1608.01039(2016)</host></reference><reference label="[25]"><authors>S. Rosen</authors><title>Prizes and incentives in elimination tournaments</title><host>Am. Econ. Rev.76 (4)(1986) pp.701-715</host></reference><reference label="[26]"><authors>T. Russell,P. van Beek</authors><title>An empirical study of seeding manipulations and their prevention</title><host>Proceedings of the 22nd International Joint Conference on Artificial Intelligence (IJCAI)(2011) pp.350-356</host></reference><reference label="[27]"><authors>T. Russell,T. Walsh</authors><title>Manipulating tournaments in cup and round robin competitions</title><host>Proceedings of the 1st International Conference on Algorithmic Decision Theory(2009) pp.26-37</host></reference><reference label="[28]">N. SilverWhen 15th is better than 8th: the math shows the bracket is backwardOn Five-ThirtyEight Blog<host>http://fivethirtyeight.blogs.nytimes.com/2011/03/15/when-15th-is-better-than-8th-the-math-shows-the-bracket-is-backward/</host></reference><reference label="[29]"><authors>I. Stanton,V. Vassilevska Williams</authors><title>Manipulating single-elimination tournaments in the Braverman–Mossel model</title><host>IJCAI Workshop on Social Choice and Artificial Intelligence(2011)</host></reference><reference label="[30]"><authors>I. Stanton,V. Vassilevska Williams</authors><title>Manipulating stochastically generated single-elimination tournaments for nearly all players</title><host>Proceedings of 7th International Workshop on Internet and Network Economics (WINE)(2011) pp.326-337</host></reference><reference label="[31]"><authors>I. Stanton,V. Vassilevska Williams</authors><title>Rigging tournament brackets for weaker players</title><host>Proceedings of the 22nd International Joint Conference on Artificial Intelligence (IJCAI)(2011) pp.357-364</host></reference><reference label="[32]"><authors>I. Stanton,V. Vassilevska Williams</authors><title>The structure, efficacy, and manipulation of double-elimination tournaments</title><host>J. Quant. Anal. Sports9 (4)(2013) pp.319-335</host></reference><reference label="[33]"><authors>G. Tullock</authors><title>Toward a Theory of the Rent-Seeking Society</title><host>(1980)Texas A&amp;M University Press</host></reference><reference label="[34]"><authors>V. Vassilevska Williams</authors><title>Fixing a tournament</title><host>Proceedings of the 24th AAAI Conference on Artificial Intelligence (AAAI)(2010)AAAI Press pp.895-900</host></reference><reference label="[35]">V. Vassilevska WilliamsFixing tournamentsR.J. LiptonK.W. ReganPeople, Problems, and Proofs: Essays From Gödel's Lost Letter: 2010(2013)Springer pp.319-322Ch. 61</reference><reference label="[36]"><authors>T. Vu,A. Altman,Y. Shoham</authors><title>On the complexity of schedule control problems for knockout tournaments</title><host>Proceedings of the 8th International Conference on Autonomous Agents and Multiagent Systems (AAMAS)(2009) pp.225-232</host></reference><reference label="[37]">T. Vu,N. Hazon,A. Altman,S. Kraus,Y. Shoham,M. WooldridgeOn the Complexity of Schedule Control Problems for Knock-Out TournamentsWorking paper<host>(2013)</host></reference><reference label="[38]"><authors>T. Vu,Y. Shoham</authors><title>Fair seeding in knockout tournaments</title><host>ACM Trans. Intell. Syst. Technol.3 (1)(2011) pp.1-17</host></reference><reference label="[39]"><authors>D.J.A. Welsh,C. Merino</authors><title>The Potts model and the Tutte polynomial</title><host>J. Math. Phys.41 (3)(2000) pp.1127-1152</host></reference><reference label="[40]"><authors>L. Xia,V. Conitzer</authors><title>Determining possible and necessary winners under common voting rules given partial orders</title><host>J. Artif. Intell. Res.41 (2)(2011) pp.25-67</host></reference></references><footnote><note-para label="1">The setting is general enough to cover the case where some players get byes in the first round. In that case we can consider a dummy player who always loses to the player who gets a bye.</note-para><note-para label="2">The condition is quite natural since in many competitions there is a clear-cut ranking of the players according to their skills with only a few pairs of players for which the weaker player can beat the stronger player. For example, as of 15/01/2014, Nikolay Davydenko was the only tennis player among the men's top 64 who had a winning head-to-head record against Rafael Nadal. Russell and van Beek [26] as well as Mattei and Walsh [24] provide an extended discussion and empirical data on these phenomena.</note-para></footnote></root>