<?xml version="1.0" encoding="UTF-8"?><root><url>https://www.sciencedirect.com/science/article/pii//S0004370216300017</url><title>Games for query inseparability of description logic knowledge bases</title><authors>Elena Botoeva,Roman Kontchakov,Vladislav Ryzhikov,Frank Wolter,Michael Zakharyaschev</authors><abstract>We consider conjunctive query inseparability of description logic knowledge bases with respect to a given signature—a fundamental problem in knowledge base versioning, module extraction, forgetting and knowledge exchange. We give a uniform game-theoretic characterisation of knowledge base conjunctive query inseparability and develop worst-case optimal decision algorithms for fragments of Horn-ALCHI, including the description logics underpinning OWL 2 QL and OWL 2 EL. We also determine the data and combined complexity of deciding query inseparability. While query inseparability for all of these logics is P-complete for data complexity, the combined complexity ranges from P- to ExpTime- to 2ExpTime-completeness. We use these results to resolve two major open problems for OWL 2 QL by showing that TBox query inseparability and the membership problem for universal conjunctive query solutions in knowledge exchange are both ExpTime-complete for combined complexity. Finally, we introduce a more flexible notion of inseparability which compares answers to conjunctive queries in a given signature over a given set of individuals. In this case, checking query inseparability becomes NP-complete for data complexity, but the ExpTime- and 2ExpTime-completeness combined complexity results are preserved.</abstract><keywords>Description logic;Knowledge base;Conjunctive query;Query inseparability;Games on graphs;Computational complexity</keywords><content><section label="1"><section-title>Introduction</section-title><paragraph>A description logic (DL) knowledge base (KB) consists of a terminological box (TBox) and an assertion box (ABox). The TBox represents conceptual knowledge by providing a vocabulary for a domain of interest together with axioms that describe semantic relationships between the vocabulary items. To illustrate, consider the following toy TBox {a mathematical formula}Ta, which defines a vocabulary for the automotive industry:{a mathematical formula} The first two axioms say that minivans and hybrids are automobiles, the third one claims that every automobile is powered by an engine, and the fourth axiom states that every hybrid is powered by an electric engine and also by an internal combustion engine. Thus, the TBox introduces, among others, the concept names (sets) Minivan, Automobile and Engine, states that the concept Minivan is subsumed by the concept Automobile and uses the role name (binary relation) poweredBy to say that automobiles are powered by engines. TBoxes, often called ontologies, are represented in many applications using the syntax of the Web Ontology Language OWL 2 (www.w3.org/TR/owl2-overview).</paragraph><paragraph>The ABox of a knowledge base is a set of facts storing data about the concept and role names introduced in the TBox. As an example ABox in the automotive domain, we will use the following set of assertions:{a mathematical formula} Typical applications of KBs in modern information systems use the semantics of the concepts and roles in the TBox to enable the user to query the data in the ABox. This is particularly useful if the data is incomplete or comes from heterogeneous data sources, which is the case, for example, in linked data applications [1] and large-scale data integration projects [2], [3], or if the data comprises the web content gathered by search engines using semantic markup [4].</paragraph><paragraph>As the data may be incomplete, the open world assumption is adopted when querying a KB {a mathematical formula}K: a tuple a of individuals from {a mathematical formula}K is a (certain) answer to a query q over {a mathematical formula}K if {a mathematical formula}q(a) is true in every model of {a mathematical formula}K. Since general first-order queries are undecidable under the open-world semantics, the basic and most important querying instrument is conjunctive queries (CQs), which are ubiquitous in relational database systems and form the core of the Semantic Web query language SPARQL (www.w3.org/TR/sparql11-query). In our context, a CQ {a mathematical formula}q(x) is a first-order formula {a mathematical formula}∃yφ(x,y) such that {a mathematical formula}φ(x,y) is a conjunction of atoms of the form {a mathematical formula}A(z1) or {a mathematical formula}P(z1,z2), for a concept name A, a role name P, and variables {a mathematical formula}z1,z2 from {a mathematical formula}x,y.{sup:1} For example, to find minivans powered by electric engines, one can use the CQ{a mathematical formula} with toyota_highlander being the only certain answer to {a mathematical formula}q(x) over {a mathematical formula}(Ta,Aa).</paragraph><paragraph>The problem of answering CQs over KBs has been the focus of significant research in the DL community: deep complexity results have been obtained for a broad range of DLs (see below), new DLs have been introduced with tractable (in data complexity) query answering [5], [6], a variety of query answering techniques have been invented [6], [7] and implemented in a number of powerful software systems (see, e.g., [8] and references therein).</paragraph><paragraph>Apart from developing query answering techniques, a major research problem is KB engineering and maintenance. In fact, with typically large data and often complex and tangled ontologies, tool support for transforming and comparing KBs is becoming indispensable for applications. To begin with, KBs are never static entities. Like most software artefacts, they are updated to incorporate new information, and distinct versions are introduced for different applications. Thus, developing support for KB versioning has become an important research problem [9], [10]. As dealing with a large and semantically tangled KB can be costly, one may want to extract from it a smaller module that is indistinguishable from the whole KB as far as the given application is concerned [11]. Another technique for extracting relevant information is forgetting, where the task is to replace a given KB with a new one, which uses only those concept and role names that are needed by the application but still provides the same information about those names as the original KB [12], [13]. Finally, the vocabulary of a given KB may not be convenient for a new application. In this case, similarly to data exchange in databases [14]—where data structured under a source schema is converted to data under a target schema—one may want to transform a KB in a source signature to a KB given in a more useful target signature and representing the original KB in an accurate way. This task is known as knowledge exchange [15], [16].</paragraph><paragraph>In this article, we investigate a relationship between KBs that is fundamental for all such tasks if querying the data via CQs is the main application. Let Σ be a relational signature consisting of a finite set of concept and role names. We say that KBs {a mathematical formula}K1 and {a mathematical formula}K2 are Σ-query inseparable and write {a mathematical formula}K1≡ΣK2 if any CQ formulated in Σ has the same answers over {a mathematical formula}K1 and {a mathematical formula}K2. Note that even for Σ containing all concept and role names in the KBs, Σ-query inseparability does not necessarily imply logical equivalence: for example, {a mathematical formula}(∅,{A(a)}) is {a mathematical formula}{A,B}-query inseparable from {a mathematical formula}({B⊑A},{A(a)}) but the two KBs are clearly not logically equivalent. Thus, if KBs are used for purposes other than querying data via CQs, then different notions of inseparability are required. We now discuss the applications of Σ-query inseparability for the tasks mentioned above in more detail.</paragraph><paragraph>Versioning. Version control systems for KBs provide a range of operations including, for example, computing the relevant differences between KBs, merging KBs and recovering KBs. All these operations rely on checking whether two versions, {a mathematical formula}K1 and {a mathematical formula}K2, of a KB are indistinguishable from the application point of view. If that application is querying the data via CQs in a given relational signature Σ, then {a mathematical formula}K1 and {a mathematical formula}K2 should be regarded as indistinguishable just in case they give the same answers to CQs formulated in Σ. Thus, the basic task for a query-centric approach to KB versioning is to check whether {a mathematical formula}K1≡ΣK2.</paragraph><paragraph>Modularisation. Modularisation and module extraction are major research topics in ontology engineering and maintenance. In module extraction, the problem is to find a (small) subset of the axioms of a given large KB that is indistinguishable from the KB with respect to the intended application. If that application is querying a KB {a mathematical formula}K using CQs in a relational signature Σ, then the problem is to find a small Σ-query module of {a mathematical formula}K, that is, a KB {a mathematical formula}K′⊆K with {a mathematical formula}K′≡ΣK. Note that one can extract a minimal Σ-query module from a KB using a polynomial-time algorithm with the Σ-query inseparability check as an oracle (see, e.g., [17]). To illustrate the notion of Σ-query module, consider the automotive knowledge base {a mathematical formula}Ka=(Ta,Aa) defined above and the relational signature {a mathematical formula}Σm={Automobile,Engine,poweredBy}. Then {a mathematical formula}Km=(Tm,Am) is a {a mathematical formula}Σm-query module of {a mathematical formula}Ka, where{a mathematical formula}</paragraph><paragraph>Knowledge Exchange. In knowledge exchange, we want to transform a KB {a mathematical formula}K1 in a relational signature {a mathematical formula}Σ1 to a KB {a mathematical formula}K2 in a new signature {a mathematical formula}Σ2 connected to {a mathematical formula}Σ1 via a declarative mapping specification given by a TBox {a mathematical formula}T12. Such mapping specifications between KBs are also known as ontology alignments or ontology matchings and have been studied extensively [18]. If, as above, we are interested in querying data via CQs, then the target KB {a mathematical formula}K2 should be a sound and complete representation of {a mathematical formula}K1 with respect to answers to CQs, and so should satisfy the condition {a mathematical formula}K1∪T12≡Σ2K2, in which case it is called a universal CQ-solution. To illustrate, consider again the knowledge base {a mathematical formula}Ka=(Ta,Aa) and let {a mathematical formula}Tae connect the relational signature {a mathematical formula}Σa of {a mathematical formula}Ka to {a mathematical formula}Σe={Car,HybridCar,ElectricMotor,Motor,hasMotor} by means of the following axioms:{a mathematical formula} Then {a mathematical formula}Ke=(Te,Ae) is a universal CQ-solution, where{a mathematical formula}</paragraph><paragraph>Forgetting. A KB {a mathematical formula}K′ is said to result from forgetting a relational signature Σ in a KB {a mathematical formula}K if {a mathematical formula}K′≡sig(K)∖ΣK and {a mathematical formula}sig(K′)⊆sig(K)∖Σ, where {a mathematical formula}sig(K) is the relational signature of {a mathematical formula}K. Thus, the result of forgetting Σ does not use Σ and gives the same answers to CQs without symbols in Σ as {a mathematical formula}K. The result of forgetting is also called a uniform interpolant for {a mathematical formula}K with respect to {a mathematical formula}sig(K)∖Σ. Forgetting is of interest in a number of scenarios. Typically, when reusing an existing KB in a new application, only a small number of its symbols is relevant, and so instead of reusing the whole KB, one can take a potentially smaller KB resulting from forgetting the extraneous symbols. Forgetting can also be used for predicate hiding: if a KB is to be published, but some part of it has to be concealed from the public, then this part can be removed by forgetting its symbols [19]. Finally, forgetting can be used for KB summary: the result of forgetting often provides a smaller and more focused KB that summarises what the original KB says about the retained symbols, potentially facilitating comprehension. To illustrate, the KB {a mathematical formula}Kf=(Tf,Af) results from forgetting {a mathematical formula}Σf={Minivan,Hybrid,ElectricEngine,InternalCombustionEngine} in {a mathematical formula}Ka, where{a mathematical formula}</paragraph><paragraph>In this article, we develop worst-case optimal algorithms deciding Σ-query inseparability of KBs given in various fragments of the description logic {a mathematical formula}Horn-ALCHI[20], which include {a mathematical formula}DL-LitecoreH[6], [21] and {a mathematical formula}ELH⊥dr[22] underlying the OWL 2 profiles OWL 2 QL and OWL 2 EL (www.w3.org/TR/owl2-profiles). The algorithms are based on two characterisations of Σ-query inseparability, one of which is model-theoretic and the other game-theoretic. The former characterises Σ-query inseparability in terms of partial Σ-homomorphisms between materialisations, that is, interpretations {a mathematical formula}M of KBs {a mathematical formula}K such that the certain answers to any CQ q over {a mathematical formula}K coincide with the answers to CQ q over {a mathematical formula}M. Any {a mathematical formula}Horn-ALCHI KB has a materialisation. While materialisations can be infinite, we show that one can always compute a finite generating structure from which a materialisation is obtained by unravelling. We then develop a game-theoretic machinery for checking the existence of partial Σ-homomorphisms between materialisations by playing two-player games on the corresponding finite generating structures. Thus, our algorithms consist of two components: computing finite generating structures for the given KBs and deciding the existence of winning strategies for the games on these structures.</paragraph><paragraph>We use the constructed algorithms to obtain optimal upper bounds for the data and combined complexity of deciding Σ-query inseparability for KBs given in all of the DLs mentioned above. Σ-query inseparability turns out to be P-complete for data complexity, which matches the complexity of CQ evaluation for all of our DLs lying outside the DL-Lite family. For combined complexity, the obtained tight complexity results are summarised in Fig. 1. Most interesting are ExpTime-completeness of {a mathematical formula}DL-LitecoreH and 2ExpTime-completeness of {a mathematical formula}Horn-ALCI, which contrast with NP- and ExpTime-completeness of CQ evaluation for these logics. We note in passing that the 2ExpTime-hardness proof goes through for the fragment {a mathematical formula}ELI of {a mathematical formula}Horn-ALCI. For DL-Lite without role inclusions, {a mathematical formula}EL and {a mathematical formula}ELH⊥dr, Σ-query inseparability is P-complete, while CQ evaluation is NP-complete. In general, it is the combined presence of inverse roles and qualified existential restrictions (or role inclusions) that makes Σ-query inseparability hard. The matching lower bounds are established by a (rather involved) encoding of suitable alternating Turing machines.</paragraph><paragraph>We apply our complexity results for Σ-query inseparability to resolve two important open problems. First, we show that, in knowledge exchange, the membership problem for universal CQ-solutions for {a mathematical formula}DL-LitecoreH KBs is ExpTime-complete for combined complexity, which settles an open question of [23], where only PSpace-hardness was established. Second, we show that deciding Σ-query inseparability of {a mathematical formula}DL-LitecoreH TBoxes (for arbitrary ABoxes) is ExpTime-complete, which closes the PSpace–ExpTime gap that was left open by Konev et al. [24].</paragraph><paragraph>In the definition of Σ-query inseparability above, we took account of all tuples of individuals in the KBs that could be certain answers to CQs. In some applications, however, we may be interested only in a specific set of individuals over which the certain answers should be compared. Let Γ be an individual signature consisting of a finite set of individual names. For KBs {a mathematical formula}K1, {a mathematical formula}K2 and a relational signature Σ, we say that {a mathematical formula}K1 and {a mathematical formula}K2 are {a mathematical formula}(Σ,Γ)-query inseparable if any CQ formulated in Σ has the same certain answers among the individuals in Γ over both {a mathematical formula}K1 and {a mathematical formula}K2, in which case we write {a mathematical formula}K1≡Σ,ΓK2. Clearly, if Γ contains all individuals in {a mathematical formula}K1∪K2, then {a mathematical formula}(Σ,Γ)-query inseparability implies Σ-query inseparability. {a mathematical formula}(Σ,Γ)-query inseparability can be used to refine Σ-query inseparability as a foundation for versioning, modularisation, forgetting and knowledge exchange.</paragraph><paragraph>For instance, a KB {a mathematical formula}K′ is a {a mathematical formula}(Σ,Γ)-query module of a KB {a mathematical formula}K if {a mathematical formula}K′⊆K and {a mathematical formula}K′≡Σ,ΓK. Consider again the automotive ontology {a mathematical formula}Ka=(Ta,Aa) and the relational signature {a mathematical formula}Σm={Automobile,Engine,poweredBy}. Unlike our example illustrating Σ-query modules, we now restrict the individual signature to {a mathematical formula}Γm={toyota_highlander,nissan_note} thereby leaving out hr15de from the set of individuals considered. Then the KB {a mathematical formula}Km′=(Tm′,Am′) is a {a mathematical formula}(Σm,Γm)-query module of {a mathematical formula}Ka, where{a mathematical formula} Thus, the restriction of the individual signature removes the two assertions with hr15de from {a mathematical formula}Am and an axiom from {a mathematical formula}Tm.</paragraph><paragraph>Similarly, a KB {a mathematical formula}K′ results from forgetting {a mathematical formula}(Σ,Γ) in a KB {a mathematical formula}K if {a mathematical formula}K′≡sig(K)∖Σ,ind(K)∖ΓK, {a mathematical formula}sig(K′)⊆sig(K)∖Σ and {a mathematical formula}ind(K′)⊆ind(K)∖Γ, where {a mathematical formula}ind(K) is the set of individuals in the ABox of {a mathematical formula}K. In this case, for {a mathematical formula}Γf={hr15de}, the KB {a mathematical formula}Kf′=(Tf′,Af′) results from forgetting {a mathematical formula}(Σf,Γf) in {a mathematical formula}Ka, where{a mathematical formula}</paragraph><paragraph>In knowledge exchange, the refined notion of query inseparability can be used to represent a more flexible knowledge exchange model, which allows additional individuals in the target KB. These ‘anonymous’ individuals are similar to nulls in the standard approaches to incomplete databases [25]. Thus, we say that a KB {a mathematical formula}K2 with a relational signature {a mathematical formula}Σ2 is a universal CQ-solution with nulls for a KB {a mathematical formula}K1 and a mapping specification {a mathematical formula}T12 if {a mathematical formula}K1∪T12≡Σ2,ind(K1)K2 (here, the individuals in {a mathematical formula}ind(K2)∖ind(K1) play the role of nulls). To illustrate, we consider again the knowledge exchange example given above with the same {a mathematical formula}Σe and {a mathematical formula}Tae. Observe first that {a mathematical formula}Ke is also a universal CQ-solution with nulls. On the other hand, there are universal CQ-solutions with nulls that are not universal CQ-solutions. To illustrate, let {a mathematical formula}m1 be a fresh individual name. Then {a mathematical formula}Ke′=(∅,Ae′) is a universal CQ-solution with nulls for {a mathematical formula}Ka and {a mathematical formula}Tae, where{a mathematical formula} Intuitively, {a mathematical formula}Ae′ is a materialisation of all consequences of {a mathematical formula}Ka∪Tae in the relational signature {a mathematical formula}Σe and, among individuals of {a mathematical formula}Ka, it clearly gives rise to the same answers to all CQs formulated in {a mathematical formula}Σe (the additional individual, {a mathematical formula}m1, is not counted when comparing the CQ answers). The interested reader is referred to [23] for more explanations on the advantages of this notion.</paragraph><paragraph>We extend our algorithms deciding Σ-inseparability to algorithms deciding {a mathematical formula}(Σ,Γ)-inseparability and investigate the data and combined complexity of the problem for KBs given in the same fragments of {a mathematical formula}Horn-ALCHI as before. In contrast to Σ-query inseparability, which is P-complete for data complexity for all of those fragments, deciding {a mathematical formula}(Σ,Γ)-query inseparability turns out to be NP-complete for data complexity. (In fact, it is NP-hard already for KBs without TBoxes since {a mathematical formula}(Σ,Γ)-query inseparability is then equivalent to the problem of deciding the existence of a homomorphism from one relational structure to another, which is known to be NP-hard.) For combined complexity, {a mathematical formula}(Σ,Γ)-query inseparability is exactly as hard as Σ-query inseparability whenever it is already NP-hard.</paragraph><paragraph>The remainder of the article is structured as follows. In Section 2, we introduce the syntax and semantics of the DLs considered in this article. In Section 3, we provide a model-theoretic characterisation of conjunctive query inseparability based on materialisations and introduce finite generating structures from which materialisations are obtained by unravelling. We also analyse our algorithms computing generating structures and their relevant properties, depending on the DLs considered. In Section 4, we develop games on generating structures and the corresponding algorithms for deciding inseparability, using which we obtain complexity upper bounds. Section 5 is devoted to proving matching lower complexity bounds. In Section 6, we refine Σ-inseparability by considering restricted sets of individuals in KBs and, in Section 7, we discuss related work and how our results can be (or have been) applied to solve open problems in knowledge exchange, TBox inseparability and for the comparison of OBDA (ontology-based data access) specifications. We conclude with a discussion of future work in Section 8.</paragraph></section><section label="2">{a mathematical formula}Horn-ALCHI and its fragments<paragraph>In this article, we investigate Σ- and {a mathematical formula}(Σ,Γ)-query inseparability of KBs given in DLs that are Horn fragments{sup:2} of {a mathematical formula}ALCHI. To define these DLs, we fix sequences of individual names{a mathematical formula}ai, concept names{a mathematical formula}Ai, and role names{a mathematical formula}Pi, for {a mathematical formula}i&lt;ω. A role is either a role name {a mathematical formula}Pi or an inverse role{a mathematical formula}Pi−; we assume that {a mathematical formula}(Pi−)−=Pi. {a mathematical formula}ALCI-concepts are defined by the grammar{a mathematical formula} where R is a role. {a mathematical formula}ALC-concepts are those {a mathematical formula}ALCI-concepts that do not contain inverse roles. {a mathematical formula}ALCI-TBoxes and {a mathematical formula}ALC-TBoxes are finite sets of concept inclusions of the form{a mathematical formula} where the {a mathematical formula}Ci are {a mathematical formula}ALCI- or, respectively, {a mathematical formula}ALC-concepts. {a mathematical formula}ALCHI-TBoxes are finite sets of concept inclusions in {a mathematical formula}ALCI and role inclusions of the form{a mathematical formula} where the {a mathematical formula}Ri are roles. {a mathematical formula}ALCH-TBoxes are {a mathematical formula}ALCHI-TBoxes that do not contain occurrences of inverse roles.</paragraph><paragraph>The DLs in the {a mathematical formula}EL and DL-Lite families are sub-Boolean fragments of {a mathematical formula}ALCHI. {a mathematical formula}EL-concepts are defined by the grammar{a mathematical formula} In other words, they are {a mathematical formula}ALC-concepts without ⊥, ⊔, ¬ and {a mathematical formula}∀Pi.C. Note that {a mathematical formula}EL does not have inverse roles. {a mathematical formula}EL-TBoxes are finite sets of concepts inclusions in {a mathematical formula}EL. {a mathematical formula}ELH⊥dr is an extension of {a mathematical formula}EL with ⊥, role inclusions and domain and range restrictions. Thus, {a mathematical formula}ELH⊥dr-concepts are defined similarly to {a mathematical formula}EL-concepts but can also use ⊥, and {a mathematical formula}ELH⊥dr-TBoxes consist of a finite number of {a mathematical formula}ELH⊥dr-concept inclusions, role inclusions (without inverse roles), and range restrictions of the form{a mathematical formula} (domain restrictions are expressible by means of concept inclusions {a mathematical formula}∃Pi.⊤⊑C). Clearly, {a mathematical formula}EL and {a mathematical formula}ELH⊥dr are sub-languages of {a mathematical formula}ALC and {a mathematical formula}ALCH, respectively.</paragraph><paragraph>Basic concepts in DL-Lite are defined by the following grammar:{a mathematical formula} where R is a (possibly inverse) role. Existential quantifiers {a mathematical formula}∃R.⊤ are called unqualified, and we usually write ∃R instead of {a mathematical formula}∃R.⊤. {a mathematical formula}DL-Litecore-TBoxes are finite sets of concept inclusions of the form{a mathematical formula} where the {a mathematical formula}Bi are basic concepts. {a mathematical formula}DL-Litehorn-TBoxes consist of a finite number of concept inclusions of the form{a mathematical formula}{a mathematical formula}DL-LitecoreH- and {a mathematical formula}DL-LitehornH-TBoxes contain, in addition, a finite number of role inclusions and role disjointness axioms of the form {a mathematical formula}R1⊓R2⊑⊥. Note that, unlike {a mathematical formula}EL and {a mathematical formula}ELH⊥dr, the DL-Lite logics do have inverse roles.</paragraph><paragraph>To introduce the Horn fragments of the DLs with the Booleans operators, we require the following (standard) recursive definition [5], [26]. We say that a concept C occurs positively in C itself and, if C occurs positively (negatively) in {a mathematical formula}C′, then</paragraph><list><list-item label="–">C occurs positively (respectively, negatively) in {a mathematical formula}C′⊔D, {a mathematical formula}C′⊓D, {a mathematical formula}∃R.C′, {a mathematical formula}∀R.C′, {a mathematical formula}D⊑C′, and</list-item><list-item label="–">C occurs negatively (respectively, positively) in {a mathematical formula}¬C′ and {a mathematical formula}C′⊑D.</list-item></list><paragraph> Now, we call a TBox {a mathematical formula}THorn if no concept of the form {a mathematical formula}C⊔D occurs positively in {a mathematical formula}T, and no concept of the form ¬C or {a mathematical formula}∀R.C occurs negatively in {a mathematical formula}T. Clearly, the {a mathematical formula}EL- and DL-Lite-TBoxes are Horn by definition. For any other DL {a mathematical formula}L (e.g., {a mathematical formula}ALCHI), only Horn {a mathematical formula}L-TBoxes are allowed in the DL Horn-{a mathematical formula}L.</paragraph><paragraph>An ABox, {a mathematical formula}A, is a finite set of assertions of the form {a mathematical formula}Ak(ai) or {a mathematical formula}Pk(ai,aj). An {a mathematical formula}L-TBox {a mathematical formula}T and an ABox {a mathematical formula}A together form an {a mathematical formula}Lknowledge base (KB) {a mathematical formula}K=(T,A).</paragraph><paragraph>A relational signature is any non-empty finite set of concept and role names. An individual signature is a (possibly empty) finite set of individual names. We usually denote a relational signature by Σ, an individual signature by Γ, and sometimes call the pair {a mathematical formula}(Σ,Γ) simply a signature. The relational signature of a KB {a mathematical formula}K=(T,A), which consists of the concept and role names occurring in {a mathematical formula}K, is denoted by {a mathematical formula}sig(K). The individual signature of {a mathematical formula}K, comprising the individual names in {a mathematical formula}A, is denoted by {a mathematical formula}ind(K). In this article, we are not interested in KBs with empty ABoxes, and so both {a mathematical formula}sig(K) and {a mathematical formula}ind(K) are non-empty by definition. By a Σ-concept, Σ-role, Σ-ABox, etc. we understand any concept, role, ABox, etc. all of whose concept and role names are taken from Σ.</paragraph><paragraph>Let {a mathematical formula}(Σ,Γ) be a signature. In our interpretations, we adopt the standard name assumption in the sense that every individual name {a mathematical formula}a∈Γ is interpreted by itself. A {a mathematical formula}(Σ,Γ)-interpretation is a pair {a mathematical formula}I=(ΔI,⋅I), where {a mathematical formula}ΔI⊇Γ is a non-empty set, the domain of {a mathematical formula}I, and {a mathematical formula}⋅I is an interpretation function that assigns a subset {a mathematical formula}AI⊆ΔI to every concept name A and a binary relation {a mathematical formula}PI⊆ΔI×ΔI to every role name P in such a way that {a mathematical formula}AI=∅ and {a mathematical formula}PI=∅, for any {a mathematical formula}A∉Σ and {a mathematical formula}P∉Σ. (Note that only the individual names from Γ are interpreted in {a mathematical formula}I and although the list of individual names is countably infinite, {a mathematical formula}ΔI may be finite. Note also that the concept and role names outside Σ are always interpreted as ∅.) When we use the terms ‘interpretation’, ‘Σ-interpretation’ or ‘Γ-interpretation’ without specifying a full signature, we mean a {a mathematical formula}(Σ,Γ)-interpretation for some suitable {a mathematical formula}(Σ,Γ); the same applies to other notions with the prefix {a mathematical formula}(Σ,Γ) to be introduced below.</paragraph><paragraph>Roles and complex concepts are interpreted in {a mathematical formula}I as follows:{a mathematical formula} For an inclusion or assertion α (whose individual names belong to Γ), we define the truth-relation{a mathematical formula}I⊨α by taking:{a mathematical formula} Given a KB {a mathematical formula}K=(T,A), a Γ-interpretation {a mathematical formula}I is called a model of {a mathematical formula}K if {a mathematical formula}ind(K)⊆Γ and {a mathematical formula}I⊨α, for all {a mathematical formula}α∈T∪A. In this case we write {a mathematical formula}I⊨K. We write {a mathematical formula}K⊨α, for an inclusion or assertion α that only uses individual names from {a mathematical formula}ind(K), if {a mathematical formula}I⊨α for all models {a mathematical formula}I of {a mathematical formula}K. The notation {a mathematical formula}K⊨C(a), where C is any concept and {a mathematical formula}a∈ind(K), should be understood in the same way. Finally, {a mathematical formula}K is consistent if it has a model.</paragraph><paragraph>A conjunctive query (CQ) {a mathematical formula}q(x) is a formula {a mathematical formula}∃yφ(x,y), where φ is a conjunction of atoms of the form {a mathematical formula}Ak(z1) or {a mathematical formula}Pk(z1,z2) with {a mathematical formula}z1,z2 from {a mathematical formula}x,y. Let {a mathematical formula}K be a KB and {a mathematical formula}q(x) a CQ. We call a tuple a of elements from {a mathematical formula}ind(K) (of the same length as x) a certain answer to {a mathematical formula}q(x) over {a mathematical formula}K if {a mathematical formula}I⊨q(a) for all models {a mathematical formula}I of {a mathematical formula}K (understood as first-order structures). In this case we write {a mathematical formula}K⊨q(a). For q without free variables, the answer to q is ‘yes’ if {a mathematical formula}K⊨q and ‘no’ otherwise. We slightly abuse notation and write {a mathematical formula}a⊆Γ to say that all elements of the tuple a are in Γ.</paragraph><paragraph>We remind the reader that, for combined complexity, the problem ‘{a mathematical formula}K⊨q(a)?’ is NP-complete for the DL-Lite logics [6], {a mathematical formula}EL and {a mathematical formula}ELH⊥dr[27], and ExpTime-complete for the remaining Horn DLs introduced above [28]. For data complexity (with fixed {a mathematical formula}T and q), this problem is in AC{sup:0} for the DL-Lite logics [6] and P-complete for the remaining DLs [27], [28].</paragraph></section><section label="3">Σ-query entailment, materialisation and {a mathematical formula}(Σ,Γ)-homomorphism<paragraph>We now define the central concepts of the article, Σ-query entailment and Σ-query inseparability, provide them with a semantic characterisation based on the notion of materialisation, and develop a theory of finitely generated materialisations.</paragraph><paragraph label="Definition 1">Let {a mathematical formula}K1 and {a mathematical formula}K2 be KBs and Σ a relational signature. We say that {a mathematical formula}K1 Σ-query entails{a mathematical formula}K2 if{a mathematical formula} Knowledge bases {a mathematical formula}K1 and {a mathematical formula}K2 are Σ-query inseparable if they Σ-query entail each other; in this case we write {a mathematical formula}K1≡ΣK2.</paragraph><paragraph label="Remark 2">For KBs given in Horn DLs, Σ-query entailment for CQs implies Σ-query entailment for UCQs, that is, unions (or disjunctions) of conjunctive queries. This follows from the fact that, for any KB {a mathematical formula}K in a Horn DL and any UCQ {a mathematical formula}q(x), a tuple a is a certain answer to {a mathematical formula}q(x) over {a mathematical formula}K iff it is a certain answer to some CQ in {a mathematical formula}q(x) over {a mathematical formula}K. Thus, our results for Σ-query entailment and inseparability apply to UCQs as well.</paragraph><paragraph>We first quickly consider Σ-query entailment for the degenerate case when one of the involved KBs is inconsistent so that in the remainder of the article we can focus on consistent KBs only. Clearly, an inconsistent {a mathematical formula}K1 Σ-query entails a KB {a mathematical formula}K2 just in case {a mathematical formula}a∈ind(K1) for all {a mathematical formula}a∈ind(K2) with either {a mathematical formula}K2⊨A(a) or {a mathematical formula}K2⊨(∃R)(a), for some {a mathematical formula}A∈Σ or Σ-role R. Now, suppose that {a mathematical formula}K1 is consistent and {a mathematical formula}K2 is inconsistent. Then {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2 iff {a mathematical formula}K1⊨A(a) and {a mathematical formula}K1⊨P(a,b), for all concept and role names {a mathematical formula}A,P∈Σ and all {a mathematical formula}a,b∈ind(K2). Thus, deciding Σ-query entailment in this case reduces to checking certain answers for all atomic Σ-CQs. A simple example showing that a consistent KB {a mathematical formula}K1 can Σ-query entail an inconsistent KB {a mathematical formula}K2 is given by {a mathematical formula}K1=(∅,{A(a)}) and {a mathematical formula}K2=({A⊑⊥},{A(a)}) with {a mathematical formula}Σ={A}. From now on we assume that all our KBs are consistent.</paragraph><paragraph label="Definition 3">Let {a mathematical formula}K be a KB. A {a mathematical formula}(sig(K),ind(K))-interpretation {a mathematical formula}I is called a materialisation of {a mathematical formula}K if{a mathematical formula} We say that {a mathematical formula}K is materialisable if it has a materialisation. (Note that a materialisation of {a mathematical formula}K is not required to be its model.)</paragraph><paragraph>Materialisations can be used to characterise Σ-query entailment by means of homomorphisms. Let {a mathematical formula}(Σ,Γ) be a signature. For an interpretation {a mathematical formula}I, the atomic Σ-types{a mathematical formula}tΣI(u) and {a mathematical formula}rΣI(u,v) of {a mathematical formula}u,v∈ΔI are defined by taking:{a mathematical formula} (It is to be emphasised that a Σ-role can be an inverse role even when we consider a language without role inverses.) We say that an element {a mathematical formula}u∈ΔI is Σ-participating in{a mathematical formula}I if {a mathematical formula}tΣI(u)≠∅ or {a mathematical formula}rΣI(u,v)≠∅, for some {a mathematical formula}v∈ΔI. The set of all individual names that are Σ-participating in {a mathematical formula}I is denoted by {a mathematical formula}partΣI. Let {a mathematical formula}Ii be {a mathematical formula}Γi-interpretations, for {a mathematical formula}i=1,2, such that {a mathematical formula}Γ∩partΣI1⊆Γ2. A {a mathematical formula}(Σ,Γ)-homomorphism h from {a mathematical formula}I1 to {a mathematical formula}I2 is a function {a mathematical formula}h:ΔI1→ΔI2 such that</paragraph><list><list-item label="–">{a mathematical formula}h(a)=a, for every {a mathematical formula}a∈Γ∩partΣI1,</list-item><list-item label="–">{a mathematical formula}tΣI1(u)⊆tΣI2(h(u)) and {a mathematical formula}rΣI1(u,v)⊆rΣI2(h(u),h(v)), for all {a mathematical formula}u,v∈ΔI1.</list-item></list><paragraph label="Example 4">For {a mathematical formula}Γ1={a,b,c}, let {a mathematical formula}I1 be a {a mathematical formula}Γ1-interpretation with {a mathematical formula}ΔI1={a,b,c}, {a mathematical formula}AI1={a}, {a mathematical formula}BI1={b} and {a mathematical formula}CI1={c}. If {a mathematical formula}Σ={A} then {a mathematical formula}partΣI1={a} as neither b nor c is Σ-participating in {a mathematical formula}I1. For {a mathematical formula}Γ2={a,b,d}, let {a mathematical formula}I2 be a {a mathematical formula}Γ2-interpretation with {a mathematical formula}ΔI2={a,b,d}, {a mathematical formula}AI2={a}, {a mathematical formula}BI2={d} and {a mathematical formula}CI2={b}. In this case, any map {a mathematical formula}h:ΔI1→ΔI2 with {a mathematical formula}h(a)=a is a {a mathematical formula}({A},{a,b})-homomorphism from {a mathematical formula}I1 to {a mathematical formula}I2. However, there is no {a mathematical formula}({A,B},{a,b})-homomorphism from {a mathematical formula}I1 to {a mathematical formula}I2 because {a mathematical formula}part{A,B}I1={a,b} but {a mathematical formula}t{A,B}I1(b)⊈t{A,B}I2(b).</paragraph><paragraph>We remind the reader of the following well-known link between certain answers to CQs and homomorphisms. Consider a CQ {a mathematical formula}q(x)=∃yφ(x,y), a {a mathematical formula}Γ′-interpretation {a mathematical formula}I, and a tuple {a mathematical formula}a⊆Γ′ of the same length as x. Let Σ be the relational signature of q, and let Γ be the set of individuals in a. We can regard {a mathematical formula}φ(a,y) as a {a mathematical formula}(Σ,Γ)-interpretation {a mathematical formula}Iφ(a,y) whose domain consists of the individuals in a and variables in y, and {a mathematical formula}Iφ(a,y)⊨S(z) iff {a mathematical formula}S(z) is a conjunct of {a mathematical formula}φ(a,y). In this case, we have {a mathematical formula}I⊨q(a) iff there is a {a mathematical formula}(Σ,Γ)-homomorphism from {a mathematical formula}Iφ(a,y) to {a mathematical formula}I.</paragraph><paragraph label="Example 5">Suppose {a mathematical formula}Ii is a materialisation of {a mathematical formula}Ki, for {a mathematical formula}i=1,2. Since a composition of homomorphisms is again a homomorphism, if there is a {a mathematical formula}(Σ,ind(K2))-homomorphism from {a mathematical formula}I2 to {a mathematical formula}I1, then {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2. The converse, however, does not necessarily hold, as shown by the following example. Consider the KBs {a mathematical formula}Ki=(Ti,{A(a)}), for {a mathematical formula}i=1,2, where{a mathematical formula} It is not hard to see (and it will be formally established below) that the interpretations {a mathematical formula}I1 and {a mathematical formula}I2 shown in Fig. 2 are materialisations of {a mathematical formula}K1 and {a mathematical formula}K2, respectively. Now, for {a mathematical formula}Σ={Q,R,S,T}, there is no {a mathematical formula}(Σ,{a})-homomorphism from {a mathematical formula}I2 to {a mathematical formula}I1. Indeed, if we map u to, say, w then only the shaded part of {a mathematical formula}I2 can be mapped {a mathematical formula}(Σ,{a})-homomorphically to {a mathematical formula}I1. On the other hand, {a mathematical formula}I2⊨q(a) implies {a mathematical formula}I1⊨q(a), for any Σ-CQ {a mathematical formula}q(x), because any finite subinterpretation of {a mathematical formula}I2 can be {a mathematical formula}(Σ,{a})-homomorphically mapped to {a mathematical formula}I1. This example motivates the following definitions.</paragraph><paragraph>A subinterpretation of a {a mathematical formula}(Σ,Γ)-interpretation {a mathematical formula}I=(ΔI,⋅I) is a {a mathematical formula}(Σ,Γ)-interpretation {a mathematical formula}I′=(ΔI′,⋅I′) with {a mathematical formula}ΔI′⊆ΔI, {a mathematical formula}AI′=AI∩ΔI′ and {a mathematical formula}PI′=PI∩(ΔI′×ΔI′), for all concept and role names A and P. Now, given a signature {a mathematical formula}(Σ,Γ), we say that an interpretation {a mathematical formula}I2 is finitely{a mathematical formula}(Σ,Γ)-homomorphically embeddable into an interpretation {a mathematical formula}I1 if, for every finite subinterpretation {a mathematical formula}I2′ of {a mathematical formula}I2, there exists a {a mathematical formula}(Σ,Γ)-homomorphism from {a mathematical formula}I2′ to {a mathematical formula}I1.</paragraph><paragraph label="Theorem 6">In the proof of the following criterion of Σ-query entailment, we regard any finite subinterpretation of {a mathematical formula}I2 as a CQ whose variables are the elements of {a mathematical formula}ΔI2, with {a mathematical formula}ind(K2) being the answer variables. Suppose{a mathematical formula}Kiis a KB with a materialisation{a mathematical formula}Ii, for{a mathematical formula}i=1,2. Then{a mathematical formula}K1 Σ-query entails{a mathematical formula}K2iff{a mathematical formula}I2is finitely{a mathematical formula}(Σ,ind(K2))-homomorphically embeddable into{a mathematical formula}I1.</paragraph><paragraph label="Proof">(⇒) Suppose {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2. Let {a mathematical formula}a=(a1,…,an) be an enumeration of the individual names in {a mathematical formula}ind(K2) that are Σ-participating in {a mathematical formula}I2. Take any finite subinterpretation {a mathematical formula}I2′ of {a mathematical formula}I2 and let {a mathematical formula}u1,…,un+m be an enumeration of those elements of {a mathematical formula}ΔI2′ that are Σ-participating in {a mathematical formula}I2 and such that {a mathematical formula}ui=ai, for {a mathematical formula}i≤n. Consider a Σ-CQ{a mathematical formula} Since {a mathematical formula}I2⊨φ(u1,…,un+m), we have {a mathematical formula}I2⊨q(a) and, since {a mathematical formula}I2 is a materialisation, {a mathematical formula}K2⊨q(a). As {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2, we have {a mathematical formula}a⊆ind(K1) and {a mathematical formula}K1⊨q(a). Since {a mathematical formula}I1 is a materialisation, {a mathematical formula}I1⊨q(a), and so {a mathematical formula}I1⊨φ(a,vn+1,…,vn+m), for some {a mathematical formula}vn+1,…,vn+m∈ΔI1. Define a map {a mathematical formula}h:ΔI2′→ΔI1 by taking {a mathematical formula}h(ai)=ai, for {a mathematical formula}i≤n, and {a mathematical formula}h(un+i)=vn+i, for {a mathematical formula}i≤m (the rest of the domain of {a mathematical formula}I2′ can be mapped arbitrarily as they are not Σ-participating in it). It can be readily seen that h is a {a mathematical formula}(Σ,Γ)-homomorphism from {a mathematical formula}I2′ to {a mathematical formula}I1.(⇐) Suppose {a mathematical formula}I2 is finitely {a mathematical formula}(Σ,ind(K2))-homomorphically embeddable into {a mathematical formula}I1. Consider a Σ-CQ {a mathematical formula}q(x)=∃yφ(x,y) and let {a mathematical formula}K2⊨q(a), for some {a mathematical formula}a⊆ind(K2). Since {a mathematical formula}I2 is a materialisation of {a mathematical formula}K2, there is a tuple {a mathematical formula}u=(u1,…,um) of elements in {a mathematical formula}ΔI2 such that {a mathematical formula}I2⊨φ(a,u). Let {a mathematical formula}I2′ be the subinterpretation of {a mathematical formula}I2 with {a mathematical formula}ΔI2′=ind(K2)∪{u1,…,um} and let h be a {a mathematical formula}(Σ,ind(K2))-homomorphism from {a mathematical formula}I2′ to {a mathematical formula}I1. Observe that each individual in a is Σ-participating in {a mathematical formula}I2′, and so {a mathematical formula}h(ai)=ai, for each {a mathematical formula}ai in a. We also have {a mathematical formula}I1⊨φ(a,h(u1),…,h(um)), whence {a mathematical formula}a⊆ind(K1) and {a mathematical formula}K1⊨q(a).  □</paragraph><paragraph>One problem with applying Theorem 6 is that materialisations are in general infinite for any of the DLs considered in this article. We address this problem by introducing finite representations of materialisations and showing that {a mathematical formula}Horn-ALCHI and all of its fragments defined above do have such finite representations.</paragraph><paragraph label="Definition 7">Let {a mathematical formula}K be a KB and let {a mathematical formula}G=(ΔG,⋅G,↝) be a finite structure such that<list>{a mathematical formula}ΔG=ind(K)∪Ω, for some set Ω disjoint from {a mathematical formula}ind(K),{a mathematical formula}(ΔG,⋅G) is an interpretation with {a mathematical formula}PiG⊆ind(K)×ind(K), for all role names {a mathematical formula}Pi,{a mathematical formula}(ΔG,↝) is a directed graph (possibly containing loops) with nodes {a mathematical formula}ΔG and arrows {a mathematical formula}↝⊆ΔG×Ω, in whichThe </list><paragraph>unravelling{a mathematical formula}M of {a mathematical formula}G is a {a mathematical formula}(sig(K),ind(K))-interpretation {a mathematical formula}(ΔM,⋅M) such that{a mathematical formula} where {a mathematical formula}tail(σ) is the last element of a path σ. We call {a mathematical formula}G a generating structure for{a mathematical formula}K if its unravelling is a materialisation of {a mathematical formula}K. We say that a DL {a mathematical formula}L has finitely generated materialisations if every {a mathematical formula}L-KB has a generating structure.</paragraph></paragraph><paragraph>For instance, the materialisations {a mathematical formula}I2 and {a mathematical formula}I1 from Example 5 are isomorphic to the unravellings of the structures {a mathematical formula}G2 and {a mathematical formula}G1 in Fig. 2, respectively, and so {a mathematical formula}Gi is a generating structure for the KB {a mathematical formula}Ki from that example, for {a mathematical formula}i=1,2.</paragraph><paragraph label="Theorem 8">To construct generating structures for KBs, we first transform their TBoxes into normal form [20]. Let {a mathematical formula}L be any of our DLs. An {a mathematical formula}L-TBox is said to be in normal form if its inclusions are of the following form:{a mathematical formula} where {a mathematical formula}A,A1,A2 are concept names, C is a concept name or ⊤, and {a mathematical formula}R,R1,R2 are roles. To describe the relationship between a TBox and its transformation into normal form, we introduce the notion of model inseparability. Let {a mathematical formula}(Σ,Γ) be a signature. We say that Γ-interpretations {a mathematical formula}I1 and {a mathematical formula}I2coincide on Σ if {a mathematical formula}ΔI1=ΔI2 and {a mathematical formula}SI1=SI2, for all {a mathematical formula}S∈Σ; in this case we write {a mathematical formula}I1=ΣI2. KBs {a mathematical formula}K1 and {a mathematical formula}K2 with {a mathematical formula}ind(K1)=ind(K2) are called Σ-model inseparable if, for every model {a mathematical formula}I1 of {a mathematical formula}K1, there exists a model {a mathematical formula}I2 of {a mathematical formula}K2 such that {a mathematical formula}I2=ΣI1, and vice versa. The following was shown in [20], [28], [22]: Let{a mathematical formula}Lbe any of our DLs. Given a consistent{a mathematical formula}L-KB{a mathematical formula}K=(T,A), one can construct in polynomial time an{a mathematical formula}L-KB{a mathematical formula}K=(T′,A)in normal form such that{a mathematical formula}Kand{a mathematical formula}K′are{a mathematical formula}sig(T)-model inseparable.</paragraph><paragraph>(Note that the ‘negative’ axioms of the form {a mathematical formula}A⊑⊥, {a mathematical formula}A1⊓A2⊑⊥ and {a mathematical formula}R1⊓R2⊑⊥ can be removed from a TBox if the knowledge base is known to be consistent.)</paragraph><paragraph>We show now how to define the generating structures. Suppose we are given a (consistent) KB {a mathematical formula}K=(T,A) with a {a mathematical formula}Horn-ALCHI TBox {a mathematical formula}T in normal form. For a role R, the equivalence class{a mathematical formula}[R]of R with respect to{a mathematical formula}T is defined by taking{a mathematical formula} Denote by {a mathematical formula}con(T) the set of</paragraph><list><list-item label="–">concepts of the form ⊤, A and {a mathematical formula}∃R.A that occur in {a mathematical formula}T, as well as</list-item><list-item label="–">concepts of the form {a mathematical formula}∃R−.C such that {a mathematical formula}T contains {a mathematical formula}C⊑∀R.A.</list-item></list><paragraph> The {a mathematical formula}T-type of{a mathematical formula}u∈ΔIin{a mathematical formula}I is the set {a mathematical formula}τTI(u)={C∈con(T)|u∈CI}. We say that {a mathematical formula}τ⊆con(T) is a {a mathematical formula}T-type if there exists a model {a mathematical formula}I of {a mathematical formula}T such that {a mathematical formula}τ=τTI(u), for some {a mathematical formula}u∈ΔI. Denote by {a mathematical formula}type(T) the set of all {a mathematical formula}T-types. It is well-known [29] that {a mathematical formula}type(T) can be computed in exponential time in {a mathematical formula}|T|. We can order {a mathematical formula}T-types by the set-theoretic inclusion ⊆. Sometimes we use τ in concepts (say, {a mathematical formula}∃R.τ), in which case it should be understood as an abbreviation for {a mathematical formula}⨅C∈τC.</paragraph><paragraph>Now, we define the generating relation ↝ on the set comprising {a mathematical formula}ind(K) and {a mathematical formula}ΩT, which is the set of all pairs of the form {a mathematical formula}([R],τ), for a role R in {a mathematical formula}T and {a mathematical formula}τ∈type(T). For {a mathematical formula}a∈ind(K) and {a mathematical formula}([R1],τ1),([R2],τ2)∈ΩT, we set{a mathematical formula} The generating structure{a mathematical formula}G=(ΔG,⋅G,↝) is defined as follows. Let {a mathematical formula}Ω⊆ΩT be the set of all w such that there are {a mathematical formula}a∈ind(K) and {a mathematical formula}w1,…,wn∈ΩT with {a mathematical formula}a↝w1↝…↝wn=w; in other words, Ω is the subset of {a mathematical formula}ΩT that is reachable from {a mathematical formula}ind(K) via ↝-arrows. Thus, {a mathematical formula}ΔG=ind(K)∪Ω. (The restriction of ↝ to {a mathematical formula}ΔG will also be denoted by ↝.) Second, the interpretation function {a mathematical formula}⋅G and the labelling of the graph {a mathematical formula}(ΔG,↝) are defined by setting{a mathematical formula} (here we assume that {a mathematical formula}P−(b,a)∈A if {a mathematical formula}P(a,b)∈A). In order to show that the constructed {a mathematical formula}G=(ΔG,⋅G,↝) is indeed a generating structure for {a mathematical formula}K, we need to establish that its unravelling is a materialisation.</paragraph><paragraph label="Theorem 9">Let{a mathematical formula}K=(T,A)be a (consistent) KB with a{a mathematical formula}Horn-ALCHITBox in normal form. Let{a mathematical formula}Gbe the structure defined above. Then the unravelling{a mathematical formula}Mof{a mathematical formula}Gis a materialisation of{a mathematical formula}K, and{a mathematical formula}Gis a generating structure for{a mathematical formula}K.</paragraph><paragraph label="Lemma 10">We require two lemmas. The proof of the first one is routine and can be found in Appendix A: {a mathematical formula}Mis a model of{a mathematical formula}K. Moreover,<list>{a mathematical formula}τTM(a)={C∈con(T)|K⊨C(a)}, for all{a mathematical formula}a∈ind(K);{a mathematical formula}τTM(σ)=τ, for all{a mathematical formula}σ∈ΔMwith{a mathematical formula}tail(σ)=([R],τ).The second lemma says that </list><paragraph label="Proof">{a mathematical formula}M is a universal model of {a mathematical formula}K in the following sense: For every model{a mathematical formula}Iof{a mathematical formula}K, there exists a{a mathematical formula}(sig(K),ind(K))-homomorphism from{a mathematical formula}Mto{a mathematical formula}I.Let {a mathematical formula}Σ=sig(K) and {a mathematical formula}Γ=ind(K). By induction on the length of {a mathematical formula}σ∈ΔM, we define a function {a mathematical formula}h:ΔM→ΔI which satisfies the following properties implying that h is a {a mathematical formula}(Σ,Γ)-homomorphism:{a mathematical formula}{a mathematical formula}{a mathematical formula} (Note that (2) refers to the full {a mathematical formula}T-types comprising concepts of the form ⊤, A and {a mathematical formula}∃R.B rather than the atomic Σ-types t containing only concept names.)First, for each {a mathematical formula}a∈Γ, we set {a mathematical formula}h(a)=a in accordance with (1). Conditions (2) and (3) for {a mathematical formula}σ,σ′∈Γ follow from Lemma 10, the fact that {a mathematical formula}I is a model of {a mathematical formula}K, and the construction of {a mathematical formula}M.Suppose now that {a mathematical formula}h(σ) has already been defined for {a mathematical formula}σ⋅([S],τ)∈ΔM. By the construction of {a mathematical formula}M, it follows that {a mathematical formula}K⊨(∃S.τ)(a) if {a mathematical formula}σ=a, or {a mathematical formula}T⊨τ′⊑∃S.τ if {a mathematical formula}tail(σ)=([S′],τ′). Since {a mathematical formula}I⊨K, by Lemma 10 and the induction hypothesis—{a mathematical formula}τTM(σ)⊆τTI(h(σ))—it follows that there exists {a mathematical formula}z∈ΔI such that {a mathematical formula}S∈rΣI(h(σ),z) and {a mathematical formula}τ⊆τTI(z). We set {a mathematical formula}h(σ⋅([S],τ))=z and show that (2) and (3) hold. By Lemma 10, we have {a mathematical formula}τTM(σ⋅([S],τ))=τ, whence (2). Next, observe that {a mathematical formula}R∈rΣM(σ,σ⋅([S],τ)) follows from {a mathematical formula}T⊨S⊑R, and since {a mathematical formula}I is a model of {a mathematical formula}T, we obtain {a mathematical formula}R∈rΣI(h(σ),z), thus proving (3).  □We are now in a position to complete the proof of Theorem 9. We show that {a mathematical formula}K⊨q(a) if and only if {a mathematical formula}M⊨q(a), for any CQ {a mathematical formula}q(x)=∃yφ(x,y) and {a mathematical formula}a⊆ind(K). If {a mathematical formula}K⊨q(a) then, by Lemma 10, {a mathematical formula}M⊨q(a). Conversely, suppose {a mathematical formula}M⊨q(a). Then there exist a tuple {a mathematical formula}σ=(σ1,…,σm) of elements in {a mathematical formula}ΔM such that {a mathematical formula}M⊨φ(a,σ). Let {a mathematical formula}I be any model of {a mathematical formula}K. By Lemma 11, there exists a {a mathematical formula}(sig(K),ind(K))-homomorphism h from {a mathematical formula}M to {a mathematical formula}I. But then we have {a mathematical formula}I⊨φ(a,h(σ1),…,h(σm)), and so {a mathematical formula}I⊨q(a).  □</paragraph></paragraph><paragraph>Note that the generating structures {a mathematical formula}G=(ΔG,⋅G,↝) of KBs {a mathematical formula}K with {a mathematical formula}Horn-ALCHI, {a mathematical formula}Horn-ALCI, {a mathematical formula}Horn-ALCH and {a mathematical formula}Horn-ALC TBoxes can contain exponentially many (in {a mathematical formula}|T|) elements in Ω (remember that {a mathematical formula}ΔG=ind(K)∪Ω); cf. Section 5. Note also that if the TBox in {a mathematical formula}K is in {a mathematical formula}Horn-ALCH (or one of its fragments {a mathematical formula}Horn-ALC, {a mathematical formula}ELH⊥dr or {a mathematical formula}EL) then it contains no inverse roles, and so the labels {a mathematical formula}(w,w′)G on arrows {a mathematical formula}w↝w′ of the generating structure do not contain inverse roles either. We call such generating structures forward.</paragraph><paragraph>The generating structures of KBs with {a mathematical formula}ELH⊥dr and {a mathematical formula}EL TBoxes {a mathematical formula}T contain polynomially many elements in Ω. Indeed, for every element {a mathematical formula}([R],τ)∈Ω, we can find a single concept {a mathematical formula}∃R.A in {a mathematical formula}T such that{a mathematical formula} (This is not the case for {a mathematical formula}Horn-ALC because of axioms of the form {a mathematical formula}A1⊑∀R.A2 with {a mathematical formula}A1≠⊤.) We remark that the generating structures for {a mathematical formula}EL defined above were initially represented as pairs of functions by Brandt [30] and later called the canonical models; see, e.g., [31]. We prefer the term ‘generating structure’ to avoid confusion with the possibly infinite canonical model (materialisation).</paragraph><paragraph>Finally, the generating structures for KBs with DL-Lite TBoxes {a mathematical formula}T also contain polynomially many elements in Ω because every {a mathematical formula}([R],τ)∈Ω is determined by the role R:{a mathematical formula} Observe that if {a mathematical formula}T does not contain role inclusions (which is the case for {a mathematical formula}DL-Litecore and {a mathematical formula}DL-Litehorn TBoxes) then, for any w and R, there is at most one {a mathematical formula}w′ such that {a mathematical formula}w↝w′ and {a mathematical formula}R∈(w,w′)G. Generating structures with this property will be called functional. We summarise these observations in the following theorem:</paragraph><paragraph label="Theorem 12">{a mathematical formula}Horn-ALCHIand all of its fragments defined above have finitely generated materialisations. Furthermore, there is a polynomial p such that</paragraph><list><list-item>a generating structure{a mathematical formula}Gfor any{a mathematical formula}Horn-ALCHIKB{a mathematical formula}(T,A)can be constructed in time{a mathematical formula}|A|⋅2p(|T|);</list-item><list-item>a forward generating structure{a mathematical formula}Gfor any{a mathematical formula}Horn-ALCHKB{a mathematical formula}(T,A)can be constructed in time{a mathematical formula}|A|⋅2p(|T|);</list-item><list-item>a forward generating structure{a mathematical formula}Gfor any{a mathematical formula}ELH⊥drKB{a mathematical formula}(T,A)can be constructed in time{a mathematical formula}|A|⋅p(|T|);</list-item><list-item>a generating structure{a mathematical formula}Gfor any{a mathematical formula}DL-LitehornHKB{a mathematical formula}(T,A)can be constructed in time{a mathematical formula}|A|⋅p(|T|);</list-item><list-item>a functional generating structure{a mathematical formula}Gfor any{a mathematical formula}DL-LitehornKB{a mathematical formula}(T,A)can be constructed in time{a mathematical formula}|A|⋅p(|T|).</list-item></list><paragraph>As a final remark, we note that the generating structures {a mathematical formula}G=(ΔG,⋅G,↝) defined above can often be simplified. For example, in the case of DL-Lite KBs, we can impose the following additional restrictions on the generating relation ↝:</paragraph><list><list-item>if {a mathematical formula}u↝([R],τ) then {a mathematical formula}[R] is {a mathematical formula}≤T-minimal, where {a mathematical formula}[S]≤T[T] iff {a mathematical formula}T⊨S⊑T;</list-item><list-item>if {a mathematical formula}([R1],τ1)↝([R2],τ2) then {a mathematical formula}[R2−]≠[R1].</list-item></list><paragraph> It is easily seen that these simplifications do not affect the proof of Theorem 9 (the branches of the unravelling that are pruned as a result of these restrictions can be homomorphically mapped to other branches; for a more detailed argument, see the proof of Theorem 5 in the full version of [24]). The generating structure {a mathematical formula}G1 in Fig. 2 as well as the generating structures in all our examples from Section 4 are constructed with these extra restrictions in mind.</paragraph><paragraph>So far we have only considered Σ-query entailment because Σ-query inseparability can be reduced to two Σ-query entailment checks. The following result shows that, conversely, one can reduce Σ-query entailment in LogSpace to Σ-query inseparability, for all DLs considered in this article except {a mathematical formula}DL-Litecore and {a mathematical formula}DL-Litehorn.{sup:3}</paragraph><paragraph label="Theorem 13">Let{a mathematical formula}Lbe any of our DLs that contains{a mathematical formula}ELor has role inclusions. Then Σ-query entailment of consistent{a mathematical formula}L-KBs isLogSpace-reducible to Σ-query inseparability of{a mathematical formula}L-KBs.</paragraph><paragraph>The proof of Theorem 13 is given in Appendix A and is based on the notions and results introduced in this section: the materialisations of KBs constructed to prove Theorem 12, the normal form of Theorem 8, and the semantic characterisation of Σ-query entailment given in Theorem 6. The underlying idea is to construct modifications {a mathematical formula}K1′ and {a mathematical formula}K2′ of the given KBs {a mathematical formula}K1 and {a mathematical formula}K2 such that {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2 iff {a mathematical formula}K1 and {a mathematical formula}K1′∪K2′ are Σ-query inseparable. Note that modifications of {a mathematical formula}K1 and {a mathematical formula}K2 are, in general, necessary: let {a mathematical formula}K1=(∅,{A(a)}), {a mathematical formula}K2=({A⊑B},{C(a)}) and {a mathematical formula}Σ={A,B}; then {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2 but {a mathematical formula}K1 does not Σ-query entail {a mathematical formula}K1∪K2 since {a mathematical formula}K1∪K2⊨B(a).</paragraph></section><section label="4"><section-title>Finite Σ-homomorphic embeddability by games</section-title><paragraph>In this section, we show that, for a DL {a mathematical formula}L having finitely generated materialisations, the problem of checking finite Σ-homomorphic embeddability between materialisations of KBs can be reduced to the problem of finding a winning strategy in a game played on the generating structures for these KBs.</paragraph><paragraph label="Proposition 14">We begin by giving a brief abstract description of the games we need. Every game G is played by two players, player 1 and player 2, and defined by a set {a mathematical formula}S of states, a set {a mathematical formula}C of challenges, and two functions {a mathematical formula}χ:S→2C and {a mathematical formula}ρ:S×C→2S, where {a mathematical formula}χ(s) is the set of challenges player 2 can choose from in any state {a mathematical formula}s and {a mathematical formula}ρ(s,c) is the set of responses available to player 1 in order to reply to any challenge {a mathematical formula}c made by player 2 in the state {a mathematical formula}s. The game starts in an initial state {a mathematical formula}s0∈S and is played in rounds. In each round i, {a mathematical formula}i&gt;0, the current state is {a mathematical formula}si−1∈S. If {a mathematical formula}χ(si−1)=∅, then player 2 loses. Otherwise, player 2 challenges player 1 by choosing {a mathematical formula}ci∈χ(si−1). If {a mathematical formula}ρ(si−1,ci)=∅, then player 1 loses. Otherwise, player 1 responds with {a mathematical formula}si∈ρ(si−1,ci), which becomes the current state for the next round {a mathematical formula}i+1. A play of length n starting from {a mathematical formula}s0∈S is any sequence {a mathematical formula}s0,…,sn of states obtained as described above. For any ordinal {a mathematical formula}λ≤ω, we say that player 1 has a λ-winning strategy in the game G starting from {a mathematical formula}s0 if, for any play {a mathematical formula}s0,…,sn with {a mathematical formula}n&lt;λ that is played according to this strategy, player 1 has a response to any challenge of player 2 in the final state {a mathematical formula}sn. The following proposition can be proved by a straightforward translation of the games introduced above into reachability games and using the known results [32], [33]: Given a finite game{a mathematical formula}G=(S,C,χ,ρ)defined above and a state{a mathematical formula}s0∈S, it can be checked in time polynomial in the size of{a mathematical formula}Sand{a mathematical formula}Cwhether player 1 has an ω-winning strategy from{a mathematical formula}s0.</paragraph><paragraph>We now reformulate the definition of finite Σ-homomorphic embedding in game-theoretic terms. Let {a mathematical formula}M1 and {a mathematical formula}M2 be the materialisations for (consistent) KBs {a mathematical formula}K1 and {a mathematical formula}K2, respectively. The states of the game {a mathematical formula}GΣ(M2,M1) are of the form {a mathematical formula}(π↦σ), where {a mathematical formula}π∈ΔM2 and {a mathematical formula}σ∈ΔM1. Intuitively, {a mathematical formula}(π↦σ) means that ‘π is to be Σ-homomorphically mapped to σ’. The game is played by player 1 and player 2 starting from some initial state {a mathematical formula}(π0↦σ0). The aim of player 1 is to demonstrate that there exists a Σ-homomorphism from (a finite subinterpretation of) {a mathematical formula}M2 into {a mathematical formula}M1 with {a mathematical formula}π0 mapped to {a mathematical formula}σ0, while player 2 wants to show that there is no such homomorphism. In each round {a mathematical formula}i&gt;0 of the game, player 2 challenges player 1 with some {a mathematical formula}πi∈ΔM2 such that {a mathematical formula}rΣM2(πi−1,πi)≠∅. Player 1, in turn, has to respond with some {a mathematical formula}σi∈ΔM1 such that the already constructed partial Σ-homomorphism can be extended with {a mathematical formula}πi↦σi:</paragraph><list><list-item label="–">{a mathematical formula}σi=πi, if {a mathematical formula}πi∈partΣM2,</list-item><list-item label="–">{a mathematical formula}tΣM2(πi)⊆tΣM1(σi) and {a mathematical formula}rΣM2(πi−1,πi)⊆rΣM1(σi−1,σi);</list-item></list><paragraph> remember that {a mathematical formula}partΣM2⊆ind(K2). It is easy to see that if,</paragraph><list><list-item label="–">for any {a mathematical formula}π0∈ΔM2, there exists {a mathematical formula}σ0∈ΔM1 such that player 1 has an ω-winning strategy in the game {a mathematical formula}GΣ(M2,M1) starting from {a mathematical formula}(π0→σ0),</list-item></list><paragraph> then there exists a Σ-homomorphism from {a mathematical formula}M2 into {a mathematical formula}M1, and the other way round. That {a mathematical formula}M2 is finitely Σ-homomorphically embeddable into {a mathematical formula}M1 is equivalent to the following condition:</paragraph><list><list-item label="–">for any {a mathematical formula}π0∈ΔM2 and any {a mathematical formula}n&lt;ω, there exists {a mathematical formula}σ0∈ΔM1 such that player 1 has an n-winning strategy in the game {a mathematical formula}GΣ(M2,M1) starting from {a mathematical formula}(π0→σ0).</list-item></list><paragraph> This criterion, however, does not immediately yield any algorithm to decide finite Σ-homomorphic embeddability because both {a mathematical formula}M2 and {a mathematical formula}M1 can be infinite. Our aim now is to show that the existence of n-winning strategies for player 1 in this simple infinite game {a mathematical formula}GΣ(M2,M1) is equivalent to the existence of winning strategies in a more involved game played on the finite generating structures for {a mathematical formula}M2 and {a mathematical formula}M1. First, in Section 4.1, we replace {a mathematical formula}M2 with its finite generating structure {a mathematical formula}G2, in which player 2 can only make challenges indicated by the generating relation {a mathematical formula}↝2Σ. Replacing {a mathematical formula}M1 with {a mathematical formula}G1 is not so easy because player 1 can respond not only in the ‘forward’ direction (according to {a mathematical formula}↝1Σ), but also in the ‘backward’ direction (because the label of {a mathematical formula}↝2Σ can be included in the inverse of the label of {a mathematical formula}↝1Σ). In the latter case, we have to ensure that all the responses of player 1 stay on the same branch of {a mathematical formula}M1, which obviously complicates the game. In Section 4.2, we consider the forward strategies that are suitable for DLs without inverse roles. The general strategies are formulated in Section 4.5. To make the exposition more transparent, we decompose these strategies into backward strategies defined in Section 4.3, and start-bounded ones analysed in Section 4.4.</paragraph><paragraph>We require the following notation throughout this section. Suppose a DL {a mathematical formula}L has finitely generated materialisations. Let {a mathematical formula}K be an {a mathematical formula}L-KB and {a mathematical formula}G its generating structure. For a relational signature Σ, the Σ-types{a mathematical formula}tΣG(w) and {a mathematical formula}rΣG(w,w′) of {a mathematical formula}w,w′∈ΔG are defined by:{a mathematical formula} where {a mathematical formula}(P−)G is the inverse of {a mathematical formula}PG. We also define {a mathematical formula}r¯ΣG(w,w′) to contain the inverses of the roles in {a mathematical formula}rΣG(w,w′). Note that {a mathematical formula}r¯G(a,b)=rG(b,a), for {a mathematical formula}a,b∈ind(K) but, in general, {a mathematical formula}r¯ΣG(w,w′) is not the same as {a mathematical formula}rΣG(w′,w) as shown by the {a mathematical formula}T−,S−-cycle in Fig. 2. We also write{a mathematical formula} that is, if w generates {a mathematical formula}w′ with a non-empty Σ-label of {a mathematical formula}w↝w′ in {a mathematical formula}G (↝-arrows with empty Σ-labels are irrelevant for Σ-homomorphisms).</paragraph><paragraph>For the rest of the section, we fix consistent {a mathematical formula}L-KBs {a mathematical formula}K1 and {a mathematical formula}K2, and a relational signature Σ. Let {a mathematical formula}Gi=(ΔGi,⋅Gi,↝i) be a generating structure for {a mathematical formula}Ki and let {a mathematical formula}Mi be its unravelling; {a mathematical formula}GiΣ and {a mathematical formula}MiΣ denote the restrictions of {a mathematical formula}Gi and {a mathematical formula}Mi to Σ. We first define the game played on the finite generating structure {a mathematical formula}G2Σ and the possibly infinite materialisation {a mathematical formula}M1Σ.</paragraph><section label="4.1">Infinite game {a mathematical formula}GΣ(G2,M1)<paragraph>The states of this game are of the form {a mathematical formula}si=(ui↦σi), for {a mathematical formula}i≥0, {a mathematical formula}ui∈ΔG2 and {a mathematical formula}σi∈ΔM1, such that</paragraph><list><list-item>{a mathematical formula}tΣG2(ui)⊆tΣM1(σi).</list-item></list><paragraph> The game starts in a state {a mathematical formula}s0=(u0↦σ0) with</paragraph><list><list-item>{a mathematical formula}σ0=u0 in case {a mathematical formula}u0∈partΣM2.</list-item></list><paragraph> In each round {a mathematical formula}i&gt;0, player 2 challenges player 1 with some {a mathematical formula}ui∈ΔG2 such that {a mathematical formula}ui−1↝2Σui. Player 1 has to respond with a {a mathematical formula}σi∈ΔM1 satisfying (s1) and</paragraph><list><list-item>{a mathematical formula}rΣG2(ui−1,ui)⊆rΣM1(σi−1,σi).</list-item></list><paragraph> This gives the next state {a mathematical formula}si=(ui↦σi). Note that of all the {a mathematical formula}ui only {a mathematical formula}u0 may be an ABox individual from {a mathematical formula}ind(K2); however, there is no such a restriction on the {a mathematical formula}σi. As the game {a mathematical formula}GΣ(G2,M1) is not played on the individuals of {a mathematical formula}K2, we need to make sure that the ABox part of {a mathematical formula}M2 is {a mathematical formula}(Σ,ind(K2))-homomorphically embeddable into the ABox part of {a mathematical formula}M1. Thus, we require an additional condition:</paragraph><list><list-item>{a mathematical formula}partΣM2⊆ind(K1) and {a mathematical formula}tΣM2(a)⊆tΣM1(a) and {a mathematical formula}rΣM2(a,b)⊆rΣM1(a,b), for any {a mathematical formula}a,b∈partΣM2.</list-item></list><paragraph label="Theorem 15"> The following theorem gives a game-theoretic flavour to the criterion of Theorem 6. (i) {a mathematical formula}M2is finitely Σ-homomorphically embeddable into{a mathematical formula}M1if and only if(abox)and the following condition hold:<list>for any{a mathematical formula}u0∈ΔG2and{a mathematical formula}n&lt;ω, there exists{a mathematical formula}σ0∈ΔM1such that player 1 has an n-winning strategy in the game{a mathematical formula}GΣ(G2,M1)starting from{a mathematical formula}(u0↦σ0).(</list><paragraph>ii) There exists a Σ-homomorphism from{a mathematical formula}M2to{a mathematical formula}M1if and only if(abox)and the following condition hold:</paragraph><list><list-item>for any{a mathematical formula}u0∈ΔG2, there is{a mathematical formula}σ0∈ΔM1such that player 1 has an ω-winning strategy in the game{a mathematical formula}GΣ(G2,M1)starting from{a mathematical formula}(u0↦σ0).</list-item></list><paragraph label="Proof">We only prove (i) and leave (ii) to the reader.{a mathematical formula}(⇒) Suppose {a mathematical formula}M2 is finitely Σ-homomorphically embeddable into {a mathematical formula}M1. Then (abox) holds by the definition of Σ-homomorphism. To show that {a mathematical formula}(win) holds, suppose {a mathematical formula}u0∈ΔG2 and {a mathematical formula}n&lt;ω are given. Take a finite subinterpretation {a mathematical formula}M02 of {a mathematical formula}M2 that contains {a mathematical formula}σu0, for some (say, the shortest) word σ, and all those elements of {a mathematical formula}M2 whose distance from {a mathematical formula}σu0 does not exceed n ({a mathematical formula}M02 also contains all individual names of {a mathematical formula}M2). Let {a mathematical formula}h:M02→M1 be a {a mathematical formula}(Σ,ind(K2))-homomorphism. Take {a mathematical formula}σ0=h(σu0). Clearly, {a mathematical formula}u0 and {a mathematical formula}σ0 satisfy (s0) and (s1). We show that player 1 has an n-winning strategy in the game {a mathematical formula}GΣ(G2,M1) starting from {a mathematical formula}(u0↦σ0). Suppose player 2 picks {a mathematical formula}u0↝2Σu1. Then {a mathematical formula}σu0u1 is an element of {a mathematical formula}M02, and player 1 responds with {a mathematical formula}σ1=h(σu0u1). Conditions (s1) and (s2) hold because h is a Σ-homomorphism. In the same way player 1 uses h to respond to all challenges of player 2 in any round {a mathematical formula}k&lt;n of the game {a mathematical formula}GΣ(G2,M1).{a mathematical formula}(⇐) Let {a mathematical formula}M02 be a finite subinterpretation of {a mathematical formula}M2. We enumerate elements of the domain of {a mathematical formula}M02 in such a way that σ appears in the list before {a mathematical formula}σ′ whenever {a mathematical formula}σ′=σu, for some u. We define, by induction, a {a mathematical formula}(Σ,ind(K2))-homomorphism {a mathematical formula}h:M02→M1 as follows. Let n be the number of elements in the domain of {a mathematical formula}M02. Pick the first (in the order described above) element σ that has not been mapped to {a mathematical formula}M1 yet. There are two possible options.</paragraph><list><list-item label="–">Suppose first that there is no {a mathematical formula}σ0∈ΔM02 such that {a mathematical formula}σ=σ0u and {a mathematical formula}tail(σ0)↝2Σu, for some u. Then, by {a mathematical formula}(win), there is {a mathematical formula}σ′∈ΔM1 such that player 1 has an n-winning strategy in the game {a mathematical formula}GΣ(G2,M1) starting from {a mathematical formula}(tail(σ)↦σ′). We set {a mathematical formula}h(σ)=σ′. Note that if {a mathematical formula}σ=a, for some {a mathematical formula}a∈partΣM2, then, by (s0), {a mathematical formula}h(a)=a.</list-item><list-item label="–">Otherwise, we consider the longest sequence {a mathematical formula}u1,…,uk, {a mathematical formula}k≥1, such that {a mathematical formula}tail(σ0)↝2Σu1↝2Σ…↝2Σuk and {a mathematical formula}σm=σ0u1⋯um∈ΔM02, for all {a mathematical formula}m&lt;k, with {a mathematical formula}σ=σk. By the definition of the order, {a mathematical formula}σ0,…,σk−1 have already been mapped by h. By construction and {a mathematical formula}(win), player 1 has an n-winning strategy from {a mathematical formula}(tail(σ0)↦h(σ0)). Therefore, player 1 has a response {a mathematical formula}σ′ to the challenge {a mathematical formula}tail(σk−1)↝2Σtail(σk). So, we set {a mathematical formula}h(σ)=σ′.</list-item></list><paragraph> It is readily seen that, by (abox), (s1) and (s2), the constructed h is a {a mathematical formula}(Σ,ind(K2))-homomorphism from {a mathematical formula}M02 to {a mathematical formula}M1.  □</paragraph></paragraph><paragraph label="Example 16">Consider {a mathematical formula}G2Σ and {a mathematical formula}M1Σ shown in Fig. 3a, where {a mathematical formula}Σ={Q,R}. An n-winning strategy for player 1 in {a mathematical formula}GΣ(G2,M1) starting from {a mathematical formula}(a↦a) is shown by dotted lines with the rounds of the game indicated by the numbers on the dotted lines. In the state {a mathematical formula}(a↦a), player 2 has two possible challenges: {a mathematical formula}a↝2Σu and {a mathematical formula}a↝2Σu′. In response to the former, player 1 maps u to a and the successive challenges to the elements of the chain that begins with RQ (indicated by indices {a mathematical formula}1,2,…). In response to the latter challenge, player 1 maps {a mathematical formula}u′ and all the successive challenges to the same element a (indices {a mathematical formula}1′,2′,…). Note that in all but the starting state, player 2 has only one possible challenge.</paragraph><paragraph label="Example 17">Consider now {a mathematical formula}G2Σ and {a mathematical formula}M1Σ in Fig. 3b, where {a mathematical formula}Σ={Q,R,S,T} (see also Example 5). A 4-winning strategy for player 1 in {a mathematical formula}GΣ(G2,M1) starting from {a mathematical formula}(u0↦σ4) is shown in Fig. 3b by dotted lines (again, rounds of the game are indicated by the numbers). In contrast to Example 16, where player 1 either stays in the ABox or always moves away from it, the winning strategy for player 1 now is to move in the opposite direction, towards the ABox. (Note that in round 2, player 2 has two possible challenges, {a mathematical formula}u1↝2Σu2 and {a mathematical formula}u1↝2Σv.) In fact, for any {a mathematical formula}n&gt;0, player 1 has an n-winning strategy starting from any {a mathematical formula}(u0↦σm) provided that m is even and {a mathematical formula}m≥n.</paragraph><paragraph>The criterion of Theorem 15 does not seem to be a big improvement on Theorem 6 as we still have to deal with an infinite materialisation. Note that, for some DLs such as {a mathematical formula}EL, {a mathematical formula}Horn-ALC and {a mathematical formula}DL-Litehorn, it is enough to play the same game as defined above but on the finite generating structures {a mathematical formula}G2 and {a mathematical formula}G1. We denote this naïve reformulation of {a mathematical formula}GΣ(G2,M1)—in which {a mathematical formula}σi and {a mathematical formula}M1 are replaced with {a mathematical formula}wi and {a mathematical formula}G1, respectively—by {a mathematical formula}GΣn(G2,G1) and invite the reader to prove that, in the case of, say {a mathematical formula}DL-Litehorn, Theorem 15 will continue to hold if we replace {a mathematical formula}(win) with the following condition, which can be checked in polynomial time in {a mathematical formula}O(|G2|×|G1|): for any {a mathematical formula}u0∈ΔG2, there exists {a mathematical formula}w0∈ΔG1 such that player 1 has an ω-winning strategy in the game {a mathematical formula}GΣn(G2,G1) starting from {a mathematical formula}(u0↦w0). (We shall obtain this result later as a consequence of a more general theorem.) Unfortunately, the existence of an ω-winning strategy in this naïve game does not imply Σ-homomorphic embeddability of {a mathematical formula}M2 into {a mathematical formula}M1 for DLs such as {a mathematical formula}DL-LitecoreH or {a mathematical formula}Horn-ALCI.</paragraph><paragraph>In the remainder of this section, we show that condition {a mathematical formula}(win) in the infinite game {a mathematical formula}GΣ(G2,M1) can be checked by analysing a much more complex game on the finite generating structures {a mathematical formula}G2 and {a mathematical formula}G1. We consider four types of strategies in {a mathematical formula}GΣ(G2,M1): forward, backward, start-bounded and general. For each strategy type, θ, we define a game {a mathematical formula}GΣθ(G2,G1) such that the following conditions are equivalent: {a mathematical formula}(win-θ)for any {a mathematical formula}u0∈ΔG2 and {a mathematical formula}n&lt;ω, there is {a mathematical formula}σ0∈ΔM1 such that player 1 has an n-winning θ-strategy in the infinite game {a mathematical formula}GΣ(G2,M1) starting from {a mathematical formula}(u0↦σ0);{a mathematical formula}(ω-winθ)for any {a mathematical formula}u0∈ΔG2, player 1 has an ω-winning strategy in the finite game {a mathematical formula}GΣθ(G2,G1) starting from some state depending on {a mathematical formula}u0 and θ.</paragraph><paragraph>We begin by considering ‘forward’ winning strategies (such as in Example 16) that are sufficient for the DLs without inverse roles.</paragraph></section><section label="4.2">Forward strategy and game {a mathematical formula}GΣf(G2,G1)<paragraph>We say that a λ-strategy ({a mathematical formula}λ≤ω) for player 1 in the game {a mathematical formula}GΣ(G2,M1) is forward if, for any play of length {a mathematical formula}i−1&lt;λ, which conforms with this strategy, and any challenge {a mathematical formula}ui−1↝2Σui by player 2, the response {a mathematical formula}σi of player 1 is such that either {a mathematical formula}σi−1,σi∈ind(K1) or {a mathematical formula}σi=σi−1w, for some {a mathematical formula}w∈ΔG1. For instance, if the generating structures {a mathematical formula}Gi, {a mathematical formula}i=1,2, are forward then every strategy in {a mathematical formula}GΣ(G2,M1) is forward, and so {a mathematical formula}(win) coincides with {a mathematical formula}(win-f). By Theorem 12 (ii) and (iii), this is the case for {a mathematical formula}Horn-ALCH, {a mathematical formula}Horn-ALC, {a mathematical formula}ELH⊥dr and {a mathematical formula}EL.</paragraph><paragraph>The existence of a forward λ-winning strategy for player 1 in {a mathematical formula}GΣ(G2,M1) is equivalent to the existence of a λ-winning strategy in the game{a mathematical formula}GΣf(G2,G1) whose states, initial states, challenges of player 2 and responses of player 1 are defined in the table below:{a mathematical formula} Note again that of all {a mathematical formula}ui only {a mathematical formula}u0 may belong to {a mathematical formula}ind(K2).</paragraph><paragraph label="Example 18">Consider {a mathematical formula}G2Σ and {a mathematical formula}G1Σ shown in Fig. 4a, where {a mathematical formula}G1Σ is a generating structure that can be unravelled into {a mathematical formula}M1Σ from Example 16. It is not hard to see that, for any {a mathematical formula}u0∈ΔG2, there is {a mathematical formula}w0∈ΔG1 such that player 1 has an ω-winning strategy in {a mathematical formula}GΣf(G2,G1) starting from {a mathematical formula}(u0↦w0). Such a strategy starting from {a mathematical formula}(a↦a) is depicted by dotted lines.</paragraph><paragraph>The reader may find more elegant proofs of the following lemma. However, the constructions we use will be required for the proofs of other lemmas, in particular, a more general Lemma 30.</paragraph><paragraph label="Lemma 19">Conditions{a mathematical formula}(win-f)and{a mathematical formula}(ω-winf)are equivalent. More precisely, for any{a mathematical formula}u0∈ΔG2and{a mathematical formula}σ0∈ΔM1, the following are equivalent:</paragraph><list><list-item>player 1 has an ω-winning forward strategy in the game{a mathematical formula}GΣ(G2,M1)starting from{a mathematical formula}(u0↦σ0);</list-item><list-item>for every{a mathematical formula}n&lt;ω, player 1 has an n-winning forward strategy in the game{a mathematical formula}GΣ(G2,M1)starting from{a mathematical formula}(u0↦σ0);</list-item><list-item>player 1 has an ω-winning strategy in the game{a mathematical formula}GΣf(G2,G1)starting from{a mathematical formula}(u0↦tail(σ0)).</list-item></list><paragraph label="Proof">{a mathematical formula}(a)⇒(b) is trivial.{a mathematical formula}(b)⇒(c) We construct a (possibly infinite) directed graph {a mathematical formula}T whose nodes are of the form {a mathematical formula}(u↦δ), where {a mathematical formula}u∈ΔG2 and δ is a suffix of some element in {a mathematical formula}ΔM1, and whose arrows are labelled with {a mathematical formula}u↝2Σu′ so that the following conditions hold:<list>{a mathematical formula}T contains an initial node{a mathematical formula}(u0↦tail(σ0));{a mathematical formula}tΣG2(u)⊆tΣG1(tail(δ)), for every node {a mathematical formula}(u↦δ) in {a mathematical formula}T;for any {a mathematical formula}u↝2Σu′, every node {a mathematical formula}(u↦δ) in {a mathematical formula}T has exactly one {a mathematical formula}(u↝2Σu′)-successor, which can be of the following forms:Such a graph </list><paragraph>{a mathematical formula}T (if it exists) gives rise to the required ω-winning strategy for player 1 in {a mathematical formula}GΣf(G2,G1). Indeed, consider the function {a mathematical formula}s mapping the nodes of {a mathematical formula}T to states in the game {a mathematical formula}GΣf(G2,G1) and defined by taking{a mathematical formula} in particular, the initial node {a mathematical formula}n0 of {a mathematical formula}T is mapped to the starting state: {a mathematical formula}s(n0)=(u0↦tail(σ0)). Now, when challenged by player 2 with {a mathematical formula}u↝2Σu′ in a state {a mathematical formula}s(n), player 1 picks a unique {a mathematical formula}u↝2Σu′-successor {a mathematical formula}n′ of any {a mathematical formula}r in {a mathematical formula}T such that {a mathematical formula}s(r)=s(n), and responds to the challenge with {a mathematical formula}s(n′). Note that although nodes are not uniquely determined by the states, any choice of {a mathematical formula}r as above results in an ω-winning strategy for player 1.We now show that {a mathematical formula}T exists. Let {a mathematical formula}S0 be the given set of n-winning forward strategies for player 1 in {a mathematical formula}GΣ(G2,M1) starting from {a mathematical formula}(u0↦σ0). Let {a mathematical formula}w0=tail(σ0). Define {a mathematical formula}T0 to be the graph with the single initial node {a mathematical formula}(u0↦w0). Clearly it satisfies (1) and (2) above. If it also satisfies (3), then we are done. Otherwise, we take all the challenges {a mathematical formula}u0↝2Σu11,…,u0↝2Σu1k by player 2 and use the pigeonhole principle and the fact that the number of roles in {a mathematical formula}K1 is finite to find {a mathematical formula}w11,…,w1k∈ΔG1 and a subset {a mathematical formula}S1⊆S0 such that, for any challenge {a mathematical formula}u0↝2Σu1i, every strategy {a mathematical formula}S∈S1 gives a response {a mathematical formula}(u1i↦σ1i) with {a mathematical formula}tail(σ1i)=w1i. If {a mathematical formula}w1i∈ind(K1) then we add to {a mathematical formula}T0 the node {a mathematical formula}(u1i↦w1i); and if {a mathematical formula}w1i∉ind(K1) then we add to {a mathematical formula}T0 the node {a mathematical formula}(u1i↦w0w1i); we also add a {a mathematical formula}u0↝2Σu1i arc connecting {a mathematical formula}(u0↦w0) with the newly introduced node. This gives us the graph {a mathematical formula}T1. We proceed in the same way and construct a sequence of directed graphs {a mathematical formula}T0⊆T1⊆… until we either reach some {a mathematical formula}Tk satisfying (1)–(3) or obtain an infinite sequence and take {a mathematical formula}T=⋃k&lt;ωTk, which obviously satisfies (1)–(3).{a mathematical formula}(c)⇒(a) The given ω-winning strategy in {a mathematical formula}GΣf(G2,G1) starting from {a mathematical formula}(u0↦tail(σ0)) is mirrored by an obvious ω-winning forward strategy in {a mathematical formula}GΣ(G2,M1) starting from {a mathematical formula}(u0↦σ0).  □</paragraph></paragraph><paragraph label="Example 20">Consider again {a mathematical formula}G2Σ and {a mathematical formula}G1Σ in Fig. 4a. Fig. 5 depicts the full graph of the game {a mathematical formula}GΣf(G2,G1), in which rectangles represent the states and circles the challenges of player 2. Note that it contains two dead-ends reachable from {a mathematical formula}(a↦a)—the challenges {a mathematical formula}u′↝2Σu′ in the state {a mathematical formula}(u′↦w) and {a mathematical formula}u↝2Σv in {a mathematical formula}(u↦w) of player 2 to which player 1 has no response (the dead-ends are indicated by double circles). The ω-winning strategy for player 1 in this graph is, therefore, to avoid these dead-ends; it is indicated by the shaded states.</paragraph><paragraph label="Theorem 21">In view of Theorem 12 (ii) and (iii) and Proposition 14, we then obtain: For combined complexity, checking Σ-query entailment is inPfor{a mathematical formula}ELand{a mathematical formula}ELH⊥drKBs, and inExpTimefor{a mathematical formula}Horn-ALCand{a mathematical formula}Horn-ALCHKBs. For data complexity, it is inPfor all these DLs.</paragraph><paragraph>In comparison to forward strategies, the winning strategies used in Example 17 can be described as ‘backward’.</paragraph></section><section label="4.3">Backward strategy and game {a mathematical formula}GΣb(G2,G1)<paragraph>A λ-strategy for player 1 in {a mathematical formula}GΣ(G2,M1) is backward if, for any play of length {a mathematical formula}i−1&lt;λ, which conforms with this strategy, and any challenge {a mathematical formula}ui−1↝2Σui by player 2, the response {a mathematical formula}σi of player 1 is the immediate predecessor of {a mathematical formula}σi−1 in {a mathematical formula}M1 in the sense that {a mathematical formula}σi−1=σiw, for some {a mathematical formula}w∈ΔG1 (player 1 loses in case {a mathematical formula}σi−1∈ind(K1)). Note that, since {a mathematical formula}M1 is tree-shaped, the response of player 1 to any different challenge {a mathematical formula}ui−1↝2Σui′ must be the same {a mathematical formula}σi; cf. Example 17. That is why the states of the game {a mathematical formula}GΣb(G2,G1) are of the form {a mathematical formula}si=(Ξi↦wi), where {a mathematical formula}Ξi is a non-empty subset of {a mathematical formula}ΔG2 and {a mathematical formula}wi∈ΔG1. For each {a mathematical formula}i&gt;0, player 2 always challenges player 1 with the set {a mathematical formula}Ξi=Ξi−1↝, where{a mathematical formula} provided that it is not empty (otherwise, player 2 loses). Player 1 responds with {a mathematical formula}wi∈ΔG1 such that {a mathematical formula}wi↝1wi−1. More formally, the states, challenges of player 2 and responses by player 1 are defined as follows:{a mathematical formula} Note that, by definition, {a mathematical formula}Ξ0 is a singleton and the sets {a mathematical formula}Ξi, for {a mathematical formula}i&gt;0, contain no individuals from {a mathematical formula}ind(K2).</paragraph><paragraph label="Example 22">Fig. 6a shows an ω-winning strategy for player 1 in {a mathematical formula}GΣb(G2,G1) starting from {a mathematical formula}({u0}↦w0), where {a mathematical formula}G1 is a generating structure that can be unravelled into {a mathematical formula}M1 in Example 17. Fig. 6b presents the corresponding fragment of the full game graph (shaded nodes form an ω-winning strategy and the non-shaded node leads to a dead-end, where player 1 loses).</paragraph><paragraph label="Lemma 23">Conditions{a mathematical formula}(win-b)and{a mathematical formula}(ω-winb)are equivalent. More precisely, for any{a mathematical formula}u0∈ΔG2and{a mathematical formula}w0∈ΔG1, the following are equivalent:</paragraph><list><list-item>for every{a mathematical formula}n&lt;ω, there is{a mathematical formula}σ0∈ΔM1with{a mathematical formula}tail(σ0)=w0such that player 1 has an n-winning backward strategy in the game{a mathematical formula}GΣ(G2,M1)starting from{a mathematical formula}(u0↦σ0);</list-item><list-item>player 1 has an ω-winning strategy in the game{a mathematical formula}GΣb(G2,G1)starting from{a mathematical formula}({u0}↦w0).</list-item></list><paragraph label="Proof">{a mathematical formula}(a)⇒(b) We begin by constructing a possibly infinite directed tree{a mathematical formula}T with nodes of the form {a mathematical formula}(u↦w,i), where {a mathematical formula}u∈ΔG2, {a mathematical formula}w∈ΔG1 and {a mathematical formula}0≤i&lt;ω, whose arrows are labelled with {a mathematical formula}u↝2Σu′ so that the following conditions hold:<list>the root of {a mathematical formula}T is of the form {a mathematical formula}(u0↦w0,0);{a mathematical formula}tΣG2(u)⊆tΣG1(w), for every node {a mathematical formula}(u↦w,i) in {a mathematical formula}T;for any {a mathematical formula}u↝2Σu′, every node {a mathematical formula}(u↦w,i) in {a mathematical formula}T has exactly one {a mathematical formula}(u↝2Σu′)-successor in {a mathematical formula}T, which is of the form {a mathematical formula}(u′↦w′,i+1) and satisfies {a mathematical formula}w′↝1w and {a mathematical formula}rΣG2(u,u′)⊆r¯ΣG1(w′,w);for any nodes {a mathematical formula}(u↦w,i) and {a mathematical formula}(u′↦w′,i) in {a mathematical formula}T, we have {a mathematical formula}w=w′.Such a tree </list><paragraph>{a mathematical formula}T defines an ω-winning strategy for player 1 in {a mathematical formula}GΣb(G2,G1) starting from {a mathematical formula}({u0}↦w0). In detail, let {a mathematical formula}w0,w1,… be the longest (and so possibly infinite) sequence of elements of {a mathematical formula}ΔG1 such that, for each {a mathematical formula}wi, there exists u with {a mathematical formula}(u↦wi,i) a node in {a mathematical formula}T. Note that, by (4), every {a mathematical formula}wi (if it exists) is uniquely determined. We set{a mathematical formula} and observe that {a mathematical formula}Ξ0={u0} and {a mathematical formula}Ξi=Ξi−1↝ and {a mathematical formula}Ξi≠∅, for all {a mathematical formula}i&gt;0. Take the maximal {a mathematical formula}m&lt;ω such that {a mathematical formula}wm exists and {a mathematical formula}wi≠wm for all {a mathematical formula}i&lt;m (in other words, {a mathematical formula}wm is the first repeating element in the sequence). Now the strategy of player 1 is as follows: when challenged by player 2 with some {a mathematical formula}u↝2Σu′ in state {a mathematical formula}(Ξi↦wi) with {a mathematical formula}i≤m, player 1 responds with {a mathematical formula}wi+1 if {a mathematical formula}i&lt;m and with the uniquely determined {a mathematical formula}wk, for {a mathematical formula}k≤m and {a mathematical formula}wk=wm+1, if {a mathematical formula}i=m.We now show that {a mathematical formula}T exists. Let {a mathematical formula}S0 be the given set of n-winning backward strategies for player 1 in {a mathematical formula}GΣ(G2,M1) starting from {a mathematical formula}(u0↦σ0), for {a mathematical formula}σ0∈ΔM1 with {a mathematical formula}tail(σ0)=w0. Define {a mathematical formula}T0 to be the tree with the single node {a mathematical formula}(u0↦w0,0). Clearly, it satisfies (1), (2) and (4). If it also satisfies (3), then we are done. Otherwise, we take a challenge {a mathematical formula}u0↝2Σu1 by player 2 and use the pigeonhole principle to find {a mathematical formula}w1∈ΔG1 and a subset {a mathematical formula}S1⊆S0 such that, for any challenge {a mathematical formula}u0↝2Σu′, every strategy {a mathematical formula}S∈S1 gives a response {a mathematical formula}(u′↦σ′) with {a mathematical formula}tail(σ′)=w1. We add to {a mathematical formula}T0 the nodes {a mathematical formula}(u′↦w1,1), for any challenge {a mathematical formula}u0↝2Σu′. We also add a {a mathematical formula}u0↝2Σu′ arc connecting {a mathematical formula}(u0↦w0,0) with the newly introduced nodes. This gives us the tree {a mathematical formula}T1 satisfying (1), (2) and (4). We proceed in this way and construct a sequence of trees {a mathematical formula}T0⊆T1⊆… until we either reach some {a mathematical formula}Tk satisfying (1)–(4) or obtain an infinite sequence and take {a mathematical formula}T=⋃k&lt;ωTk, which obviously satisfies (1)–(4).{a mathematical formula}(b)⇒(a) Suppose player 1 has an ω-winning strategy {a mathematical formula}S starting from {a mathematical formula}({u0}↦w0) in the game {a mathematical formula}GΣb(G2,G1) and let {a mathematical formula}n&lt;ω. Recall that, for each state {a mathematical formula}(Ξ↦w), there is (at most) one challenge {a mathematical formula}Ξ′=Ξ↝. Thus, the first n rounds of a play according to {a mathematical formula}S starting from {a mathematical formula}({u0}↦w0) are given by a sequence {a mathematical formula}(Ξ0↦w0),(Ξ1↦w1),…,(Ξk↦wk), where {a mathematical formula}Ξ0={u0} and either {a mathematical formula}k=n or {a mathematical formula}k&lt;n and {a mathematical formula}Ξk↝=∅. Take any {a mathematical formula}σ∈ΔM1 with {a mathematical formula}tail(σ)=wk and let {a mathematical formula}σ0=σwk−1⋯w0. Clearly, player 1 has an n-winning backward strategy in {a mathematical formula}GΣ(G2,M1) starting from {a mathematical formula}(u0↦σ0).  □</paragraph></paragraph><paragraph label="Lemma 24">Although Lemma 19, Lemma 23 look similar, the game {a mathematical formula}GΣb(G2,G1) turns out to be more complex than {a mathematical formula}GΣf(G2,G1) because the full game graph is exponential in the size of {a mathematical formula}ΔG2∖ind(K2). The following lemma explains this fact using very simple {a mathematical formula}DL-LitecoreH KBs: Checking whether player 1 has an ω-winning strategy in{a mathematical formula}GΣb(G2,G1)iscoNP-hard.</paragraph><paragraph label="Proof">The proof is by reduction of the unsatisfiability problem for 3CNFs {a mathematical formula}φ=⋀i=1mci, where {a mathematical formula}ci=li1∨li2∨li3 and each {a mathematical formula}lij is either one of the propositional variables {a mathematical formula}p1,…pk or a negation of such a variable.Let {a mathematical formula}N1,…,Nk be the first k prime numbers (observe that {a mathematical formula}1&lt;Nk≤k2). We take a role name R, a role name {a mathematical formula}Ci, for each clause {a mathematical formula}ci in φ, and a role name {a mathematical formula}Sjℓ, for each {a mathematical formula}1≤j≤k and {a mathematical formula}1≤ℓ≤Nj. Now we define a KB {a mathematical formula}K2=(T2,{A(a)}), where {a mathematical formula}T2 contains {a mathematical formula}A⊑∃R, the following inclusions, for {a mathematical formula}1≤j≤k and {a mathematical formula}1≤ℓ&lt;Nj,{a mathematical formula} and the following inclusions, for {a mathematical formula}1≤j≤k and {a mathematical formula}1≤i≤m:{a mathematical formula} Intuitively, {a mathematical formula}M2 is a tree with k branches having a common root arrow R. The jth branch is obtained by unravelling a loop of {a mathematical formula}Nj arrows {a mathematical formula}Sj1,…,SjNj: the first arrow, {a mathematical formula}Sj1, corresponds to {a mathematical formula}pj being true (under an assignment) and the second arrow, {a mathematical formula}Sj2, to {a mathematical formula}pj being false (other arrows do not encode truth values). Therefore, {a mathematical formula}N1×N2×⋯×Nk layers (the layer i consists of all arrows from points at distance i from the root) contain representations of all possible assignments to {a mathematical formula}p1,…,pk (for {a mathematical formula}k=2, see Fig. 7 on the left). The last two types of role inclusions make sure that the roles {a mathematical formula}C1,…,Cm, which constitute the signature Σ, mark those assignments under which φ is true.We now take {a mathematical formula}K1=(T1,{A(a)}), where {a mathematical formula}T1 contains the following inclusions:{a mathematical formula} In {a mathematical formula}M1, the path from each point to the root contains arrows that are labelled by all of {a mathematical formula}C1,…,Cm but one (for {a mathematical formula}m=3, see Fig. 7 on the right). Note that the {a mathematical formula}Ci arrows point towards the root, in the opposite direction to the {a mathematical formula}Ci arrows of {a mathematical formula}M2. Thus, there is a finite {a mathematical formula}(Σ,{a})-homomorphism from {a mathematical formula}M2 into {a mathematical formula}M1 if and only if one of the clauses is false under each of the assignments (that is, iff φ is unsatisfiable).The generating structure {a mathematical formula}G1 is essentially a set of loops each of which is missing precisely one of the {a mathematical formula}Ci. Thus, the responses of player 1 correspond to the choices of the missing {a mathematical formula}Ci. The challenges by player 2, on the other hand, correspond to the subsets of {a mathematical formula}C1,…,Cm in the layers of {a mathematical formula}M2, the number of which may be exponential in k. So player 2 can go through a sequence of exponentially many distinct challenges (assignments), to each of which player 1 will have to find a clause that is false under the assignment. The sequence repeats itself after {a mathematical formula}N1×⋯×Nk steps.  □</paragraph><paragraph>A general strategy for player 1 in {a mathematical formula}GΣ(G2,M1) is a combination of a backward strategy and a number of start-bounded strategies to be defined next.</paragraph></section><section label="4.4">Start-bounded strategy and game {a mathematical formula}GΣs(G2,G1)<paragraph>A strategy for player 1 in the game {a mathematical formula}GΣ(G2,M1) starting from {a mathematical formula}(u0↦σ0) is called start-bounded if it never leads to a state {a mathematical formula}(ui↦σi) such that {a mathematical formula}σ0=σiw, for some {a mathematical formula}w∈ΔG1 and {a mathematical formula}i&gt;0. In other words, player 1 cannot use those elements of {a mathematical formula}M1 that are located closer to the ABox than {a mathematical formula}σ0; the ABox individuals in {a mathematical formula}M1 can only be used if {a mathematical formula}σ0∈ind(K1).</paragraph><paragraph label="Example 25">The strategy starting from {a mathematical formula}(u2↦σ0) and shown in Fig. 8a by dotted lines is start-bounded, with the numbers indicating the rounds of the game: the responses {a mathematical formula}σ0,σ1,σ2 of player 1 move away from the ABox, after which player 1 retraces his steps back to {a mathematical formula}σ0 (in order to avoid clutter, we omitted the ABox part from the generating structure {a mathematical formula}G2 in the picture).</paragraph><paragraph>The states of {a mathematical formula}GΣs(G2,G1) are of the form {a mathematical formula}(Θi,Ξi↦wi), {a mathematical formula}i≥0, where {a mathematical formula}Θi,Ξi⊆ΔG2, {a mathematical formula}Ξi≠∅ and {a mathematical formula}wi∈ΔG1. (Intuitively, {a mathematical formula}Ξi is the set of elements of {a mathematical formula}ΔG2 that are mapped to {a mathematical formula}wi, while {a mathematical formula}Θi identifies illegitimate challenges for player 2, that is, the {a mathematical formula}↝2Σ-successors that have already been mapped to {a mathematical formula}wi−1.) The initial state is of the form {a mathematical formula}(∅,Ξ0↦w0). In each round {a mathematical formula}i&gt;0, player 2 challenges player 1 with some {a mathematical formula}u↝2Σv such that {a mathematical formula}u∈Ξi−1 and{a mathematical formula} (Player 2 loses if there is no challenge satisfying this condition.) Player 1 ‘guesses’ some {a mathematical formula}Ξi and {a mathematical formula}wi such that {a mathematical formula}Ξi contains v, {a mathematical formula}rΣG2(u,v)⊆rΣG1(wi−1,wi) and responds with a state {a mathematical formula}(Θi,Ξi↦wi), where {a mathematical formula}Θi is determined by {a mathematical formula}Ξi−1 and {a mathematical formula}wi: {a mathematical formula}Θi=Ξi−1 if {a mathematical formula}wi∉ind(K1) and {a mathematical formula}Θi=∅, otherwise. We make challenges {a mathematical formula}u↝2Σv, for which{a mathematical formula} ‘illegitimate’ because, by the choice of {a mathematical formula}Ξi−2, the element {a mathematical formula}wi−2 was supposed to be used as a response; note that the last two conditions above are the complement of (no-backward). Because of this, player 1 always moves ‘forward’ in {a mathematical formula}G1, but has to guess appropriate sets {a mathematical formula}Ξi in advance. The states, initial states, challenges by player 2 and responses of player 1 are summarised in the table below:{a mathematical formula} Note that of all {a mathematical formula}Ξi only {a mathematical formula}Ξ0 may contain (at most one) individual from {a mathematical formula}ind(K2); {a mathematical formula}Θ0=∅ and of all {a mathematical formula}Θi only {a mathematical formula}Θ1 may contain an individual.</paragraph><paragraph label="Example 26">Consider {a mathematical formula}G2Σ and {a mathematical formula}G1Σ in Fig. 8b. In the game {a mathematical formula}GΣs(G2,G1), player 1 will have to guess all the points of {a mathematical formula}G2 that are mapped to the same point of {a mathematical formula}M1. We show that player 1 has an ω-winning strategy in {a mathematical formula}GΣs(G2,G1) starting from {a mathematical formula}(∅,{u2,u9}↦w0). Player 2 challenges with {a mathematical formula}u2↝2Σu6, and player 1 responds with {a mathematical formula}({u2,u9},{u6,u8}↦w1). Then player 2 picks {a mathematical formula}u6↝2Σu7 and player 1 responds with {a mathematical formula}({u6,u8},{u7}↦w2), where the game ends because player 2 has no challenge available. Observe that this strategy involves only 3 rounds in contrast to the 5 rounds of the corresponding strategy in {a mathematical formula}G(G2,M1) shown in Fig. 8a. The strategy in {a mathematical formula}GΣs(G2,G1) is indicated by the shaded states of the fragment of the game graph in Fig. 8c. Note the crucial guesses {a mathematical formula}{u2,u9}↦w0 and {a mathematical formula}{u6,u8}↦w1 made by player 1. For example, if player 1 responded with {a mathematical formula}({u2,u9},{u6}↦w1) (and failed to guess that {a mathematical formula}u8 must also be mapped to {a mathematical formula}w1), then after the challenge {a mathematical formula}u6↝2Σu7 and the only possible response {a mathematical formula}({u6},{u7}↦w2), player 2 would pick {a mathematical formula}u7↝2Σu8 to which player 1 would not have a response; see the non-shaded states in Fig. 8c.</paragraph><paragraph label="Lemma 27">Conditions{a mathematical formula}(win-s)and{a mathematical formula}(ω-wins)are equivalent. More precisely, for any{a mathematical formula}u0∈ΔG2and{a mathematical formula}σ0∈ΔM1, the following are equivalent:</paragraph><list><list-item>player 1 has an ω-winning start-bounded strategy in the game{a mathematical formula}GΣ(G2,M1)starting from{a mathematical formula}(u0↦σ0);</list-item><list-item>for every{a mathematical formula}n&lt;ω, player 1 has an n-winning start-bounded strategy in{a mathematical formula}GΣ(G2,M1)starting from{a mathematical formula}(u0↦σ0);</list-item><list-item>player 1 has an ω-winning strategy in the game{a mathematical formula}GΣs(G2,G1)starting from{a mathematical formula}(∅,Ξ0↦tail(σ0)), for some{a mathematical formula}Ξ0∋u0.</list-item></list><paragraph label="Proof">{a mathematical formula}(a)⇒(b) is trivial.{a mathematical formula}(b)⇒(c) We define a (possibly infinite) directed graph {a mathematical formula}T whose nodes are of the form {a mathematical formula}(u↦δ), where {a mathematical formula}u∈ΔG2 and δ is a suffix of some element in {a mathematical formula}ΔM1, and whose arrows are labelled with {a mathematical formula}u↝2Σu′ so that the following conditions hold:<list>{a mathematical formula}T contains an initial node {a mathematical formula}(u0↦tail(σ0));{a mathematical formula}tΣG2(u)⊆tΣG1(tail(δ)), for every node {a mathematical formula}(u↦δ) in {a mathematical formula}T;for any {a mathematical formula}u↝2Σu′, every node {a mathematical formula}(u↦δ) in {a mathematical formula}T has exactly one {a mathematical formula}(u↝2Σu′)-successor in {a mathematical formula}T, which can be of the following forms:We show that the graph </list><paragraph>{a mathematical formula}T (if it exists) gives rise to the required ω-winning strategy for player 1 in {a mathematical formula}GΣs(G2,G1). Consider the function {a mathematical formula}s mapping the nodes in {a mathematical formula}T to states in the game {a mathematical formula}GΣs(G2,G1) and defined by taking{a mathematical formula} where {a mathematical formula}Ξδ={u|(u↦δ) a node in T}. In particular, the initial node {a mathematical formula}n0 in {a mathematical formula}T is mapped to the initial state: {a mathematical formula}s(n0)=(∅,Ξtail(σ0)↦tail(σ0)). (Note that only {a mathematical formula}n0 may refer to an individual from {a mathematical formula}ind(K2), and so {a mathematical formula}s(n0) is a properly defined initial state.) In order to define the ω-winning strategy of player 1 in {a mathematical formula}GΣs(G2,G1) from {a mathematical formula}s(n0), we show that, for all {a mathematical formula}n in {a mathematical formula}T,{a mathematical formula} Indeed, if {a mathematical formula}u↝2Σu′ is a challenge in {a mathematical formula}s(n) then {a mathematical formula}s(n) is of the form {a mathematical formula}(Θ,Ξδ↦tail(δ)), for some δ and {a mathematical formula}u∈Ξδ. By definition, {a mathematical formula}T contains a node {a mathematical formula}ru=(u↦δ) and {a mathematical formula}s(ru)=s(n); moreover, {a mathematical formula}ru has a {a mathematical formula}(u↝2Σu′)-successor {a mathematical formula}n′ in {a mathematical formula}T. (Observe that, by the definition of {a mathematical formula}s, for two distinct nodes {a mathematical formula}n=(v↦δ) and {a mathematical formula}ru=(u↦δ), we may have {a mathematical formula}s(n)=s(ru)=(Θ,Ξδ↦tail(δ)) and {a mathematical formula}{u,v}⊆Ξδ, and so {a mathematical formula}T may contain a node {a mathematical formula}n that has no {a mathematical formula}u↝2Σu′ successor for a valid challenge {a mathematical formula}u↝2Σu′ in {a mathematical formula}GΣs(G2,G1) from {a mathematical formula}s(n). Similarly to the proof of Lemma 19, the choice of a particular {a mathematical formula}ru is not essential.) It remains to show that {a mathematical formula}s(n′) is a valid response by player 1 to {a mathematical formula}u↝2Σu′ from {a mathematical formula}s(n). Consider all possible cases:</paragraph><list><list-item label="–">If {a mathematical formula}ru=(u↦w) and {a mathematical formula}n′=(u′↦ww′) then {a mathematical formula}s(n)=(∅,Ξw↦w) and {a mathematical formula}s(n′)=(Ξw,Ξww′↦w′). By item (3.1) of the definition of {a mathematical formula}T, {a mathematical formula}s(n′) is as required.</list-item><list-item label="–">If {a mathematical formula}ru=(u↦δw) and {a mathematical formula}n′=(u′↦δww′) then {a mathematical formula}s(n)=(Ξδ,Ξδw↦w) and {a mathematical formula}s(n′)=(Ξδw,Ξδww′↦w′). By (3.1), {a mathematical formula}s(n′) is as required.</list-item><list-item label="–">If {a mathematical formula}ru=(u↦w) and {a mathematical formula}n′=(u′↦w′) then {a mathematical formula}w,w′∈ind(K1), {a mathematical formula}s(n)=(∅,Ξw↦w) and {a mathematical formula}s(n′)=(∅,Ξw′↦w′). By (3.2), {a mathematical formula}s(n′) is as required.</list-item><list-item label="–">If {a mathematical formula}ru=(u↦δw′w) and {a mathematical formula}n′=(u′↦δw′) then {a mathematical formula}s(n)=(Ξδw′,Ξδw′w↦w) and {a mathematical formula}u′∈Ξδw′, which is impossible because, in view of (3.3), we have {a mathematical formula}rΣG2(u,u′)⊆r¯ΣG1(w′,w) contrary to the fact that {a mathematical formula}u↝2Σu′ is a challenge in {a mathematical formula}s(n); see (no-backward).</list-item></list><paragraph> The ω-winning strategy of player 1 in {a mathematical formula}GΣs(G2,G1) from {a mathematical formula}s(n0) is then defined naturally.Now we show that {a mathematical formula}T exists. The construction is similar to the proof of Lemma 19. Let {a mathematical formula}S0 be the given set of n-winning start-bounded strategies in {a mathematical formula}GΣ(G2,G1) starting from {a mathematical formula}(u0↦σ0) and let {a mathematical formula}w0=tail(σ0). Define {a mathematical formula}T0 to be the graph with the single initial node {a mathematical formula}(u0↦w0). Clearly, it satisfies (1) and (2) above. If it also satisfies (3), then we are done. Otherwise, as in the proof of Lemma 19, we take all the challenges {a mathematical formula}u0↝2Σu11,…,u0↝2Σu1k by player 2 and using the pigeonhole principle find {a mathematical formula}w11,…,w1k∈ΔG1 and a set {a mathematical formula}S1⊆S0 such that, for any challenge {a mathematical formula}u0↝2Σu1i, every strategy {a mathematical formula}S∈S1 gives a response {a mathematical formula}(u1i↦σ1i) with {a mathematical formula}tail(σ1i)=w1i. If {a mathematical formula}w1i∈ind(K1) then we add the node {a mathematical formula}(u1i↦w1i) to {a mathematical formula}T0, and if {a mathematical formula}w1i∉ind(K1) then we add the node {a mathematical formula}(u1i↦w0w1i) to {a mathematical formula}T0; we also add an {a mathematical formula}u0↝2Σu1i arrow connecting {a mathematical formula}(u0↦w0) with the newly introduced node. This gives us the graph {a mathematical formula}T1. To illustrate the construction of {a mathematical formula}T in the case of a backward step (which is impossible in round 1), consider now a challenge {a mathematical formula}u1↝2Σu2 by player 2 for some {a mathematical formula}u1∈{u11,…,u1k} such that the response according to {a mathematical formula}S was {a mathematical formula}(u1↦σ0w1) and {a mathematical formula}(u1↦w0w1) is a node in {a mathematical formula}T1. Then, using the pigeonhole principle, we find either</paragraph><list><list-item label="–">{a mathematical formula}w2∈ΔG1 and a subset {a mathematical formula}S2⊆S1 such that every strategy {a mathematical formula}S∈S2 gives a response of the form {a mathematical formula}(u2↦σ0w1w2),</list-item><list-item label="–">or a subset {a mathematical formula}S2⊆S1 such that every strategy {a mathematical formula}S∈S2 gives a response of the form {a mathematical formula}(u2↦σ0).</list-item></list><paragraph> In the former case we add the node {a mathematical formula}(u2↦w0w1w2) to {a mathematical formula}T1 and in the latter case we add {a mathematical formula}(u2↦w0) to {a mathematical formula}T1. We also add an {a mathematical formula}u1↝2Σu2 arrow connecting {a mathematical formula}(u1↦w0w1) and the new node to {a mathematical formula}T1. This defines {a mathematical formula}T2. We proceed in the same way and construct a sequence of graphs {a mathematical formula}T0⊆T1⊆… until we either reach some {a mathematical formula}Tk satisfying (1)–(3) or obtain an infinite sequence and take {a mathematical formula}T=⋃k&lt;ωTk, which obviously satisfies (1)–(3).{a mathematical formula}(c)⇒(a) Suppose that player 1 has an ω-winning strategy {a mathematical formula}S in {a mathematical formula}GΣs(G2,G1) starting from {a mathematical formula}(∅,Ξ0↦tail(σ0)) with {a mathematical formula}u0∈Ξ0. We transform the strategy {a mathematical formula}S into an ω-winning start-bounded strategy {a mathematical formula}S′ in {a mathematical formula}GΣ(G2,M1) starting from {a mathematical formula}s0=(u0↦σ0). We associate with any (possibly infinite) sequence {a mathematical formula}u0↝2Σu1↝2Σ…↝2Σui↝2Σ⋯ of challenges by player 2 in {a mathematical formula}GΣ(G2,M1) starting from the state {a mathematical formula}s0 a sequence {a mathematical formula}s1=(u1↦σ1),…,si=(ui↦σi),… of responses by player 1 which are start-bounded (that is, {a mathematical formula}σ0≠σiw, for any {a mathematical formula}w∈ΔG1). To this end, we also define a sequence of states {a mathematical formula}sb0=(Θ0,Ξ0↦w0),…,sbi=(Θi,Ξi↦wi),… in {a mathematical formula}GΣs(G2,G1) such that {a mathematical formula}ui∈Ξi and {a mathematical formula}tail(σi)=wi for all i. To keep track of ‘backward moves’ we also define a sequence {a mathematical formula}π0,…,πi,… of sequences of states in {a mathematical formula}GΣs(G2,G1) such that each {a mathematical formula}πi has length {a mathematical formula}|σi|+1−|σ0| and its first state is of the form {a mathematical formula}(∅,Ξ↦w). Finally, we require that{a mathematical formula} For {a mathematical formula}i=0, we set {a mathematical formula}sb0=(∅,Ξ0↦w0) and {a mathematical formula}π0=sb0, which clearly has the required properties. Now assume that {a mathematical formula}s0,…,si−1, {a mathematical formula}sb0,…,sbi−1 and {a mathematical formula}π0,…,πi−1, for {a mathematical formula}i&gt;0, are defined as above. Consider a challenge {a mathematical formula}ui−1↝2Σui in state {a mathematical formula}si−1. We distinguish the following two cases.</paragraph><list><list-item label="–">If {a mathematical formula}ui−1↝2Σui is a valid challenge in {a mathematical formula}sbi−1 then we define {a mathematical formula}sbi=(Θi,Ξi↦wi) as the response of player 1 in {a mathematical formula}sbi−1 according to {a mathematical formula}S. If {a mathematical formula}wi∉ind(K1) then we set {a mathematical formula}πi=πi−1⋅sbi and {a mathematical formula}si=(ui↦σi−1wi). Otherwise, {a mathematical formula}Θi=∅ and we set {a mathematical formula}πi=sbi and {a mathematical formula}si=(ui↦wi). Obviously, the conditions above hold for the resulting sequences.</list-item><list-item label="–">If {a mathematical formula}ui−1↝2Σui is not a valid challenge from {a mathematical formula}sbi−1 then {a mathematical formula}Θi−1≠∅, {a mathematical formula}ui∈Θi−1 and {a mathematical formula}rΣG2(ui−1,ui)⊆r¯ΣG1(w,wi−1) for the predecessor w of {a mathematical formula}wi−1 in {a mathematical formula}σi−1. Let {a mathematical formula}πi be the result of removing the final state from {a mathematical formula}πi−1; let {a mathematical formula}sbi be the final element of {a mathematical formula}πi; and let {a mathematical formula}si=(ui↦σi), where {a mathematical formula}σi is obtained from {a mathematical formula}σi−1 by removing its final element. Clearly, (4) is satisfied. We show that {a mathematical formula}si is a valid response. First, observe that there exists {a mathematical formula}j≤i−2 such that {a mathematical formula}πj=πi and {a mathematical formula}πj+1=πi−1 for which {a mathematical formula}sbj+1 is the response to the challenge {a mathematical formula}uj↝2Σuj+1 from {a mathematical formula}sbj. By (4), {a mathematical formula}σj+1=σi−1 and {a mathematical formula}σj+1=σjwj. By the construction of {a mathematical formula}σi, {a mathematical formula}σi=σj. Second, it remains to observe that {a mathematical formula}Θj+1=Θi−1 and {a mathematical formula}Θj+1=Ξj, i.e., {a mathematical formula}ui∈Ξj and {a mathematical formula}tΣG2(ui)⊆tΣG1(wj)=tΣM1(σi) (recall that, by (no-backward), {a mathematical formula}rΣG2(ui−1,ui)⊆rΣM1(σi−1,σi)).</list-item></list><paragraph> By repeating these steps, we obtain an ω-winning start-bounded strategy in {a mathematical formula}GΣ(G2,M1) starting from {a mathematical formula}(u0↦σ0).  □</paragraph></paragraph><paragraph>Similarly to {a mathematical formula}GΣf(G2,G1), player 1 has an ω-winning strategy in {a mathematical formula}GΣs(G2,G1) starting from a state {a mathematical formula}s if and only if player 2 does not have a winning strategy in the reachability game on the full graph of {a mathematical formula}GΣs(G2,G1) starting from {a mathematical formula}s. However, now the size of the game graph is exponential in the size of {a mathematical formula}G2. More precisely, each {a mathematical formula}Θi and {a mathematical formula}Ξi is a subset of {a mathematical formula}ΔG2 with at most one individual name, which results in {a mathematical formula}O((|ind(K2)|×2|ΔG2∖ind(K2)|)2×|ΔG1|) states in {a mathematical formula}GΣs(G2,G1). The number of vertices in the graph for the reachability game is then cubic in the number of states in {a mathematical formula}GΣs(G2,G1) because (no-backward) involves three states. So the existence of the required ω-winning strategy for player 1 can be checked in time polynomial in {a mathematical formula}G1 but exponential in {a mathematical formula}G2. Moreover, as we shall see in Section 5, this problem is ExpTime-hard.</paragraph></section><section label="4.5">General strategies and game {a mathematical formula}GΣg(G2,G1)<paragraph>A general winning strategy in the game {a mathematical formula}GΣ(G2,M1) can be composed of one backward and a number of start-bounded strategies.</paragraph><paragraph label="Example 28">Consider {a mathematical formula}G2Σ and {a mathematical formula}M1Σ shown in Fig. 9a. Starting from {a mathematical formula}(u1↦σ3), player 1 can respond to the challenges {a mathematical formula}u1↝2Σu2↝2Σu3 according to the backward strategy; the challenges {a mathematical formula}u2↝2Σu6↝2Σu7↝2Σu8↝2Σu9 according to the start-bounded strategy as in Example 25; the challenges {a mathematical formula}u3↝2Σu4↝2Σu5 also according to the obvious start-bounded strategy; finally, the challenge {a mathematical formula}u9↝2Σu10 needs a response according to the backward strategy. We will combine the two backward strategies into a single one, but keep the start-bounded ones separate.</paragraph><paragraph>The states, initial states, challenges and responses in the general game {a mathematical formula}GΣg(G2,G1) are defined in the table below:{a mathematical formula}</paragraph><paragraph>Thus, in every round {a mathematical formula}i&gt;0 of the game, player 1 chooses a set {a mathematical formula}Ξi⊇Ψi−1 and partitions the elements of {a mathematical formula}Ξi↝ into those that will be mapped according to the backward strategy in round {a mathematical formula}i+1 (the set {a mathematical formula}Ψi) and those that will be mapped according to the start-bounded strategy (the set {a mathematical formula}Ξi↝∖Ψi). Note the additional condition that player 1 must have an ω-winning strategy in the start-bounded game {a mathematical formula}GΣs(G2,G1) from {a mathematical formula}(∅,Ξi↦wi) where the first challenge by player 2 is restricted to {a mathematical formula}Ξi↝∖Ψi.</paragraph><paragraph label="Example 29">Fig. 9b shows an ω-winning strategy for player 1 in {a mathematical formula}GΣg(G2,G1) starting from {a mathematical formula}({u1}↦w3,{u2}), where {a mathematical formula}G1Σ looks like {a mathematical formula}M1Σ but with {a mathematical formula}wi in place of {a mathematical formula}σi. The dashed transitions represent two launches of start-bounded games: one from the state {a mathematical formula}(∅,{u2,u9}↦w0) with the initial challenge {a mathematical formula}u2↝2Σu6, and the other from the state {a mathematical formula}(∅,{u3,u10}↦a) with the initial challenge {a mathematical formula}u3↝2Σu4.</paragraph><paragraph label="Lemma 30">Conditions{a mathematical formula}(win),{a mathematical formula}(win-g)and{a mathematical formula}(ω-wing)are equivalent. More precisely, for any{a mathematical formula}u0∈ΔG2and{a mathematical formula}w0∈ΔG1, the following are equivalent:</paragraph><list><list-item>for every{a mathematical formula}n&lt;ω, there is{a mathematical formula}σ0∈ΔM1such that{a mathematical formula}tail(σ0)=w0and player 1 has an n-winning strategy in the game{a mathematical formula}GΣ(G2,M1)starting from{a mathematical formula}(u0↦σ0);</list-item><list-item>player 1 has an ω-winning strategy in{a mathematical formula}GΣg(G2,G1)starting from{a mathematical formula}(Ξ0↦w0,Ψ0), for some{a mathematical formula}Ξ0∋u0and{a mathematical formula}Ψ0.</list-item></list><paragraph label="Proof">{a mathematical formula}(a)⇒(b) As before, we construct a (possibly infinite) directed graph {a mathematical formula}T whose nodes are of the form {a mathematical formula}(u↦δ,i), where {a mathematical formula}u∈ΔG2, δ is a suffix of some element in {a mathematical formula}ΔM1 and {a mathematical formula}0≤i&lt;ω or {a mathematical formula}i=⁎, and whose arrows are labelled with {a mathematical formula}u↝2Σu′ and such that the following conditions hold:<list>the initial node of {a mathematical formula}T is of the form {a mathematical formula}(u0↦w0,0);{a mathematical formula}tΣG2(u)⊆tΣG1(tail(δ)), for any node {a mathematical formula}(u↦δ,k) in {a mathematical formula}T;for any {a mathematical formula}u↝2Σu′, every node {a mathematical formula}(u↦δ,i) in {a mathematical formula}T has exactly one {a mathematical formula}(u↝2Σu′)-successor in {a mathematical formula}T, which can be of the following forms:for any nodes {a mathematical formula}(u↦w,i) and {a mathematical formula}(u′↦w′,i) in {a mathematical formula}T with {a mathematical formula}w,w′∈ΔG1 and {a mathematical formula}i≠⁎, we have {a mathematical formula}w=w′.We show first that such a graph </list><paragraph>{a mathematical formula}T exists. Let {a mathematical formula}S0 be the given set of n-winning strategies of player 1 in {a mathematical formula}GΣ(G2,M1) starting from {a mathematical formula}(u0↦σ0). Define {a mathematical formula}T0 to be the graph with the single initial node {a mathematical formula}(u0↦w0,0). In the sequel, we slightly abuse notation and use ε for the empty word so that εa is regarded to be the same as a, an element of {a mathematical formula}ind(K1). We say that a strategy {a mathematical formula}S∈S0respects{a mathematical formula}T if there exists a sequence {a mathematical formula}σ0S,σ1S,… of elements of {a mathematical formula}ΔM1∪{ε} such that</paragraph><list><list-item label="–">each {a mathematical formula}σiS satisfies {a mathematical formula}σi−1S=σiSw, for some {a mathematical formula}w∈ΔG1, with {a mathematical formula}σ−1S=σ0, and</list-item><list-item label="–">if {a mathematical formula}(u′↦δ′,i′) is a {a mathematical formula}(u↝2Σu′)-successor of {a mathematical formula}(u↦δ,i) in {a mathematical formula}T then, according to {a mathematical formula}S, player 1 responds to the challenge {a mathematical formula}u↝2Σu′ of player 2 in the state {a mathematical formula}(u↦σiSδ) with {a mathematical formula}(u′↦σi′Sδ′),</list-item></list><paragraph> where {a mathematical formula}σ⁎S=ε. (Intuitively, {a mathematical formula}σiS is the {a mathematical formula}σi−1S without the last element, and so the sequence {a mathematical formula}σ0Sw0,σ1Sw1,σ2Sw2,…, with {a mathematical formula}wi=tail(σi−1S), are the responses to the challenges of the strategy.) Clearly, all strategies in {a mathematical formula}S0 respect {a mathematical formula}T0. Suppose we have already constructed {a mathematical formula}Tk and {a mathematical formula}Sk such that every {a mathematical formula}S∈Sk respects {a mathematical formula}Tk. If {a mathematical formula}Tk satisfies (3), then we are done. Otherwise, {a mathematical formula}Tk contains a node {a mathematical formula}(u↦δ,i) without a {a mathematical formula}(u↝2Σu′)-successor, for some {a mathematical formula}u↝2Σu′. (We take such a node to be closest to the initial node.) Using the pigeonhole principle, we can find {a mathematical formula}δ′, {a mathematical formula}i′ and a subset {a mathematical formula}Sk+1⊆Sk such that one of the following four options holds for all strategies {a mathematical formula}S∈Sk+1 simultaneously: the response of player 1 according to {a mathematical formula}S to the challenge {a mathematical formula}(u↝2Σu′) in state {a mathematical formula}(u↦σiSδ) is of the form{a mathematical formula}{a mathematical formula}{a mathematical formula}{a mathematical formula} see also items (3.1)–(3.4) above. In each of the four cases, we define {a mathematical formula}Tk+1 by extending {a mathematical formula}Tk with {a mathematical formula}(u′↦δ′,i′) as a {a mathematical formula}(u↝2Σu′)-successor of {a mathematical formula}(u↦δ,i). Observe also that all {a mathematical formula}S∈Sk+1 clearly respect {a mathematical formula}Tk+1. We proceed in the same way and construct sequences {a mathematical formula}T0⊆T1⊆… and {a mathematical formula}S0⊇S1⊇S2,… until we either reach some {a mathematical formula}Tn satisfying (1)–(4) or obtain infinite sequences and take {a mathematical formula}T=⋃n&lt;ωTn, which obviously satisfies (1)–(4).Now we show that {a mathematical formula}T defines an ω-winning strategy for player 1 in {a mathematical formula}GΣg(G2,G1) starting from some {a mathematical formula}(Ξ0↦w0,Ψ0). Let {a mathematical formula}w0,w1,… be the longest (and possibly infinite) sequence of elements of {a mathematical formula}ΔG1 such that, for each {a mathematical formula}wi, there exists u with {a mathematical formula}(u↦wi,i) a node in {a mathematical formula}T. Note that, by (4), every {a mathematical formula}wi (if it exists) is uniquely determined. For each {a mathematical formula}i≥0 with {a mathematical formula}wi defined, set{a mathematical formula} and observe that {a mathematical formula}u0∈Ξ0, {a mathematical formula}Ξi≠∅ and {a mathematical formula}Ψi⊆Ξi↝, {a mathematical formula}Ψi⊆Ξi+1, for all {a mathematical formula}i≥0 such that the sets are defined. Note also that if the sequence {a mathematical formula}w0,w1,… is finite then the last {a mathematical formula}Ψk is empty. Similarly to the proof of Lemma 23, take the maximal {a mathematical formula}m&lt;ω such that {a mathematical formula}wm exists and {a mathematical formula}wi≠wm for all {a mathematical formula}i&lt;m.To show that each {a mathematical formula}(Ξi↦wi,Ψi), for {a mathematical formula}0≤i≤m, is a valid state in the game {a mathematical formula}GΣg(G2,G1), we have to define an ω-winning strategy for the start-bounded game {a mathematical formula}GΣs(G2,G1) from {a mathematical formula}(∅,Ξi↦wi) with the first-round challenges {a mathematical formula}u↝2Σv such that {a mathematical formula}v∉Ψi. Fix i and define a graph {a mathematical formula}Ti containing the nodes {a mathematical formula}(u↦δ), for {a mathematical formula}(u↦δ,i) in {a mathematical formula}T, and all the nodes {a mathematical formula}(u↦δ) such that {a mathematical formula}(u↦δ,⁎) is reachable from some {a mathematical formula}(u′↦δ′,i) in {a mathematical formula}T by a path not containing any {a mathematical formula}(u″↦δ″,i+1). The arrows and their labels in {a mathematical formula}Ti are induced in the obvious way by the arrows of {a mathematical formula}T. Observe that {a mathematical formula}Ti satisfies (1) and (2) of Lemma 27 and satisfies (3) except, perhaps, in nodes {a mathematical formula}(u↦wi) with {a mathematical formula}u↝2Σv and {a mathematical formula}v∈Ψi. It can now be shown in the same way as in Lemma 27 that player 1 has an ω-winning strategy in the start-bounded game {a mathematical formula}GΣs(G2,G1) from {a mathematical formula}(∅,Ξi↦wi) provided that the challenge {a mathematical formula}u↝2Σv in the first round satisfies {a mathematical formula}v∉Ψi.Now, by (3.4), the states {a mathematical formula}(Ξi↦wi,Ψi), {a mathematical formula}i≤m, clearly define an ω-winning strategy for player 1 in the game {a mathematical formula}GΣg(G2,G1) starting from {a mathematical formula}(Ξ0↦w0,Ψ0): if player 2 challenges (with {a mathematical formula}Ψi) in some state {a mathematical formula}(Ξi↦wi,Ψi), then player 1 responds with {a mathematical formula}(Ξi+1↦wi+1,Ψi+1) if {a mathematical formula}i&lt;m, and by the uniquely determined {a mathematical formula}(Ξk↦wk,Ψk) with {a mathematical formula}wk=wm+1 if {a mathematical formula}i=m.{a mathematical formula}(b)⇒(a) Suppose player 1 has an ω-winning strategy {a mathematical formula}S starting from {a mathematical formula}a0=(Ξ0↦w0,Ψ0) in {a mathematical formula}GΣg(G2,G1) with {a mathematical formula}u0∈Ξ0 and let {a mathematical formula}n&lt;ω. Consider any play in {a mathematical formula}GΣg(G2,G1) starting from {a mathematical formula}a0 and conforming with {a mathematical formula}S. One can represent the play as a sequence{a mathematical formula} where each {a mathematical formula}ai is a response of player 1 (a state of the game {a mathematical formula}GΣg(G2,G1)) to the (uniquely determined) challenge in {a mathematical formula}ai−1, and {a mathematical formula}u0i↝2Σv0i,…,ukii↝2Σvkii are the challenges of player 2 in the start-bounded game {a mathematical formula}GΣs(G2,G1) from {a mathematical formula}ai (in which case player 1 has an ω-winning strategy). Similarly to the backward game, the sequence {a mathematical formula}a0,a1,… does not depend on the challenges of player 2 but only on {a mathematical formula}a0 and {a mathematical formula}S. So we fix the sequence {a mathematical formula}a0,a1,…,ak, where either {a mathematical formula}k=n or {a mathematical formula}k&lt;n is the maximal number of states reached in any play starting from {a mathematical formula}a0 according to {a mathematical formula}S. This sequence induces a sequence {a mathematical formula}w0,w1,…,wk of elements of {a mathematical formula}ΔG1 given by the states {a mathematical formula}ai=(Ξi↦wi,Ψi). We take any element {a mathematical formula}σ∈ΔM1 with {a mathematical formula}tail(σ)=wk and let {a mathematical formula}σ0=σwk−1…w0. In addition to the ω-winning strategy {a mathematical formula}S, we also fix the ω-winning strategies for player 1 in the start-bounded games for {a mathematical formula}GΣg(G2,G1) from {a mathematical formula}ai with the appropriate challenge in the first round.Now, for any sequence {a mathematical formula}u0↝2Σu1↝2Σ⋯↝2Σum−1↝2Σum, {a mathematical formula}m≤n, of challenges by player 2 in the game {a mathematical formula}GΣ(G2,M1) starting from {a mathematical formula}s0=(u0↦σ0), we construct a sequence of responses {a mathematical formula}s1=(u1↦σ1), …, {a mathematical formula}sm=(um↦σm) of player 1. In order to do this, we define inductively a sequence {a mathematical formula}π0,…,πm (of non-empty sequences) such that the following hold for each {a mathematical formula}i≤m:</paragraph><list><list-item label="–">{a mathematical formula}πi begins with one of the states {a mathematical formula}a0,…,ak, and all other elements in {a mathematical formula}πi are states {a mathematical formula}(Θ,Ξ↦w) of the respective start-bounded game;</list-item><list-item label="–">if {a mathematical formula}πi=πj⋅(Θ1,Ξ1↦w1)⋯(Θℓ,Ξℓ↦wℓ) then {a mathematical formula}σi=σjw1⋯wℓ.</list-item></list><paragraph> For {a mathematical formula}i=0, we set {a mathematical formula}π0=a0=(Ξ0↦w0,Ψ0), which clearly has the required properties. Now suppose that {a mathematical formula}s0,…,si−1 and {a mathematical formula}π0,…,πi−1 have already been defined, for {a mathematical formula}1≤i≤m. Consider a challenge {a mathematical formula}ui−1↝2Σui in the state {a mathematical formula}si−1. Two cases are possible.</paragraph><list><list-item label="–">If {a mathematical formula}πi−1 consists of a single state {a mathematical formula}(Ξ↦w,Ψ) then it coincides with some {a mathematical formula}aj−1, for {a mathematical formula}j≤k. Recall that {a mathematical formula}ui−1∈Ξ and {a mathematical formula}tail(σi−1)=w. We have the following two options.</list-item><list-item label="–">Otherwise, the final element of {a mathematical formula}πi−1 is a state of the start-bounded game, and we follow the construction from the proof of {a mathematical formula}(c)⇒(a) in Lemma 27.</list-item></list><paragraph> This completes the proof of the lemma.  □</paragraph></paragraph><paragraph label="Theorem 31">Similarly to the start-bounded game, the size of the game graph for {a mathematical formula}GΣg(G2,G1) is exponential in the size of {a mathematical formula}G2 as it contains {a mathematical formula}O((|ind(K2)|×2|ΔG2∖ind(K2)|)2×|ΔG1|) states. Note, however, that when constructing the graph, we have to check that for each of its states player 1 has an ω-winning strategy in the corresponding start-bounded game. As observed in Section 4.4, this can also be done in time exponential in {a mathematical formula}ΔG2∖ind(K2) and polynomial in both {a mathematical formula}ind(K2) and {a mathematical formula}ΔG1. In view of Theorem 12 (i) and (iv) and Proposition 14, we then obtain: For combined complexity, Σ-query entailment is in{a mathematical formula}2ExpTimefor{a mathematical formula}Horn-ALCHIand{a mathematical formula}Horn-ALCIKBs, and inExpTimefor{a mathematical formula}DL-LitehornHand{a mathematical formula}DL-LitecoreHKBs. For data complexity, these problems are all inP.</paragraph><paragraph>For {a mathematical formula}DL-Litecore and {a mathematical formula}DL-Litehorn KBs, the general game {a mathematical formula}GΣg(G2,G1) can be significantly simplified. Note first that the start-bounded game {a mathematical formula}GΣs(G2,G1) in this case can be reduced to the forward game {a mathematical formula}GΣf(G2,G1). Indeed, by (lite2) and the fact that {a mathematical formula}(u,v)G is always a singleton set in the generating structures for {a mathematical formula}DL-Litehorn, player 2 cannot challenge player 1 in any round {a mathematical formula}i&gt;0 of {a mathematical formula}GΣs(G2,G1) with {a mathematical formula}u↝2Σv such that {a mathematical formula}rΣG2(u,v)⊆r¯ΣG1(wi−2,wi−1). Thus, (no-backward) holds for any set {a mathematical formula}Θi, and so we obtain: for any {a mathematical formula}u0∈ΔG2 and {a mathematical formula}w0∈ΔG1, player 1 has an ω-winning strategy in {a mathematical formula}GΣs(G2,G1) with an initial state {a mathematical formula}(∅,Ξ0↦w0) and {a mathematical formula}u0∈Ξ0 if and only if player 1 has an ω-winning strategy in {a mathematical formula}GΣf(G2,G1) with the initial state {a mathematical formula}(u0↦w0).</paragraph><paragraph>Second, since having a start-bounded ω-winning strategy with an initial state {a mathematical formula}(∅,Ξ↦w) is equivalent to having forward ω-winning strategies for all initial states {a mathematical formula}(u↦w) with {a mathematical formula}u∈Ξ, for any general ω-winning strategy player 1 can choose {a mathematical formula}Ξi as small as possible: {a mathematical formula}Ξi={u0} in the initial state and {a mathematical formula}Ξi=Ψi−1, for {a mathematical formula}i&gt;0. Also observe that in the general game, if {a mathematical formula}Ξi−1 contains at most one element, then player 1 has to choose for {a mathematical formula}Ψi a set containing at most one element (if player 1 chooses a set with at least two elements, then he will not have a response to the challenge {a mathematical formula}Ψi since the generating structures for {a mathematical formula}DL-Litehorn KBs are functional). It follows by induction that if player 1 has an ω-winning strategy in the general game then player 1 has an ω-winning strategy in which all states are of the form {a mathematical formula}(Ξi↦wi,Ψi), where {a mathematical formula}Ξi is a singleton set, {a mathematical formula}Ψi has at most one element, and {a mathematical formula}Ξi=Ψi−1. The number of states in this game is polynomial, and so the existence of an ω-winning strategy can be checked in P. Note also that this strategy corresponds to the winning strategy in the naïve game {a mathematical formula}GΣn(G2,G1) sketched in Section 4.1.</paragraph><paragraph label="Theorem 32">Σ-query entailment for{a mathematical formula}DL-Litecoreand{a mathematical formula}DL-LitehornKBs is inPfor both combined and data complexity.</paragraph></section></section><section label="5"><section-title>Lower bounds</section-title><paragraph>In this section, we show that the upper complexity bounds obtained in Section 4 are optimal. Throughout the section we assume that the materialisations of the KBs we deal with are the unravellings of the generating structures for those KBs constructed as described in Section 3.</paragraph><paragraph>As we have seen in the previous section, the problems of Σ-query entailment and inseparability for all of our DLs are in P for data complexity. The next theorem establishes a matching lower bound:</paragraph><paragraph label="Proof">For data complexity, Σ-query entailment and inseparability areP-hard for{a mathematical formula}DL-Litecoreand{a mathematical formula}ELKBs.The proof is by reduction of the P-complete entailment problem for acyclic Horn ternary clauses: given a conjunction φ of clauses of the form {a mathematical formula}pi and {a mathematical formula}pi∧pi′→pj, with {a mathematical formula}i,i′&lt;j, decide whether {a mathematical formula}pn is true in every model of φ. Consider a {a mathematical formula}DL-Litecore TBox {a mathematical formula}T containing the following concept inclusions:{a mathematical formula} and let an ABox {a mathematical formula}A consist of {a mathematical formula}F(pn) and{a mathematical formula} Set {a mathematical formula}Σ={F,S,R1,R2}, {a mathematical formula}K1=(∅,A) and {a mathematical formula}K2=(T,A∪{V(pn)}). Obviously, {a mathematical formula}K2 Σ-query entails {a mathematical formula}K1. On the other hand, the materialisation of {a mathematical formula}K2 is (finitely) Σ-homomorphically embeddable in the materialisation of {a mathematical formula}K1 iff φ derives {a mathematical formula}pn. Indeed, the materialisation {a mathematical formula}M2 of {a mathematical formula}K2 is infinite, while the materialisation {a mathematical formula}M1 of {a mathematical formula}K1 is finite. So, the only way to embed finite prefixes of {a mathematical formula}M2 of arbitrary depth into {a mathematical formula}M1 is by mapping subtrees of unbounded depth into the loops in {a mathematical formula}M1 for unary clauses {a mathematical formula}pi in φ, which is only possible if there is a tree of clauses of the form {a mathematical formula}pi∧pi′→pj with root {a mathematical formula}pn and leaves among the clauses {a mathematical formula}pi of φ (that is, if there is a derivation of {a mathematical formula}pn from φ).For {a mathematical formula}EL, we take {a mathematical formula}T={V⊑∃S.(∃R1.V⊓∃R2.V)}. The remainder of the proof is the same as above.  □</paragraph><paragraph>For combined complexity, ExpTime-hardness of Σ-query inseparability for {a mathematical formula}Horn-ALC can be proved by reduction of the subsumption problem: we have {a mathematical formula}T⊨A⊑B if and only if {a mathematical formula}(T,{A(a)}) and {a mathematical formula}(T∪{A⊑B},{A(a)}) are {a mathematical formula}{B}-query inseparable. We now establish the remaining lower bounds for the combined complexity.</paragraph><paragraph label="Proof">For combined complexity, the problems of Σ-query entailment and inseparability areExpTime-hard for{a mathematical formula}DL-LitecoreHKBs.The proof is by encoding alternating Turing machines (ATMs) with polynomial tape and using the fact that {a mathematical formula}APSpace=ExpTime; see, e.g. [34].Let {a mathematical formula}M=(Λ,Q,q0,q1,δ) be an ATM with a tape alphabet Λ, a set of states Q partitioned into existential {a mathematical formula}Q∃ and universal {a mathematical formula}Q∀ states, an initial state {a mathematical formula}q0∈Q∃, an accepting state {a mathematical formula}q1∈Q, and a transition function{a mathematical formula} which, for a state q and symbol a, gives two instructions, {a mathematical formula}δ(q,a,1) and {a mathematical formula}δ(q,a,2). We assume that existential and universal states strictly alternate: any transition from an existential state leads to a universal state, and vice versa. We extend δ with the instructions {a mathematical formula}δ(q1,a,j)=(q1,a,0), for {a mathematical formula}a∈Λ and {a mathematical formula}j=1,2, which go into an infinite loop if M reaches the accepting state {a mathematical formula}q1. Thus, assuming that M terminates on every input, it accepts an input w if and only if the modified ATM {a mathematical formula}M′ has a run on w all branches of which are infinite.Given {a mathematical formula}M′ and an input w, our aim is to construct TBoxes {a mathematical formula}T1 and {a mathematical formula}T2 and a signature Σ such that {a mathematical formula}M′ has a run with only infinite branches if and only if the materialisation {a mathematical formula}M2 of {a mathematical formula}(T2,A) is finitely Σ-homomorphically embeddable into the materialisation {a mathematical formula}M1 of {a mathematical formula}(T1,A), where {a mathematical formula}A is an ABox with a single assertion {a mathematical formula}A(c). Let f be a polynomial such that, on any input of length m, {a mathematical formula}M′ uses at most {a mathematical formula}n=f(m) cells, which are numbered from 1 to n, and throughout any computation the head remains to the right of cell 0, which contains a special marker {a mathematical formula}♭∈Λ.The construction proceeds in four steps. In the definition of the TBoxes {a mathematical formula}T1 and {a mathematical formula}T2, we use concept inclusions of the form {a mathematical formula}B⊑∃R.(C1⊓…⊓Ck) as an abbreviation for{a mathematical formula} where {a mathematical formula}R0 is a fresh role name. If {a mathematical formula}Ci is a complex concept then {a mathematical formula}∃R0−⊑Ci is also treated as an abbreviation for the respective concept and role inclusions.Step 1. First we encode configurations and transitions of {a mathematical formula}M′ using {a mathematical formula}T1. We represent a configuration (that is, the content of every cell on the tape, the state and the position of the head) by a sequence of {a mathematical formula}n+2 domain elements in {a mathematical formula}M1, which will be called a block. The first element in each block is used to distinguish the type of the block, whereas the remaining elements are assigned indexes from 0 to n: if the element with index i belongs to {a mathematical formula}Ca, for some {a mathematical formula}a∈Λ, then the ith cell of the tape is assumed to contain a in the configuration defined by the block as shown in Fig. 11 (the first element of the block has index −1). The first block represents the initial configuration, that is, symbols {a mathematical formula}a1,…,an written in the n cells of the tape (the input w padded with ␣) and the initial state {a mathematical formula}q0, which is achieved by the following inclusion in {a mathematical formula}T1:{a mathematical formula}Step 2. The current state {a mathematical formula}q∈Q, the position k of the head and the content {a mathematical formula}a∈Λ of the active cell scanned by the head are recorded in the concept {a mathematical formula}Zq,a,k0,n that contains the last element of the block. At the end of the block we branch out one block for each of the two instructions and propagate via the {a mathematical formula}Zq,a,k1,i and the {a mathematical formula}Zq,a,k2,i the current state, head position and symbol in the active cell: for {a mathematical formula}q∈Q, {a mathematical formula}a∈Λ and {a mathematical formula}1≤k≤n, we add to {a mathematical formula}T1 the inclusions{a mathematical formula} where {a mathematical formula}X1 and {a mathematical formula}X2 are two fresh concept names (which specify the type of the block).The acceptance condition for {a mathematical formula}M′ is enforced by means of {a mathematical formula}T2. For the initial block representing the initial configuration we take{a mathematical formula} The two concept names, {a mathematical formula}X1 and {a mathematical formula}X2, are used to distinguish between the two blocks for universal successor states and one more concept name, {a mathematical formula}X3, marks both blocks for existential state successors. These blocks are arranged into an infinite tree-like structure: the initial block is the root from which an {a mathematical formula}X1- and an {a mathematical formula}X2-blocks branch out (recall that successors of the initial state {a mathematical formula}q0 are universal). Each of them is followed by an {a mathematical formula}X3-block, which branches out an {a mathematical formula}X1- and an {a mathematical formula}X2-block, and so on. This is achieved by adding to {a mathematical formula}T2 the following inclusions:{a mathematical formula}{a mathematical formula} where G is a fresh concept name (which marks every cell of the tape). If {a mathematical formula}Σ={A,X1,X2,P} then there is a unique Σ-homomorphism from the initial block in {a mathematical formula}M2 to the block of the initial configuration in {a mathematical formula}M1. Next, signature concepts {a mathematical formula}X1 and {a mathematical formula}X2 ensure that the {a mathematical formula}X1- and {a mathematical formula}X2-blocks are Σ-homomorphically mapped (in a unique way) into the respective blocks in {a mathematical formula}M1, which reflects the acceptance condition of universal states. The following {a mathematical formula}X3-block, however, contains no signature marker ({a mathematical formula}X1 or {a mathematical formula}X2) and can be mapped to either of the blocks in {a mathematical formula}M1, which reflects the choice in existential states; see Fig. 12, where possible Σ-homomorphisms are shown by thick dashed arrows.Step 3. Recall that the {a mathematical formula}Zq,a,kj,i, for {a mathematical formula}−1≤i≤n, specify the position k of the head on the tape. Let the active cell in the previous configuration be k. Then, until the cell {a mathematical formula}k−2 is reached in the current configuration, the following inclusions in {a mathematical formula}T1 propagate its current state ({a mathematical formula}q∈Q), the symbol in the active cell ({a mathematical formula}a∈Λ), the head position ({a mathematical formula}1≤k≤n) and the block type ({a mathematical formula}j=1,2) along the domain elements constituting the block: for {a mathematical formula}−1&lt;i≤n with {a mathematical formula}i≠k−1,{a mathematical formula} (for each {a mathematical formula}b∈Λ, these concept inclusions also generate a branch in {a mathematical formula}M1 to represent the same cell but with a different symbol, b, tentatively assigned to the cell—Step 4 will ensure that the correct branch and symbol are selected to match the cell contents in the preceding configuration). We point out that, since the size of the tape is polynomial in the length of the input, we can use the subscripts of the {a mathematical formula}Zq,a,kj,i to specify the head position, k, and the cell number, i. When the cell {a mathematical formula}k−2 is reached, the contents of the active cell, the information from the subscripts of the {a mathematical formula}Zq,a,kj,i is used to perform the instruction according to δ:{a mathematical formula} Specifically, the symbol in the active cell, k, is changed according to the instruction and the cell is marked by concept {a mathematical formula}Fa′. Then the current state, symbol in the active cell of the successive configuration and the new head position are recorded in the subscripts of the concepts {a mathematical formula}Zq,a,k0,i; note that the block type marker, {a mathematical formula}j=1,2, is replaced by 0. These three situations are depicted in Fig. 13, where the hatched nodes denote domain elements two cells before the active cell of the configuration (where inclusion ({a mathematical formula}T1-4) becomes ‘active) and the filled black and grey nodes denote domain elements for the active cell. (Note that the element corresponding to the cell {a mathematical formula}k−1 has only one P-successor, which encodes the new symbol, {a mathematical formula}a′, in that cell; see explanations below.) Then the new state and the symbol in the active cell of the successive configurations are propagated further along the tape using ({a mathematical formula}T1-3) with {a mathematical formula}j=0 and {a mathematical formula}i&gt;k−1.Step 4. The inclusions ({a mathematical formula}T1-3)–({a mathematical formula}T1-4) generate a separate P-successor for each {a mathematical formula}b∈Λ, thus not preserving the contents of the tape between transitions. We now add a number of inclusions to both TBoxes so that wrong branches would be ignored by any finite Σ-homomorphism, h, from {a mathematical formula}M2 to {a mathematical formula}M1, where{a mathematical formula} Suppose {a mathematical formula}h(d2)=d1 and {a mathematical formula}d2 belongs to G in {a mathematical formula}M2 (and therefore, it represents a cell in a non-initial configuration). We add the following two inclusions to {a mathematical formula}T2:{a mathematical formula}{a mathematical formula} Then, for each symbol {a mathematical formula}b∈Λ, the element {a mathematical formula}d2 generates a block of {a mathematical formula}n+2-many {a mathematical formula}P−-connected elements that ends in the concept {a mathematical formula}Db; we call it a {a mathematical formula}Db-block of{a mathematical formula}d2. Recall from Step 3 that, for {a mathematical formula}a∈Λ, if {a mathematical formula}d1∈FaM1 then it represents a cell whose content is changed to a (in which case {a mathematical formula}d1 has no ‘siblings’, that is, the P-predecessor of {a mathematical formula}d1 has a single P-successor, {a mathematical formula}d1). However, if {a mathematical formula}d1∈CaM1 then the content of the cell represented by {a mathematical formula}d1 must be copied from the previous configuration). This is achieved by adding ({a mathematical formula}T-1) and the following inclusions to {a mathematical formula}T1:{a mathematical formula}{a mathematical formula} So, if {a mathematical formula}d1∈FaM1 then {a mathematical formula}d1 has a {a mathematical formula}Db-block for any {a mathematical formula}b∈Λ and, by the choice of Σ, each of the {a mathematical formula}Db-blocks of {a mathematical formula}d2 in {a mathematical formula}M2 can be mapped by h to the respective {a mathematical formula}Db-block of {a mathematical formula}d1 in {a mathematical formula}M1. On the other hand, if {a mathematical formula}d1∈CaM1 then {a mathematical formula}d1 has a {a mathematical formula}Db-block only for {a mathematical formula}b∈Λ with {a mathematical formula}b≠a. So, all {a mathematical formula}Db-blocks of {a mathematical formula}d2 with {a mathematical formula}b≠a can still be mapped by h to the respective {a mathematical formula}Db-blocks of {a mathematical formula}d1 in {a mathematical formula}M1. The remaining {a mathematical formula}Da-block of {a mathematical formula}d2 could be mapped in the reverse order along the ‘main’ branch in {a mathematical formula}M1but only if the cell contains a in the preceding configuration (that is, the element that is {a mathematical formula}n+2 steps closer to the root of {a mathematical formula}M1 belongs to {a mathematical formula}Da); see Fig. 14.One can show now that {a mathematical formula}T1 and {a mathematical formula}T2 are as required: {a mathematical formula}M′ has a run with only infinite branches if and only if the materialisation {a mathematical formula}M2 of {a mathematical formula}(T2,A) is finitely Σ-homomorphically embeddable into the materialisation {a mathematical formula}M1 of {a mathematical formula}(T1,A). It remains to use Theorem 6 and the fact that {a mathematical formula}APSpace=ExpTime. It follows, by Theorem 13, that deciding Σ-query inseparability is also ExpTime-hard.  □</paragraph><paragraph label="Proof">For combined complexity, the problems of Σ-query entailment and inseparability are 2ExpTime-hard for{a mathematical formula}Horn-ALCIKBs.The proof is by encoding alternating Turing machines (ATMs) with exponential tape and using the fact that {a mathematical formula}AExpSpace=2ExpTime.As in the proof of Theorem 34, let {a mathematical formula}M=(Λ,Q,q0,q1,δ) be an ATM and let {a mathematical formula}M′ be the ATM obtained from M by extending it with two instructions that go into an infinite loop if M reaches the accepting state. Given {a mathematical formula}M′ and an input w, our aim is to construct two TBoxes, {a mathematical formula}T1′ and {a mathematical formula}T2′, and a signature Σ such that {a mathematical formula}M′ has a run with only infinite branches if and only if the materialisation {a mathematical formula}M2 of {a mathematical formula}(T2′,A) is finitely Σ-homomorphically embeddable into the materialisation {a mathematical formula}M1 of {a mathematical formula}(T1′,A), where {a mathematical formula}A={A(c)}. Let f be a polynomial such that, on any input of length m, M uses at most {a mathematical formula}2n−2 tape cells, with {a mathematical formula}n=f(m), which are numbered from 1 to {a mathematical formula}2n−2, and throughout any computation the head remains to the right of cell 0, which contains a special marker {a mathematical formula}♭∈Λ. The construction proceeds in five steps (steps 1–4 are similar to steps 1–4 in the proof of Theorem 34).Step 0. We use tuples of 2n concept names to represent distances of up to {a mathematical formula}2n between the cells on the tape in consecutive configurations. We refer to a tuple {a mathematical formula}Yn−1,Y‾n−1,…,Y0,Y‾0 of concept names as Y and assume that the TBox contains the following concept inclusions to encode an n-bit R-counter on Y:{a mathematical formula} (Note that we will need P-counters as well as {a mathematical formula}P−-counters.) We use the expression {a mathematical formula}endY on the left-hand side of concept inclusions to say that the Y-value is {a mathematical formula}2n−1 (which is a shortcut for {a mathematical formula}Yn−1⊓…⊓Y0); we also use {a mathematical formula}not-endY on the left-hand side of concept inclusions for the complementary statement (which is a shortcut for n concept inclusions with {a mathematical formula}not-endY replaced by each of {a mathematical formula}Y‾n−1,…,Y‾0). Finally, we use {a mathematical formula}resetY on the right-hand side of concept inclusions for the reset command (which is equivalent to {a mathematical formula}Y‾n−1⊓…⊓Y‾0). Note that the counter stops at {a mathematical formula}2n−1: the R-successors of a domain element in {a mathematical formula}endY do not have to encode any value.Step 1. First we encode configurations and transitions of {a mathematical formula}M′ using {a mathematical formula}T1′. We represent a configuration by a block, which is a sequence of {a mathematical formula}2n+1 domain elements connected by a role P. As in Theorem 34, the first element distinguishes the blocks for the two alternative instructions; using a P-counter on a tuple T, we assign indices from 0 to {a mathematical formula}2n−1 to all other elements in each block. The element with index 0 is needed for padding. Each of the remaining {a mathematical formula}2n−1 elements belongs to a concept {a mathematical formula}Ca, for some {a mathematical formula}a∈Λ: if the element with index {a mathematical formula}i+1 is in {a mathematical formula}Ca, then the cell i is assumed to contain a in the configuration represented by the block (in particular, the element with index 1 contains ♭ for cell 0) as shown in Fig. 15.The first block represents the initial configuration: the input {a mathematical formula}w=a1…am is followed by {a mathematical formula}2n−m−2 blank symbols ␣ and the head is positioned over cell 1, which is indicated by the 0 value of the P-counter on a tuple H. This is achieved by the following concept inclusions in the TBox {a mathematical formula}T1′:{a mathematical formula}{a mathematical formula}{a mathematical formula} where I is a fresh concept name that is used only for padding of the input with ␣; cf. ({a mathematical formula}T1-1).Step 2. Similarly to the proof of Theorem 34, the current state {a mathematical formula}q∈Q and the content {a mathematical formula}a∈Λ of the active cell scanned by the head is recorded in the subscripts of concepts {a mathematical formula}Zqa0 that contain the last element of the block; note, however, that the position of the head must now be specified using the P-counter on H. At the end of the block, when the T-value reaches {a mathematical formula}2n−1, we branch out one block for each of the two transitions, reset the P-counter on T, and propagate, via {a mathematical formula}Zqa1 and {a mathematical formula}Zqa2, the current state and symbol in the active cell: for {a mathematical formula}q∈Q and {a mathematical formula}a∈Λ, we add to {a mathematical formula}T1′ the concept inclusion{a mathematical formula} where {a mathematical formula}X1 and {a mathematical formula}X2 are two fresh concept names that distinguish the type of the block; cf. ({a mathematical formula}T1-2).As in the proof of Theorem 34, the acceptance condition for {a mathematical formula}M′ is enforced by means of {a mathematical formula}T2′, which uses four types of blocks. In this proof, however, we need to use P-counters to reach the end of the block. The P-counter on a tuple T creates the initial block for the initial configuration:{a mathematical formula}{a mathematical formula} where {a mathematical formula}B0 is a fresh concept, an indicator of the initial block. We use {a mathematical formula}X1- and {a mathematical formula}X2-blocks for universal states (these blocks are indicated by concepts {a mathematical formula}B1 and {a mathematical formula}B2, respectively) and {a mathematical formula}X3-blocks for existential states (indicated by concept {a mathematical formula}B3). The tree-like structure of the blocks is achieved by adding to {a mathematical formula}T2′ the following inclusions:{a mathematical formula}{a mathematical formula}{a mathematical formula} where G is a fresh concept name; cf. ({a mathematical formula}T2-2) and ({a mathematical formula}T2-3); see also Fig. 12. (Note that ({a mathematical formula}T2′-3) with {a mathematical formula}k=0 is required as a replacement of part of ({a mathematical formula}T2-1).)Step 3. Recall that the P-counter on H measures the distance from the head: if the active cell in the current configuration has index k, then its H-value is 0 and the H-value of the cell with index {a mathematical formula}k−2 in a successor configuration is {a mathematical formula}2n−1 (note that since the head never visits cells with indexes 0 and 1, the P-counter on T is ahead of the P-counter on H at least by 2, whence {a mathematical formula}k−2≥0). So, until the H-counter reaches {a mathematical formula}2n−1, the following concept inclusions in {a mathematical formula}T1′ propagate the state and symbol in the active cell along the elements constituting the blocks: for {a mathematical formula}q∈Q, {a mathematical formula}a∈Λ and {a mathematical formula}j=0,1,2,{a mathematical formula} cf. ({a mathematical formula}T1-3); note that {a mathematical formula}not-endT means that this concept inclusion is not ‘applicable’ to the last and the first elements of each block (with indexes {a mathematical formula}2n−1 and −1, respectively). When the distance from the last head position is {a mathematical formula}2n−2, the contents of the cell and the current state are changed according to δ: for {a mathematical formula}q∈Q, {a mathematical formula}a∈Λ and {a mathematical formula}j=1,2,{a mathematical formula} (the symbol in the active cell is changed according to the instruction, and the current state and symbol in the active cell of a successive configuration are then recorded in the subscripts of the {a mathematical formula}Zqa0). These three situations are depicted in Fig. 16, where hatched nodes denote domain elements with H-values of {a mathematical formula}2n−1 and grey and black nodes with H-values of 0. (Again, the element corresponding to the cell {a mathematical formula}k−1 has only one P-successor, which encodes the updated symbol, {a mathematical formula}a′, in that cell.) Then, the current state and the symbol in the active cell are propagated along the tape using ({a mathematical formula}T1′-5) with {a mathematical formula}j=0.Step 4. The concept inclusions ({a mathematical formula}T1′-5)–({a mathematical formula}T1′-6) generate a separate P-successor for each {a mathematical formula}b∈Λ. As in the proof of Theorem 34, the correct one is chosen by a finite Σ-homomorphism, h, from {a mathematical formula}M2 to {a mathematical formula}M1 for Σ defined by (5). We add ({a mathematical formula}T2-4) from the proof of Theorem 34 along with the following replacement of ({a mathematical formula}T-1) to {a mathematical formula}T2′:{a mathematical formula}{a mathematical formula}{a mathematical formula} where we use a {a mathematical formula}P−-counter on a tuple E (unlike P-counters in all other cases) and a concept {a mathematical formula}Sb to propagate b along the whole block, which will be called a {a mathematical formula}Db-block; see Fig. 17. Like in the proof of Theorem 34, the length of any {a mathematical formula}Db-block, {a mathematical formula}2n+1, matches the length of blocks representing configurations and the last element of a {a mathematical formula}Db-block belongs to concept {a mathematical formula}Db. We also add ({a mathematical formula}T1-5)–({a mathematical formula}T1-6) from the proof of Theorem 34 and ({a mathematical formula}T′-1)–({a mathematical formula}T′-3) to {a mathematical formula}T1′, which generate {a mathematical formula}Db-blocks for all {a mathematical formula}b≠a from every domain element in {a mathematical formula}Ca and {a mathematical formula}Db-blocks for all {a mathematical formula}b∈Λ from domain elements in {a mathematical formula}Fa. The rest of the argument is as in the proof of Theorem 34; see Fig. 14.One can show that {a mathematical formula}M′ has a run with only infinite branches if and only if {a mathematical formula}(T1′,A) Σ-query entails {a mathematical formula}(T2′,A). By Theorem 13, Σ-query inseparability is also 2ExpTime-hard.  □</paragraph></section><section label="6"><section-title>Query inseparability for restricted sets of individuals</section-title><paragraph label="Definition 36">In the definition of Σ-query entailment and inseparability discussed so far we considered all tuples of individuals in the KBs that are certain answers to CQs. In this section, we refine this notion by allowing the user to define the set of individuals he is interested in. This leads to the following generalisation of Definition 1. Let {a mathematical formula}K1 and {a mathematical formula}K2 be KBs, Σ a relational signature and Γ an individual signature. We say that {a mathematical formula}K1{a mathematical formula}(Σ,Γ)-query entails{a mathematical formula}K2 if{a mathematical formula} KBs {a mathematical formula}K1 and {a mathematical formula}K2 are {a mathematical formula}(Σ,Γ)-query inseparable if they {a mathematical formula}(Σ,Γ)-query entail each other, in which case we write {a mathematical formula}K1≡Σ,ΓK2.</paragraph><paragraph>By definition, {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2 if and only if {a mathematical formula}K1{a mathematical formula}(Σ,Γ)-query entails {a mathematical formula}K2 for all individual signatures Γ. Also, if {a mathematical formula}Γ⊇ind(K2) then {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2 in case {a mathematical formula}K1{a mathematical formula}(Σ,Γ)-query entails {a mathematical formula}K2. As only the intersection {a mathematical formula}ind(K2)∩Γ is relevant for {a mathematical formula}(Σ,Γ)-query entailment, in what follows without loss of generality we assume that {a mathematical formula}Γ⊆ind(K2).</paragraph><paragraph label="Proof">One can analyse {a mathematical formula}(Σ,Γ)-query entailment between KBs, one of which is inconsistent, in a way similar to Σ-query entailment. So, in the sequel we only focus on consistent KBs without mentioning this explicitly. The main difference between Σ-query entailment and {a mathematical formula}(Σ,Γ)-query entailment can already be seen on KBs with empty TBoxes and empty individual signature Γ. Note that for KBs with empty TBoxes, Σ-query entailment is trivial as {a mathematical formula}K1=(∅,A1) Σ-query entails {a mathematical formula}K2=(∅,A2) if and only if, for all {a mathematical formula}a,b∈ind(K2) with {a mathematical formula}A(a)∈A2, {a mathematical formula}A∈Σ, or {a mathematical formula}P(a,b)∈A2, {a mathematical formula}P∈Σ, it follows that {a mathematical formula}A(a)∈A1 or {a mathematical formula}P(a,b)∈A1, respectively. Note also that {a mathematical formula}(Σ,∅)-query entailment between any KBs {a mathematical formula}K1 and {a mathematical formula}K2 means that all Boolean Σ-CQs entailed by {a mathematical formula}K2 are entailed by {a mathematical formula}K1 as well. Checking{a mathematical formula}(Σ,∅)-query entailment and{a mathematical formula}(Σ,∅)-inseparability of KBs with empty TBoxes are bothNP-hard for data complexity.Let {a mathematical formula}Ki=(∅,Ai), for {a mathematical formula}i=1,2. Clearly, {a mathematical formula}K1{a mathematical formula}(Σ,∅)-query entails {a mathematical formula}K2 if and only if there exists a {a mathematical formula}(Σ,∅)-homomorphism from (the interpretation corresponding to) {a mathematical formula}A2 to {a mathematical formula}A1. The latter problem is the standard homomorphism problem for relational structures which is known to be NP-hard [35]. To show NP-hardness of {a mathematical formula}(Σ,∅)-query inseparability, observe that there is a {a mathematical formula}(Σ,∅)-homomorphism from {a mathematical formula}A2 to {a mathematical formula}A1 if and only if {a mathematical formula}(∅,A1⊎A2) and {a mathematical formula}(∅,A1) are {a mathematical formula}(Σ,∅)-query inseparable, where {a mathematical formula}A1⊎A2 is the disjoint union of {a mathematical formula}A1 and {a mathematical formula}A2.  □</paragraph><paragraph label="Proof">We now show that checking the existence of a homomorphism between ABoxes is the only additional source of complexity for {a mathematical formula}(Σ,Γ)-query entailment compared to Σ-query entailment. In particular, for data complexity, checking {a mathematical formula}(Σ,Γ)-query entailment is in NP for all of our DLs; for combined complexity, it is either NP-complete or harder than NP, in which case it is of the same complexity as Σ-query entailment. We begin by generalising the semantic characterisation of Σ-query entailment via finite Σ-homomorphic embeddability of materialisations: Suppose{a mathematical formula}Kiis a KB with a materialisation{a mathematical formula}Ii, for{a mathematical formula}i=1,2, Σ is a relational signature, and{a mathematical formula}Γ⊆ind(K2). Then{a mathematical formula}K1{a mathematical formula}(Σ,Γ)-query entails{a mathematical formula}K2if and only if{a mathematical formula}I2is finitely{a mathematical formula}(Σ,Γ)-homomorphically embeddable into{a mathematical formula}I1.A straightforward extension of the proof of Theorem 6.  □</paragraph><paragraph label="Proof">Now we generalise the game-theoretic characterisation provided by Theorem 15. Let {a mathematical formula}M1 and {a mathematical formula}M2 be materialisations obtained by unravelling finite generating structures {a mathematical formula}G1 and {a mathematical formula}G2 for KBs {a mathematical formula}K1 and {a mathematical formula}K2, respectively, and let {a mathematical formula}M2ind be the subinterpretation of {a mathematical formula}M2 with domain {a mathematical formula}ind(K2). Let{a mathematical formula}Γ⊆ind(K2). Then{a mathematical formula}M2is finitely{a mathematical formula}(Σ,Γ)-homomorphically embeddable into{a mathematical formula}M1if and only if the following conditions are satisfied: {a mathematical formula}(winwit)for any{a mathematical formula}u∈ΔG2∖ind(K2)and{a mathematical formula}n&lt;ω, there exists{a mathematical formula}σ∈ΔM1such that player 1 has an n-winning strategy in the game{a mathematical formula}GΣ(G2,M1)starting from{a mathematical formula}(u↦σ);{a mathematical formula}(h+winind)for any{a mathematical formula}n&lt;ω, there is a{a mathematical formula}(Σ,Γ)-homomorphism{a mathematical formula}hn:M2ind→M1such that, for every{a mathematical formula}a∈ind(K2), player 1 has an n-winning strategy in the game{a mathematical formula}GΣ(G2,M1)starting from{a mathematical formula}(a↦hn(a)).A straightforward modification of the proof of Theorem 15.  □</paragraph><paragraph>Condition {a mathematical formula}(winwit) is the restriction of {a mathematical formula}(win) in Theorem 15 to {a mathematical formula}u∈ΔG2∖ind(K2), and so can be reduced, by Lemma 30, to conditions for games on the finite generating structures {a mathematical formula}G1 and {a mathematical formula}G2. We now show that {a mathematical formula}(h+winind) can also be reduced to certain conditions on {a mathematical formula}G1 and {a mathematical formula}G2. In contrast to the case where one could not restrict the set of individuals and individuals were mapped to themselves (cf. (abox)), we now require a {a mathematical formula}(Σ,Γ)-homomorphism h from {a mathematical formula}M2ind to an extension of {a mathematical formula}G1, which is obtained by a partial unravelling of {a mathematical formula}G1 defined as follows.</paragraph><paragraph>Consider {a mathematical formula}G=(ΔG,⋅G,↝) and let {a mathematical formula}X⊆ΔG, where either {a mathematical formula}X⊆ind(K) or {a mathematical formula}X={w} for some {a mathematical formula}w∈ΔG∖ind(K). We associate with X a finite prefix-closed set {a mathematical formula}ΠX of paths π of the form {a mathematical formula}w0⋯wn such that {a mathematical formula}w0∈X and {a mathematical formula}wi↝wi+1, for {a mathematical formula}i&lt;n (cf. Definition 7). The structure {a mathematical formula}GX=(ΔGX,⋅GX,↝X) is defined by first taking {a mathematical formula}ΔGX=ΔG∪ΠX,{a mathematical formula}{a mathematical formula}AGX=AG∪{π∈ΠX|tail(π)∈AG}, for each concept name A, {a mathematical formula}PGX=PG, for each role name P, and {a mathematical formula}(π,π′)GX=(tail(π),tail(π′))G, for each arrow {a mathematical formula}π↝Xπ′. Then we remove all ‘disconnected’ elements from {a mathematical formula}GX to make sure that each {a mathematical formula}ΔGX∖ind(K) is reachable from {a mathematical formula}ind(K) via a path of ↝ arrows. (Note that {a mathematical formula}GX depends on {a mathematical formula}ΠX, which will always be clear from the context.)</paragraph><paragraph>Observe that the unravelling {a mathematical formula}MX of {a mathematical formula}GX is isomorphic to the unravelling {a mathematical formula}M of {a mathematical formula}G. We denote the natural isomorphism from {a mathematical formula}MX onto {a mathematical formula}M by g. Note that if {a mathematical formula}X⊆ind(K) then, on {a mathematical formula}g−1(ΠX), the function g coincides with {a mathematical formula}tail; otherwise, if {a mathematical formula}X={w0} then {a mathematical formula}g(δ⋅w0)=g(δ)w0, for {a mathematical formula}δ⋅w0∈ΔMX, and {a mathematical formula}g(δ⋅π⋅πw)=g(δ⋅π)w, for {a mathematical formula}δ⋅π∈ΔMX and {a mathematical formula}π,πw∈ΠX.</paragraph><paragraph label="Example 40">Consider the generating structure {a mathematical formula}G depicted in Fig. 18a. The extended generating structure {a mathematical formula}G{a}, with {a mathematical formula}Π{a}={a,aw,aww1}, is shown in Fig. 18d. Observe that the shaded part, {a mathematical formula}Π{a}, of {a mathematical formula}G{a} coincides with the shaded part of the unravelling {a mathematical formula}M of {a mathematical formula}G and that the unravelling {a mathematical formula}M{a} of {a mathematical formula}G{a} is isomorphic to {a mathematical formula}M so that, on the shaded area, the natural isomorphism g coincides with {a mathematical formula}tail: for example, {a mathematical formula}g(a⋅aw⋅aww1)=aww1=tail(a⋅aw⋅aww1), as shown by the dotted line in Fig. 18.Next, consider the generating structure {a mathematical formula}G1 depicted in Fig. 19a. The extended generating structure {a mathematical formula}G1{w}, with {a mathematical formula}Π{w}={w,ww′}, is shown in Fig. 19d. Note that {a mathematical formula}w′ does not belong to {a mathematical formula}G1{w} because it would not be connected to any other domain element. Observe again that the unravelling {a mathematical formula}M1{w} of {a mathematical formula}G1{w} is isomorphic to the unravelling {a mathematical formula}M1 of {a mathematical formula}G1: the natural isomorphism g is such that {a mathematical formula}g(c⋅wi⋅w)=cwiw and {a mathematical formula}g(c⋅wi⋅w⋅ww′)=g(c⋅wi⋅w)w′, for {a mathematical formula}i=1,2. Note also that both unravellings contain two isomorphic copies of {a mathematical formula}Π{w} from {a mathematical formula}G1{w} (shaded in Fig. 19d): for example, the elements {a mathematical formula}cw1π and {a mathematical formula}cw2π in {a mathematical formula}M1 are copies of {a mathematical formula}π∈Π{w}.</paragraph><paragraph>It will be convenient to consider h-images of maximal Σ-connected components of {a mathematical formula}M2ind separately. A subset {a mathematical formula}Δ0 of the domain {a mathematical formula}ΔM of an interpretation {a mathematical formula}M is called Σ-connected if, for any {a mathematical formula}u,u′∈Δ0, there are {a mathematical formula}u0,…,un such that {a mathematical formula}u0=u, {a mathematical formula}un=u′ and, for each {a mathematical formula}i&lt;n, there exists a Σ-role R with {a mathematical formula}(ui,ui+1)∈RM.</paragraph><paragraph label="Theorem 41">Condition{a mathematical formula}(h+winind)holds if and only if, for every maximal Σ-connected component{a mathematical formula}Δ0of{a mathematical formula}M2ind, there are{a mathematical formula}X⊆ΔG1, a structure{a mathematical formula}G1Xand a map{a mathematical formula}h:Δ0→ΔG1Xsuch that either{a mathematical formula}X⊆ind(K1)or{a mathematical formula}X={w0}for{a mathematical formula}w0∈ΔG1∖ind(K1), and{a mathematical formula}h(Δ0)=ΠX,(h{sup:Γ}){a mathematical formula}h(a)=a, for any{a mathematical formula}a∈Δ0∩Γ∩partΣM2, and{a mathematical formula}tΣM2(a)⊆tΣG1X(h(a))and{a mathematical formula}rΣM2(a,b)⊆rΣG1X(h(a),h(b)), for any{a mathematical formula}a,b∈Δ0,{a mathematical formula}(h+winX)for each{a mathematical formula}π∈ΠX, there exists a state{a mathematical formula}aπ=(Ξπ↦π,Ψπ)such that{a mathematical formula}Ξπ⊇h−1(π), player 1 has an ω-winning strategy in{a mathematical formula}GΣg(G2,G1X)from{a mathematical formula}aπ, and if{a mathematical formula}X={w0}then the{a mathematical formula}aπare co-ordinated in the following sense:{a mathematical formula}</paragraph><paragraph label="Proof">(⇒) Let {a mathematical formula}Δ0 be a maximal Σ-connected component of {a mathematical formula}M2ind. For any {a mathematical formula}n&lt;ω, take a {a mathematical formula}(Σ,Γ)-homomorphism {a mathematical formula}hn from {a mathematical formula}M2ind to {a mathematical formula}M1 such that, for every {a mathematical formula}a∈ind(K2), player 1 has an n-winning strategy in the game {a mathematical formula}GΣ(G2,M1) starting from {a mathematical formula}(a↦hn(a)). Two cases are possible now.</paragraph><list><list-item label="–">If {a mathematical formula}hn(Δ0)∩ind(K1)≠∅ for infinitely many {a mathematical formula}n&lt;ω then, since {a mathematical formula}hn(Δ0) is Σ-connected, the number of distinct sets {a mathematical formula}hn(Δ0) with {a mathematical formula}hn(Δ0)∩ind(K1)≠∅ is finite. Thus, by the pigeonhole principle, there is an infinite set {a mathematical formula}H of natural numbers n with {a mathematical formula}hn(Δ0)∩ind(K1)≠∅ such that the restrictions of all {a mathematical formula}hn to {a mathematical formula}Δ0 coincide. Let h be the restriction of some {a mathematical formula}hn, for {a mathematical formula}n∈H, to {a mathematical formula}Δ0. We set {a mathematical formula}X=h(Δ0)∩ind(K1) and {a mathematical formula}ΠX=h(Δ0). Using the map h, one can now construct the required starting states and ω-winning strategies in {a mathematical formula}GΣg(G2,G1X) in exactly the same way as in the proof of {a mathematical formula}(a)⇒(b) in Lemma 30.</list-item><list-item label="–">Otherwise, {a mathematical formula}hn(Δ0)∩ind(K1)=∅ for infinitely many {a mathematical formula}n&lt;ω and, as {a mathematical formula}Δ0 is Σ-connected, by the pigeonhole principle there exists {a mathematical formula}w0∈ΔG1∖ind(K1) such that, for infinitely many {a mathematical formula}n&lt;ω, {a mathematical formula}hn(Δ0) is a tree with root {a mathematical formula}σnw0∈ΔM1. We set {a mathematical formula}X={w0} and can define, again by the pigeonhole principle, {a mathematical formula}ΠX in such a way that there is an infinite set {a mathematical formula}H of natural numbers n such that {a mathematical formula}hn(Δ0)={σnπ|π∈ΠX}. Then, for every {a mathematical formula}a∈Δ0, there is {a mathematical formula}h(a)∈ΠX such that {a mathematical formula}hn(a)=σnh(a), for all {a mathematical formula}n∈H. Using the map h, one can now construct the required starting states satisfying (6), and ω-winning strategies in {a mathematical formula}GΣg(G2,G1X) in exactly the same way as in the proof of {a mathematical formula}(a)⇒(b) in Lemma 30.</list-item></list><paragraph>Condition (6) is necessary for co-ordinating the starting states of the games when {a mathematical formula}X={w0}, for {a mathematical formula}w0∈ΔG1∖ind(K1). On the other hand, if {a mathematical formula}Γ⊇ind(K2) then all Σ-participating individuals in {a mathematical formula}ind(K2) must be mapped to themselves, and so condition (6) is not applicable in this case. The following example shows that without (6) we cannot guarantee that {a mathematical formula}(h+winind) holds, and so {a mathematical formula}M2 may not be finitely {a mathematical formula}(Σ,Γ)-homomorphically embeddable into {a mathematical formula}M1.</paragraph><paragraph label="Example 42">Consider KBs {a mathematical formula}K2 and {a mathematical formula}K1 and a relational signature Σ such that {a mathematical formula}ind(K2)={a,b}, {a mathematical formula}ind(K1)={c} and their generating structures {a mathematical formula}G2Σ and {a mathematical formula}(G1{w})Σ are as in Fig. 20a, with {a mathematical formula}Π{w}={w,ww′} (see also Figs. 19a and d for {a mathematical formula}G1 and {a mathematical formula}G1{w}, respectively). Let {a mathematical formula}Γ=∅ and suppose that {a mathematical formula}h(a)=w and {a mathematical formula}h(b)=ww′ (see the dashed lines in Fig. 20a). Player 1 has ω-winning strategies in {a mathematical formula}GΣg(G2,G1X) from the states {a mathematical formula}aa=({a}↦w,{v1}) and {a mathematical formula}ab=({b}↦ww′,{u1}): see the dotted lines in Fig. 20a and the game graph in Fig. 20b. However, the two starting states, {a mathematical formula}aa and {a mathematical formula}ab, do not satisfy the co-ordination condition (6). In fact, the map they induce is not a {a mathematical formula}(Σ,Γ)-homomorphism from {a mathematical formula}M2 to {a mathematical formula}M1 because it sends a to {a mathematical formula}cw2w and b to {a mathematical formula}cw1ww′, which are not connected by the role T in {a mathematical formula}M1. Moreover, it is not hard to see that there is no {a mathematical formula}(Σ,Γ)-homomorphism from {a mathematical formula}M2 to {a mathematical formula}M1. Indeed, our co-ordination condition means that we have to choose appropriate starting states for each of the elements in {a mathematical formula}ΠX. So, we can pick {a mathematical formula}ab for {a mathematical formula}ww′, from which, as we noted above, player 1 has an ω-winning strategy. We cannot, however, choose {a mathematical formula}aa for w because {a mathematical formula}Ψww′={u1}, and so, by (6), {a mathematical formula}Ξw must contain {a mathematical formula}u1 (along with a) but the ‘uncoordinated’ starting state {a mathematical formula}aa does not include {a mathematical formula}u1. Thus, we have to take {a mathematical formula}aa′=({u1,a}↦w,{u2,v1}) for w, from which player 1 has no ω-winning strategy: see the graph in Fig. 20b, where all the paths from {a mathematical formula}aa′ lead to dead-ends.</paragraph><paragraph label="Proof">Finally, we obtain the following tight complexity results for KB {a mathematical formula}(Σ,Γ)-query entailment and inseparability. For combined complexity, both KB{a mathematical formula}(Σ,Γ)-query entailment and inseparability are 2ExpTime-complete for{a mathematical formula}Horn-ALCHIand{a mathematical formula}Horn-ALCI; ExpTime-complete for{a mathematical formula}Horn-ALCH,{a mathematical formula}Horn-ALC,{a mathematical formula}DL-LitehornHand{a mathematical formula}DL-LitecoreH; andNP-complete for{a mathematical formula}ELH⊥dr,{a mathematical formula}EL,{a mathematical formula}DL-Litehornand{a mathematical formula}DL-Litecore. For data complexity, these problems areNP-complete.Note first that the size of X and {a mathematical formula}ΠX is bounded by the size of {a mathematical formula}ind(K2), so the size of {a mathematical formula}G1X is polynomial in the size of {a mathematical formula}G1 and {a mathematical formula}ind(K2). Note also that if {a mathematical formula}G1 is a forward generating structure then so is {a mathematical formula}G1X; if {a mathematical formula}G1 is a functional generating structure then so is {a mathematical formula}G1X; and if {a mathematical formula}G1 satisfies (lite1) and (lite2) then so does {a mathematical formula}G1X.We start with an NP algorithm for data complexity. Let {a mathematical formula}Gi be a generating structure for a KB {a mathematical formula}Ki, {a mathematical formula}i=1,2. For each maximal Σ-connected component {a mathematical formula}Δ0 of {a mathematical formula}M2ind, the algorithm performs two NP steps: (i) it guesses sets X, {a mathematical formula}ΠX and a map h from {a mathematical formula}Δ0 onto {a mathematical formula}ΠX, computes {a mathematical formula}G1X, and checks whether (h{sup:Γ}) is satisfied; then (ii) it guesses sets {a mathematical formula}Ξπ and {a mathematical formula}Ψπ satisfying (6) if {a mathematical formula}X⊈ind(K1), for each {a mathematical formula}π∈ΠX, and finally checks whether (h+win) holds. It is not hard to see both (i) and (ii) can be done in polynomial time in the size of {a mathematical formula}ind(K1) and {a mathematical formula}ind(K2).It is easy to see that for {a mathematical formula}ELH⊥dr and {a mathematical formula}DL-Litehorn KBs, the algorithm above provides an NP upper bound for the combined complexity as well. For the more expressive DLs, the upper bounds for combined complexity stay the same as before because there is at most an exponential number of distinct sets {a mathematical formula}ΠX, maps h and states {a mathematical formula}aπ. The ExpTime- and 2ExpTime-hardness results also carry over from Σ-query inseparability and Σ-query entailment, and NP-hardness follows from Theorem 37.  □</paragraph></section><section label="7"><section-title>Related work and applications</section-title><paragraph>In this section, we discuss the relationship between {a mathematical formula}(Σ,Γ)-query inseparability and knowledge exchange, TBox inseparability, and query-based comparison of OBDA specifications. Σ-query inseparability of KBs has not been investigated systematically before. Note, however, that the polynomial upper bound for {a mathematical formula}EL was established as a preliminary step to study Σ-query inseparability of TBoxes [31], and that this notion was also used to study forgetting in {a mathematical formula}DL-LiteboolN[36].</paragraph><section label="7.1"><section-title>Knowledge exchange</section-title><paragraph>For the motivation of studying knowledge exchange between KBs and illustrating examples, we refer the reader to Section 1. Here we establish a tight link between deciding Σ-query inseparability and deciding the membership problem for universal CQ-solutions. We also consider the connection between {a mathematical formula}(Σ,Γ)-query inseparability and the membership problem for universal CQ-solutions with nulls.</paragraph><paragraph label="Theorem 44">Assume (without loss of generality) that {a mathematical formula}K1 and {a mathematical formula}K2 are KBs given in disjoint relational signatures {a mathematical formula}Σ1 and {a mathematical formula}Σ2. Suppose also that {a mathematical formula}T12 consists of inclusions of the form {a mathematical formula}S1⊑S2 such that the {a mathematical formula}Si are concept or role names in {a mathematical formula}Σi. Then the problem of deciding whether {a mathematical formula}K1∪T12≡Σ2K2 is called the membership problem for universal CQ-solutions. For any of our DLs {a mathematical formula}L with role inclusions, the problem whether {a mathematical formula}K1∪T12≡Σ2K2 is a {a mathematical formula}Σ2-query inseparability problem in {a mathematical formula}L, and so the upper complexity bounds for Σ-query inseparability can be applied directly to obtain upper bounds for the membership problem for universal CQ-solutions. The following result establishes the converse: Σ-query entailment for any of our DLs{a mathematical formula}LisLogSpace-reducible to the membership problem for universal CQ-solutions in{a mathematical formula}L.</paragraph><paragraph label="Theorem 45">The proof uses the construction from the proof of Theorem 13 and is given in Appendix A. As a consequence of Theorem 44, Theorem 31, Theorem 35 we obtain the following: For combined complexity, the membership problem for universal CQ-solutions is 2ExpTime-complete for{a mathematical formula}Horn-ALCHIand{a mathematical formula}Horn-ALCI; ExpTime-complete for{a mathematical formula}Horn-ALCH,{a mathematical formula}Horn-ALC,{a mathematical formula}DL-LitehornHand{a mathematical formula}DL-LitecoreH; andP-complete for{a mathematical formula}ELH⊥drand{a mathematical formula}EL. For data complexity, all these problems areP-complete.</paragraph><paragraph>Note that the combined complexity of the membership problem for universal CQ-solutions remains open for {a mathematical formula}DL-Litecore and {a mathematical formula}DL-Litehorn.</paragraph><paragraph>In the case of {a mathematical formula}DL-LitecoreH, we also obtain an ExpTime algorithm for checking the existence and computing universal CQ-solutions. Indeed, given a KB {a mathematical formula}K1, a target signature {a mathematical formula}Σ2 and a mapping {a mathematical formula}T12, we first compute the {a mathematical formula}Σ2-ABox over {a mathematical formula}ind(K1) that is implied by {a mathematical formula}K1 and {a mathematical formula}T12, and then check whether at least one KB {a mathematical formula}K2 in {a mathematical formula}Σ2 with this ABox is a universal CQ-solution (there are at most {a mathematical formula}O(2|Σ2|) such KBs). This gives an ExpTime upper bound for the non-emptiness problem for universal CQ-solutions in {a mathematical formula}DL-LitecoreH[23].</paragraph><paragraph>A more flexible knowledge exchange model allows the target KB to use additional individuals (i.e., not only the individuals in {a mathematical formula}K1), which however cannot be returned as certain answers [23]. These ‘anonymous’ individuals are similar to nulls in the standard approaches to incomplete databases, and intuitively represent objects the existence of which is implied by {a mathematical formula}K1∪T12. The reader can find an illustrating example in Section 1. Formally, we say that a KB {a mathematical formula}K2 with a relational signature {a mathematical formula}Σ2 is a universal CQ-solution with nulls for a KB {a mathematical formula}K1 and a mapping specification {a mathematical formula}T12 if {a mathematical formula}K1∪T12≡Σ2,ind(K1)K2 (which is equivalent to the definition given in [23]). Thus we obtain the following result:</paragraph><paragraph label="Theorem 46">For combined complexity, the membership problem for universal CQ-solutions with nulls is 2ExpTime-complete for{a mathematical formula}Horn-ALCHIand{a mathematical formula}Horn-ALCI; ExpTime-complete for{a mathematical formula}Horn-ALCH,{a mathematical formula}Horn-ALC,{a mathematical formula}DL-LitehornHand{a mathematical formula}DL-LitecoreH; andNP-complete for{a mathematical formula}ELH⊥drand{a mathematical formula}EL. For data complexity, all these problems areNP-complete.</paragraph><paragraph label="Proof">The upper bounds follow from Theorem 43. The ExpTime and 2ExpTime lower bounds follow from Theorem 45, and the NP lower bound can be obtained from the proof of Theorem 37 by a straightforward modification.  □</paragraph><paragraph>Again, the combined complexity of the membership problem for universal CQ-solutions with nulls remains open for {a mathematical formula}DL-Litecore and {a mathematical formula}DL-Litehorn.</paragraph></section><section label="7.2"><section-title>TBox inseparability and OBDA specifications</section-title><paragraph>We remind the reader that, for a relational signature Σ, TBoxes {a mathematical formula}T1 and {a mathematical formula}T2 are called Σ-query inseparable if, for all Σ-ABoxes {a mathematical formula}A, the KBs {a mathematical formula}(T1,A) and {a mathematical formula}(T2,A) are Σ-query inseparable. TBox Σ-query inseparability has been extensively studied; see, e.g., [17], [31], [24], [10]. TBox and KB inseparabilities have different applications. The former supports ontology engineering when data is not known or changes frequently: one can equivalently replace one TBox with another only if they return the same answers to queries for every Σ-ABox. In contrast, KB inseparability is useful in applications where data is stable—such as knowledge exchange or variants of module extraction and forgetting with fixed data—in order to use the KB in a new application or as a compilation step to make CQ answering more efficient.</paragraph><paragraph>For many DLs, TBox Σ-query inseparability is harder than KB query inseparability. For {a mathematical formula}DL-Litehorn, the space of relevant Σ-ABox counterexamples is of exponential size and, in fact, Σ-query inseparability of TBoxes is NP-hard [17], while Σ-query inseparability of KBs is in P. Similarly, we have seen that Σ-query inseparability of {a mathematical formula}EL KBs is in P, while Σ-query inseparability of {a mathematical formula}EL TBoxes is ExpTime-complete [31]. The complexity of TBox Σ-query inseparability for Horn-DLs extending {a mathematical formula}Horn-ALC is not known.</paragraph><paragraph>The complexity of Σ-query inseparability of {a mathematical formula}DL-LitecoreH TBoxes was known to sit between PSpace and ExpTime[24]. Using the fact that witness Σ-ABoxes for Σ-query inseparability of {a mathematical formula}DL-LitecoreH TBoxes can always be chosen among the singleton Σ-ABoxes [24, Theorem 8], one can easily modify the proof of Theorem 34 to improve the PSpace lower bound:</paragraph><paragraph label="Theorem 47">TBox Σ-query inseparability of{a mathematical formula}DL-LitecoreHTBoxes isExpTime-complete.</paragraph><paragraph>For work on other notions of TBox inseparability and the corresponding notions of modules and forgetting, we refer the reader to [37], [12], [38], [39], [40], [41], [42], [43].</paragraph><paragraph>In ontology-based data access (OBDA), a TBox {a mathematical formula}T provides a vocabulary for user queries, which is connected by a declarative mapping {a mathematical formula}M to a data source schema S (see, e.g., [2], [44]). The pair {a mathematical formula}S=(T,M) is called an OBDA specification (sometimes, it also includes integrity constraints of the data source). For example, {a mathematical formula}M can consist of implications {a mathematical formula}∀xy(φ(x,y)→ψ(x)), where {a mathematical formula}φ(x,y) is a conjunction of atoms over S and {a mathematical formula}ψ(x) is a conjunction of atoms over the signature of {a mathematical formula}T (in which case {a mathematical formula}M is called a GAV mapping). For a data instance D over S and a CQ {a mathematical formula}q(x), the certain answers to {a mathematical formula}q(x) over D under the OBDA specification {a mathematical formula}S are defined in the obvious way. In [45], the following generalisation of TBox Σ-query entailment is introduced to support the static analysis of OBDA specifications. Say that an OBDA specification {a mathematical formula}S1 query entails an OBDA specification {a mathematical formula}S2 if, for every CQ {a mathematical formula}q(x) and every data instance D over S, the certain answers to {a mathematical formula}q(x) over D under {a mathematical formula}S2 are contained in the certain answers to {a mathematical formula}q(x) over D under {a mathematical formula}S1. It was shown [45] that the complexity of query entailment between OBDA specifications is closely linked to the complexity of Σ-query entailment. In fact, for GLAV, GAV, and linear mappings {a mathematical formula}M, and {a mathematical formula}DL-LitecoreH TBoxes {a mathematical formula}T, the tight complexity results obtained in this article for Σ-query entailment are used to obtain the same complexity for deciding query entailment between OBDA specifications.</paragraph></section></section><section label="8"><section-title>Future work</section-title><paragraph>In this article, we have been concerned with algorithms deciding whether two KBs are {a mathematical formula}(Σ,Γ)-query inseparable. Depending on the applications of {a mathematical formula}(Σ,Γ)-query inseparability, other reasoning problems may also become important. We discuss them below for the four applications described in Section 1.</paragraph><paragraph>For KB versioning, it is often not sufficient to learn that two KBs give different answers to some CQs in the signature {a mathematical formula}(Σ,Γ). In addition, a description of the relevant differences between the KBs should be given. Our algorithms compute a CQ witnessing {a mathematical formula}(Σ,Γ)-query separability, if one exists, which can be presented to the user. However, this CQ can be unnecessarily large, and it might not be a comprehensive representation of the differences between the two KBs. It would thus be of interest to develop additional algorithms that search for small witness CQs of {a mathematical formula}(Σ,Γ)-query separability, provide a comprehensive list of such witnesses, and link them to assertions in the KBs that explain them. Similar problems have been addressed in TBox versioning [10].</paragraph><paragraph>In knowledge exchange, we often do not have a candidate KB for the role of universal CQ-solution, but are rather interested in deciding whether a universal CQ-solution exists and computing it. We have seen above that our decision algorithms give a solution to this problem in the case of {a mathematical formula}DL-LitecoreH, but seem to require significant extensions for more expressive DLs; see also [23].</paragraph><paragraph>In forgetting, the situation is similar to knowledge exchange: we are usually interested in deciding whether a uniform interpolant exists and computing it. For TBoxes, these problems have been investigated within one approach to uniform interpolants with respect to subsumptions [41], [46]. However, little is known about uniform interpolants for KBs with respect to answering CQs. Again, for {a mathematical formula}DL-LitecoreH one can adapt our algorithm to compute uniform interpolants, but in general the ideas presented in this article will have to be significantly extended and/or modified.</paragraph><paragraph>Our algorithms can be directly used to decide whether a subset of a KB is its {a mathematical formula}(Σ,Γ)-query module. One of the most important problems in modularisation is the extraction of a minimal (with respect to set inclusion) module from a given KB. It is straightforward to design a polynomial-time algorithm extracting a {a mathematical formula}(Σ,Γ)-query module that calls an inseparability checker as an oracle: exhaustively remove assertions α from a given KB {a mathematical formula}K such that {a mathematical formula}K∖{α} and {a mathematical formula}K are {a mathematical formula}(Σ,Γ)-query inseparable. Without any additional optimisations, however, only the algorithms based on forward strategies for Σ-inseparability in DLs without inverse roles can have acceptable performance. Interestingly, one can apply the same algorithms to compute approximations of minimal Σ-query modules for DLs with inverse roles: one can extract a Σ-query module of a given KB {a mathematical formula}K by exhaustively removing from {a mathematical formula}K those inclusions and assertions α for which player 1 has a winning strategy in the game {a mathematical formula}GΣf(G2,G1) on generating structures {a mathematical formula}G2 and {a mathematical formula}G1 for {a mathematical formula}K and {a mathematical formula}K∖{α}, respectively. The resulting KB is a module that approximates a minimal one. Efficiency of a similar approach to module extraction from TBoxes was shown in experiments [24].</paragraph><paragraph>As far as {a mathematical formula}(Σ,Γ)-query inseparability itself is concerned, it would be of interest to consider more expressive Horn-DLs than {a mathematical formula}Horn-ALCHI, for example, those with (qualified) number restrictions, transitive roles, or nominals. We conjecture that extensions of our game-theoretic approach can be applied to most (if not all) of those Horn-DLs. Finally, nothing is known about the complexity (and algorithms) for query inseparability for non-Horn DLs. Observe that in this case inseparability for CQs does not coincide anymore with inseparability for UCQs. For example, for {a mathematical formula}Σ={A,B,E}, the KBs {a mathematical formula}K1=({⊤⊑A⊔B},{E(a)}) and {a mathematical formula}K2=(∅,{E(a)}) are Σ-inseparable for CQs but not Σ-inseparable for UCQs. It seems appropriate to start an investigation of inseparability (for CQs and UCQs) with weak non-Horn DLs such as the DL underpinning Schema.org [47], [48] or other fragments of DL-Litebool and then move to more expressive DLs such as {a mathematical formula}ALC. We conjecture that the game-theoretic approach can be applied to those DLs as well.</paragraph><section-title>Acknowledgements</section-title></section></content><acknowledgements><paragraph>The article was supported by the UK EPSRC grants EP/M012646, EP/M012670, EP/H043594, EP/H05099X and the EU IP Optique, n. FP7-318338 (funded by the European Commission).</paragraph></acknowledgements><appendices><section label="Appendix A"><section-title>Proofs</section-title><paragraph label="Lemma 10">Let{a mathematical formula}K=(T,A)be a consistent KB with a{a mathematical formula}Horn-ALCHITBox in normal form and{a mathematical formula}Mthe unravelling of{a mathematical formula}G. Then{a mathematical formula}Mis a model of{a mathematical formula}K. Moreover,</paragraph><list><list-item label="–">{a mathematical formula}τTM(a)={C∈con(T)|K⊨C(a)}, for all{a mathematical formula}a∈ind(K),</list-item><list-item label="–">{a mathematical formula}τTM(σ)=τ, for all{a mathematical formula}σ∈ΔMwith{a mathematical formula}tail(σ)=([S],τ).</list-item></list><paragraph label="Proof">First, we show that {a mathematical formula}a∈CM iff {a mathematical formula}K⊨C(a), for all {a mathematical formula}a∈ind(K), and {a mathematical formula}σ∈CM iff {a mathematical formula}C∈τ, for all {a mathematical formula}σ∈ΔM with {a mathematical formula}tail(σ)=([S],τ). We consider the following two cases for C: 1:{a mathematical formula}C=A.For {a mathematical formula}a∈ind(K), we clearly have {a mathematical formula}a∈AM iff {a mathematical formula}a∈AG iff {a mathematical formula}K⊨A(a). Similarly, for any {a mathematical formula}σ∈ΔM with {a mathematical formula}tail(σ)=([S],τ), we have {a mathematical formula}σ∈AM iff {a mathematical formula}([S],τ)∈AG iff {a mathematical formula}A∈τ.2:{a mathematical formula}C=∃R.B.Let {a mathematical formula}a∈(∃R.B)M. If there is {a mathematical formula}b∈ind(K) with {a mathematical formula}(a,b)∈RM and {a mathematical formula}b∈BM then, by the construction of {a mathematical formula}M and {a mathematical formula}G, there is some P with {a mathematical formula}P(a,b)∈A and {a mathematical formula}T⊨P⊑R, whence {a mathematical formula}K⊨R(a,b). On the other hand, by item 1, {a mathematical formula}K⊨B(b), whence {a mathematical formula}K⊨(∃R.B)(a). If there is no {a mathematical formula}b∈ind(K) with {a mathematical formula}(a,b)∈RM and {a mathematical formula}K⊨B(b), then {a mathematical formula}a↝([R],τ), for some {a mathematical formula}T-type τ such that {a mathematical formula}K⊨(∃R.τ)(a) and {a mathematical formula}B∈τ, whence {a mathematical formula}K⊨(∃R.B)(a).Conversely, let {a mathematical formula}K⊨(∃R.B)(a). If there is {a mathematical formula}b∈ind(K) with {a mathematical formula}P(a,b)∈A, {a mathematical formula}T⊨P⊑R and {a mathematical formula}K⊨B(b) then, by construction, {a mathematical formula}(a,b)∈RM and, by item 1, {a mathematical formula}b∈BM, whence {a mathematical formula}a∈(∃R.B)M. Otherwise, let τ be a maximal {a mathematical formula}T-type such that {a mathematical formula}K⊨(∃R.τ)(a) and {a mathematical formula}B∈τ. Then {a mathematical formula}a↝([R],τ) and, by the construction of {a mathematical formula}G and {a mathematical formula}M, {a mathematical formula}(a,a⋅([R],τ))∈RM and, by item 1, {a mathematical formula}a⋅([R],τ)∈BM, whence {a mathematical formula}a∈(∃R.B)M.Now, suppose {a mathematical formula}σ∈(∃R.B)M. Then there is {a mathematical formula}σ′ such that {a mathematical formula}(σ,σ′)∈RM and {a mathematical formula}σ′∈BM. By construction, the following three options are possible.If {a mathematical formula}σ′=σ⋅([S′],τ′) then {a mathematical formula}T⊨τ⊑∃S′.τ′, {a mathematical formula}T⊨S′⊑R and {a mathematical formula}B∈τ′, whence {a mathematical formula}T⊨τ⊑∃R.B, and so, as τ is a {a mathematical formula}T-type, {a mathematical formula}∃R.B∈τ.If {a mathematical formula}σ=σ′⋅([S],τ) with {a mathematical formula}tail(σ′)=([S′],τ′) then {a mathematical formula}T⊨τ′⊑∃S.τ, {a mathematical formula}T⊨S⊑R− and {a mathematical formula}B∈τ′. It follows that we have {a mathematical formula}T⊨τ′⊑∃R−.τ and {a mathematical formula}B∈τ′. Since τ is maximal, it must contain {a mathematical formula}∃R.B (for otherwise {a mathematical formula}τ′⊓∃R−.(τ⊓∀R.¬B) would be consistent).If {a mathematical formula}σ=σ′⋅([S],τ) with {a mathematical formula}σ′=a∈ind(K) then {a mathematical formula}K⊨(∃S.τ)(a), {a mathematical formula}T⊨S⊑R− and, by item 1, {a mathematical formula}K⊨B(a). Thus, we have {a mathematical formula}K⊨(∃R−.t)(a) and {a mathematical formula}K⊨B(a). Again, since τ is maximal it must contain {a mathematical formula}∃R.B.Conversely, let {a mathematical formula}∃R.B∈τ. Then, by construction, {a mathematical formula}([S],τ)↝([R],τ′), for some {a mathematical formula}T-type {a mathematical formula}τ′ with {a mathematical formula}B∈τ′. It follows then that {a mathematical formula}(σ,σ⋅([R],τ′))∈RM and, by item 1, {a mathematical formula}(σ⋅([R],τ′))∈BM, whence {a mathematical formula}σ∈(∃R.B)M. Next, we show that {a mathematical formula}M is a model of {a mathematical formula}(T,A). Clearly, {a mathematical formula}M is a model of {a mathematical formula}A. That {a mathematical formula}M⊨(C1⊑C2), for each {a mathematical formula}C1⊑C2∈T, follows immediately from the two properties of {a mathematical formula}τTM, the fact that {a mathematical formula}T-types are closed under the concept inclusions in {a mathematical formula}T, and that {a mathematical formula}C⊑∀R.A is equivalent to {a mathematical formula}∃R−.C⊑A.Consider now {a mathematical formula}R1⊑R2∈T. Let {a mathematical formula}(σ,σ′)∈R1M. If {a mathematical formula}σ=a∈ind(K) and {a mathematical formula}σ=b∈ind(K) then {a mathematical formula}K⊨R1(a,b). Since {a mathematical formula}R1⊑R2 is in {a mathematical formula}T, we obtain {a mathematical formula}K⊨R2(a,b), whence {a mathematical formula}(σ,σ′)∈R2M. If {a mathematical formula}σ′=σ⋅([R],τ), for some R and τ, then, by the construction of {a mathematical formula}R1M, {a mathematical formula}T⊨R⊑R1. Thus {a mathematical formula}T⊨R⊑R2, and so {a mathematical formula}(σ,σ′)∈R2M. The case of {a mathematical formula}σ=σ′⋅([R],τ) is the mirror image.  □</paragraph><paragraph label="Theorem 13">Let{a mathematical formula}Lbe any of our DLs that contains{a mathematical formula}ELor has role inclusions. Then Σ-query entailment for consistent{a mathematical formula}L-KBs isLogSpace-reducible to Σ-query inseparability for{a mathematical formula}L-KBs.</paragraph><paragraph label="Proof">Let {a mathematical formula}Ki=(Ti,Ai), {a mathematical formula}i=1,2, be consistent {a mathematical formula}L-KBs and Σ a relational signature. We want to decide whether {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2 assuming that we know how to decide Σ-query inseparability. Without loss of generality, we may assume that {a mathematical formula}Σ=sig(K1)=sig(K1)∩sig(K2). To show this, we note first that we can add trivial concept inclusions {a mathematical formula}A⊑A and {a mathematical formula}∃P.⊤⊑∃P.⊤ to KBs to ensure that {a mathematical formula}Σ⊆sig(K1)=sig(K1)∩sig(K2). For symbols {a mathematical formula}S∈sig(K1)∩sig(K2) that are not in Σ we introduce a fresh {a mathematical formula}S⁎ and replace S by {a mathematical formula}S⁎ in {a mathematical formula}K2. Denote the resulting KB by {a mathematical formula}K2⁎. Then {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2 iff {a mathematical formula}K1{a mathematical formula}Σ⁎-query entails {a mathematical formula}K2⁎ for {a mathematical formula}Σ⁎=sig(K1), as required.Case 1:{a mathematical formula}L has role inclusions.Case 1.1: Assume that the trivial interpretation{a mathematical formula}I∅ with {a mathematical formula}|ΔI∅|=1 and {a mathematical formula}SI∅=∅, for any symbol S, is a model of the {a mathematical formula}Ti for {a mathematical formula}i=1,2 (we show how the KBs {a mathematical formula}K1 and {a mathematical formula}K2 can be modified to ensure that this assumption holds in Case 1.2). Let {a mathematical formula}Kii be a copy of {a mathematical formula}Ki in which all symbols S are replaced by fresh symbols {a mathematical formula}Si, and let {a mathematical formula}Ki′ be the extension of {a mathematical formula}Kii with {a mathematical formula}Si⊑S, for all {a mathematical formula}S∈Σ. The purpose of this construction is to avoid the interaction between the symbols used in {a mathematical formula}K1 and the symbols used in {a mathematical formula}K2 (as shown in Section 3 after the formulation of the theorem). We show that{a mathematical formula} The interesting direction is to show that if {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2 then {a mathematical formula}K1 Σ-query entails {a mathematical formula}K1′∪K2′. Suppose that {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2. Then {a mathematical formula}K1 Σ-query entails both {a mathematical formula}K1′ and {a mathematical formula}K2′. We use the following construction to ‘merge’ materialisations of the {a mathematical formula}Ki′. Let {a mathematical formula}M1 be a materialisation of {a mathematical formula}K1 and, for {a mathematical formula}i=1,2, let {a mathematical formula}Ui be a materialisation of {a mathematical formula}Ki′ obtained by unravelling a generating structure for {a mathematical formula}Ki′. By Lemma 10, {a mathematical formula}Ui is a model of {a mathematical formula}Ki′. It should be clear that we can also assume that{a mathematical formula} Denote by {a mathematical formula}U the union of {a mathematical formula}U1 and {a mathematical formula}U2 defined by setting {a mathematical formula}ΔU=ΔU1∪ΔU2 and {a mathematical formula}SU=SU1∪SU2 for all concept and role names S. We show that<list>{a mathematical formula}U is a model of {a mathematical formula}K1′∪K2′, and{a mathematical formula}U is finitely {a mathematical formula}(Σ,ind(K1)∪ind(K2))-homomorphically embeddable into {a mathematical formula}M1.Now, for item (i), recall that, for both </list><paragraph>{a mathematical formula}i=1,2, the trivial interpretation is a model of the TBox of {a mathematical formula}K3−i′, which does not contain any negative occurrences of the symbols of {a mathematical formula}Ki′, and {a mathematical formula}Ui is a model of {a mathematical formula}Ki′; therefore, {a mathematical formula}U is a model of {a mathematical formula}Ki′. For (ii), consider a finite subinterpretation {a mathematical formula}U0 of {a mathematical formula}U and, for {a mathematical formula}i=1,2, let {a mathematical formula}U0i be the respective finite subinterpretation of {a mathematical formula}Ui. Since {a mathematical formula}K1 Σ-query entails both {a mathematical formula}K1′ and {a mathematical formula}K2′, by Theorem 6, we have {a mathematical formula}(Σ,ind(Ki′))-homomorphisms {a mathematical formula}hi from {a mathematical formula}U0i to {a mathematical formula}M1, for {a mathematical formula}i=1,2. Define h by taking {a mathematical formula}h(u)=h1(u), for all {a mathematical formula}u∈ΔU01, and {a mathematical formula}h(u)=h2(u), for all {a mathematical formula}u∈ΔU02∖ΔU01. Since (A.1) and {a mathematical formula}h1(a)=h2(a), for all {a mathematical formula}a∈partΣU1∩partΣU2, the function h is a {a mathematical formula}(Σ,ind(K1)∪ind(K2))-homomorphism from {a mathematical formula}U0 to {a mathematical formula}M1, as required.Case 1.2: Suppose that the trivial interpretation is not a model of {a mathematical formula}Ti, for some {a mathematical formula}i∈{1,2}. We construct {a mathematical formula}Ki″=(Ti″,Ai″), {a mathematical formula}i=1,2, such that the trivial interpretation is a model of {a mathematical formula}Ti″, for {a mathematical formula}i=1,2, and {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2 iff {a mathematical formula}K1″ Σ-query entails {a mathematical formula}K2″ (this will reduce Case 1.2 to Case 1.1). The construction is by careful relativisation. We assume that the TBoxes {a mathematical formula}Ti are in normal form (see Theorem 8). If the {a mathematical formula}Ti do not contain inclusions of the form {a mathematical formula}⊤⊑A then the trivial interpretation is a model of the TBoxes and we are done. Otherwise, for {a mathematical formula}i=1,2, let {a mathematical formula}Di be fresh concept names: {a mathematical formula}Di will replace ⊤ in the inclusion {a mathematical formula}⊤⊑A in {a mathematical formula}Ti, which will ensure that the trivial interpretation is a model of the resulting TBox. In addition, we have to ensure that {a mathematical formula}Di contains all domain elements of the materialisation. To deal with the individual names in the ABox {a mathematical formula}Ai, we take {a mathematical formula}Ai″=Ai∪AiDi, where{a mathematical formula} The TBoxes {a mathematical formula}Ti″ are obtained from {a mathematical formula}Ti by replacing any inclusion {a mathematical formula}⊤⊑A with {a mathematical formula}Di⊑A and any inclusion {a mathematical formula}A⊑∃R.C with</paragraph><list><list-item label="–">{a mathematical formula}A⊑∃R and {a mathematical formula}∃R−⊑Di, if the {a mathematical formula}Ti are members of the DL-Lite family ({a mathematical formula}C=⊤ in this case), and</list-item><list-item label="–">{a mathematical formula}A⊑∃R.(Di⊓C), otherwise.</list-item></list><paragraph> The remaining inclusions are not modified and the modification of inclusions of the form {a mathematical formula}A⊑∃R.C ensures that {a mathematical formula}Di holds in all generated domain elements of the materialisations constructed to prove Theorem 12. Note that if {a mathematical formula}Ti is an {a mathematical formula}L-TBox, then {a mathematical formula}Ti″ is an {a mathematical formula}L-TBox as well, for any of our DLs. We show that the {a mathematical formula}Ki″=(Ti″,Ai″), for {a mathematical formula}i=1,2, are as required. First, by construction, the trivial interpretation {a mathematical formula}I∅ is a model of {a mathematical formula}Ti″. Second, let {a mathematical formula}Mi be the unravelling of a generating structure for {a mathematical formula}Ki. By Theorem 9, {a mathematical formula}Mi is a materialisation of {a mathematical formula}Ki. Observe that the interpretation {a mathematical formula}Ui obtained from {a mathematical formula}Mi by interpreting {a mathematical formula}Di as the domain of {a mathematical formula}Mi is a materialisation of {a mathematical formula}Ki″. Thus, by Theorem 6, {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2 iff {a mathematical formula}K1″ Σ-query entails {a mathematical formula}K2″, as required.Case 2:{a mathematical formula}L contains {a mathematical formula}EL and has no role inclusions (that is, {a mathematical formula}L∈{EL,ALC,ALCI}). We construct {a mathematical formula}K1′=(T1′,A1′) and {a mathematical formula}K2′=(T2′,A2′) such that{a mathematical formula}First, we make sure that {a mathematical formula}K1 is role-compatible with {a mathematical formula}K2, that is, for all {a mathematical formula}a,b∈ind(K2), if {a mathematical formula}R(a,b)∉A2, then {a mathematical formula}R(a,b)∉A1. Remove from {a mathematical formula}A1 all assertions {a mathematical formula}R(a,b), for {a mathematical formula}a,b∈ind(K2), that are not in {a mathematical formula}A2, and denote the resulting ABox by {a mathematical formula}A1−. Define {a mathematical formula}A1⋆ by adding a disjoint copy of {a mathematical formula}A1 to {a mathematical formula}A1− (in which the copy of an individual a is denoted by {a mathematical formula}a⋆) and also adding the assertions {a mathematical formula}R(a,b⋆) and {a mathematical formula}R(a⋆,b) for every {a mathematical formula}R(a,b)∈A1.Then {a mathematical formula}K1⋆=(T1,A1⋆) Σ-query entails {a mathematical formula}K2 iff {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2. This follows directly from the fact that {a mathematical formula}Horn-ALCI is unravelling-tolerant [49], which implies that in the unravellings {a mathematical formula}M1 and {a mathematical formula}M1⋆ of the generating structures for {a mathematical formula}K1 and {a mathematical formula}K1⋆, we have that the subtrees {a mathematical formula}Ia, {a mathematical formula}Ia⋆, and {a mathematical formula}Ia⋆⋆ of {a mathematical formula}M1, {a mathematical formula}M1⋆ and {a mathematical formula}M1⋆ rooted at a, a and {a mathematical formula}a⋆, respectively, are isomorphic for any {a mathematical formula}a∈ind(K1).Second, assume that {a mathematical formula}K1 is role-compatible with {a mathematical formula}K2. We employ relativisation again. Let {a mathematical formula}Di be fresh concept names, for {a mathematical formula}i=1,2. In this case, apart from ensuring that {a mathematical formula}Di contains all domain elements of the materialisation of {a mathematical formula}Ki we have to ensure that merging the materialisations of {a mathematical formula}K1 and {a mathematical formula}K2 does not lead to additional domain elements. Let {a mathematical formula}Ai′=Ai∪AiDi, for {a mathematical formula}i=1,2, where {a mathematical formula}AiDi is defined by (A.2). Assume the TBoxes {a mathematical formula}Ti are in normal form and define {a mathematical formula}Ti′ by replacing</paragraph><list><list-item label="–">any inclusion {a mathematical formula}⊤⊑A with {a mathematical formula}Di⊑A;</list-item><list-item label="–">any inclusion {a mathematical formula}A1⊑A2 with {a mathematical formula}A1⊓Di⊑A2;</list-item><list-item label="–">any inclusion {a mathematical formula}A1⊓A2⊑A with {a mathematical formula}A1⊓A2⊓Di⊑A;</list-item><list-item label="–">any inclusion {a mathematical formula}∃R.C⊑A with {a mathematical formula}∃R.(C⊓Di)⊓Di⊑A;</list-item><list-item label="–">any inclusion {a mathematical formula}A⊑∃R.C with {a mathematical formula}A⊓Di⊑∃R.(Di⊓C);</list-item><list-item label="–">any inclusion {a mathematical formula}A1⊑∀R.A2 with {a mathematical formula}A1⊓Di⊑∀R.(¬Di⊔A2).</list-item></list><paragraph> Note that {a mathematical formula}Ti′ is not necessarily in normal form, but it is an {a mathematical formula}L-TBox, which can then be transformed to normal form by Theorem 8.We show (A.3). The interesting direction is ‘if {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2 then {a mathematical formula}K1 Σ-query entails {a mathematical formula}K1′∪K2′’. Suppose {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2. Then {a mathematical formula}K1 Σ-query entails both {a mathematical formula}K1′ and {a mathematical formula}K2′ (as {a mathematical formula}K1 Σ-query entails both {a mathematical formula}K1 and {a mathematical formula}K2). Let {a mathematical formula}M1 be a materialisation of {a mathematical formula}K1 and, for {a mathematical formula}i=1,2, let {a mathematical formula}Ui be a materialisation of {a mathematical formula}Ki′ obtained by unravelling a generating structure for {a mathematical formula}Ki′. We proceed as in Case 1.1: we construct {a mathematical formula}U by merging {a mathematical formula}U1 and {a mathematical formula}U2 and show that conditions (i) and (ii) hold. It will then follow that {a mathematical formula}K1 Σ-query entails {a mathematical formula}K1′∪K2′.For item (i), observe that (a) since {a mathematical formula}K1 is role-compatible with {a mathematical formula}K2, if an assertion {a mathematical formula}A(a), for {a mathematical formula}a∈ind(K2), can be derived in {a mathematical formula}K1′∪K2′ by the {a mathematical formula}T2′ axioms of the form {a mathematical formula}∃R.(D2⊓C)⊓D2⊑A or {a mathematical formula}A1⊓D2⊑∀R.(¬D2⊔A), then the same assertion can be already derived in {a mathematical formula}K2 by the axioms {a mathematical formula}∃R.C⊑A and {a mathematical formula}A1⊑∀R.A; (b) for {a mathematical formula}i=1,2, the trivial interpretation {a mathematical formula}I∅ is a model of {a mathematical formula}Ti′; and (c) every inclusion of {a mathematical formula}Ti′ is relativised to {a mathematical formula}Di: it is ‘applicable’ only to elements in {a mathematical formula}Di and ‘generates’ only elements in {a mathematical formula}Di again. In particular, the {a mathematical formula}T2′ axioms of the form {a mathematical formula}∃R.(D2⊓C)⊓D2⊑A or {a mathematical formula}A1⊓D2⊑∀R.(¬D2⊔A) are not ‘applicable’ to {a mathematical formula}a∈ind(K1)∖ind(K2). Thus, {a mathematical formula}U is a model of {a mathematical formula}K1′∪K2′. The argument for item (ii) is analogous to Case 1.1, which completes the proof.  □</paragraph></paragraph><paragraph label="Theorem 44">Σ-query entailment for any of our DLs{a mathematical formula}LisLogSpace-reducible to the membership problem for universal CQ-solutions in{a mathematical formula}L.</paragraph><paragraph label="Proof">We use the proof of Theorem 13. Suppose {a mathematical formula}L KBs {a mathematical formula}K1, {a mathematical formula}K2, and a signature Σ are given. We want to reduce the problem to decide whether {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2 to the membership problem for universal CQ-solutions in {a mathematical formula}L. As argued in the proof of Theorem 13, we may assume that {a mathematical formula}Σ=sig(K1)=sig(K1)∩sig(K2).For the reduction to the membership problem for universal CQ-solutions in {a mathematical formula}L, we do not have to consider the case that {a mathematical formula}L does not have role inclusions since they can always be used in the mapping {a mathematical formula}T12. Thus, we follow the proof of Case 1 in the in the proof of Theorem 13 and first assume that the trivial interpretation {a mathematical formula}I∅ is a model of {a mathematical formula}Ti, for {a mathematical formula}i=1,2. Recall the definition of {a mathematical formula}Kii: {a mathematical formula}Kii is obtained from {a mathematical formula}Ki by replacing every symbol S in {a mathematical formula}Ki with a fresh symbol {a mathematical formula}Si. Then it is shown in the proof of Theorem 13 (Case 1.1) that {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2 iff {a mathematical formula}K1′∪K2′∪T12 and {a mathematical formula}K1 are Σ-query inseparable, where {a mathematical formula}T12={Si⊑S|S∈Σ}. But the latter problem is a membership problem for universal CQ-solutions since we assume that {a mathematical formula}Σ=sig(K1).We complete the proof by considering the case when {a mathematical formula}I∅ is not a model of {a mathematical formula}Ti for some {a mathematical formula}i∈{1,2}. We reduce this case to the previous one by constructing KBs {a mathematical formula}Ki″=(Ti″,Ai″) such that {a mathematical formula}I∅ is a model of {a mathematical formula}Ti″ and {a mathematical formula}K1 Σ-query entails {a mathematical formula}K2 iff {a mathematical formula}K1″ Σ-query entails {a mathematical formula}K2″. But KBs {a mathematical formula}Ki″ with these properties have been constructed in the proof of Theorem 13 (Case 1.2) already (observe that no role inclusions are introduced in the construction of {a mathematical formula}Ki″, and so {a mathematical formula}Ki″ is an {a mathematical formula}L-KB if {a mathematical formula}Ki is an {a mathematical formula}L-KB for any of our DLs {a mathematical formula}L).  □</paragraph></section></appendices><references><reference label="[1]"><authors>A. Polleres,A. Hogan,R. Delbru,J. Umbrich</authors><title>RDFS and OWL reasoning for Linked Data</title><host>The 9th Int. Summer School on Reasoning Web (RW 2013)Lecture Notes in Computer Sciencevol. 8067 (2013)Springer pp.91-149</host></reference><reference label="[2]"><authors>A. Poggi,D. Lembo,D. Calvanese,G. De Giacomo,M. Lenzerini,R. Rosati</authors><title>Linking data to ontologies</title><host>J. Data Semant.10 (2008) pp.133-173</host></reference><reference label="[3]"><authors>M. Giese,D. Calvanese,P. Haase,I. Horrocks,Y. Ioannidis,H. Kllapi,M. Koubarakis,M. Lenzerini,R. Möller,M. Rodriguez-Muro,O. Özcep,R. Rosati,R. Schlatte,M. Schmidt,A. Soylu,A. Waaler</authors><title>Scalable end-user access to big data</title><host>Big Data Computing(2013)CRC Press</host></reference><reference label="[4]"><authors>P. Hitzler,M. Krötzsch,S. Rudolph</authors><title>Foundations of Semantic Web Technologies</title><host>(2009)Chapman &amp; Hall/CRC</host></reference><reference label="[5]"><authors>U. Hustadt,B. Motik,U. Sattler</authors><title>Data complexity of reasoning in very expressive description logics</title><host>Proc. of the 19th Int. Joint Conf. on Artificial Intelligence (IJCAI)(2005) pp.466-471</host></reference><reference label="[6]"><authors>D. Calvanese,G. De Giacomo,D. Lembo,M. Lenzerini,R. Rosati</authors><title>Tractable reasoning and efficient query answering in description logics: the DL-Lite family</title><host>J. Autom. Reason.39 (2007) pp.385-429</host></reference><reference label="[7]"><authors>C. Lutz,D. Toman,F. Wolter</authors><title>Conjunctive query answering in the description logic EL using a relational database system</title><host>Proc. of the 21st Int. Joint Conf. on Artificial Intelligence (IJCAI)(2009) pp.2070-2075</host></reference><reference label="[8]"><authors>R. Kontchakov,M. Zakharyaschev</authors><title>An introduction to description logics and query rewriting</title><host>The 10th Int. Summer School on Reasoning Web (RW 2014)Lecture Notes in Computer Sciencevol. 8714 (2014)Springer pp.195-244</host></reference><reference label="[9]"><authors>E. Jiménez Ruiz,B. Cuenca Grau,I. Horrocks,R. Berlanga</authors><title>Supporting concurrent ontology development: framework, algorithms and tool</title><host>Data Knowl. Eng.70 (2011) pp.146-164</host></reference><reference label="[10]"><authors>B. Konev,M. Ludwig,D. Walther,F. Wolter</authors><title>The logical difference for the lightweight description logic EL</title><host>J. Artif. Intell. Res.44 (2012) pp.633-708</host></reference><reference label="[11]"><host>H. StuckenschmidtC. ParentS. SpaccapietraModular Ontologies: Concepts, Theories and Techniques for Knowledge ModularizationLecture Notes in Computer Sciencevol. 5445 (2009)Springer</host></reference><reference label="[12]"><authors>B. Konev,D. Walther,F. Wolter</authors><title>Forgetting and uniform interpolation in large-scale description logic terminologies</title><host>Proc. of the 21st Int. Joint Conf. on Artificial Intelligence (IJCAI)(2009)AAAI Press pp.830-835</host></reference><reference label="[13]"><authors>P. Koopmann,R.A. Schmidt</authors><title>Uniform interpolation and forgetting for ALC ontologies with ABoxes</title><host>Proc. of the 29th AAAI Conf. on Artificial Intelligence (AAAI 2015)(2015)AAAI Press pp.175-181</host></reference><reference label="[14]"><authors>M. Arenas,P. Barceló,L. Libkin,F. Murlak</authors><title>Foundations of Data Exchange</title><host>(2014)Cambridge University Press</host></reference><reference label="[15]"><authors>M. Arenas,E. Botoeva,D. Calvanese,V. Ryzhikov,E. Sherkhonov</authors><title>Exchanging description logic knowledge bases</title><host>Proc. of the 13th Int. Conf. on Principles of Knowledge Representation and Reasoning (KR 2012)(2012)AAAI Press pp.563-567</host></reference><reference label="[16]"><authors>M. Arenas,J. Pérez,J.L. Reutter</authors><title>Data exchange beyond complete data</title><host>J. ACM60 (2013) pp.28-</host></reference><reference label="[17]"><authors>R. Kontchakov,F. Wolter,M. Zakharyaschev</authors><title>Logic-based ontology comparison and module extraction, with an application to DL-Lite</title><host>Artif. Intell.174 (2010) pp.1093-1141</host></reference><reference label="[18]"><authors>P. Shvaiko,J. Euzenat</authors><title>Ontology matching: state of the art and future challenges</title><host>IEEE Trans. Knowl. Data Eng.25 (2013) pp.158-176</host></reference><reference label="[19]"><authors>B. Cuenca Grau,B. Motik</authors><title>Reasoning over ontologies with hidden content: the import-by-query approach</title><host>J. Artif. Intell. Res.45 (2012) pp.197-255</host></reference><reference label="[20]"><authors>M. Krötzsch,S. Rudolph,P. Hitzler</authors><title>Complexities of Horn description logics</title><host>ACM Trans. Comput. Log.14 (2013) pp.2-</host></reference><reference label="[21]"><authors>A. Artale,D. Calvanese,R. Kontchakov,M. Zakharyaschev</authors><title>The DL-Lite family and relations</title><host>J. Artif. Intell. Res.36 (2009) pp.1-69</host></reference><reference label="[22]"><authors>F. Baader,S. Brandt,C. Lutz</authors><title>Pushing the EL envelope</title><host>Proc. of the 19th Int. Joint Conf. on Artificial Intelligence (IJCAI)(2005) pp.364-369</host></reference><reference label="[23]"><authors>M. Arenas,E. Botoeva,D. Calvanese,V. Ryzhikov</authors><title>Exchanging OWL 2 QL knowledge bases</title><host>Proc. of the 23rd Int. Joint Conf. on Artificial Intelligence (IJCAI 2013)(2013)IJCAI/AAAI</host></reference><reference label="[24]"><authors>B. Konev,R. Kontchakov,M. Ludwig,T. Schneider,F. Wolter,M. Zakharyaschev</authors><title>Conjunctive query inseparability of OWL 2 QL TBoxes</title><host>Proc. of the 25th AAAI Conf. on Artificial Intelligence (AAAI 2011)(2011)AAAI Press pp.221-226</host></reference><reference label="[25]"><authors>T. Imieliński,W. Lipski</authors><title>Incomplete information in relational databases</title><host>J. ACM31 (1984) pp.761-791</host></reference><reference label="[26]"><authors>Y. Kazakov</authors><title>Consequence-driven reasoning for Horn SHIQ ontologies</title><host>Proc. of the 21st Int. Joint Conf. on Artificial Intelligence (IJCAI)(2009) pp.2040-2045</host></reference><reference label="[27]"><authors>R. Rosati</authors><title>On conjunctive query answering in EL</title><host>Proc. of the 2007 Int. Workshop on Description Logics (DL 2007)vol. 250 (2007)CEUR-WS</host></reference><reference label="[28]"><authors>T. Eiter,G. Gottlob,M. Ortiz,M. Simkus</authors><title>Query answering in the description logic Horn-SHIQ</title><host>Proc. of the 11th European Conf. on Logics in Artificial Intelligence (JELIA 2008)Lecture Notes in Computer Sciencevol. 5293 (2008)Springer pp.166-179</host></reference><reference label="[29]">S. TobiesComplexity results and practical algorithms for logics in knowledge representationPh.D. thesis<host>(2001)LuFG Theoretical Computer Science, RWTH-AachenGermany</host></reference><reference label="[30]"><authors>S. Brandt</authors><title>Polynomial time reasoning in a description logic with existential restrictions, GCI axioms, and—what else?</title><host>Proc. of the 16th European Conf. on Artificial Intelligence (ECAI 2004)(2004)IOS Press pp.298-302</host></reference><reference label="[31]"><authors>C. Lutz,F. Wolter</authors><title>Deciding inseparability and conservative extensions in the description logic EL</title><host>J. Symb. Comput.45 (2010) pp.194-228</host></reference><reference label="[32]"><authors>R. Mazala</authors><title>Infinite games</title><host>Automata, Logics, and Infinite Games: A Guide to Current Research [outcome of a Dagstuhl seminar, February 2001]Lecture Notes in Computer Sciencevol. 2500 (2002)Springer pp.23-42</host></reference><reference label="[33]"><authors>K. Chatterjee,M. Henzinger</authors><title>An O(n2) time algorithm for alternating Büchi games</title><host>Proc. of the 23rd Annual ACM–SIAM Symposium on Discrete Algorithms (SODA 2012)(2012)SIAM pp.1386-1399</host></reference><reference label="[34]"><authors>D. Kozen</authors><title>Theory of Computation</title><host>(2006)Springer</host></reference><reference label="[35]"><authors>C. Papadimitriou</authors><title>Computational Complexity</title><host>(1994)Addison-Wesley</host></reference><reference label="[36]"><authors>Z. Wang,K. Wang,R.W. Topor,J.Z. Pan</authors><title>Forgetting for knowledge bases in DL-Lite</title><host>Ann. Math. Artif. Intell.58 (2010) pp.117-151</host></reference><reference label="[37]"><authors>B. Cuenca Grau,I. Horrocks,Y. Kazakov,U. Sattler</authors><title>Modular reuse of ontologies: theory and practice</title><host>J. Artif. Intell. Res.31 (2008) pp.273-318</host></reference><reference label="[38]"><authors>C. Del Vescovo,B. Parsia,U. Sattler,T. Schneider</authors><title>The modular structure of an ontology: atomic decomposition</title><host>Proc. of the 22nd Int. Joint Conf. on Artificial Intelligence (IJCAI 2011)(2011)AAAI Press pp.2232-2237</host></reference><reference label="[39]"><authors>N. Nikitina,S. Rudolph</authors><title>(Non-)succinctness of uniform interpolants of general terminologies in the description logic EL</title><host>Artif. Intell.215 (2014) pp.120-140</host></reference><reference label="[40]"><authors>N. Nikitina,B. Glimm</authors><title>Hitting the sweetspot: economic rewriting of knowledge bases</title><host>Proc. of the 11th Int. Semantic Web Conf. (ISWC 2012), Part ILecture Notes in Computer Sciencevol. 7649 (2012)Springer pp.394-409</host></reference><reference label="[41]"><authors>C. Lutz,I. Seylan,F. Wolter</authors><title>An automata-theoretic approach to uniform interpolation and approximation in the description logic EL</title><host>Proc. of the 13th Int. Conf. on Principles of Knowledge Representation (KR 2012)(2012)AAAI Press pp.286-296</host></reference><reference label="[42]"><authors>P. Koopmann,R.A. Schmidt</authors><title>Count and forget: uniform interpolation of SHQ-ontologies</title><host>Proc. of the 7th Int. Joint Conf. on Automated Reasoning (IJCAR 2014)Lecture Notes in Computer Sciencevol. 8562 (2014)Springer pp.434-448</host></reference><reference label="[43]"><authors>R. Nortje,K. Britz,T. Meyer</authors><title>Reachability modules for the description logic SRIQ</title><host>Proc. of 19th Int. Conf. on Logic for Programming, Artificial Intelligence, and Reasoning (LPAR-19)Lecture Notes in Computer Sciencevol. 8312 (2013)Springer pp.636-652</host></reference><reference label="[44]"><authors>M. Rodriguez-Muro,R. Kontchakov,M. Zakharyaschev</authors><title>Ontology-based data access: ontop of databases</title><host>Proc. of the 12th Int. Semantic Web Conf. (ISWC 2013), Part ILecture Notes in Computer Sciencevol. 8218 (2013)Springer pp.558-573</host></reference><reference label="[45]"><authors>M. Bienvenu,R. Rosati</authors><title>Query-based comparison of OBDA specifications</title><host>Proc. of the 28th Int. Workshop on Description Logics (DL 2015)vol. 1350 (2015)CEUR-WS</host></reference><reference label="[46]"><authors>C. Lutz,F. Wolter</authors><title>Foundations for uniform interpolation and forgetting in expressive description logics</title><host>Proc. of the 22nd Int. Joint Conf. on Artificial Intelligence (IJCAI 2011)(2011)IJCAI/AAAI pp.989-995</host></reference><reference label="[47]"><authors>P.F. Patel-Schneider</authors><title>Analyzing Schema.org</title><host>Proc. of the 13th Int. Semantic Web Conf. (ISWC 2014), Part ILecture Notes in Computer Sciencevol. 8796 (2014)Springer pp.261-276</host></reference><reference label="[48]"><authors>A. Hernich,C. Lutz,A. Ozaki,F. Wolter</authors><title>Schema.org as a description logic</title><host>Proc. of the 24th Int. Joint Conf. on Artificial Intelligence (IJCAI 2015)(2015)AAAI Press pp.3048-3054</host></reference><reference label="[49]"><authors>C. Lutz,F. Wolter</authors><title>Non-uniform data complexity of query answering in description logics</title><host>Proc. of the 13th Int. Conf. on Principles of Knowledge Representation (KR 2012)(2012)AAAI Press pp.297-307</host></reference></references><footnote><note-para label="1">Since we consider Horn DLs, the results of this article actually apply to unions of CQs (known as UCQs), see Remark 2 below. For simplicity, however, we consider CQs only.</note-para><note-para label="2">Strictly speaking, {a mathematical formula}DL-LitecoreH and {a mathematical formula}DL-LitehornH are not fragments of {a mathematical formula}ALCHI because it does not have role disjointness constraints. However, these constraints play no essential part in our constructions, and the techniques we develop for {a mathematical formula}ALCHI are also applicable to the logics in the DL-Lite family.</note-para><note-para label="3">Note that, by Theorem 33, Theorem 32, Σ-query entailment and inseparability are P-complete for {a mathematical formula}DL-Litecore and {a mathematical formula}DL-Litehorn in both combined and data complexity. {a mathematical formula}DL-Litecore and {a mathematical formula}DL-Litehorn are omitted from Theorem 13 since we have not found a direct LogSpace-reduction of Σ-query entailment to Σ-query inseparability.</note-para></footnote></root>