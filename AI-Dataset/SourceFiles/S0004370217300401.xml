<?xml version="1.0" encoding="UTF-8"?><root><url>https://www.sciencedirect.com/science/article/pii//S0004370217300401</url><title>On the complexity of the partner units decision problem</title><authors>Erich Christian Teppan</authors><abstract>The partner units problem is an acknowledged hard benchmark problem for the logic programming community with various industrial application fields like CCTV surveillance or railway safety systems. Whereas many complexity results exist for the optimization version of the problem, complexity for the decision variant, which from a practical point of view is more important, is widely unknown. In this article we show that the partner units decision problem is NP-complete in general and also for various subproblems of industrial importance.</abstract><keywords>Partner Units Problem;Computational complexity;NP-completeness</keywords><content><section label="1"><section-title>Introduction</section-title><paragraph>The partner units problem (PUP) [5], [4] is a classical configuration problem where elements have to be connected such that all user requirements and technical constraints are satisfied [7]. Solving such real world configuration problems is one of the major challenges in industrial production domains and also one of the biggest success stories of artificial intelligence of the last decade. Given the results of the of the biennially happening answer set programming competitions{sup:1} the PUP has been shown to be an exceptionally hard real world configuration problem.</paragraph><paragraph>Whilst having many application areas such as CCTV surveillance [1], the PUP originates in the domain of railway safety systems. One of the problems in this domain is to make sure that certain rail tracks are not occupied by a train/wagon before another train enters this track. For this purpose, two types of elements are used in combination: Wheel sensors are used to count the number of train wheels passing certain locations, e.g. the begin and the end of a rail track, and occupancy indicators are used to signal whether a certain rail track or section is clear or not. For the actual calculation of the correct signals special processing units are used. To this end, sensors and indicators are connected to units. Hereby, sensors and indicators can be directly connected to only one unit. Because of fail-safety and real-time requirements the number of sensors and indicators that can be connected to the same unit is limited (called unit capacity, UCAP). However, a unit can be connected to a limited number of other units (called inter unit capacity, IUCAP). With respect to a unit, the connected units are called partner units. A unit is only able to calculate the signal of a connected indicator if all needed sensors (depending on the track layout) are either connected to the same unit or to a partner unit. Or to say it differently: If an indicator and a sensor that is needed for calculating its signal are connected to different units, these units must be directly connected.</paragraph><paragraph>Hence, given a bipartite input graph specifying for each indicator which sensors are needed in order to calculate the signals, the problem consists in connecting sensors and indicators with units and units with other units such that all signals can be calculated and hardware limitations (i.e. IUCAP and UCAP) are respected.</paragraph><paragraph>Fig. 1 shows a simple example for a (very) small train station, its resulting input graph and a solution graph. The train station consists of three inter-linked railway tracks with corresponding occupancy indicators and wheel sensors. The input graph, which is given as a bipartite adjacency matrix, results from the given track layout for the following reasons:</paragraph><paragraph>In order to calculate the correct signal for Indicator 3 only data from Sensor 3 and Sensor 4 is needed. If the number of outgoing wheels counted by Sensor 4 is equal to the incoming wheel counts of Sensor 3 then Track 3 is empty. In order to calculate the correct signal for Indicator 2 it is not sufficient to only incorporate data from Sensor 2 and Sensor 5 as it is not clear whether a wheel has headed to or is coming from Track 3. Therefore, additional data from Sensor 3 and Sensor 4 is needed. Analogously, data from Sensor 1, Sensor 2, Sensor 5 and Sensor 6 must be considered in order to determine the correct signal for Indicator 1.</paragraph><paragraph>The PUP solution graph shown in Fig. 1 represents a solution for UCAP = 2 (only two sensors and two indicators can be connected to the same unit) and IUCAP = 2 (each unit can at most have two partner units).</paragraph><paragraph>For the ease of identifying free element-to-unit connections, an alternative representation form for solution graphs is used herein. Rather than using nodes/vertices and edges for used element-to-unit connections, i.e. when an indicator or sensor is connected to some unit, we represent units as containers with UCAP many slots which can be free or occupied by an indicator and UCAP many slots which can be free or occupied by a sensor. Hence a slot of a unit u which is occupied by an indicator i respectively sensor s represents the edge {a mathematical formula}{u,i} respectively {a mathematical formula}{u,s}.</paragraph><paragraph>Several versions of the PUP have been formulated (see [1]). Formally, the Partner Units Decision Problem (PUDP) can be defined as follows:</paragraph><paragraph label="Definition 1">Let {a mathematical formula}G=(I,S,E) be a bipartite graph whereby I and S are two disjoint sets of vertices and E denotes the set of edges between vertices in I and vertices in S. Furthermore, let {a mathematical formula}IUCAP and {a mathematical formula}UCAP be two natural numbers. The PUDP is to decide whether there exists a vertex partitioning of {a mathematical formula}I∪S into a set of vertex sets U such that:</paragraph><list><list-item label="•">each vertex set {a mathematical formula}u∈U consists of at most {a mathematical formula}UCAP vertices from I and at most {a mathematical formula}UCAP vertices from S, and</list-item><list-item label="•">for each vertex set {a mathematical formula}u∈U there are at most {a mathematical formula}IUCAP connected vertex sets. Two vertex sets {a mathematical formula}u1 and {a mathematical formula}u2 are connected whenever there exists an edge {a mathematical formula}{i,s}∈E such that {a mathematical formula}i∈u1 and {a mathematical formula}s∈u2 or vice versa.</list-item></list><paragraph>The Partner Units Optimization Problem (PUOP) furthermore demands that the number of units, i.e. the number of vertex sets in the partitioning, is limited by an additional natural number k in the input, i.e. {a mathematical formula}|U|≤k.</paragraph><paragraph>From the theoretical point of view the PUOP has attracted more interest so far since the problem version participating in the answer set programming competitions is actually the PUOP and not the PUDP. As a consequence, the complexity of the PUOP has been fully determined with respect to UCAP and IUCAP (see Fig. 2, [2], [8]). In the most general form, that is when IUCAP and UCAP are part of the input (i.e. not fixed), the PUOP is NP-complete. Moreover, it could be shown, that the PUOP remains NP-complete when UCAP is fixed to any natural number and IUCAP is fixed to a natural number ≥ 3.</paragraph><paragraph>Whereas the complexity of the PUOP has been determined, the complexity of the PUDP is widely unknown. However, from a practical point of view the PUDP is much more important than the PUOP. The wish to limit (or optimize) the number of needed components in a solution arises out of the aim for minimizing the costs. Though, the strive for optimal solutions must be considered as of secondary interest. The predominant objective is to come up with any solution if at all possible. Clearly, for a company there is nothing more expensive than not being able to solve a customer's problem. Furthermore, hard real-world problem instances are highly constrained such that the number of used units in different solutions does not vary largely and consequently the potential for optimization is rather limited. On the other hand, problem instances that allow solutions widely differing in the amounts of used units can typically be easily optimized by greedy algorithms [4], [9].</paragraph><paragraph>The big question left-open by previous work is whether the PUDP is tractable also in cases when the PUOP is not. Apparently, polynomial-time algorithms for PUOP subproblems can be used to also efficiently decide the corresponding PUDP subproblem by simply setting the number of allowed units in a solution to the maximum, which is the total number of indicators and sensors. In the cases when the PUOP has been proven to be intractable, complexity is unknown for the PUDP counterpart as there is no known reduction from PUOP (or any other NP-hard problem) to PUDP. Hence, it could be that the PUDP is easier than the PUOP.</paragraph><paragraph>In this article we prove that this is not true for the general problem and for industrially important subproblems. Particularly, we show that the general PUDP is NP-complete and also remains NP-complete when IUCAP is fixed to a natural number ≥ 3 and UCAP is fixed to a natural number ≥ 2.</paragraph></section><section label="2"><section-title>Complexity of the PUDP</section-title><paragraph>Fig. 3 visualizes a guide to the proofs herein. First, we show that the PUDP with fixed IUCAP = 3 and fixed UCAP = 2, which is denoted as PUDP3,2 in the following, is NP-complete. To this, we explicitly clarify the obvious membership in NP and subsequently show NP-hardness of the PUDP3,2. This is done by reduction of the famous 3-SAT problem. After formally defining the 3-SAT problem, we illustrate how Boolean variables are to be represented by PUDP3,2 structures. Then, we show how 3-clauses (i.e. clauses containing exactly three literals) can be simulated with PUDP3,2 structures. NP-completeness of the general PUDP, i.e. when IUCAP and UCAP is part of the input, follows directly. Finally, the findings are generalized to PUDP when IUCAP is fixed to a natural number ≥ 3 and UCAP is fixed to a natural number ≥ 2.</paragraph><paragraph label="Lemma 1">PUDP (in general and also any restricted variant such as the PUDP3,2) is in NP.</paragraph><paragraph label="Proof (sketch)">The validity of a solution can easily be verified in polynomial time by checking for IUCAP and UCAP violations and assuring that indicators and sensors that are adjacent in the input graph are placed either on the same unit or on connected partner units.  □</paragraph><paragraph>In order to show NP-hardness of the PUDP3,2 we reduce one of the most famous NP-complete problems (see [6]):</paragraph><paragraph label="Definition 2">3-Satisfiability (3-SAT) is the problem of determining whether there is a truth-assignment for a Boolean formula in conjunctive normal form {a mathematical formula}F=(c1∧…∧cm) over a set {a mathematical formula}V={v1,…,vn} of Boolean variables such that at least one of the literals in each clause {a mathematical formula}c1…cm evaluates to true. A literal l constitutes a Boolean variable v or its negation {a mathematical formula}v‾. Furthermore, each clause consists of at most three literals. A clause containing exactly three literals is denoted as 3-clause.</paragraph><paragraph>To simulate 3-SAT by PUDP3,2 we need to express Boolean variables. This is accomplished by three sensors for each variable (see Fig. 4).</paragraph><paragraph label="Definition 3">A Boolean variable in 3-SAT is represented in PUDP3,2 by three sensors: Two sensors represent the positive and negative literal of the Boolean variable and an additional sensor expresses whether a literal evaluates to true. We denote the sensors representing the literals as literal sensors and refer to the sensor capturing whether a literal evaluates to true as the trueness sensor. A literal is interpreted as true if the corresponding literal sensor is placed on the same unit as its associated trueness sensor.</paragraph><paragraph>The key property of representing a Boolean variable as two literal sensors and a trueness sensor is that it assures that solution graphs, in which both literals of a Boolean variable are interpreted as true, are not possible:</paragraph><paragraph label="Lemma 2">In a PUDP3,2solution graph, the trueness sensor can be collocated (i.e. on the same unit) with at most one associated literal sensor (i.e. either the positive or the negative one).</paragraph><paragraph label="Proof">Because of UCAP = 2 in PUDP3,2 there is only space for two sensors on each unit.  □</paragraph><paragraph>In order to treat clauses with less than three literals also as 3-clauses, we use the notion of a false-literal. This is a literal that is never satisfiable. Hence, we treat a clause {a mathematical formula}(l1∨l2) as {a mathematical formula}(l1∨l2∨false).</paragraph><paragraph label="Definition 4">We define a false-literal input structure for PUDP3,2 to conform to the input graph (adjacency matrix) on the left hand-side of Fig. 5. The corresponding solution structure is depicted on the right hand-side of Fig. 5. The sensors f and {a mathematical formula}tf are denoted as literal and trueness sensor respectively.</paragraph><paragraph>The fact that the literal sensor and the trueness sensor of a false-literal input structure can never be on the same unit in any solution is captured by the following already generalized lemma:</paragraph><paragraph label="Lemma 3">Two sensors that are adjacent to more than{a mathematical formula}(IUCAP+1)×UCAPmany indicators in total are on two different units in any solution graph.</paragraph><paragraph label="Proof">Having two sensors on the same unit, the maximum number of indicators that can be connected are {a mathematical formula}UCAP many on the same unit and {a mathematical formula}IUCAP×UCAP many on the partner units.  □</paragraph><paragraph>The simulation of 3-clauses is based on the following idea (see Fig. 6): 3-clause-hull structures, which are developed in the following, are connected to three literal sensors ({a mathematical formula}lx, {a mathematical formula}ly and {a mathematical formula}lz in Fig. 6) and the three associated trueness sensors ({a mathematical formula}tlx, {a mathematical formula}tly and {a mathematical formula}tlz in Fig. 6). If a literal is true, i.e. the literal sensor and its trueness sensor are placed on the same unit, the 3-clause-hull solution structure needs only a single unit connection in order to be connected to both elements ({a mathematical formula}lz and {a mathematical formula}tlz in Fig. 6). In the case that a literal is false, i.e. the literal sensor and its trueness sensor are placed on two different units, two unit connections are needed (e.g. {a mathematical formula}lx and {a mathematical formula}tlx in Fig. 6). Thus, what is demanded from a 3-clause-hull structure is that the number of unit connections that can be used for connecting to literal and trueness sensors is restricted in such a way that in a solution graph at least one literal represented by {a mathematical formula}lx, {a mathematical formula}ly or {a mathematical formula}lz evaluates to true.</paragraph><paragraph label="Definition 5">We define a 3-clause-hull input structure for PUDP3,2 to conform to the input graph (adjacency matrix) on the left hand-side in Fig. 7. We define a 3-clause input structure to conform to the input graph (adjacency matrix) on the right hand-side in Fig. 7. {a mathematical formula}p1, {a mathematical formula}p2 and {a mathematical formula}p3 are denoted as position indicators. {a mathematical formula}lx, {a mathematical formula}ly and {a mathematical formula}lz are literal sensors and {a mathematical formula}tlx, {a mathematical formula}tly and {a mathematical formula}tlz are the associated trueness sensors.</paragraph><paragraph>Intuitively, the position indicators {a mathematical formula}p1, {a mathematical formula}p2 and {a mathematical formula}p3 in a 3-clause-hull structure can be thought of as the three positions within a 3-clause. A 3-clause-hull structure that is additionally connected with three literal sensors and the associated three trueness sensors forms a complete 3-clause input structure. In a PUDP3,2 representation of a 3-SAT instance there is a 3-clause input structure for every clause in the 3-SAT instance.</paragraph><paragraph>It must be noted that literal and trueness sensors can be, and typically are, connected to multiple 3-clause-hull structures. The reason is clearly that a variable/literal can appear in any number of clauses of a 3-SAT instance. However, the number of 3-clause-hull structures that can be connected to the same literal or trueness sensor is limited by IUCAP. To account for this, we pleasantly make use of the following result found by Tovey [10]:</paragraph><paragraph label="Lemma 4">3-SAT remains NP-complete when restricted to instances with at most 3 occurrences per variable (as a positive or negative literal).</paragraph><paragraph>Consequently, IUCAP = 3 is sufficient for a restricted yet NP-complete 3-SAT variant according to Lemma 4.</paragraph><paragraph>Indeed, the key property of a 3-clause input structure is to correctly simulate a 3-clause. Therefore, a 3-clause input structure must enforce that only solution graphs are possible in which at least one of the literals represented by the literal sensors is interpreted as true.</paragraph><paragraph>Fig. 8 depicts possible solution structures for 3-clause-hull input structures and 3-clause input structures in case that {a mathematical formula}lx and {a mathematical formula}ly is false and {a mathematical formula}lz is true. ‘{a mathematical formula}p1…,p3’ stands for ‘either {a mathematical formula}p1 or {a mathematical formula}p2 or {a mathematical formula}p3’. Clearly, there are different solution graphs possible but they all share the property that at least one literal represented by {a mathematical formula}lx and {a mathematical formula}ly or {a mathematical formula}lz evaluates to true.</paragraph><paragraph>Formally, this property is captured by Lemma 7. Lemma 5 and Lemma 6 treat basic properties for 3-clause input structures that are used to prove Lemma 7.</paragraph><paragraph label="Lemma 5">A 3-clause input structure only allows solution graphs in which{a mathematical formula}s1and{a mathematical formula}s2are on the same unit.</paragraph><paragraph label="Proof">We assume the contrary, i.e. that {a mathematical formula}s1 and {a mathematical formula}s2 are on different units in the solution graph. With respect to the placement of {a mathematical formula}i1 and {a mathematical formula}i2 there are three cases: (a) {a mathematical formula}i1 or {a mathematical formula}i2 is on the same unit as {a mathematical formula}s1 or {a mathematical formula}s2, (b) {a mathematical formula}i1, {a mathematical formula}i2, {a mathematical formula}s1 and {a mathematical formula}s2 are all on different units, (c) {a mathematical formula}i1 is on the same unit as {a mathematical formula}i2 but not on a unit containing {a mathematical formula}s1 or {a mathematical formula}s2.{a mathematical formula}(a) i1 or i2 is on the same unit as s1 or s2:_We try to create a solution graph step by step. {a mathematical formula}s1 is adjacent to eight indicators (i.e. {a mathematical formula}p1,…,p3,i1,…,i5). Consequently, the unit containing {a mathematical formula}s1 must contain two of these indicators and there must be exactly three connected partner units each of which contains two indicators in {a mathematical formula}{p1,…,p3,i1,…,i5}. The same argument holds for {a mathematical formula}s2 such that the units containing {a mathematical formula}s1 and {a mathematical formula}s2 must be connected to each other and to the same two additional units. As also {a mathematical formula}i1 or {a mathematical formula}i2 is on the same unit as {a mathematical formula}s1 or {a mathematical formula}s2, the four units must also contain all sensors in {a mathematical formula}{s1,…,s8}. The reason is that {a mathematical formula}i1 and {a mathematical formula}i2 are adjacent to all of those sensors.{a mathematical formula} This results in the situation where the four existing units have no free slots for additional indicators or sensors and there remain two left-over unit connections for the four units in total. Additionally connecting three literal sensors, three trueness sensors, {a mathematical formula}s9 and {a mathematical formula}s10 is not possible with only two left-over unit connections. Thus, this case is not possible.{a mathematical formula}(b) i1,i2,s1 and s2 are all on different units:_{a mathematical formula}s1 is adjacent to eight indicators (i.e. {a mathematical formula}p1,…,p3,i1,…,i5). Consequently, the unit containing {a mathematical formula}s1 must contain two of these indicators and there must be exactly three connected partner units each of which contains two indicators in {a mathematical formula}{p1,…,p3,i1,…,i5}. The same argument holds for {a mathematical formula}s2 such that the units containing {a mathematical formula}s1 and {a mathematical formula}s2 must be connected to each other and to the same two additional units. {a mathematical formula}i1 and {a mathematical formula}i2 are connected to the same eight sensors (i.e. {a mathematical formula}s1,…,s8). Consequently, the units containing {a mathematical formula}i1 and {a mathematical formula}i2 must also contain two of these sensors and, thus, must be connected.{a mathematical formula} In this state there are no free slots and also no left-over unit connections making it impossible to connect to any further indicators or sensors. Hence, this case is not possible.{a mathematical formula}(c) i1 and i2 are on the same unit but not on a unit containing s1 or s2:_{a mathematical formula}s1 is adjacent to eight indicators (i.e. {a mathematical formula}p1,…,p3,i1,…,i5). Consequently, the unit containing {a mathematical formula}s1 must contain two of these indicators and there must be exactly three connected partner units each of which contains two indicators in {a mathematical formula}{p1,…,p3,i1,…,i5}. The same argument holds for {a mathematical formula}s2 such that the units containing {a mathematical formula}s1 and {a mathematical formula}s2 must be connected to each other and to the same two additional units. {a mathematical formula}i1 and {a mathematical formula}i2 are connected to the same eight sensors (i.e. {a mathematical formula}s1,…,s8). Consequently, the three units containing {a mathematical formula}i1, {a mathematical formula}i2, {a mathematical formula}s1 and {a mathematical formula}s2 must each contain two of the sensors in {a mathematical formula}{s1,…,s8}.{a mathematical formula} At this point, there remain two free slots and two left-over unit connections in total for the four units but there are still ten further sensors which need to be connected, i.e. two sensors in {a mathematical formula}{s3,…,s8}, three literal sensors, three trueness sensors, {a mathematical formula}s9 and {a mathematical formula}s10. So, this is not possible.Because of (a), (b) and (c), it can be concluded that {a mathematical formula}s1 must be on the same unit as {a mathematical formula}s2 in any solution graph.  □</paragraph><paragraph label="Lemma 6">A 3-clause input structure only allows solution graphs in which{a mathematical formula}i1and{a mathematical formula}i2are on the same unit.</paragraph><paragraph label="Proof">We assume the contrary, i.e. that {a mathematical formula}i1 and {a mathematical formula}i2 are on different units in the solution graph. Because of Lemma 5 we already know that {a mathematical formula}s1 must be on the same unit as {a mathematical formula}s2. With respect to the placement of {a mathematical formula}i1 and {a mathematical formula}i2 there are two cases: (a) {a mathematical formula}i1 or {a mathematical formula}i2 is on the same unit as {a mathematical formula}s1 and {a mathematical formula}s2, (b) neither {a mathematical formula}i1 nor {a mathematical formula}i2 is on the same unit as {a mathematical formula}s1 and {a mathematical formula}s2.{a mathematical formula}(a) i1 or i2 is on the same unit as s1 and s2:_{a mathematical formula}s1 (and {a mathematical formula}s2) is adjacent to eight indicators (i.e. {a mathematical formula}p1,…,p3,i1,…,i5). Consequently, the unit containing {a mathematical formula}s1 must contain two of these indicators and there must be exactly three connected partner units each of which contains two indicators in {a mathematical formula}{p1,…,p3,i1,…,i5}. As {a mathematical formula}i1 or {a mathematical formula}i2 is on the same unit as {a mathematical formula}s1 (and {a mathematical formula}s2), the three connected partner units must each contain two sensors in {a mathematical formula}{s3,…,s8}. In fact, both units containing {a mathematical formula}i1 or {a mathematical formula}i2 must be connected to the respective other three partner units. The reason is that {a mathematical formula}i1 as well as {a mathematical formula}i2 is adjacent to all sensors in {a mathematical formula}{s1,…,s8}.{a mathematical formula} At this point, there remain no free slots and only two left-over unit connections in total for the four units but there are still eight further sensors which need to be connected, i.e. three literal sensors, three trueness sensors, {a mathematical formula}s9 and {a mathematical formula}s10. So, this is not possible.{a mathematical formula}(b) neither i1 nor i2 is on the same unit as s1 and s2:_{a mathematical formula}s1 and {a mathematical formula}s2 are adjacent to the same eight indicators (i.e. {a mathematical formula}p1,…,p3,i1,…,i5). Hence, each of these indicators must be on the same unit as {a mathematical formula}s1 and {a mathematical formula}s2 or on one out of three partner units that are connected to the unit containing {a mathematical formula}s1 and {a mathematical formula}s2. The units containing {a mathematical formula}i1 respectively {a mathematical formula}i2 must contain two of the sensors in {a mathematical formula}{s3,…,s8} and have to be connected to each other, since {a mathematical formula}i1 and {a mathematical formula}i2 are adjacent to all eight sensors in {a mathematical formula}{s1,…,s8}.{a mathematical formula} In this situation, there remains a single unit connection for each of the units containing {a mathematical formula}i1 and {a mathematical formula}i2. These unit connections are needed to further connect to two sensors in {a mathematical formula}{s3,…,s8}. However, each position indicator must be connected to a literal and trueness sensor, and {a mathematical formula}i5 must be connected to {a mathematical formula}s9 and {a mathematical formula}s10. This circumstance makes it impossible to place a position indicator or {a mathematical formula}i5 on the same unit as {a mathematical formula}i1 or {a mathematical formula}i2. Consequently, {a mathematical formula}i3 and {a mathematical formula}i4 must be on the same unit as {a mathematical formula}i1 or {a mathematical formula}i2. As a further consequence, the unit containing {a mathematical formula}s1 and {a mathematical formula}s2 must also contain either two position indicators or one position indicator and {a mathematical formula}i5. In any case (i.e. two position indicators or one position indicator and {a mathematical formula}i5) there need to be connected further four sensors. However, there is no unit connection left for the unit containing {a mathematical formula}s1 and {a mathematical formula}s2 and there remain only two free slots on the connected partner units. So, this case is not possible.Because of (a) and (b), it can be concluded that {a mathematical formula}i1 must be on the same unit as {a mathematical formula}i2 in any solution graph.  □</paragraph><paragraph label="Lemma 7">A 3-clause input structure only allows solution graphs such that at least one of the literals represented by{a mathematical formula}lx,{a mathematical formula}lyor{a mathematical formula}lzevaluates to true.</paragraph><paragraph label="Proof">Because of Lemma 5 we know that {a mathematical formula}s1 must be on the same unit as {a mathematical formula}s2 and because of Lemma 6 we know that {a mathematical formula}i1 must be on the same unit as {a mathematical formula}i2. This allows two basic cases: either {a mathematical formula}s1 and {a mathematical formula}s2 are on the same unit as {a mathematical formula}i1 and {a mathematical formula}i2, or not.{a mathematical formula}s1 and s2 are on the same unit as i1 and i2:_{a mathematical formula}s1 and {a mathematical formula}s2 are adjacent to all indicators in {a mathematical formula}{p1,…,p3,i1,…,i5}. {a mathematical formula}i1 and {a mathematical formula}i2 are adjacent to all sensors in {a mathematical formula}{s1,…,s8}. Consequently, the unit containing {a mathematical formula}s1, {a mathematical formula}s2, {a mathematical formula}i1 and {a mathematical formula}i2 must be connected to three partner units each of which contains two indicators in {a mathematical formula}{p1,…,p3,i3,…,i5} and two sensors in {a mathematical formula}{s3,…,s8}. The unit containing {a mathematical formula}i5 must be connected to at least one further unit containing {a mathematical formula}s9 and {a mathematical formula}s10. At this point, there are two cases: (a) one position indicator is on the unit containing {a mathematical formula}i5, (b) none of the position indicators is on the unit containing {a mathematical formula}i5.{a mathematical formula}(a) one position indicator is on the unit containing i5:_{a mathematical formula} Apart from the connection to the unit containing {a mathematical formula}s1, {a mathematical formula}s2, {a mathematical formula}i1 and {a mathematical formula}i2, the unit containing {a mathematical formula}i5 needs to be connected to two further units containing {a mathematical formula}s9, {a mathematical formula}s10, a literal sensor l and its associated trueness sensor {a mathematical formula}tl. Hence, there remain no free slots on those units. If l is on the same unit as {a mathematical formula}tl, l can obviously be interpreted as true and Lemma 7 is supported. Otherwise, l and also {a mathematical formula}tl is on the same unit as {a mathematical formula}s9 or {a mathematical formula}s10. Without any loss of generality, we can interpret l as true also in such a case. The reason is that another literal sensor representing the complementary literal {a mathematical formula}l‾ can never be on the same unit as {a mathematical formula}tl. Furthermore, bringing such a solution graph structure into the canonical form, in which l and {a mathematical formula}tl are collocated, is always possible with a single switch of sensors and no further side effects. Hence, Lemma 7 is supported.{a mathematical formula}(b) none of the position indicators is on the unit containing i5:_In this case the unit containing {a mathematical formula}i5 also contains either {a mathematical formula}i3 or {a mathematical formula}i4. In combination, {a mathematical formula}i5 and {a mathematical formula}i3 (respectively {a mathematical formula}i4) are adjacent to eight sensors in total: {a mathematical formula}s1, {a mathematical formula}s2, {a mathematical formula}s9, {a mathematical formula}s10 and further four sensors in {a mathematical formula}{s3,…,s8}. Two of these sensors in {a mathematical formula}{s3,…,s8} are contained by the unit containing {a mathematical formula}i5 and {a mathematical formula}i3 (respectively {a mathematical formula}i4). In order to connect to the other two sensors in {a mathematical formula}{s3,…,s8}, there must be an additional unit connection between the unit containing {a mathematical formula}i5 and {a mathematical formula}i3 (respectively {a mathematical formula}i4) and one of the units containing a position indicator and two sensors in {a mathematical formula}{s3,…,s8}.{a mathematical formula} At this point, the unit containing {a mathematical formula}i5 has no left-over unit connections, and one of the connected units containing a position indicator has a single left-over unit connection to be used for connecting to a single unit containing a literal and the associated trueness sensor. Hence, Lemma 7 is supported.{a mathematical formula}s1 and s2 are not on the same unit as i1 and i2:_{a mathematical formula}s1 and {a mathematical formula}s2 are adjacent to the eight indicators in {a mathematical formula}{p1,…,p3,i1,…,i5}. Consequently, the unit containing {a mathematical formula}s1 and {a mathematical formula}s2 must contain two of these indicators and there must be three connected partner units each of which contains two indicators in {a mathematical formula}{p1,…,p3,i1,…,i5}. One of those three connected partner units contains {a mathematical formula}i1 and {a mathematical formula}i2. As {a mathematical formula}i1 and {a mathematical formula}i2 are adjacent to all sensors in {a mathematical formula}{s1,…,s8}, the unit containing {a mathematical formula}i1 and {a mathematical formula}i2 must also contain two of the sensors in {a mathematical formula}{s3,…,s8} and it must be connected to two other units each of which contains two of the sensors in {a mathematical formula}{s3,…,s8}. These can be the two already existing units each containing two indicators in {a mathematical formula}{p1,…,p3,i3,…,i5}, let us call these units for now unit A and unit B, or additional units. Here, we can differentiate three cases: (a) unit A as well as unit B contains two of the sensors in {a mathematical formula}{s3,…,s8}, (b) only unit A (not unit B) contains two of the sensors in {a mathematical formula}{s3,…,s8} and there is one additional unit C containing two of the sensors in {a mathematical formula}{s3,…,s8}, (c) neither unit A nor unit B contains sensors in {a mathematical formula}{s3,…,s8} and there are two additional units (unit C and unit D) each of which contains two of the sensors in {a mathematical formula}{s3,…,s8}.{a mathematical formula}(a)  unit A  as well as  unit B contains two of the sensors in {s3,…,s8}:_This results in the situation where all indicators in {a mathematical formula}{p1,…,p3,i1,…,i5} and all sensors in {a mathematical formula}{s1,…,s8} are contained by the already existing four units and the unit containing {a mathematical formula}i1 and {a mathematical formula}i2 and the unit containing {a mathematical formula}s1 and {a mathematical formula}s2 are connected to the respective other three units.{a mathematical formula} At this point there remain only two left-over unit connections in total. For connecting to eight further sensors (i.e. three literal sensors, three trueness sensors, {a mathematical formula}s9 and {a mathematical formula}s10) this is not enough. Thus, this case is not possible.{a mathematical formula}(b) one additional unit C contains two of the sensors in {s3,…,s8}:_Each unit containing sensors from {a mathematical formula}{s1,…,s8} must be connected to the unit containing {a mathematical formula}i1 and {a mathematical formula}i2 as {a mathematical formula}i1 and {a mathematical formula}i2 are adjacent to all those sensors. Consequently, unit A must be connected to the unit containing {a mathematical formula}i1 and {a mathematical formula}i2.{a mathematical formula} Already in this state, the support of Lemma 7 can be ascertained. The reason is that at least one of the position indicators must be on the same unit as {a mathematical formula}s1 and {a mathematical formula}s2 or on unit A since it is not possible to have three position indicators on unit B. On the one hand, a position indicator that is on the same unit as {a mathematical formula}s1 and {a mathematical formula}s2 can only be connected with its adjacent literal and trueness sensor that are both contained by unit B. On the other hand, for unit A there remains a single left-over unit connection such that a literal and trueness sensor adjacent to a position indicator on unit A would have to be on the same unit in order to be connected.{a mathematical formula}(c) there are two additional units C and D containing sensors in {s3,…,s8}:_Before further differentiating this case, the following can be observed. The unit containing {a mathematical formula}s1 and {a mathematical formula}s2 cannot contain two indicators out of {a mathematical formula}{i3,…,i5} at the same time. This is because any combination of two indicators in {a mathematical formula}{i3,…,i5} is adjacent to four sensors in {a mathematical formula}{s3,…,s8} in total. However, as neither unit A nor unit B contains any of those sensors but there are no left-over unit connections for the unit containing {a mathematical formula}s1 and {a mathematical formula}s2, this is not possible. Consequently, there must be at least one position indicator on the unit containing {a mathematical formula}s1 and {a mathematical formula}s2. Also, it cannot be that there are two position indicators on the unit containing {a mathematical formula}s1 and {a mathematical formula}s2. This would implicate that unit A and unit B contain {a mathematical formula}i3, {a mathematical formula}i4 and {a mathematical formula}i5. However, in total these three indicators are adjacent to all six sensors in {a mathematical formula}{s3,…,s8}. Hence, placing {a mathematical formula}i3, {a mathematical formula}i4 and {a mathematical formula}i5 on the units A and B would effect that there is also one unit connection between unit A (or unit B) and the unit containing {a mathematical formula}i1, {a mathematical formula}i2 (since this unit also contains two sensors in {a mathematical formula}{s3,…,s8}). However, there are no left-over unit connections for the unit containing {a mathematical formula}i1, {a mathematical formula}i2. Consequently, there are two subcases possible: (c1) the unit containing {a mathematical formula}s1 and {a mathematical formula}s2 also contains {a mathematical formula}i3 (or {a mathematical formula}i4) and one position indicator, or (c2) it contains {a mathematical formula}i5 and one position indicator.{a mathematical formula}In (c1), the unit containing {a mathematical formula}i5 (i.e. unit A or unit B) must also contain {a mathematical formula}s9 and {a mathematical formula}s10. This is because the left-over unit connections are needed for connecting to unit C and unit D or a further unit containing a literal and trueness sensor, depending on whether there is {a mathematical formula}i3 (or {a mathematical formula}i4) or a position indicator on the same unit. Consequently, the literal sensor l and associated trueness sensor {a mathematical formula}tl that are adjacent to the position indicator on the unit containing {a mathematical formula}s1 and {a mathematical formula}s2 must be on the same unit A (or unit B).Also in (c2), {a mathematical formula}s9, {a mathematical formula}s10, the literal sensor l and associated trueness sensor {a mathematical formula}tl must be either on unit A or unit B. Thus, there remain no free slots on those units. If l is on the same unit as {a mathematical formula}tl, l can obviously be interpreted as true and Lemma 7 is supported. Otherwise, l and also {a mathematical formula}tl is on the same unit as {a mathematical formula}s9 or {a mathematical formula}s10, respectively. Without any loss of generality, we can interpret l as true also in such a case. The reason is that another literal sensor representing the complementary literal {a mathematical formula}l¯ can never be on the same unit as {a mathematical formula}tl. Furthermore, bringing such a solution graph structure into the canonical form, in which l and {a mathematical formula}tl are collocated, is always possible with a single switch of sensors and no further side effects. Hence, Lemma 7 is supported.  □</paragraph><paragraph>The following theorem is a consequence of the presented structures and lemmas.</paragraph><paragraph label="Theorem 1">The PUDP3,2is NP-complete.</paragraph><paragraph label="Proof">Membership in NP is obvious (see Lemma 1). Having an instance of 3-SAT conforming to Lemma 4 (each variable occurs maximally three times) we can build a corresponding PUDP3,2 input graph as follows:<list>For each variable v, add literal sensors v, {a mathematical formula}v‾ and the associated trueness sensor {a mathematical formula}tv.For each clause, add a PUDP3,2 3-clause-hull input structure.For each clause literal, add edges between the corresponding position indicator and the according literal and trueness sensors.For each clause with only two literals, add one PUDP3,2 false-literal input structure and connect the third position indicator ({a mathematical formula}p3) to the false-literal sensor (f) and its associated trueness sensor ({a mathematical formula}tf).For each clause with only one literal, add two PUDP3,2 false-literal input structures. Connect the second and the third position indicator ({a mathematical formula}p2 and {a mathematical formula}p3) to one false-literal sensor (f) and its associated trueness sensor ({a mathematical formula}tf).{a mathematical formula}Solution for 3-SAT ⇒ Solution for PUDP3,2:_</list><paragraph> Given a solution for a 3-SAT instance, a PUDP3,2 solution graph can easily be generated by usage of the solution structures given in Fig. 4, Fig. 5 and Fig. 8 by doing the following: For each clause, add a 3-clause solution structure such that a literal sensor and associated trueness sensor is placed on the same unit whenever the corresponding literal in the 3-SAT instance evaluates to true. Otherwise, place literal and associated trueness sensors on different units.{a mathematical formula}Solution for PUDP3,2⇒Solution for 3-SAT:_ In a PUDP3,2 input graph, the incorporated 3-clause input structures enforce that with respect to each 3-clause at least one literal represented by a literal sensor evaluates to true (Lemma 7). Thus, a solution for the 3-SAT instance based on a solution for the PUDP3,2 instance can be created directly.  □</paragraph></paragraph><paragraph>The following corollary follows immediately from Theorem 1.</paragraph><paragraph label="Corollary 1">The PUDP is NP-complete in its most general form, that is, when IUCAP and UCAP are part of the input.</paragraph><paragraph>Theorem 1 can be generalized to any fixed IUCAP ≥ 3 and UCAP ≥ 2.</paragraph><paragraph label="Corollary 2">PUDP is NP-complete when IUCAP ≥ 3 and UCAP = 2.</paragraph><paragraph label="Proof">For variables everything remains the same. Generalization of the false-literals is straightforward as Lemma 3 has already been formulated in a general way. Also the basic concept of 3-clause structures constituting 3-clause-hull structures that are connected with three literal sensors and associated trueness sensors remains the same. However, the architecture of the 3-clause-hull structures must be updated in order account for the additionally available unit connections: Having a 3-clause-hull input structure for {a mathematical formula}IUCAP=x with {a mathematical formula}x≥3, a 3-clause-hull input structure for {a mathematical formula}IUCAP=x+1 is obtained by taking the structure for {a mathematical formula}IUCAP=x and adding two additional sensors that are adjacent to all indicators and two additional indicators that are adjacent to all sensors except {a mathematical formula}s9 and {a mathematical formula}s10. The new indicators are copies of {a mathematical formula}i1 and {a mathematical formula}i2, i.e. they are adjacent to the same sensors, and the new sensors are copies of {a mathematical formula}s1 and {a mathematical formula}s2. The newly introduced elements demand that there is at least one additional unit that is additionally connected to any unit containing an indicator in {a mathematical formula}{p1,…,p3,i1,…,i5} or a sensor in {a mathematical formula}{s1,…,s8}. Consequently, there are not more free unit connections available for the position indicators as there are for {a mathematical formula}IUCAP=x such that the generalized version of Lemma 7 must also hold. Fig. 9 shows the principle for the lifting of the input and solution structures.  □</paragraph><paragraph label="Corollary 3">PUDP is NP-complete when IUCAP ≥ 3 and UCAP ≥ 2.</paragraph><paragraph label="Proof">By interpreting all indicators and sensors in the 3-clause-hull input structures, except the position indicators (they must be unique), as non-empty sets of indicators/sensors, the proofs for Lemma 5, Lemma 6, Lemma 7 and Corollary 2 also hold for UCAP &gt; 2. Similarly, the concept for variables and literals can be generalized to UCAP ≥ 2 by interpreting the trueness sensors as non-empty sets of sensors. The generalized interpretation is that a literal is true if the literal sensor is placed together on the same unit with all its UCAP – 1 many trueness sensors. Generalization of the false-literals is straightforward as Lemma 3 has already been formulated in a general way.  □</paragraph></section><section label="3"><section-title>Conclusions</section-title><paragraph>The partner units problem has many industrial application areas and different versions of the problem have been formulated, most importantly the partner units decision problem (PUDP) and the partner units optimization problem (PUOP). The PUOP constitutes a hard benchmark problem for the answer set programming competitions. From a practical point of view, though, the partner units decision problem (PUDP) treated herein must be considered as more important than the PUOP. However, whereas for the PUOP complexity is known in its most general form and also for many industrially important subproblems, the complexity of the PUDP was widely unknown. In this article we show that the PUDP in its general form is NP-complete. We furthermore show that the PUDP remains NP-complete when the IUCAP problem parameter is fixed to some natural number ≥ 3 and the UCAP problem parameter is fixed to some natural number ≥ 2.</paragraph><section-title>Acknowledgements</section-title></section></content><acknowledgements><paragraph>Work was supported by the research project Heuristic Intelligence (FFG-P Nr. 840242). Many thanks to Giacomo Da Col for proofreading this article.</paragraph></acknowledgements><references><reference label="[1]"><authors>M. Aschinger,C. Drescher,G. Friedrich,G. Gottlob,P. Jeavons,A. Ryabokon,E. Thorstensen</authors><title>Optimization methods for the partner units problem</title><host>CPAIOR'11(2011)SpringerBerlin, Heidelberg pp.4-19</host></reference><reference label="[2]"><authors>M. Aschinger,C. Drescher,G. Gottlob,P. Jeavons,E. Thorstensen</authors><title>Tackling the partner units configuration problem</title><host>Proceedings of the Int. Joint Conf. on Artificial Intelligence(2011) pp.497-503</host></reference><reference label="[3]"><authors>Francesco Calimeri,Martin Gebser,Marco Maratea,Francesco Ricca</authors><title>Design and results of the Fifth Answer Set Programming Competition</title><host>Artif. Intell.231 (2016) pp.151-18110.1016/j.artint.2015.09.008</host></reference><reference label="[4]"><authors>C. Drescher</authors><title>The partner units problem: a constraint programming case study</title><host>International Conference on Tools with Artificial IntelligenceICTAI'12(2012)IEEE pp.170-177</host></reference><reference label="[5]"><authors>A. Falkner,A. Haselboeck,G. Schenner,H. Schreiner</authors><title>Modeling and solving technical product configuration problems</title><host>Artif. Intell. Eng. Des. Anal. Manuf. (25)(2011) pp.115-129</host></reference><reference label="[6]"><authors>R.M. Karp</authors><title>Reducibility among combinatorial problems</title><host>R.E. MillerJ.W. ThatcherJ.D. BohlingerComplexity of Computer Computations: Proceedings of a Symposium on the Complexity of Computer Computations(1972)Springer USBoston, MA pp.85-103</host></reference><reference label="[7]"><authors>S. Mittal,F. Frayman</authors><title>Towards a generic model of configuration tasks</title><host>Proceedings of the 11th Int. Joint Conf. on Artificial Intelligence(1989)Morgan Kaufmann Publishers Inc.San Francisco, CA, USA pp.1395-1401</host></reference><reference label="[8]"><authors>Erich C. Teppan,G. Friedrich,G. Gottlob</authors><title>Tractability frontiers of the partner units configuration problem</title><host>J. Comput. Syst. Sci.82 (5)(2016) pp.739-755</host></reference><reference label="[9]"><authors>E.C. Teppan,G. Friedrich,A. Falkner</authors><title>Quickpup: a heuristic backtracking algorithm for the partner units configuration problem</title><host>Int. Conf. on Innovative Applications of AIIAAI'12(2012)AAAI pp.2329-2334</host></reference><reference label="[10]"><authors>C.A. Tovey</authors><title>A simplified NP-complete satisfiability problem</title><host>Discrete Appl. Math.8 (1)(1984) pp.85-89</host></reference></references><footnote><note-para label="1">http://aspcomp2015.dibris.unige.it/, see [3].</note-para></footnote></root>