<?xml version="1.0" encoding="UTF-8"?><root><url>https://www.sciencedirect.com/science/article/pii//S0004370216300510</url><title>A qualitative spatial representation of string loops as holes</title><authors>Pedro Cabalar,Paulo E. Santos</authors><abstract>This research note contains an extension of a previous work by Cabalar and Santos (2011) that formalised several spatial puzzles formed by strings and holes. That approach explicitly ignored some configurations and actions that were irrelevant for the studied puzzles but are physically possible and may become crucial for other spatial reasoning problems. In particular, the previous work did not consider the formation of string loops or the situations where a holed object is partially crossed by another holed object. In this paper, we remove these limitations by treating string loops as dynamic holes that can be created or destroyed by a pair of elementary actions, respectively picking or pulling from strings. We explain how string loops can be recognised in a data structure representing the domain states and define a notation to represent crossings through string loops. The resulting formalism is dual in the sense that it also allows understanding any hole as a kind of (sometimes rigid) closed string loop.</abstract><keywords>Spatial representation;Problem solving;Reasoning about actions</keywords><content><section label="1"><section-title>Introduction</section-title><paragraph>The design of computer programs and machines with commonsense reasoning constitutes an important long-term goal of Artificial Intelligence. In most commonsense reasoning scenarios, the spatial component of the domain plays a fundamental role. People usually reason about spatial entities and their behaviour in their daily lives without apparent effort – it is somehow an embodied (and possibly innate) feature in the human mind. As a simple example, think about all the steps for putting on a pair of trousers and a belt. While children usually learn this process without much difficulty, scenarios like this become a real challenge for computer programs as they must deal with complex geometric figures (e.g. the pants, the zipper), measure-related constraints (such as choosing the right hole in the belt, depending on your waist size) and other object constraints related to rigidness (the belt buckle) versus flexibility (the clothes and the belt).</paragraph><paragraph>Research on spatial commonsense reasoning comes from two main sources in the Knowledge Representation (KR) literature. On the one hand, the area of Reasoning about Actions and Change comprises a family of logical languages [1], [2], [3], [4], [5] for the formalization of an intelligent agent operating in action domains and performing common reasoning tasks such as simulation, planning, temporal explanation or diagnosis. On the other hand, Qualitative Spatial Reasoning (QSR) [6], [7] aims at the rigorous treatment of qualitative abstractions of spatial entities that constitute the foundations of our commonsense understanding of the external world. Although the combination of QSR and temporal reasoning is not unfrequent in the literature (see for instance [8]), in general QSR approaches have traditionally overlooked a formal treatment of actions as those involved in our previous example or tackled temporal reasoning tasks such as planning, simulation or explanation.</paragraph><paragraph>Trying to fill this gap, we have concentrated our efforts in formalizing action domains that involve flexible objects and holes, as they are very common in different scenarios like our trousers example.{sup:1} Our methodology, applied along a series of papers [9], [10], [11], [12], [13], has consisted in studying spatial puzzles in a bottom-up fashion, starting from restricted cases and gradually covering new puzzles with more challenging features. Puzzles constitute a good test bed, as they offer a small number of objects requiring a minimum background knowledge about unrelated features, while they keep enough complexity to constitute a challenging problem for KR. Most of these puzzles consist in releasing a rigid ring from an entanglement of strings and other objects.</paragraph><paragraph>Our initial efforts were put in solving the so-called Fisherman's Folly puzzle shown in Fig. 1 using a list-based representation of string crossings. All this work eventually led to an extensive paper [11] describing a complete logical formalization plus a preliminary planner capable of solving a family of related puzzles with similar features.</paragraph><paragraph>In [11] some issues were left open. In particular, we did not consider states where a holed object was partially crossing another hole, as in Fig. 2(a), or the formation of string loops as in Fig. 2(b). Both situations were irrelevant for solving the family of puzzles under study but, as it can be imagined, ignoring them may easily suppose a lack of elaboration tolerance for other closely related puzzles. For instance, the variation of Fisherman's Folly shown in Fig. 3(a) is essentially the same puzzle with the difference that the holed post has been replaced by a long metallic arc. The latter forms a hole that, in its turn, must cross the ring hole, becoming a case of Fig. 2(a). Although this feature is not essential for solving Fisherman's Folly, there are other puzzles that cannot be solved without removing these restrictions – for instance, in [14] we studied the so-called “easy-does-it” puzzle (Fig. 3(b)) which cannot be solved without representing (and acting upon) string loops.</paragraph><paragraph>The present paper shows how the recent developments reported in [14] fill up a number of gaps left open in [11] and allow removing the above mentioned limitations by considering the formation of string loops. We describe how to recognize loops in a list of string crossings and define a notation to represent crossings through string loops, as they actually behave as regular holes. On top of the previous approach, we identify two basic new actions on strings that may form or destroy loops: (1) picking a string segment through a hole, and (2) pulling from a string to unwind a loop. The most difficult part of the paper corresponds to the description of the direct and indirect effects of these two actions and, particularly, to the fact that a loop may be inside some larger loop. As a result, an action on a loop may imply inheriting crossings with respect to a larger loop. We also explain how a hole can also be seen as a kind of (sometimes rigid) closed string loop, allowing the representation of problems such as the one in Fig. 2(a). The next section introduces the basis upon which this work was developed.</paragraph></section><section label="2"><section-title>Describing states: strings, holes and crossings</section-title><paragraph>The basic ontology consists of strings, holes and regular objects. A string s is generally understood as a (possibly flexible) long object with two differentiated points called tips that are arbitrarily denoted as {a mathematical formula}sb and {a mathematical formula}se to stand for the beginning and the end of s, respectively. Strings will be graphically represented as (possibly curved) line segments with an arrow head that represents a direction from the beginning {a mathematical formula}sb to the end {a mathematical formula}se of the string. A hole represents an empty region delimited by a boundary, normally, the body of some object hosting the hole. This work exclusively focuses on “tunnel-shaped” holes, that is, those with two exits. Since we will not represent geometric shapes or measures, we can think about a hole h as a closed surface with two faces, arbitrarily denoted as {a mathematical formula}h+ and {a mathematical formula}h−, that represent the hole exits. Given a face f, we write {a mathematical formula}f‾ to represent its opposite face, i.e., {a mathematical formula}h+‾=defh− and {a mathematical formula}h−‾=defh+. A regular hole h will be represented as an ellipse with an arrow head in its boundary pointing out a spin, using the right thumb rule to determine the positive face {a mathematical formula}h+, as in Fig. 4(a). In the diagrams, the strings crossing a hole h also help to fix its orientation: {a mathematical formula}h+ is always shown as the “visible” surface, and the string portion in {a mathematical formula}h− is hidden.</paragraph><paragraph>Regular objects (depicted as boxes) do not show any particular spatial feature. They act as points where string tips can be linked to. They also restrict the possible ways in which the string tips can pass through the different holes, something that is relevant for solving a given puzzle.</paragraph><paragraph>A system state will describe two kinds of basic relations among strings and other objects: links and crossings. A string tip can be linked to a regular object, to a holed object or to another tip.{sup:2} We will represent a link as a thick dot. On the other hand, a string can be passing through several holes at a given situation: each time that a string crosses some hole is called a crossing. Note that the same string can be crossing the same hole several times and in different directions although, obviously, at different points in the string. As introduced in [9], we will use a list structure, called {a mathematical formula}chain(s), to capture the sequence of hole crossings that each string s traverses from {a mathematical formula}sb to {a mathematical formula}se. Each crossing of s through a hole h is represented by the exit hole face. For instance, if s crosses h from {a mathematical formula}h− to {a mathematical formula}h+, we represent the crossing as {a mathematical formula}h+ in the chain representation. In the diagrams, crossings will be represented as a small dash, perpendicular to the string direction.</paragraph><paragraph>As an example of all these elements, consider the schematic representation of the Fisherman's Folly puzzle in Fig. 4(b). The diagram shows two long objects (Str and Post), three regular objects ({a mathematical formula}Base, {a mathematical formula}Disk1 and {a mathematical formula}Disk2) and four holed objects (PostH, {a mathematical formula}Sphere1, {a mathematical formula}Sphere2 and {a mathematical formula}Ring). The list of crossings for the string Str corresponds to {a mathematical formula}chain(Str)=[Sphere1+,PostH+,Sphere2+].</paragraph><paragraph>Suppose we have a list for a string s of the form {a mathematical formula}chain(s)=[x1,…,xn] containing n crossings. Then, we can consider a division of the string into {a mathematical formula}n+1 (string) segments, we represent as {a mathematical formula}s:i for {a mathematical formula}i=0,…,n so that crossing {a mathematical formula}xj is preceded by segment {a mathematical formula}s:(j−1) and followed by segment {a mathematical formula}s:(j+1). For instance, Fig. 4(b) shows four string segments,{sup:3}{a mathematical formula}Str:0 to {a mathematical formula}Str:3, for string Str.</paragraph></section><section label="3"><section-title>Passing objects through holes</section-title><paragraph>The system dynamics is described in terms of transitions between states caused by the execution of actions. In [11], we considered an elementary action {a mathematical formula}pass(o,f) for passing an object o through some hole h toward one of its faces {a mathematical formula}f∈{h+,h−}. The executability of this action was limited by the specification of constraints. For that purpose, we defined a (static) predicate {a mathematical formula}CannotPass(o,h,s) meaning that object o cannot pass through hole h when the latter is being crossed by the set of strings s. For instance, some constraints in the Fisherman's Folly are that the post base cannot pass through the ring, i.e. {a mathematical formula}CannotPass(Base,Ring,∅), that a sphere {a mathematical formula}x∈{Sphere1,Sphere2} cannot pass through the post hole, that is, {a mathematical formula}CannotPass(x,PostH,∅) or that it cannot pass through the ring when the latter is crossed by the post {a mathematical formula}CannotPass(x,Ring,{Post}).</paragraph><paragraph>The execution of {a mathematical formula}pass(o,f) could affect the string crossings in the cases where o was a string tip or a holed object. When o is a string tip, the movement is very simple: depending on the direction, it just adds or removes the last crossing in the string chain. When o was a holed object, on the contrary, the effects were more complex, especially if o was, in its turn, crossed by other strings. Fig. 5 shows the result of passing the holed object h toward a ring face f when the string s is crossing h – this was encoded as movement (1R). A second movement not displayed, (1L), performed the opposite movement undoing (1R). Note that we assumed that these movements had to be complete, that is, we disregarded any intermediate state where the moved ring was partially overlapping the crossed ring since, although physically possible, these states were cases of Fig. 2(a). A second observation is that, in the resulting state of (1R), string s has formed a new loop (as in Fig. 2(b)) because of being pulled through ring p. The situation where that loop is crossed by a new string could not be represented before, but will be part of the generalisation we introduce in this paper.</paragraph><paragraph>Another feature from [11] was the extension of action {a mathematical formula}pass to sets of objects linked altogether. Thus, for instance, since {a mathematical formula}Stre and {a mathematical formula}Disk2 are linked in the Fisherman's Folly initial state, we can execute {a mathematical formula}pass({Stre,Disk2},PostH−) meaning that both {a mathematical formula}pass(Stre,PostH−) and {a mathematical formula}pass(Disk2,PostH−) are simultaneously performed. The rest of the movements are shown in Fig. 6. Note that state {a mathematical formula}S5 has reached the goal since, at this point, the ring hole {a mathematical formula}Ring does not occur in any list, i.e., it is not crossed by any long object. In Fig. 6{a mathematical formula}do(A,S) denotes the resulting situation after performing action A on situation S.</paragraph></section><section label="4"><section-title>String loops as holes</section-title><paragraph>Although [11] did not consider loops as formal objects, the truth is that they can be easily detected in any structure {a mathematical formula}chain(s) by recognizing two (possibly non-consecutive) crossings through the same hole with the general pattern:{a mathematical formula} where {a mathematical formula}f,f‾ are the two faces of a same hole. For example, state {a mathematical formula}S1 in Fig. 6 has a loop formed by the interaction of Str and the hole PostH that can be directly seen in {a mathematical formula}chain(Str) as:{a mathematical formula}</paragraph><paragraph>An interesting observation is that loops formed in this way also constitute a new kind of “hole” on which we can apply the same actions we use for normal or permanent holes (passing objects through them, picking or pulling other strings, etc.) but that differ from the latter in that they are temporary, that is, they can be created or destroyed depending on the operations that are performed on their host strings. Several types of loop-holes can be considered depending on how they are formed. Fig. 7 shows four general types. Types 1 and 2 are loops formed by the interaction of a string and a hole, represented here as a ring. Type 1 are loops where the string passes twice through the same hole, but in opposite directions. This kind of loops can be formed by “pulling” a segment of the string through the hole, and will actually constitute the main focus of this paper. Loops of type 2 correspond to cases where the string passes twice through the same hole but in the same direction. This situation can only be achieved by a sewing-like sequence of actions passing the string tip through the different crossings. Type 3 constitutes the case where both string tips are linked together or linked to the same object. As we will see, this can be represented as a particular subcase of type 1. Finally, type 4 corresponds to “virtual” loops formed by a string crossing or superposing itself (the figure shows just one possibility, but more cases can be built using different strings). In these cases, the loop is more conceptual than physical, since the string crossings do not constitute real joints, but still, most practical knot handbooks actually describe and manipulate these loops as regular holes. This classification just considers loops generated by a string. Complex loops can be formed by the interaction of different objects that sometimes behave as a string such as, for instance, a chain formed by different links, a train consisting of linked wagons, etc. This issue is left for future investigations.</paragraph><paragraph>In order to represent loops of Type 1 and crossings through them, we introduce the following notation. Take some {a mathematical formula}chain(s)=[x1,…,xi,…,xj,…,xn] with {a mathematical formula}0≤i&lt;j≤n and assume that {a mathematical formula}xj=xi‾, that is, {a mathematical formula}xi and {a mathematical formula}xj are opposite hole faces. Then, by {a mathematical formula}l(s,xi,[i,j]) we denote the loop comprising the set of segments {a mathematical formula}{(s:i),…,(s:j−1)}. As an example, the loop in Formula (1) can be represented as {a mathematical formula}l(Str,PostH+,[2,4]) and comprises the segments {a mathematical formula}Str:2 and {a mathematical formula}Str:3 (respectively the third and fourth segments, since we count from 0) that can be seen in state {a mathematical formula}S1 of Fig. 6.</paragraph><paragraph>The previous notation can also be used to represent loops of Type 3. To this end, we consider that tips {a mathematical formula}sb and {a mathematical formula}se in a string s actually define a pair of virtual holes that constitute the initial and final crossings in {a mathematical formula}chain(Str). We take the criterion that {a mathematical formula}sb is always crossed toward its negative face, and {a mathematical formula}se toward its positive one. For instance, Formula (1) can be represented instead as:{a mathematical formula} For coherence, we assume now that the first crossing {a mathematical formula}Strb− has index 0 since there is no previous segment and, similarly, {a mathematical formula}Stre+ has index {a mathematical formula}n+1, which coincides with the number of segments in the string. A loop {a mathematical formula}l(s,xi,[i,i+1]) consisting of a single segment {a mathematical formula}s:i receives the name of single loop.</paragraph><paragraph>To illustrate how a loop of Type 3 is formed, consider the leftmost diagram in Fig. 8 where string s has both tips free with the corresponding {a mathematical formula}chain(s)=[sb−,se+]. If both tips are moved toward each other until they are linked together (or they are linked to the same object) we reach the situation in the rightmost diagram where holes {a mathematical formula}sb and {a mathematical formula}se become the same, i.e., {a mathematical formula}sb=se and we use {a mathematical formula}sb to denote both. In this case, the string has {a mathematical formula}chain(s)=[sb−,sb+] and ends up forming a (closed) single loop {a mathematical formula}l(s,sb−,[0,1])={(s:0)}. Note how the diagram for this loop is essentially identical to the one we use for a holed object. When a closed string R forming a single loop {a mathematical formula}chain(R)=[Rb−,Rb+] is persistent, i.e., it cannot be made open by any domain action, it is named as ring and its related loop {a mathematical formula}l(R,Rb−,[0,1]) is abbreviated as the string name R by a slight abuse of notation. In the Fisherman's Folly, {a mathematical formula}Ring,PostH,Disk1 and {a mathematical formula}Disk2, are examples of rings.</paragraph><paragraph>As a more elaborated example of loop of Type 3, note how we can represent now the variation of the Fisherman's Folly in Fig. 3(a) where the post is replaced by a metallic arc. Fig. 9 shows the diagrammatic representation from which we can derive {a mathematical formula}chain(Post)=[Postb−,Ring+,Ring−,Postb+] since in this case {a mathematical formula}Postb=Poste as both tips are linked to the {a mathematical formula}Base. As a result, we get two loops in the post: the main loop, {a mathematical formula}l(Post,Postb−,[0,3])={(Post:0),(Post:1),(Post:2)}, formed by all the Post segments, and an inner loop {a mathematical formula}l(Post,Ring+,[1,2])={(Post:1)}. This example illustrates another interesting feature, since {a mathematical formula}l(Post,Ring+,[1,2])⊂l(Post,Postb−,[0,3]), that is, a loop may be included in another.</paragraph><paragraph>The inclusion of loops inside larger loops is well illustrated by state {a mathematical formula}S2 in Fig. 6. At that state, {a mathematical formula}chain(Str) has the form{sup:4}:{a mathematical formula} forming four loops that share endpoints and, moreover, three of them are included in the larger (outermost) one {a mathematical formula}l(Str,Ring−,[2,8]).</paragraph></section><section label="5"><section-title>Actions on loops</section-title><paragraph>The introduction of loops in the representation of states implies a reconsideration of the set of actions from [11] that may be relevant for causing state transitions. One first obvious way to build a state containing loops is by starting with a free string s and successively passing its end tip {a mathematical formula}se through all the involved holes in the order represented by {a mathematical formula}chain(s). This is what we may informally call “sewing.” For this purpose, action {a mathematical formula}pass(se,f) from [11] (described above) does not require any modification: each time a new hole is crossed, it includes a new crossing in {a mathematical formula}chain(s). However, in [11], actions {a mathematical formula}pass(se,f) or {a mathematical formula}pass(sb,f) could also remove a crossing from {a mathematical formula}chain(s) and this effect must be disregarded now. The effects of these actions in [11] were symmetric in the sense that passing a string tip toward one hole face f and then backwards to {a mathematical formula}f‾ returns the chain to its original state. For instance, imagine a string s and a hole h initially unrelated, as in Fig. 4(a). If {a mathematical formula}pass(se,h+) is executed, we would get {a mathematical formula}chain(s)=[sb−,h+,se+] depicted as state 1 in Fig. 10. If the next movement is {a mathematical formula}pass(se,h−) the effect of that action, according to [11], was completely “pulling” back from the string tip {a mathematical formula}se leaving {a mathematical formula}chain(s)=[sb−,se+] free again, as in state 3 in Fig. 10, i.e., the original situation in Fig. 4(a). In this paper, we consider instead that the result of passing a string tip through a hole always creates a new crossing. As a result, in the example of Fig. 10, executing {a mathematical formula}pass(se,h−) on state 1 will actually lead to state 2, where we have {a mathematical formula}chain(s)=[sb−,h+,h−,se+] forming the single loop {a mathematical formula}l(s,h+,[1,2]), disregarded in [11] as an irrelevant intermediate step. Once this restriction is removed, however, we must consider a pair of new actions. For instance, to allow the transition from state 2 to state 3, pulling from a string segment to undo a single loop is required. Moreover, in some situations we can also require the opposite movement, that is, passing from state 3 to state 2 by just picking the string without actually moving its tips. For instance, it may be the case that the string tips are linked to some object that cannot pass through the hole, so we cannot create the loop in state 2 by performing {a mathematical formula}pass(se,h+) and then {a mathematical formula}pass(se,h−) as before, but we can still pick the string to {a mathematical formula}h+ to form the loop.</paragraph><paragraph>To sum up, we define two new actions, {a mathematical formula}pick(s:i,f) and {a mathematical formula}pull(s:i,f), that respectively allow picking or pulling some string segment {a mathematical formula}s:i toward a hole face f. The direct effects of these two actions are represented in Fig. 11, which shows the effect of picking from left to right and the effect of pulling in the opposite direction. As we can see, Fig. 11 is quite similar to Fig. 5 with the only difference that now the string can be picked or pulled without the necessity of having a holed object h to be passed through the target hole.</paragraph><paragraph>We assume that the action {a mathematical formula}pick(s:i,f) can always be executed on a string, regardless the origin and target of segment {a mathematical formula}x:i, and that it always creates a new single loop{sup:5} of the form {a mathematical formula}[…,f,f‾,…] in {a mathematical formula}chain(s). As happens with passing a tip, the action {a mathematical formula}pick is not symmetric: if we execute {a mathematical formula}pick(s:i,f) on the left state of Fig. 11 and then we pick again toward the opposite face, {a mathematical formula}pick(s:i+1,f‾) we do not return to the original state, but we obtain a nested loop of the form {a mathematical formula}chain(s)=[sb−,f‾,f,f‾,f,se+] instead.</paragraph><paragraph>As we can see in Fig. 11, if we want to undo a single loop, we must actually use the action {a mathematical formula}pull. The execution of {a mathematical formula}pull(s:i,f) is only possible if {a mathematical formula}chain(s)=[x1,…,xi,xi+1,…,xn] has a single loop at the i-th position, that is, if {a mathematical formula}xi+1=f then {a mathematical formula}xi=f‾. The direct effect of this action is just removing the pair of crossings {a mathematical formula}xi,xi+1 from the list. The main complication, however, is that {a mathematical formula}pull may also imply two types of indirect effects. First, when the pulled loop was crossed by other strings, these end up picked in the same direction. As an example, Fig. 12 shows how {a mathematical formula}pull(s:i,f) picks string t (dashed) that was crossing the removed loop {a mathematical formula}s:i. In the resulting state, string t ends up forming a new single loop {a mathematical formula}t:j+1, which is now crossed by s. This operation takes place for any string crossing the removed loop. That is, if we had n strings crossing {a mathematical formula}s:i we would get n new single loops crossed by s. The ordering in which those crossings occur in {a mathematical formula}chain(s) is arbitrary, understanding the action outcome as non-deterministic.</paragraph><paragraph>A second kind of indirect effect associated with the action {a mathematical formula}pull has to do with the inclusion of a single loop inside a larger one. When two loops L and {a mathematical formula}L′ satisfy {a mathematical formula}L⊆L′ (as sets of segments), any string that crosses L is also crossing {a mathematical formula}L′. In the {a mathematical formula}chain structure, we just represent the crossing through the smallest loop L, but when the latter is unwinded by some {a mathematical formula}pull action, the removed crossing through L must be replaced by a crossing through the next loop {a mathematical formula}L′ in the inclusion hierarchy.</paragraph><paragraph>To illustrate the second kind of indirect effect associated to {a mathematical formula}pull, consider again Fig. 12 and imagine that strings s and t respectively represent the Post and Str at Fig. 9 and that f is the hole face {a mathematical formula}Ring−. The movement {a mathematical formula}pull(s:i,f) corresponds in this context to {a mathematical formula}pull(Post:1,Ring−), i.e., pulling the post downwards or, if preferred, sliding the ring upwards the post. The initial state of {a mathematical formula}chain(Str) in Fig. 9 is:{a mathematical formula} and, according to Fig. 12, Str will be picked toward {a mathematical formula}Ring−. So, in principle, we should just replace the crossing through the pulled loop {a mathematical formula}l(Post,Ring,[1,2])+ by the new pair of crossings {a mathematical formula}Ring−,Ring+ in the list above. However, as we saw before, {a mathematical formula}l(Post,Ring,[1,2]) was actually part of a larger loop {a mathematical formula}l(Post,Strb−,[0,3]) since both ends of the post are linked to the {a mathematical formula}Base. As a result, the crossing through {a mathematical formula}l(Post,Ring,[1,2])+ must be actually replaced by {a mathematical formula}l(Post,Ring,[0,1])+ in the resulting state, where we have readjusted the loop interval {a mathematical formula}[0,3] to {a mathematical formula}[0,1] since crossing 1 and 2 in {a mathematical formula}chain(Post) are removed. In this way, the resulting state for {a mathematical formula}chain(Str) corresponds to:{a mathematical formula}</paragraph><paragraph>To conclude this section, it is worth mentioning that the previous actions in [11], movement (1R) in Fig. 5 and its inverse (1L), that allowed passing holed objects through holes, can be seen now as macro actions consisting of sequences of elementary pickings and pullings. For instance, Fig. 13 shows how movement (1R) in Fig. 5 can be achieved by first picking a segment of ring h toward {a mathematical formula}f− and then pulling from the rest of h, which will drag string s as an indirect pick.</paragraph></section><section label="6"><section-title>Related work</section-title><paragraph>To the best of our knowledge, the current AI literature presents no other work aiming at the representation and reasoning about domains containing flexible objects and holes. However, a few related references from the standpoint of philosophy are worth mentioning. A finer ontology of holes is described in [15], [16], whereas a general first-order theory of holes and spatial inclusion is created within an interplay of ontological, mereological, topological and morphological concepts. Similarly, [17] describes an investigation of compositionality, lexical and normative elements present in natural knots and suggests a research agenda for the investigation of the structure underlying the human ability to make knots. Research on the topological structure of knots (known as Knot Theory) [18], although interested in mathematical knots (whose ends are tied together), is somewhat related to the work presented in this paper in the sense that the Reidemeister moves can be implemented as actions to be applied on knots (as shown in [19]). Although rigorously well-defined, both philosophical and topological approaches to theories about flexible or immaterial objects are defined on a level of abstraction that makes them unfeasible to be applied on the automated solution of puzzles.</paragraph><paragraph>In [14] we presented a solution to the Easy-does-it puzzle (Fig. 3(b)) that demanded the mathematical formalisation of string loops. That paper also introduced a proof of correctness of our proposed formalism with respect to Reidemeister moves in knot theory. The present paper complements the work reported in [14] putting it in a more general context, discussing how it can be used to solve some of the issues left open in [11].</paragraph></section><section label="7"><section-title>Concluding remarks</section-title><paragraph>This paper discussed a solution to the challenging problem of formally describing a particular characteristic of flexible objects such as strings: their capacity of making loops that can be used (and reasoned about) as holes in spatial reasoning processes. This solution resolves two issues left open in our previous work (reported in [11]), namely, the representation of states where a holed object partially crosses another hole and the creation of string loops. In this paper, we have described the identification of string loops in lists of string crossings, together with the actions related to the creation and unwinding of string loops. In possession of these actions, the framework in [11] can now be used to reason about spatial puzzles where the manipulation of loops is an essential part of the solution.</paragraph><paragraph>Future research shall be conducted mainly in two fronts: the consideration of actions related to winding (and unwinding) knots and the deployment of these ideas in real application domains. The latter may include tasks such as autonomous needle steering or the actual manipulation of (and reasoning about) real world objects by a humanoid robot, such as the Darpa Robotics Challenge{sup:6} that has as one of its goals the implementation of a humanoid robot with the “ability to manipulate and use a diverse assortment of tools designed for humans”.</paragraph><section-title>Acknowledgements</section-title></section></content><acknowledgements><paragraph>We wish to thank the reviewers of both this paper and [11] for pointing out some of the problems treated in the current paper. Paulo E. Santos acknowledges financial support from FAPESP grant 2012/ 04089-3, and CNPq “bolsa de produtividade em pesquisa” grant 307093/2014-0. Pedro Cabalar was partially supported by Spanish MINECO project TIN2013-42149-P. This work was developed while Paulo E. Santos was visiting the University of Corunna sponsored by the “Bolsa Ibero-Americana para Jovens Professores e Pesquisadores – Santander Universidades”.</paragraph></acknowledgements><references><reference label="[1]"><authors>J. McCarthy,P. Hayes</authors><title>Some philosophical problems from the standpoint of artificial intelligence</title><host>Mach. Intel. J.4 (1969) pp.463-512</host></reference><reference label="[2]"><authors>R. Kowalski,M. Sergot</authors><title>A logic-based calculus of events</title><host>New Gener. Comput.4 (1986) pp.67-95</host></reference><reference label="[3]"><authors>M. Thielscher</authors><title>Introduction to the fluent calculus</title><host>Electron. Transact. Artif. Intel.2 (3–4)(1998) pp.179-192</host></reference><reference label="[4]"><authors>P. Doherty,J. Gustafsson,L. Karlsson,J. Kvarnström</authors><title>(TAL) temporal action logics: language specification and tutorial</title><host>Electron. Transact. Artif. Intel.2 (3–4)(1998) pp.273-306</host></reference><reference label="[5]"><authors>M. Gelfond,V. Lifschitz</authors><title>Action languages</title><host>Electron. Transact. Artif. Intel.2 (3–4)(1998) pp.193-210</host></reference><reference label="[6]"><authors>A.G. Cohn,J. Renz</authors><title>Qualitative spatial representation and reasoning</title><host>F. van HermelenV. LifschitzB. PorterHandbook of Knowledge Representation(2008)Elsevier pp.551-596</host></reference><reference label="[7]"><authors>G. Ligozat</authors><title>Qualitative Spatial and Temporal Reasoning</title><host>(2013)John Wiley &amp; Sons</host></reference><reference label="[8]"><authors>B. Bennett,A.G. Cohn,F. Wolter,M. Zakharyaschev</authors><title>Multi-dimensional modal logic as a framework for spatio-temporal reasoning</title><host>Appl. Intell.17 (2002) pp.239-251</host></reference><reference label="[9]"><authors>P. Cabalar,P. Santos</authors><title>Strings and holes: an exercise on spatial reasoning</title><host>Proc. of the 10th Ibero-American Artificial Intelligence ConferenceIBERAMIA'06Lecture Notes in Artificial Intelligencevol. 4140 (2006)SpringerRibeirão Preto, Brazil pp.419-429</host></reference><reference label="[10]"><authors>P.E. Santos,P. Cabalar</authors><title>The space within Fisherman's Folly: playing with a puzzle in mereotopology</title><host>Spat. Cogn. Comput.8 (1–2)(2008) pp.47-64</host></reference><reference label="[11]"><authors>P. Cabalar,P.E. Santos</authors><title>Formalising the Fisherman's Folly puzzle</title><host>Artif. Intell.175 (1)(2011) pp.346-377</host></reference><reference label="[12]"><authors>P.E. Santos,P. Cabalar</authors><title>An investigation of actions, change, space within a hole-loop dichotomy</title><host>Proc. of the 11th Intl. Symp. on Logical Formalizations of Commonsense ReasoningCommonsense'13, Ayia Napa, Cyprus(2013)</host></reference><reference label="[13]"><authors>P.E. Santos,P. Cabalar</authors><title>An investigation of actions, change, space</title><host>Proc. of the 23rd International Conference on Automated Planning and SchedulingICAPS 2013, Rome, Italy(2013)</host></reference><reference label="[14]"><authors>P.E. Santos,P. Cabalar</authors><title>Framing holes within a loop hierarchy</title><host>Spat. Cogn. Comput.16 (2016) pp.54-95</host></reference><reference label="[15]"><authors>R. Casati,A.C. Varzi</authors><title>Parts and Places</title><host>(1999)MIT Press</host></reference><reference label="[16]"><authors>A.C. Varzi</authors><title>Reasoning about space: the hole story</title><host>Log. Log. Philos.4 (1996) pp.3-39</host></reference><reference label="[17]"><authors>R. Casati</authors><title>Knowledge of knots: shapes in action</title><host>Shapes 2.0: The Shapes of ThingsCEUR Workshop Proceedingsvol. 1007 (2013)</host><host>http://ceur-ws.org/Vol-1007</host></reference><reference label="[18]"><authors>K. Reidemeister</authors><title>Knot Theory</title><host>(1983)BCS Associates</host></reference><reference label="[19]"><authors>J. Takamatsu,T. Morita,K. Ogawara,H. Kimura,K. Ikeuchi</authors><title>Representation for knot-tying tasks</title><host>IEEE Trans. Robot.22 (1)(2006) pp.65-78</host></reference></references><footnote><note-para label="1">In fact, most actions in the example involve passing objects through holes: we pass our legs through the trousers sleeves, the button through the buttonhole, the belt through loops in the trousers, the belt tip through the belt buckle, and the buckle bolt through a hole in the belt.</note-para><note-para label="2">For simplicity, we do not consider linking tips from different strings, but this could also be perfectly possible to be defined within the formalism presented.</note-para><note-para label="3">We place an arrow head in each segment to remind the general direction of the string.</note-para><note-para label="4">This chain omits the initial and final crossings {a mathematical formula}Strb− and {a mathematical formula}Stre+ for brevity.</note-para><note-para label="5">We are assuming an ideal string that can be arbitrarily stretched. In the real world, the number of loops may be limited by the relative sizes (of the loop and the host string, the string length and its stretchability).</note-para><note-para label="6">http://www.theroboticschallenge.org/overview, accessed in Nov. 2015.</note-para></footnote></root>