<?xml version="1.0" encoding="UTF-8"?><root><url>https://www.sciencedirect.com/science/article/pii//S0004370215001381</url><title>Exploiting meta features for dependency parsing and part-of-speech tagging</title><authors>Wenliang Chen,Min Zhang,Yue Zhang,Xiangyu Duan</authors><abstract>In recent years, discriminative methods have achieved much progress in natural language processing tasks, such as parsing, part-of-speech tagging, and word segmentation. For these methods, conventional features in a relatively high dimensional feature space may suffer from sparseness and thus exhibit less discriminative power on unseen data. This article presents a learning framework of feature transformation, addressing the sparseness problem by transforming sparse conventional base features into less sparse high-level features (i.e. meta features) with the help of a large amount of automatically annotated data. The meta features are derived by bucketing similar base features according to the frequency in large data, and used together with base features in our final system. We apply the framework to part-of-speech tagging and dependency parsing. Experimental results show that our systems perform better than the baseline systems in both tasks on standard evaluation. For the dependency parsing task, our parsers achieve state-of-the-art accuracy on the Chinese data and comparable accuracy with the best known systems on the English data. Further analysis indicates that our proposed approach is effective in processing unseen data and features.</abstract><keywords>Dependency parsing;Natural language processing;Meta-features;Part-of-speech tagging;Semi-supervised approach</keywords><content><section label="1"><section-title>Introduction</section-title><paragraph>Discriminative methods have been highly successful in solving structured prediction tasks in natural language processing (NLP), such as parsing, part-of-speech tagging, and word segmentation [1], [2], [3], [4], [5], [6], [7], [8], [9], [10]. An important reason is that discriminative models accommodate rich features without constraints such as probabilistic independence assumptions between features. Taking dependency parsing as an example, recent advances in parsing accuracies have been driven by the incorporation of rich non-local features in discriminative models [4], [5], [6].</paragraph><paragraph>One drawback of rich and complex features, however, is that they can be sparse and rare in unseen test data. For example, a lexicalized feature, which contains a specific word in the training data, cannot be instantiated on out-of-vocabulary words in test data. Given a limited amount of manually annotated training data, it is even harder for the more complex bilexical or trilexical features, which contain more than one word, to be fully utilized in unknown test data.</paragraph><paragraph>Several methods have been proposed to address the sparseness issue by leveraging large-scale unannotated data. In particular, word clusters [11], [12] have been used as additional features in discriminative models to alleviate the sparseness of lexicalized features, leading to improved accuracies in named entity recognition [13] and dependency parsing [14]. Recently, word embeddings [15] have also been used as less-sparse word features to improve part-of-speech tagging [16], [17], named entity recognition [18], [19], and dependency parsing [20], leading to similar improvements compared with Brown clusters. Obtained from large-scale data, word clusters and embeddings effectively enlarge the vocabulary, allowing words out of the training data to be better handled at test time.</paragraph><paragraph>There has been work on reducing the sparseness of structures beyond words. In particular, Chen et al. [21] extract subtree structures from auto-parsed dependency trees, groups the subtrees into clusters by their frequencies and incorporates the resulting clusters into a dependency parser as less-sparse subtree features. The method leads to accuracy improvements that are comparable to the use of Brown word clusters. The same idea has been applied to word segmentation and pos-tagging by making less-sparse representations of word ngrams from automatically processed data [22]. Experiments show that the simple method gives significant improvements in accuracies.</paragraph><paragraph>We extend the idea above from task-specific structures to arbitrary features, obtaining less-sparse features by clustering feature instances from automatically annotated data. Specifically, the feature instances under each feature template are bucketed by their frequencies, and each bucket is taken as a cluster. The clusters contain information on structured feature templates, and statistical distributions of the structures over large automatically annotated data. They are used to form a set of less-sparse features, which we call meta features. Compared with task-specific clusters such as subtree features, meta features have two main advantages. First, they are general and task independent. As a result, the method of this article can be used for any structured prediction tasks. Second, they are relatively more comprehensive by covering all the feature templates in a discriminative model, which are designed to include the most important structured patterns for a task.</paragraph><paragraph>We apply meta features to two typical structured prediction tasks in NLP, namely dependency parsing and part-of-speech (POS) tagging. For the dependency parsing task, our method significantly outperforms the method of [21], achieving accuracies comparable to the best reported in the literature. For the POS tagging task, our method also perform better than strong baselines.</paragraph><paragraph>This article is a significant extension of a conference version [23], which focuses on the dependency parsing task. We reformulate the method as a general framework for structured prediction, and demonstrate the effectiveness by evaluation on POS tagging in addition to dependency parsing. We give more details of the method, and in-depth analysis of the results.</paragraph><paragraph>The rest of this article is organized as follows. Section 2 gives a overview of the learning framework for discriminative structured prediction. In Section 3 shows the application of the proposed framework to dependency parsing. In Section 4 shows the application of the framework to part-of-speech tagging. Section 3.4 and 4.4 describe the experiment settings and reports the experimental results of dependency parsing and part-of-speech tagging respectively. Section 5 discusses related work. Finally, in Section 6 we summarize the proposed approach.</paragraph></section><section label="2"><section-title>Learning framework of feature transformation</section-title><paragraph>As shown in Fig. 1, the learning framework consists of four steps: 1) Base training: training a baseline system using annotated data and base features; 2) Processing: using the baseline system to annotate a large amount of raw sentences and obtain auto-labeled data; 3) Feature bucketing: performing feature transformation from base features to meta features; 4) Final training: training a new system with both the base and meta features.</paragraph><paragraph>The key step of the framework is feature bucketing, in which we use a transformation function to group the base feature instances from automatically annotated data into clusters, and define a set of meta features based on the clusters. The feature transformation can be treated as a clustering problem that groups the features with similar properties into the same cluster. Different clustering methods can be used for bucketing similar base features. We use frequency-based bucketing, putting the base features that have similar frequency levels in automatically annotated data into the same bucket, and use the bucket to form meta features. The frequency-based bucketing assumes that the base feature instances with higher frequencies are relatively more reliable, inspired by the work of [24], in which different bucketing methods are well studied. The use of frequency bucketing to reduce sparseness has also been studied, mainly for smoothing n-gram language models in the field of Machine Learning [25], [26], [27], [28]. Based on the frequency-based bucketing method, we define different functions for feature transformation and different meta features for different tasks.</paragraph><paragraph>In the following sections, we apply the framework to dependency parsing and part-of-speech tagging.</paragraph></section><section label="3"><section-title>Case 1: Dependency parsing</section-title><section label="3.1"><section-title>Background of dependency parsing</section-title><paragraph>The task of dependency parsing is to assign head-dependent relations between the words in a sentence. Fig. 2 shows a simple example, where arcs indicate dependency relations, and “ROOT” is an artificial root token inserted at the beginning of the sentence which does not depend on any other token in the sentence. For example, the arc between “ate” and “fish” indicates a dependency, where “ate” is the head and “fish” is the dependent.</paragraph><paragraph>For dependency parsing, there are two main types of models [29]: graph-based models [8], [5] and transition-based models [9], [30]. We study graph-based parsing in this article, although the SSFT framework can be applied in both parsing models.</paragraph></section><section label="3.2"><section-title>Baseline parser</section-title><section label="3.2.1"><section-title>Graph-based parsing model</section-title><paragraph>Given an input sentence, the task of dependency parsing is to build a dependency tree. We define X as the set of possible input sentences, Y as the set of possible dependency trees, and {a mathematical formula}D=(x1,y1),…,(xi,yi),…,(xn,yn) as a training set where {a mathematical formula}xi∈X and {a mathematical formula}yi∈Y. A sentence is denoted by {a mathematical formula}x=(w0,w1,…,wi,…,wm), where {a mathematical formula}w0 is ROOT and does not depend on any other word and {a mathematical formula}wi refers to a word.</paragraph><paragraph>Denoting a dependency relation in tree y from word {a mathematical formula}wi to word {a mathematical formula}wj ({a mathematical formula}wi is the head and {a mathematical formula}wj is the dependent) as a ordered pair {a mathematical formula}(wi,wj)∈y, a graph {a mathematical formula}Gx consists of a set of nodes {a mathematical formula}Vx={w0,w1,…,wi,…,wm} and a set of arcs (edges) {a mathematical formula}Ex={(wi,wj)|i≠j,wi∈Vx,wj∈(Vx−w0)}. The parsing model of [8] is to search for the maximum spanning tree (MST) in the graph {a mathematical formula}Gx. Denoting the set of all the subgraphs of {a mathematical formula}Gx that are valid dependency trees [31] for sentence x as {a mathematical formula}Y(Gx), the score of a dependency tree {a mathematical formula}y∈Y(Gx) is the sum of the subgraph scores,{a mathematical formula} where g is a spanning subgraph of y, which can be a single arc or adjacent arcs. A discriminative model scores each subgraph g using a linear equation,{a mathematical formula} where {a mathematical formula}f(x,g) is a high-dimensional feature vector based on features defined over g and x and w refers to the weights for the features.</paragraph><paragraph>The maximum spanning tree {a mathematical formula}y⁎ is the highest scoring tree in {a mathematical formula}Y(Gx). Given an input sentence x, the task of the decoding algorithms is to find {a mathematical formula}y⁎, where{a mathematical formula}</paragraph><paragraph>We use the decoding algorithm proposed by [5], which is a second-order CKY-style algorithm [32], and feature weights w are learned during training using the Margin Infused Relaxed Algorithm (MIRA) [33], [3].</paragraph></section><section label="3.2.2"><section-title>Base features</section-title><paragraph>Previous studies have defined different sets of features for the graph-based parsing models, such as the first-order features defined in [8], the second-order parent-siblings features defined in [3], and the second-order parent-child-grandchild features defined in [5]. Bohnet [7] explorers a richer set of features than the above sets. Based on the above work, we defined a set of base feature templates listed in Table 1, where h, d refer to the head, the dependent respectively, c refers to d's sibling or child, +1 (−1) refers to the next (previous) word, w and p refer to the surface word and part-of-speech tag respectively, {a mathematical formula}dir(h,d) is the direction of the dependency relation between h and d, {a mathematical formula}[wp] refers to w or p, and {a mathematical formula}dir(h,d,c) is the directions of the relation among h, d, and c. For example, for the words {a mathematical formula}h=ate, {a mathematical formula}d=with, and {a mathematical formula}c=fish in Fig. 2, {a mathematical formula}dir(h,d,c)=SIB_RIGHT_RIGHT, where SIB refers to the parent-sibling structure and RIGHT refers to the right direction.</paragraph></section><section label="3.2.3"><section-title>Baseline parser</section-title><paragraph>We train a baseline parser with the base features in Table 1. Defining {a mathematical formula}fb(x,g) as the base features and {a mathematical formula}wb as the corresponding weights, the scoring function is,{a mathematical formula}</paragraph></section></section><section label="3.3"><section-title>Feature transformation</section-title><section label="3.3.1"><section-title>Template-based transformation function</section-title><paragraph>The baseline parser is used to process large scale raw text automatically, and the output is used for feature transformation. We define a template-based function for grouping the base features into clusters and use discrete values to represent the clusters.</paragraph><paragraph>Denote the set of base feature templates with {a mathematical formula}TB. For each template {a mathematical formula}Ti∈TB, a set of base features {a mathematical formula}Fi is generated from the set of automatically annotated dependency trees. We add the features to a list {a mathematical formula}L(Ti) and count their frequencies in the auto-parsed data. The collected features in {a mathematical formula}L(Ti) are sorted in decreasing order of frequencies. The transformation function for a base feature {a mathematical formula}fb generated from {a mathematical formula}Ti is defined as follows,{a mathematical formula} where {a mathematical formula}R(fb) is the position index of {a mathematical formula}fb in the sorted list {a mathematical formula}L(Ti), “Others” is defined for the base features that are not included in the list, and TOP10 and TOP30 refer to the position numbers of top 10% and top 30%, respectively. Following the work of [24], we also use the numbers, 10% and 30%, and the number of categories in our systems. The preliminary experiments on our development sets show that the setting works very well. Note that {a mathematical formula}OTi is defined for the features that are not in the list. But in our final systems, we do not use {a mathematical formula}OTi.{sup:1} Therefore, for a feature generated from the template {a mathematical formula}Ti, we have three possible values: {a mathematical formula}HTi, {a mathematical formula}MTi, and {a mathematical formula}LTi. In total, we have {a mathematical formula}3×N(TB) possible values for all the base features, where {a mathematical formula}N(TB) refers to the number of the base feature templates, which is usually small. We can obtain the mapped values of all the collected features via the transformation function.</paragraph></section><section label="3.3.2"><section-title>Meta feature templates</section-title><paragraph>Based on the mapped values, we define meta feature templates in {a mathematical formula}FM for dependency parsing. The meta feature templates are listed in Table 2, where {a mathematical formula}fb is a base feature of {a mathematical formula}FB, {a mathematical formula}hp refers to the part-of-speech tag of the head and {a mathematical formula}hw refers to the surface word of the head. Of the table, the first template uses the mapped value only, the second and third templates combine the value with the head information. We remove any feature related to the surface form if the word is not one of the Top-K{sup:2} most frequent words in the training data. This method can reduce the size of the feature sets. The number of the meta features is relatively small. It is possible to have {a mathematical formula}3×N(TB) for the first type, {a mathematical formula}3×N(TB)×N(POS) for the second type, and {a mathematical formula}3×N(TB)×N(WORD) for the third one, where {a mathematical formula}N(POS) refers to the number of part-of-speech tags, {a mathematical formula}N(WORD) refers to the number of words. The empirical statistics of the feature sizes at Section 3.4.2 show that the number of meta features is only 1.2% of base features.</paragraph></section><section label="3.3.3"><section-title>Generating meta features</section-title><paragraph>We use an example to demonstrate how to generate the meta features based on the meta feature templates. Consider the sentence “I ate the meat with a fork.” Fig. 3 shows the example for generating the meta features for the relation among “ate”, “meat”, and “with”, where “ate” is the head, “meat” is the dependent, and “with” is the closest left sibling of “meat”.</paragraph><paragraph>We demonstrate the generating procedure using the template {a mathematical formula}Tk= “{a mathematical formula}hw,dw,cw,dir(h,d,c)” (the last template of Table 1-(b)), which contains the surface forms of the head, the dependent, its sibling, and the directions of the dependencies among h, d, and c. A base feature can be “ate, meat, with, SIB_ RIGHT_RIGHT”, where “SIB_RIGHT_RIGHT” refers to the parent-siblings structure with the right direction. In the auto-parsed data, this feature occurs 200 times and ranks between TOP10 and TOP30. According to the mapping function, we obtain the mapped value {a mathematical formula}MTk. Finally, we have the three meta features “{a mathematical formula}[MTk]”, “{a mathematical formula}[MTk],VV”, and “{a mathematical formula}[MTk],ate”, where VV is the part-of-speech tag of the word “ate”.</paragraph></section><section label="3.3.4"><section-title>Meta parser</section-title><paragraph>We combine the base features with the meta features by a new scoring function,{a mathematical formula} where {a mathematical formula}fb(x,g) refers to the base features, {a mathematical formula}fm(x,g) refers to the meta features, and {a mathematical formula}wb and {a mathematical formula}wm are their corresponding weights respectively.</paragraph><paragraph>We use the same decoding algorithm in the new parser as in the Baseline parser. The new parser is referred to as the meta parser.</paragraph></section></section><section label="3.4"><section-title>Experiments</section-title><paragraph>We evaluate the effect of the meta features for the graph-based parsers on English and Chinese data.</paragraph><section label="3.4.1"><section-title>Experimental settings</section-title><paragraph>In our experiments, we use the Penn Treebank (PTB) [34] for English and the Chinese Treebank version 5.1 (CTB5) [35] for Chinese. Tool “Penn2Malt”{sup:3} is used to convert the data into dependency structures with the English head rules of [9] and the Chinese head rules of [36]. We follow the standard data splits as shown in Table 3. Following the work of [14], we use a tagger trained on training data to provide part-of-speech (POS) tags for the development and test sets, and use 10-way jackknifing to generate part-of-speech tags for the training set. We use the MXPOST [37] tagger for English and the CRF-based tagger for Chinese. We use gold standard segmentation in the CTB5. The data partition of Chinese is chosen to match previous work [38], [39], [40].</paragraph><paragraph>For the unannotated data in English, we use the Brown WSJ corpus [41] containing about 43 million words.{sup:4} We use the MXPOST tagger trained on the training data to assign part-of-speech tags and use the Baseline parser to process the sentences of the Brown corpus. For the unannotated data in Chinese, we use the Xinhua portion of Chinese Gigaword{sup:5} Version 2.0 (LDC2009T14) [42], which has approximately 311 million words. We use the MMA system [43] trained on the training data to perform word segmentation and POS tagging, and use the Baseline parser to parse the sentences in the Gigaword data.</paragraph><paragraph>For collecting base feature instances, we remove the features which occur only once in the English data and less than four times in the Chinese data. The feature occurrences of one time and four times are based on the development data performance.</paragraph><paragraph>We measure the parser quality by the unlabeled attachment score (UAS), i.e., the percentage of tokens (excluding all punctuation tokens) with the correct HEAD. We also report the scores on complete dependency trees evaluation (COMP).</paragraph></section><section label="3.4.2"><section-title>Feature selection on development sets</section-title><paragraph>We evaluate the parsers with different settings on the development sets to select the meta features.</paragraph><paragraph>1) Different models vs meta features</paragraph><paragraph>We investigate the effect of different types of meta features for the models trained on different sizes of training data on English. There are too many base feature templates to test one by one, and we divide the templates into several categories. In Table 1, some templates are related to only part-of-speech tags (P), some are related to only surface words (W), and the others contain both part-of-speech tags and surfaces (M). Table 4 shows the categories, where numbers N[1–4] refer to the numbers of words involved in templates. For example, the templates of N3WM are related to three words and contain the templates of W and M. Based on different categories of base templates, we have different sets of meta features.{sup:6}</paragraph><paragraph>We randomly select 1% and 10% of the sentences, respectively, from the training data and trained the POS taggers and Baseline parsers on these small training data and use them to process the unannotated data. Then, we generate the meta features based on the newly auto-parsed data. The meta parsers are trained on the different subsets of the training data with different sets of meta features. Finally, we have three meta parsers: MP1, MP10, MPFULL, which are trained on 1%, 10% and 100% of the training data.</paragraph><paragraph>Table 5 shows the results. From the table, we find that the meta features that are related to only part-of-speech tags do not always help, while the ones related to the surface words are very useful. This suggest that the more sparse the base features are, the more effective the corresponding meta features are. Thus, we build the final parsers by adding the meta features of N1WM, N2WM, N3WM, and N4WM, marked by {sup:♡} in Table 1. The results show that OURS achieve better performance than the systems with individual sets of meta features.</paragraph><paragraph>2) Different meta feature types</paragraph><paragraph>There are three types of meta feature templates, as shown in Table 2. Here, the results of the parsers with different settings are shown in Table 6, where CORE refers to the first type of meta features, WithPOS refers to the second, and WithWORD refers to the third. The results show that with all the types of meta features, the parser (OURS) achieve the best accuracy.</paragraph><paragraph>Then, we count the numbers of the meta features based on Table 1, where {sup:♡} refers to the templates used in OURS. The detail of generating meta features is as follows: 1) For each first-order template, we can have 3 possible values (described in Section 3.3.1). Thus, we have 30 ({a mathematical formula}=10×3) meta features for first-order. 2) For each second-order template, we consider the types of structures, shown in Fig. 4, where “SIB” refers to the parent-siblings and “GC” refers to the parent-child-grandchild structures. In the tree structures, c can be a word or empty node. Thus, we have 468 ({a mathematical formula}=13×6×2×3) meta features for the 13 second-order templates. Totally, we have 498 meta features for CORE. Then, these are combined with part-of-speech tags and word surfaces. Finally, only 327,864 (or 1.2%) features are added into OURS. Thus, we use all the three types of meta features in our final meta parsers.</paragraph><paragraph>We also record the speed of Baseline and OURS, as shown in Table 6. The results show that OURS is slightly slower (20.88%) than Baseline.</paragraph></section><section label="3.4.3"><section-title>Main results on test sets</section-title><paragraph>The results on English are shown in Table 7, where MetaParser refers to the meta parser. We find that the meta parser outperforms the baseline with an absolute improvement of 1.01 points (UAS). The improvement is significant by McNemar's Test ({a mathematical formula}p&lt;10−7).</paragraph><paragraph>The results on Chinese are shown in Table 8. As in the experiment on English, the meta parser outperforms the baseline. We obtain an absolute improvement of 2.07 points (UAS). The improvement is significant by McNemar's Test ({a mathematical formula}p&lt;10−8).</paragraph></section><section label="3.4.4"><section-title>Different sizes of unannotated data</section-title><paragraph>Here, we consider the improvement relative to the sizes of the unannotated data used to generate the meta features. We randomly select the 0.1%, 1%, and 10% of the sentences from the full data. Table 9 shows the results, where P0.1, P1, and P10 correspond to 0.1%, 1%, and 10% respectively. From the table, we find that the parsers obtain more benefits as we use more raw sentences. We also try generating the meta features from the training data only, shown as TrainData in Table 9. However, the results shows that the parsers perform worse than the baselines. The reason might be that only the known base features are included in the training data.</paragraph></section><section label="3.4.5"><section-title>Comparison with previous work</section-title><paragraph>Table 10 shows the performance of the previous systems that are compared on English. We add the cluster-based features of [14]{sup:7} to our baseline system listed as “Baseline+CLU” in the table. The results show that our meta parser outperforms most of the previous systems and obtain the comparable accuracy with the best result of Suzuki11 [44] which combine the clustering-based word representations of [14] and a condensed feature representation.</paragraph><paragraph>Table 11 shows the comparative results on Chinese. We add the cluster-based features of [14]{sup:8} to our baseline system listed as “Baseline+CLU” in the table. The reported scores on this data are produced by the supervised learning methods and our Baseline (supervised) parser provides a comparable accuracy. We find that our meta parser achieves state-of-the-art accuracy and performs significantly better than the previous scores. Note that we use the auto-assigned POS tags in the test set to match previous studies.</paragraph></section><section label="3.4.6"><section-title>Domain adaptation</section-title><paragraph>We use the data from the shared task of SANCL-2012{sup:9} to perform out-of-domain evaluation. Note that we do not perform text normalization in our experiments, which contributes a lot in the evaluated systems in the shared task. There are five domains in the task: answers, emails, newsgroups, reviews, and weblogs. The participants in the shared task are provided with five sets of unlabeled sentences (about 27,000 to 2,000,000 per domain), shown in Table 12. Two settings are used in the experiments. The first one is that we use the induced model (used in Section 3.4.3) to parse the out-of-domain test data sets, shown as “MetaParser” in Table 12. The second is that we use the out-of-domain unlabeled sentences to generate new meta features and then retrain new parsers, shown as “adMetaParser” in Table 12. From the table, we find that MetaParser and adMetaParser perform better than Baseline. AdMetaParser provided the best scores on 4 of 5 data sets. Because there is only 27,274 unlabeled sentences for the answers domain, it is reasonable that adMetaParser only provides slightly better results than Baseline. We also find that the more unlabeled sentences we provide, the more benefits we obtain. Note that compared with in-domain evaluation, out-of-domain evaluation here has less unlabeled sentences.</paragraph></section><section label="3.4.7"><section-title>Analysis</section-title><paragraph>Here, we analyze the effect of the meta features on the data sparseness problem.</paragraph><paragraph>We first check the effect of unknown features on the parsing accuracy. We calculate the number of unknown features in each sentence and compute the average number per word. The average numbers are used to eliminate the influence of varied sentence sizes. We sort the test sentences in increasing orders of these average numbers, and divide equally into five bins. BIN 1 is assigned the sentences with the smallest numbers and BIN 5 is with the largest ones. Fig. 5 shows the average accuracy scores of the Baseline parsers against to the bins. From the figure, we find that for both two languages the Baseline parsers perform worse while the sentences contain more unknown features.</paragraph><paragraph>Then, we investigate the effect of the meta features. We calculate the average number of active meta features per word that are transformed from the unknown features for each sentence. We sort the sentences in increasing order of the average numbers of active meta features and divide them into five bins. Fig. 6, Fig. 7 show the results, where “Better” is for the sentences where the meta parsers provide better results than the baselines and “Worse” is for those where the meta parsers provide worse results. We find that the gap between “Better” and “Worse” becomes larger while the sentences contain more active meta features for the unknown features. The gap means performance improvement. This indicates that the meta features are very effective in processing the unknown features.</paragraph></section></section></section><section label="4"><section-title>Case 2: POS tagging</section-title><section label="4.1"><section-title>The tagging model</section-title><paragraph>Given an input sentence, the task of POS tagging is to assign a POS tag to each word in the sentence. Define X as the set of input sentences, Y as the set of possible tag sequences, and {a mathematical formula}D=(x1,y1),…,(xi,yi),…,(xn,yn) as a training set, where {a mathematical formula}xi∈X and {a mathematical formula}yi∈Y. A sentence is denoted by {a mathematical formula}x=(w1,…,wi,…,wm), where {a mathematical formula}wi refers to the ith word. Let {a mathematical formula}y=(t1,…,ti,…,tm) be a POS tag sequence for x, and {a mathematical formula}Y(x) be the set of all the possible tag sequences for x, where {a mathematical formula}ti is the tag of {a mathematical formula}wi.</paragraph><paragraph>A linear model to compute the score of a tag sequence {a mathematical formula}y∈Y(x) is defined as,{a mathematical formula} where {a mathematical formula}f(x,y) is a high-dimensional feature vector based on a set of predefined feature templates over y and x, and w is the weight vector for the features. For word {a mathematical formula}wi in the sentence x, the set of features {a mathematical formula}fi(x,ti,ti−1) considers the combination of the surrounding context and the possible tag of {a mathematical formula}wi.</paragraph><paragraph>The task of the tagging algorithms for a given sentence x is to find {a mathematical formula}y⁎,{a mathematical formula}</paragraph><paragraph>We use the Viterbi algorithm to obtain the optimal tag sequence. The weights of the features are trained by the averaged perceptron algorithm [50].</paragraph><section label="4.1.1"><section-title>Base features</section-title><paragraph>We study part-of-speech tagging for both English and Chinese, following previous studies [51], [52], [37] for the definition of the feature templates. For English, we adopt the feature templates used in [51] as listed in Table 13, where ‘#’ refers the number of template types in each line, wc refers to a word class such as capitalization, digits, and punctuation, {a mathematical formula}Nwi is the number of characters of {a mathematical formula}wi, prefix({a mathematical formula}wi,k) refers to the first k characters of {a mathematical formula}wi, and suffix({a mathematical formula}wi,k) refers to the last k characters of {a mathematical formula}wi. The templates consider the surrounding context of {a mathematical formula}wi and tags {a mathematical formula}ti,ti−1, and there are 46 types of the templates in the table in total.</paragraph><paragraph>Here, we use an example to show how to generate the base features for {a mathematical formula}wi based on the five templates in the first line in the table. Suppose that we have sentence “I got a new monitor yesterday.” and {a mathematical formula}wi is “monitor” that is tagged as “NN”. Fig. 8 shows the example of generating base features. For each template, we generate the corresponding base feature. Finally, we obtain five features, which are “T:NN, W_2:a”, “T:NN, W_1:new”, “T:NN, W0:monitor”, “T:NN, W1:yesterday”, and “T:NN, W2:.”.</paragraph><paragraph>For Chinese, we adopt the templates proposed by [52] and [37]. Table 14 shows the templates, where {a mathematical formula}ci,k refers to the kth Chinese character of {a mathematical formula}wi, while {a mathematical formula}ci,0 and {a mathematical formula}ci,−1 refer to the first and last character, respectively, {a mathematical formula}Nwi is the number of Chinese characters in {a mathematical formula}wi, prefix({a mathematical formula}wi,k) refers to the first k characters of {a mathematical formula}wi, and suffix({a mathematical formula}wi,k) refers to the last k characters of {a mathematical formula}wi. In total, there are 21 types of the base feature templates for Chinese.</paragraph><paragraph>With the base features, the score function of the base tagger is,{a mathematical formula} where {a mathematical formula}fb is the base features and {a mathematical formula}wb is the corresponding weights.</paragraph></section></section><section label="4.2"><section-title>Meta tagger</section-title><paragraph>A meta tagger is implemented by following the learning framework. Firstly, we perform word segmentation (if applicable) and POS tagging for the unlabeled data using the baseline tagger. Subsequently, we collect base feature instances from the auto-processed data and transform them into meta features. Finally, a new tagger is trained with the base features and the meta features on the training data.</paragraph><section label="4.2.1"><section-title>Feature bucketing</section-title><paragraph>Fig. 9 shows an example for base feature instantiation using the sentences “He bought the monitors” and “He monitors the kids”. For each word in the sentences, we generate the base features based on the templates in Table 13. Fig. 9-(a) shows the tagging results, and Fig. 9-(b) shows some generated features when the current word {a mathematical formula}wi is “monitors” which can be tagged as “NNS” and “VBZ” in different sentences. For example, in sentence “He bought the monitors.”, we have “T:NNS W_1:the”, “T:NNS W_1:the W0:monitors”, and other features. In the final step shown in Fig. 9-(c), we merge the same features and take their counts.</paragraph><paragraph>As for dependency parsing, we perform feature transformation by considering the frequencies of the base features. However, a slightly different strategy is taken for the bucketing of feature instances.{sup:10} The number of POS tags is often more than 30 (36 tags in PTB and 33 tags in CTB), much larger than the number of directions for dependency parsing (only LEFT and RIGHT). This makes us to divide one base feature into two parts: feature tag and feature context. The feature tag is the current tag {a mathematical formula}ti and the feature context is the remaining content of a feature instance. For example, in feature “T:NNS W_1:the”, the feature tag is “T:NNS” and the feature context is “W_1:the”. The preferences of the base features is measured by ranking the co-occurrence frequencies between the feature tags and the feature contexts. The basic idea behind is that if a feature context often co-occurs with a feature tag, there is a clue to assign the tag to the current word under this feature context.</paragraph><paragraph>We put the features that have the same feature context into one list and consider two factors for computing preferences. The first factor considers the ranking positions in each list. The features are sorted in decreasing order and mapped to different values. Suppose that we have base feature {a mathematical formula}fb∈L(Ci), where {a mathematical formula}Ci is the feature context of {a mathematical formula}fb and {a mathematical formula}L(Ci) is the list of {a mathematical formula}Ci. Then {a mathematical formula}fb is mapped by the following function,{a mathematical formula}</paragraph><paragraph>The second factor considers the size of the list {a mathematical formula}L(Ci). Then {a mathematical formula}fb is mapped by the following function,{a mathematical formula} where {a mathematical formula}|L(Ci)| is the size of {a mathematical formula}L(Ci).</paragraph><paragraph>We represent the feature preference as a string that concatenates the two factors with the index {a mathematical formula}Idxfb of the template from which {a mathematical formula}fb is generated. The preference {a mathematical formula}Pfb is “{a mathematical formula}Φ(fb)Ψ(fb)Idxfb”.{sup:11} Note that TOPO and NTO are defined for the features that are not in the list. But in our final systems, we do not use them.{sup:12}</paragraph><paragraph>Compared with the mapping function of feature transformation for dependency parsing, the function for part-of-speech tagging is different. However, they share the similar idea that we rank the base features according to the frequencies and map to discrete values.</paragraph></section><section label="4.2.2"><section-title>Meta features</section-title><paragraph>We define meta feature templates based on the feature buckets. The feature templates are listed in Table 15, where {a mathematical formula}fb is a base feature. The first template uses the preference value itself, while the second and third templates combine the value with tag {a mathematical formula}ti and word surface {a mathematical formula}wi. The number of the new features is small. The number of the possible values of {a mathematical formula}Pfb is at most {a mathematical formula}6×N(TB), where {a mathematical formula}N(TB) refers to the number of the base feature templates that is small. Thus it is possible to have {a mathematical formula}6×N(TB) for the first type, {a mathematical formula}6×N(TB)×N(POS) for the second type, and {a mathematical formula}6×N(TB)×N(WORD)×N(POS) for the third one, where {a mathematical formula}N(POS) refers to the number of part-of-speech tags and {a mathematical formula}N(WORD) refers to the number of words. We remove any meta feature related to word form if the word is not one of the Top-K{sup:13} most frequent words in the training data. This method can further reduce the size of the feature sets.</paragraph></section><section label="4.2.3"><section-title>Meta tagger</section-title><paragraph>Using the meta features based on the templates defined in Table 15, the score of a tag sequence {a mathematical formula}y∈Y(x) is,{a mathematical formula} where {a mathematical formula}fm(x,y) is a feature vector which is based on the meta features, and {a mathematical formula}wm is the corresponding weights.</paragraph></section></section><section label="4.3"><section-title>Feature selection</section-title><paragraph>According to the types of the base feature templates, the meta features are grouped into different sets. There are 46 types of the base feature templates for English (Table 13) and 21 for Chinese (Table 14). Although the numbers are small, the number of possible combinations is large. How to choose the effective features is an important problem. Here, we propose a simple but effective algorithm to select the features. Table 16 shows the algorithm. The input of the algorithm is base features {a mathematical formula}Fb and meta features {a mathematical formula}Fm={F1,…,Fi,…,FNT}, where {a mathematical formula}Fi refers to the set generated from the ith base feature template, and the output is the selected features. The procedure is listed as follows: 1) Evaluate feature set {a mathematical formula}Fi∈Fm. We combine {a mathematical formula}Fb with {a mathematical formula}Fi and train a tagger with them. The tagger is evaluated on the development data set and we get the accuracy score {a mathematical formula}si. 2) Sort the feature sets according to the evaluation results. 3) Add the feature sets one by one until the performance stops increasing.</paragraph></section><section label="4.4"><section-title>Experiments</section-title><paragraph>We evaluate the effect of the meta features for the POS tagging model and conduct the experiments on English and Chinese data.</paragraph><section label="4.4.1"><section-title>Data sets</section-title><paragraph>For English, the Penn Treebank (PTB) [34] is used in our experiments. We create a standard data split: sections 0–18 is used for training, sections 19–21 for development, and sections 22–24 for testing. For the unlabeled data, we use the Brown WSJ corpus [41]. We use the Baseline Tagger to process the sentences of the Brown corpus.</paragraph><paragraph>For Chinese, the Chinese Treebank version 5 (CTB5) is used in the experiments. There are two widely used data splits for CTB5 [53], [40], [54]: 1) CTB5D [38]: files 001–815 and files 1001–1136 for training, files 816–885 and 1137–1147 for testing, and files 886–931 and 1148–1151 for development. 2) CTB5J [54]: files 1–260, 400–931, and 1001–1151 for training, files 271–300 for testing, and files 301–325 for development. For the unlabeled data, we use the XIN_CMN portion of Chinese Gigaword Version 2.0 (LDC2009T14) [42], which has around 311 million words whose segmentation and POS tags are given. We discard the annotations due to the differences in annotation policy between CTB and the Gigaword data. MMA [43] is used to train on the training data to perform word segmentation and the Baseline Tagger is used to process all the sentences in the unlabeled data.</paragraph><paragraph>To reduce the size of the collected base features, we remove the entries which occur only once in the English data and less than four times in the Chinese data. We choose the numbers based on the initial results on the development sets.</paragraph><paragraph>We measure the tagger quality by the accuracy, i.e. the percentage of tokens with the correct tag. We also use the error reduction to show the relative improvements.</paragraph></section><section label="4.4.2"><section-title>Results on development sets</section-title><paragraph>In this section, we select the best feature combination via tuning on the development sets. The algorithm in Section 4.3 is applied to select the feature types. Table 17, Table 18 show the tagging results with different settings on the development data sets. We list the results with the most two effective feature types in the tables. For English, E1 is the tagger with the most effective type {a mathematical formula}&lt;ti,w0&gt; and E2 is the one with the second most effective type {a mathematical formula}&lt;ti,w1&gt;. For Chinese, the most two effective types are {a mathematical formula}&lt;ti,w0&gt; and {a mathematical formula}&lt;ti,ci,−1&gt;. For both English and Chinese, the most effective feature type is the one based on template {a mathematical formula}&lt;ti,w0&gt;. We build the final taggers (OURS) by adding the meta features selected by the algorithm. The results indicate that OURS achieve higher accuracy than the Baseline Taggers for both English and Chinese.</paragraph></section><section label="4.4.3"><section-title>Main results</section-title><paragraph>In this section, we evaluate the final taggers (OURS) on the test data for English and Chinese and compare our results with the state-of-the-art results in the previous studies.</paragraph><paragraph>For English, the results are shown in Table 19, where “err.red” refers to error reduction, “-sup” refers to the results of the supervised methods in the previous studies, and “-semi” refers to the results of the semi-supervised methods.{sup:14} From the table, we find that the final tagger outperforms the Baseline Tagger and the error reduction is 5.01%. The improvement is significant by McNemar's Test ({a mathematical formula}p&lt;0.001). Compared with the previous work, OURS performs better than the supervised methods of [56], [51] and provides the comparable accuracy with the semi-supervised systems of [56], [51], [55], [57]. As we mentioned before, Søgaard [56] and Spoustová et al. [55] select new sentences as labeled data with the help of more than one taggers. Suzuki and Isozaki [51] use 1G-word unlabeled data that is much larger than the Brown corpus we use. Søgaard [57] combines a unsupervised POS tagger with the semi-supervised condensed nearest neighbor algorithm and achieves the best reported result. Compared with theirs, our approach is much simpler. We believe that the performance of our tagger can be further enhanced by integrating their methods with our approach.</paragraph><paragraph>For Chinese, the results are listed in Table 20, where the abbreviations used are the same as those in Table 19. The results indicate that the final tagger outperforms the Baseline Tagger and the error reduction was 4.89% on CTB5D and 4.87% on CTB5J. The improvement is significant by McNemar's Test ({a mathematical formula}p&lt;0.001). Compared with the previous work, OURS provides better results than the supervised methods{sup:15} of [53] and [40].</paragraph></section><section label="4.4.4"><section-title>Feature sizes and speed</section-title><paragraph>We check the sizes of the added meta features and the speed in the testing stage. Table 21 shows the feature sizes and the testing speed of the Baseline taggers and OURS. From the table, we find that only a small size of the new features are added and the speed slows down a little bit (13.18% for English and 5.22% for Chinese). The feature size only increases by 0.16% for English and 0.15% for Chinese. Note that we train the Baseline tagger and our tagger with different feature sets on the same training data. The approaches of [56] and [55] enlarge the training data and result in slow training speed.</paragraph></section></section></section><section label="5"><section-title>Related work</section-title><paragraph>Previous work on using large scale unannotated text to improve structured prediction tasks can be classified into two main categories. The first category of methods collects statistical information from raw text, and use them as features to enhance a baseline model. The second category of methods first uses a baseline model to process raw texts, and then collect statistical information from the automatically processed results. Our method described in this article belongs to the second one.</paragraph><section label="5.1"><section-title>Information from raw data</section-title><paragraph>Typical information collected from raw text include word clusters [14], embeddings [18], n-grams [58], word co-occurrence patterns [59], selectional preference [48], mutual information [60], and crossing entropy [61]. Such information has been used to improve structured prediction tasks such as parsing, named entity recognition and word segmentation. The advantage of this category of methods is that they only rely on raw data that is usually less noisy than the auto-processed data. Moreover, it is easy to be used in different tasks using the same information, such as word clusters for parsing and named entity recognition [14], [13]. However, most methods in this category only learn the relations between words.</paragraph></section><section label="5.2"><section-title>Information from auto-processed data</section-title><paragraph>More complex information can be collected from automatically processed data, although statistical errors exist in such data. This category can be further divided into two types: much previous work in this category uses the whole auto-processed sentences as newly-labeled data to re-train models, while others learn information from partial sentences and represent the information as additional features to the systems.</paragraph><paragraph>1) Using whole sentences: The line of methods that exploits automatically processed data is connected to self-training [62], which uses automatically annotated data as additional training examples, co-training [63], which filters the additional training examples by agreement between the baseline methods, and tri-training [64], which filters the additional training examples by voting three baseline models. Different from the above methods, our method collects statistical information from automatically processed data, but do not use the whole auto-processed sentences as additional training data. The effect of noise in automatic analysis can be reduced by frequency-based bucketing of feature instances.</paragraph><paragraph>2) Using partial structures: Our method belongs to this type. In our method, we transform the base features, which are partial structures from sentences, into the meta features. Similar in spirit to our method, Chang and Han [65] collects {a mathematical formula}χ2 information to improve segmentation, Want et al. [22] collect n-gram information to improve segmentation and POS tagging, Mirroshandel et al. [66] collect lexical affinities to improve dependency parsing, and Chen et al. [21], [24] collect sub-tree distributions to improve dependency parsing. The previous methods in [21], [24] represent features on bigram and trigram subtrees, while our method represents meta features on any base features defined over arbitrary structures. Our method here is more general and the meta features used in our method can represent more complex structures. In addition, our method is easy to be applied to a new task, such as the POS tagging task demonstrated in this article. The meta parser outperforms the parsers of [21], [24]. In addition to the types of statistics above, automatically processed data have also been used to train simple sub-models, which are used as features to enhance a base model trained on annotated data [67], [51]. The use of simple sub-models can also be regarded as a type of statistics. The advantage of using statistics as additional features is that they address noise in automatically processed data.</paragraph></section></section><section label="6"><section-title>Conclusion</section-title><paragraph>In this article, we have presented a simple yet empirically highly effective framework of training discriminative models. The main idea is to reduce the sparseness of features by frequency bucketing over large-scale automatically processed data, and defining meta features from the resulting feature clusters. When applied to dependency parsing and part-of-speech tagging, the proposed approach significantly improves the accuracies. In the dependency parsing task, the meta parser achieves comparable accuracy with the best known parsers on the English data and the best accuracy on the Chinese data so far. In the part-of-speech tagging task, our tagger provided better results than the state-of-the-art Baseline systems by about 5% error reduction when tested on both English and Chinese data. Further analysis indicate that the meta features are very effective in processing the unknown features.</paragraph><paragraph>For future work, there are several ways in which this research could be extended. First, we plan to experiment with alternative clustering algorithms for feature transformation in the current tasks. Second, we plan to use larger raw data to perform feature transformation. Third, we plan to combine other semi-supervised methods, such as the approach of [44], with ours to enhance our parsers. Finally, we could apply the framework to other NLP tasks (for example constituency parsing and NER).</paragraph><section-title>Acknowledgements</section-title></section></content><acknowledgements><paragraph>Wenliang Chen, Min Zhang, and Xiangyu Duan were supported by the National Natural Science Foundation of China (Grant No. 61572338, 61432013, and 61525205) and Yue Zhang was supported by Singapore MOE grant 2012-T2-2-163. This work was partially supported by Collaborative Innovation Center of Novel Software Technology and Industrialization. Corresponding author is Min Zhang. We would also thank the anonymous reviewers for their detailed comments, which have helped us to improve the quality of this work.</paragraph></acknowledgements><references><reference label="[1]"><authors>K. Toutanova,D. Klein,C.D. Manning,Y. Singer</authors><title>Feature-rich part-of-speech tagging with a cyclic dependency network</title><host>Proceedings of NAACL2003(2003)</host></reference><reference label="[2]"><authors>L. Shen,G. Satta,A. Joshi</authors><title>Guided learning for bidirectional sequence classification</title><host>Proceedings of the 45th Annual Meeting of the Association of Computational LinguisticsPrague, Czech Republic(2007)Association for Computational Linguistics pp.760-767</host><host>http://www.aclweb.org/anthology/P07-1096</host></reference><reference label="[3]"><authors>R. McDonald,F. Pereira</authors><title>Online learning of approximate dependency parsing algorithms</title><host>Proceedings of EACL 2006(2006) pp.81-88</host></reference><reference label="[4]"><authors>Y. Zhang,J. Nivre</authors><title>Transition-based dependency parsing with rich non-local features</title><host>Proceedings of ACL-HLT2011Portland, Oregon, USA(2011)Association for Computational Linguistics pp.188-193</host><host>http://www.aclweb.org/anthology/P11-2033</host></reference><reference label="[5]"><authors>X. Carreras</authors><title>Experiments with a higher-order projective dependency parser</title><host>Proceedings of the CoNLL Shared Task Session of EMNLP-CoNLL 2007Prague, Czech Republic(2007)Association for Computational Linguistics pp.957-961</host></reference><reference label="[6]"><authors>T. Koo,M. Collins</authors><title>Efficient third-order dependency parsers</title><host>Proceedings of ACL 2010Uppsala, Sweden(2010)Association for Computational Linguistics pp.1-11</host></reference><reference label="[7]"><authors>B. Bohnet</authors><title>Top accuracy and fast dependency parsing is not a contradiction</title><host>Proceedings of the 23rd International Conference on Computational Linguistics (Coling 2010)Beijing, China(2010)Coling 2010 Organizing Committee pp.89-97</host><host>http://www.aclweb.org/anthology/C10-1011</host></reference><reference label="[8]"><authors>R. McDonald,K. Crammer,F. Pereira</authors><title>Online large-margin training of dependency parsers</title><host>Proceedings of ACL 2005Association for Computational Linguistics(2005) pp.91-98</host></reference><reference label="[9]"><authors>H. Yamada,Y. Matsumoto</authors><title>Statistical dependency analysis with support vector machines</title><host>Proceedings of IWPT 2003(2003) pp.195-206</host></reference><reference label="[10]"><authors>J. Nivre,M. Scholz</authors><title>Deterministic dependency parsing of English text</title><host>Proc. of the 20th Intern. Conf. on Computational Linguistics (COLING)(2004) pp.64-70</host></reference><reference label="[11]"><authors>P.F. Brown,P.V. deSouza,R.L. Mercer,T.J. Watson,V.J.D. Pietra,J.C. Lai</authors><title>Class-based n-gram models of natural language</title><host>Comput. Linguist.19 (2)(1993) pp.263-311</host></reference><reference label="[12]"><authors>K. Sagae,A.S. Gordon</authors><title>Clustering words by syntactic similarity improves dependency parsing of predicate-argument structures</title><host>Proceedings of the 11th International Conference on Parsing TechnologiesIWPT'09(2009)Association for Computational LinguisticsParis, France pp.192-201</host><host>http://www.aclweb.org/anthology/W09-3829</host></reference><reference label="[13]"><authors>S. Miller,J. Guinness,A. Zamanian</authors><title>Name tagging with word clusters and discriminative training</title><host>D.M. Susan DumaisS. RoukosHLT-NAACL 2004: Main ProceedingsBoston, Massachusetts, USA(2004)Association for Computational Linguistics pp.337-342</host></reference><reference label="[14]"><authors>T. Koo,X. Carreras,M. Collins</authors><title>Simple semi-supervised dependency parsing</title><host>Proceedings of ACL-08: HLTColumbus, Ohio(2008)</host></reference><reference label="[15]"><authors>T. Mikolov,I. Sutskever,K. Chen,G.S. Corrado,J. Dean</authors><title>Distributed representations of words and phrases and their compositionality</title><host>Advances in Neural Information Processing Systems, vol. 26(2013) pp.3111-3119</host><host>http://media.nips.cc/nipsbooks/nipspapers/paper_files/nips26/1421.pdf</host></reference><reference label="[16]"><authors>M. Xiao,Y. Guo,A. Yates</authors><title>Semi-supervised representation learning for domain adaptation using dynamic dependency networks</title><host>Proceedings of COLING 2012Mumbai, India(2012)The COLING 2012 Organizing Committee pp.2867-2882</host><host>http://www.aclweb.org/anthology/C12-1175</host></reference><reference label="[17]"><authors>X. Zheng,H. Chen,T. Xu</authors><title>Deep learning for Chinese word segmentation and POS tagging</title><host>Proceedings of EMNLP 2013(2013)Association for Computational Linguistics pp.647-657</host></reference><reference label="[18]"><authors>J. Turian,L. Ratinov,Y. Bengio</authors><title>Word representations: a simple and general method for semi-supervised learning</title><host>Proceedings of ACL 2010(2010)Association for Computational Linguistics pp.384-394</host></reference><reference label="[19]"><authors>M. Yu,T. Zhao,D. Dong,H. Tian,D. Yu</authors><title>Compound embedding features for semi-supervised learning</title><host>Proceedings of the 2013 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language TechnologiesAtlanta, Georgia(2013)Association for Computational Linguistics pp.563-568</host><host>http://www.aclweb.org/anthology/N13-1063</host></reference><reference label="[20]"><authors>M. Bansal,K. Gimpel,K. Livescu</authors><title>Tailoring continuous word representations for dependency parsing</title><host>Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics (vol. 2: Short Papers)Baltimore, Maryland(2014)Association for Computational Linguistics pp.809-815</host><host>http://www.aclweb.org/anthology/P14-2131</host></reference><reference label="[21]"><authors>W. Chen,J. Kazama,K. Uchimoto,K. Torisawa</authors><title>Improving dependency parsing with subtrees from auto-parsed data</title><host>Proceedings of EMNLP 2009Singapore(2009) pp.570-579</host></reference><reference label="[22]"><authors>Y. Wang,J. Kazama,Y. Tsuruoka,W. Chen,Y. Zhang,K. Torisawa</authors><title>Improving Chinese word segmentation and POS tagging with semi-supervised methods using large auto-analyzed data</title><host>Proceedings of 5th International Joint Conference on Natural Language ProcessingChiang Mai, Thailand(2011)Asian Federation of Natural Language Processing pp.309-317</host><host>http://www.aclweb.org/anthology/I11-1035</host></reference><reference label="[23]"><authors>W. Chen,M. Zhang,Y. Zhang</authors><title>Semi-supervised feature transformation for dependency parsing</title><host>Proceedings of EMNLP 2013Seattle, Washington, USA(2013)Association for Computational Linguistics pp.1303-1313</host><host>http://www.aclweb.org/anthology/D13-1129</host></reference><reference label="[24]"><authors>W. Chen,J. Kazama,K. Uchimoto,K. Torisawa</authors><title>Exploiting subtrees in auto-parsed data to improve dependency parsing</title><host>Comput. Intell.28 (3)(2012) pp.426-451</host></reference><reference label="[25]"><authors>Frederick Jelinek,Robert L. Mercer</authors><title>Interpolated estimation of Markov source parameters from sparse data</title><host>Proceedings of the Workshop on Pattern Recognition in Practice(1980)North-HollandAmsterdam, The Netherlands</host></reference><reference label="[26]"><authors>F. Jelinek</authors><title>Self-organized language modeling for speech recognition</title><host>Readings in Speech Recognition(1990) pp.450-506</host></reference><reference label="[27]"><authors>P.F. Brown,V.J.D. Pietra,R.L. Mercer,S.A.D. Pietra,J.C. Lai</authors><title>An estimate of an upper bound for the entropy of English</title><host>Comput. Linguist.18 (1)(1992) pp.31-40</host></reference><reference label="[28]"><authors>L.R. Bahl,F. Jelinek,R. Mercer</authors><title>A maximum likelihood approach to continuous speech recognition</title><host>IEEE Trans. Pattern Anal. Mach. Intell.2 (1983) pp.179-190</host></reference><reference label="[29]"><authors>J. Nivre,R. McDonald</authors><title>Integrating graph-based and transition-based dependency parsers</title><host>Proceedings of ACL-08: HLTColumbus, Ohio(2008)</host></reference><reference label="[30]"><authors>J. Nivre</authors><title>An efficient algorithm for projective dependency parsing</title><host>Proceedings of IWPT2003(2003) pp.149-160</host></reference><reference label="[31]"><authors>R. McDonald,J. Nivre</authors><title>Characterizing the errors of data-driven dependency parsing models</title><host>Proceedings of EMNLP-CoNLL(2007) pp.122-131</host></reference><reference label="[32]"><authors>J. Eisner</authors><title>Three new probabilistic models for dependency parsing: an exploration</title><host>Proceedings of COLING1996(1996) pp.340-345</host></reference><reference label="[33]"><authors>K. Crammer,Y. Singer</authors><title>Ultraconservative online algorithms for multiclass problems</title><host>J. Mach. Learn. Res.3 (2003) pp.951-99110.1162/jmlr.2003.3.4-5.951</host></reference><reference label="[34]"><authors>M.P. Marcus,B. Santorini,M.A. Marcinkiewicz</authors><title>Building a large annotated corpus of English: the Penn Treebank</title><host>Comput. Linguist.19 (2)(1993) pp.313-330</host></reference><reference label="[35]"><authors>N. Xue,F. Xia,F. dong Chiou,M. Palmer</authors><title>Building a large annotated Chinese corpus: the Penn Chinese Treebank</title><host>J. Nat. Lang. Eng.11 (2)(2005) pp.207-238</host></reference><reference label="[36]"><authors>Y. Zhang,S. Clark</authors><title>A tale of two parsers: investigating and combining graph-based and transition-based dependency parsing</title><host>Proceedings of EMNLP 2008Honolulu, Hawaii(2008) pp.562-571</host></reference><reference label="[37]"><authors>A. Ratnaparkhi</authors><title>A maximum entropy model for part-of-speech tagging</title><host>Proceedings of EMNLP(1996, 1996) pp.133-142</host></reference><reference label="[38]"><authors>X. Duan,J. Zhao,B. Xu</authors><title>Probabilistic models for action-based Chinese dependency parsing</title><host>Proceedings of ECML/ECPPKDDWarsaw, Poland(2007)</host></reference><reference label="[39]"><authors>Z. Li,M. Zhang,W. Che,T. Liu,W. Chen,H. Li</authors><title>Joint models for Chinese POS tagging and dependency parsing</title><host>Proceedings of EMNLP 2011UK(2011)</host></reference><reference label="[40]"><authors>J. Hatori,T. Matsuzaki,Y. Miyao,J. Tsujii</authors><title>Incremental joint POS tagging and dependency parsing in Chinese</title><host>Proceedings of 5th International Joint Conference on Natural Language Processing, Asian Federation of Natural Language ProcessingChiang Mai, Thailand(2011) pp.1216-1224</host><host>http://www.aclweb.org/anthology/I11-1136</host></reference><reference label="[41]">E. Charniak, D. Blaheta, N. Ge, K. Hall, J. Hale, M. Johnson, BLLIP 1987-89 WSJ Corpus Release 1, LDC2000T43, Linguistic Data Consortium.</reference><reference label="[42]">C.-R. Huang, Tagged Chinese Gigaword version 2.0, LDC2009T14, Linguistic Data Consortium.</reference><reference label="[43]"><authors>C. Kruengkrai,K. Uchimoto,J. Kazama,Y. Wang,K. Torisawa,H. Isahara</authors><title>An error-driven word-character hybrid model for joint Chinese word segmentation and POS tagging</title><host>Proceedings of ACL-IJCNLP2009Suntec, Singapore(2009)Association for Computational Linguistics pp.513-521</host></reference><reference label="[44]"><authors>J. Suzuki,H. Isozaki,M. Nagata</authors><title>Learning condensed feature representations from large unsupervised data sets for supervised learning</title><host>Proceedings of ACL2011Portland, Oregon, USA(2011)Association for Computational Linguistics pp.636-641</host><host>http://www.aclweb.org/anthology/P11-2112</host></reference><reference label="[45]"><authors>Z. Li,M. Zhang,W. Che,T. Liu</authors><title>A separately passive-aggressive training algorithm for joint POS tagging and dependency parsing</title><host>Proceedings of the 24rd International Conference on Computational Linguistics (Coling 2012)Mumbai, India(2012)Coling 2012 Organizing Committee</host></reference><reference label="[46]"><authors>X. Ma,H. Zhao</authors><title>Fourth-order dependency parsing</title><host>Proceedings of COLING 2012: PostersMumbai, India(2012)The COLING 2012 Organizing Committee pp.785-796</host><host>http://www.aclweb.org/anthology/C12-2077</host></reference><reference label="[47]"><authors>J. Suzuki,H. Isozaki,X. Carreras,M. Collins</authors><title>An empirical study of semi-supervised structured conditional models for dependency parsing</title><host>Proceedings of EMNLP2009Singapore(2009)Association for Computational Linguistics pp.551-560</host></reference><reference label="[48]"><authors>G. Zhou,J. Zhao,K. Liu,L. Cai</authors><title>Exploiting web-derived selectional preference to improve statistical dependency parsing</title><host>Proceedings of ACL-HLT2011Portland, Oregon, USA(2011)Association for Computational Linguistics pp.1556-1565</host><host>http://www.aclweb.org/anthology/P11-1156</host></reference><reference label="[49]"><authors>W. Chen,M. Zhang,H. Li</authors><title>Utilizing dependency language models for graph-based dependency parsing models</title><host>Proceedings of ACL 2012Korea(2012)</host></reference><reference label="[50]"><authors>M. Collins</authors><title>Discriminative training methods for hidden Markov models: theory and experiments with perceptron algorithms</title><host>Proceedings of the 2002 Conference on Empirical Methods in Natural Language Processing(2002)Association for Computational Linguistics pp.1-810.3115/1118693.1118694</host><host>http://www.aclweb.org/anthology/W02-1001</host></reference><reference label="[51]"><authors>J. Suzuki,H. Isozaki</authors><title>Semi-supervised sequential labeling and segmentation using Giga-word scale unlabeled data</title><host>Proceedings of ACL-08: HLTColumbus, Ohio(2008)Association for Computational Linguistics pp.665-673</host></reference><reference label="[52]"><authors>Y. Zhang,S. Clark</authors><title>Joint word segmentation and POS tagging using a single perceptron</title><host>Proceedings of ACL-08: HLTColumbus, Ohio(2008)Association for Computational Linguistics pp.888-896</host><host>http://www.aclweb.org/anthology/P/P08/P08-1101</host></reference><reference label="[53]"><authors>Z. Li,W. Che,T. Liu</authors><title>Improving Chinese POS tagging with dependency parsing</title><host>Proceedings of 5th International Joint Conference on Natural Language ProcessingChiang Mai, Thailand(2011)Asian Federation of Natural Language Processing pp.1447-1451</host><host>http://www.aclweb.org/anthology/I11-1171</host></reference><reference label="[54]"><authors>W. Jiang,L. Huang,Q. Liu,Y. Lü</authors><title>A cascaded linear model for joint Chinese word segmentation and part-of-speech tagging</title><host>Proceedings of ACL-08: HLTColumbus, Ohio(2008)Association for Computational Linguistics pp.897-904</host><host>http://www.aclweb.org/anthology/P/P08/P08-1102</host></reference><reference label="[55]"><authors>D.j. Spoustová,J. Hajič,J. Raab,M. Spousta</authors><title>Semi-supervised training for the averaged perceptron POS tagger</title><host>Proceedings of the 12th Conference of the European Chapter of the ACL (EACL 2009)Athens, Greece(2009)Association for Computational Linguistics pp.763-771</host><host>http://www.aclweb.org/anthology/E09-1087</host></reference><reference label="[56]"><authors>A. Søgaard</authors><title>Simple semi-supervised training of part-of-speech taggers</title><host>Proceedings of the ACL 2010 Conference Short PapersUppsala, Sweden(2010)Association for Computational Linguistics pp.205-208</host><host>http://www.aclweb.org/anthology/P10-2038</host></reference><reference label="[57]"><authors>A. Søgaard</authors><title>Semi-supervised condensed nearest neighbor for part-of-speech tagging</title><host>Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language TechnologiesPortland, Oregon, USA(2011)Association for Computational Linguistics pp.48-52</host><host>http://www.aclweb.org/anthology/P11-2009</host></reference><reference label="[58]"><authors>E. Pitler,S. Bergsma,D. Lin,K. Church</authors><title>Using web-scale n-grams to improve base np parsing performance</title><host>Proceedings of the 23rd International Conference on Computational Linguistics (Coling 2010)Beijing, China(2010)Coling 2010 Organizing Committee pp.886-894</host><host>http://www.aclweb.org/anthology/C10-1100</host></reference><reference label="[59]"><authors>M. Bansal,D. Klein</authors><title>Web-scale features for full-scale parsing</title><host>Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language TechnologiesPortland, Oregon, USA(2011)Association for Computational Linguistics pp.693-702</host><host>http://www.aclweb.org/anthology/P11-1070</host></reference><reference label="[60]"><authors>W. Sun,J. Xu</authors><title>Enhancing Chinese word segmentation using unlabeled data</title><host>Proceedings of the 2011 Conference on Empirical Methods in Natural Language ProcessingEdinburgh, Scotland, UK(2011)Association for Computational Linguistics pp.970-979</host><host>http://www.aclweb.org/anthology/D11-1090</host></reference><reference label="[61]"><authors>Z. Jin,K. Tanaka-Ishii</authors><title>Unsupervised segmentation of Chinese text by use of branching entropy</title><host>Proceedings of the COLING/ACL 2006 Main Conference Poster SessionsSydney, Australia(2006)Association for Computational Linguistics pp.428-435</host><host>http://www.aclweb.org/anthology/P/P06/P06-2056</host></reference><reference label="[62]"><authors>D. McClosky,E. Charniak,M. Johnson</authors><title>Reranking and self-training for parser adaptation</title><host>Proceedings of Coling-ACL(2006) pp.337-344</host></reference><reference label="[63]"><authors>K. Sagae,J. Tsujii</authors><title>Dependency parsing and domain adaptation with LR models and parser ensembles</title><host>Proceedings of the CoNLL Shared Task Session of EMNLP-CoNLL 2007(2007) pp.1044-1050</host></reference><reference label="[64]"><authors>Z.-H. Zhou,M. Li</authors><title>Tri-training: exploiting unlabeled data using three classifiers</title><host>IEEE Trans. Knowl. Data Eng.17 (11)(2005) pp.1529-1541</host></reference><reference label="[65]"><authors>B. Chang,D. Han</authors><title>Enhancing domain portability of Chinese segmentation model using chi-square statistics and bootstrapping</title><host>Proceedings of the 2010 Conference on Empirical Methods in Natural Language ProcessingCambridge, MA(2010)Association for Computational Linguistics pp.789-798</host><host>http://www.aclweb.org/anthology/D10-1077</host></reference><reference label="[66]"><authors>S.A. Mirroshandel,A. Nasr,J. Le Roux</authors><title>Semi-supervised dependency parsing using lexical affinities</title><host>Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics (vol. 1: Long Papers)Jeju Island, Korea(2012)Association for Computational Linguistics pp.777-785</host><host>http://www.aclweb.org/anthology/P12-1082</host></reference><reference label="[67]"><authors>R. Ando,T. Zhang</authors><title>A high-performance semi-supervised learning method for text chunking</title><host>ACL(2005)</host></reference></references><footnote><note-para label="1">This setting is selected according to the preliminary experiments.</note-para><note-para label="2">We keep Top-1000 words in the experiments.</note-para><note-para label="3">http://w3.msi.vxu.se/~nivre/research/Penn2Malt.html.</note-para><note-para label="4">We ensure that the texts used for building the meta features do not include the sentences of the Penn Treebank.</note-para><note-para label="5">We exclude the sentences of the CTB data from the Gigaword data.</note-para><note-para label="6">We also test the settings of dividing WM into two sub-types: W and M. The results show that both two sub-types provided positive results. For simplicity, we merge W and M into one category WM.</note-para><note-para label="7">We directly use the clusters provided by Terry Koo (http://people.csail.mit.edu/maestro/papers/bllip-clusters.gz).</note-para><note-para label="8">We use the data of Chinese Gigaword to generate word clusters.</note-para><note-para label="9">https://sites.google.com/site/sancl2012/.</note-para><note-para label="10">Our preliminary experiments show that the error reduction is around 3%, if the strategy of parsing is used for tagging.</note-para><note-para label="11">There are 6 possible types of combination of “{a mathematical formula}Φ(fb)” and “{a mathematical formula}Ψ(fb)”.</note-para><note-para label="12">This setting is selected according to the preliminary experiments.</note-para><note-para label="13">We keep Top-1000 words in the experiments.</note-para><note-para label="14">The systems of [51], [55] are trained on different unlabeled data sets from ours and hence the results are not directly comparable.</note-para><note-para label="15">[53] and [40] report the results using the information of dependency tree structure. We do not list these results because we do not use such information.</note-para></footnote></root>